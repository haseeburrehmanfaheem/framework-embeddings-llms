"Class","Method","Depth","Trace Instruction(s) ...","Java Code Representation","Access Control Level"
"Lcom/android/server/locksettings/LockSettingsService","checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,6 @4 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @8 exception:11,
return 8,","depth : 0
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	p0.checkPasswordReadPermission();
	VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
	p0.scheduleGc();
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,6 @4 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @8 exception:11,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 8,","depth : 0
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	p0.checkPasswordReadPermission();
	VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
	p0.scheduleGc();
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,6 @4 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @8 exception:11,
return 8,","depth : 0
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	p0.checkPasswordReadPermission();
	VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
	p0.scheduleGc();
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,6 @4 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @8 exception:11,
return 8,","depth : 0
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	p0.checkPasswordReadPermission();
	VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
	p0.scheduleGc();
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
goto (from iindex= 6 to iindex = 5),
12 = phi  3,11,
return 12,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public long getLong(String p1, long p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
12 = phi  3,11,
return 12,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public long getLong(String p1, long p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	long v3 = Long.parseLong(v1);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
conditional branch(ne, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 8,9,
11 = phi  2,10,
return 13,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
goto (from iindex= 6 to iindex = 5),
12 = phi  3,11,
return 12,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public long getLong(String p1, long p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	return phiInstruction;
}
-----
depth : 2
public String getString(String p1, String p2, int p3){
	boolean v1 = legacy_lock_pattern_enabled.equals(p1);
	String v2 = p0.readKeyValue(phiInstruction, p2, p3);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
conditional branch(ne, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 8,9,
11 = phi  2,10,
return 13,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
12 = phi  3,11,
return 12,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public long getLong(String p1, long p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	long v3 = Long.parseLong(v1);
	return phiInstruction;
}
-----
depth : 2
public String getString(String p1, String p2, int p3){
	boolean v1 = legacy_lock_pattern_enabled.equals(p1);
	String v2 = p0.readKeyValue(phiInstruction, p2, p3);
	return v2;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","0","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
goto (from iindex= 11 to iindex = 2),
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
return 1,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
41 = getCaughtException ,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
5 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda2>@2,
return,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
4 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1>@2,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 1
public void notifyPasswordChanged(LockscreenCredential p1, int p2){
	LockSettingsService$$ExternalSyntheticLambda2 v0 = new LockSettingsService$$ExternalSyntheticLambda2(p0,p1,p2);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 1
public void notifySeparateProfileChallengeChanged(int p1){
	LockSettingsService$$ExternalSyntheticLambda1 v0 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
goto (from iindex= 11 to iindex = 2),
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
return 1,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
41 = getCaughtException ,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
5 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda2>@2,
return,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
4 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1>@2,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 1
public void notifyPasswordChanged(LockscreenCredential p1, int p2){
	LockSettingsService$$ExternalSyntheticLambda2 v0 = new LockSettingsService$$ExternalSyntheticLambda2(p0,p1,p2);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 1
public void notifySeparateProfileChallengeChanged(int p1){
	LockSettingsService$$ExternalSyntheticLambda1 v0 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
return 7,
conditional branch(ne, to iindex=-1) 9,7,
goto (from iindex= 11 to iindex = 2),
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
return 7,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 20,6,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
return 40,
41 = getCaughtException ,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
5 = new <Application,Ljava/lang/StringBuilder>@0,
20 = binaryop(lt) 18 , 19,
conditional branch(ne, to iindex=-1) 20,21,
goto (from iindex= 15 to iindex = 2),
23 = phi  22,21,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
conditional branch(ne, to iindex=-1) 30,21,
31 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
conditional branch(ne, to iindex=-1) 37,21,
conditional branch(ne, to iindex=-1) 2,21,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
goto (from iindex= 55 to iindex = 10),
return 30,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
conditional branch(eq, to iindex=-1) 7,9,
conditional branch(eq, to iindex=-1) 11,9,
17 = getCaughtException ,
goto (from iindex= 13 to iindex = 6),
22 = phi  3,3,13,3,3,
27 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 31,
33 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 31,
conditional branch(ne, to iindex=-1) 33,9,
conditional branch(eq, to iindex=-1) 32,9,
conditional branch(ne, to iindex=-1) 42,43,
goto (from iindex= 37 to iindex = 22),
return 9,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
8 = getCaughtException ,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
return,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
13 = load_metadata: <Application,Landroid/os/UserManager>, <Primordial,Ljava/lang/Class>,
32 = checkcast <Application,Landroid/os/UserManager>15 <Application,Landroid/os/UserManager>,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
return 32,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
4 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
return 2,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
conditional branch(eq, to iindex=-1) 3,4,
conditional branch(ne, to iindex=-1) 6,4,
goto (from iindex= 7 to iindex = 2),
11 = phi  10,4,
return 11,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
conditional branch(eq, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
return,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
conditional branch(eq, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 11,6,
13 = phi  11,12,
conditional branch(ne, to iindex=-1) 15,6,
conditional branch(ne, to iindex=-1) 23,6,
30 = phi  23,29,
conditional branch(eq, to iindex=-1) 35,6,
39 = new <Application,Ljava/util/StringJoiner>@76,
52 = phi  50,6,
44 = binaryop(add) 15 , 43,
conditional branch(ge, to iindex=-1) 52,44,
45 = arraylength 38,
conditional branch(ge, to iindex=-1) 52,45,
59 = phi  12,30,57,
return,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
3 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[] p1, LockscreenCredential p2, int p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Initialize SyntheticPassword for user: "");
	StringBuilder v3 = v0.append(p3);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	long v6 = p0.getSyntheticPasswordHandleLocked(p3);
	Preconditions.checkState(phiInstruction, ""Cannot reinitialize SP"");
	IGateKeeperService v8 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationToken v9 = this.mSpManager.newSyntheticPasswordAndSid(v8, p1, p2, p3);
	IGateKeeperService v10 = p0.getGateKeeperService();
	long v11 = this.mSpManager.createPasswordBasedSyntheticPassword(v10, p2, v9, p3);
	boolean v12 = p2.isNone();
	IGateKeeperService v13 = p0.getGateKeeperService();
	this.mSpManager.newSidForUser(v13, v9, p3);
	IGateKeeperService v15 = p0.getGateKeeperService();
	VerifyCredentialResponse v16 = this.mSpManager.verifyChallenge(v15, v9, 0, p3);
	byte[] v17 = v9.deriveDiskEncryptionKey();
	p0.setUserKeyProtection(p3, v17);
	byte[] v19 = v9.deriveKeyStorePassword();
	p0.setKeystorePassword(v19, p3);
	p0.fixateNewestUserKeyAuth(p3);
	p0.setSyntheticPasswordHandleLocked(v11, p3);
	p0.onAuthTokenKnownForUser(p3, v9);
	return v9;
}
-----
depth : 2
public boolean spBasedSetLockCredentialInternalLocked(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	boolean v1 = p2.isNone();
	boolean v2 = p0.isProfileWithUnifiedLock(p3);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v4 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	long v5 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p3, 0);
	int v8 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v9 = Slog.w(""LockSettingsService"", ""Failed to enroll: incorrect credential."");
	return 0;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	[resolveCodeAbst] + 8 = getCaughtException .printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public UserManager getUserManagerFromCache(int p1){
	UserHandle v1 = UserHandle.of(p1);
	boolean v2 = this.mUserManagerCache.containsKey(v1);
	Context v3 = this.mContext.createPackageContextAsUser(""system"", 0, v1);
	Object v4 = v3.getSystemService(UserManage.class);
	Object v5 = this.mUserManagerCache.put(v1, v4);
	return v4;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 2
public void setDeviceLockedForUser(int p1, boolean p2){
	this.mService.setDeviceLockedForUser(p1, p2);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 2
public boolean isDeviceEncryptionEnabled(){
	boolean v1 = StorageManager.isEncrypted();
	return v1;
}
-----
depth : 2
public boolean shouldEncryptWithCredentials(){
	boolean v1 = p0.isCredentialRequiredToDecrypt();
	boolean v2 = p0.isDoNotAskCredentialsOnBootSet();
	return phiInstruction;
}
-----
depth : 2
public void setCredentialRequiredToDecrypt(boolean p1){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	ContentResolver v2 = this.mContext.getContentResolver();
	boolean v3 = Settings$Global.putInt(v2, ""require_password_to_decrypt"", p1);
	return;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void updatePasswordHistory(LockscreenCredential p1, int p2){
	boolean v1 = p1.isNone();
	boolean v2 = p1.isPattern();
	String v3 = p0.getString(""lockscreen.passwordhistory"", 0, p2);
	int v4 = p0.getRequestedPasswordHistoryLength(p2);
	byte[] v5 = p0.getHashFactor(p1, p2);
	String v6 = p0.getSalt(p2);
	byte[] v7 = v6.getBytes();
	String v8 = p1.passwordToHistoryHash(v7, v5);
	int v9 = Slog.e(""LockSettingsService"", ""Compute new style password hash failed, fallback to legacy style"");
	String v10 = p1.legacyPasswordToHash(v7);
	boolean v11 = TextUtils.isEmpty(phiInstruction);
	String v12 = [resolveCodeAbst] + 13 = phi  11,12.split("","");
	StringJoiner v12 = new StringJoiner("","");
	StringJoiner v14 = v12.add(phiInstruction);
	String v15 = v12.toString();
	p0.setString(""lockscreen.passwordhistory"", phiInstruction, p2);
	return;
}
-----
depth : 2
public void reportEnabledTrustAgentsChanged(int p1){
	this.mService.reportEnabledTrustAgentsChanged(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
return 7,
conditional branch(ne, to iindex=-1) 9,7,
goto (from iindex= 11 to iindex = 2),
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
return 7,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 20,6,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 9,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
return 40,
41 = getCaughtException ,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
5 = new <Application,Ljava/lang/StringBuilder>@0,
20 = binaryop(lt) 18 , 19,
conditional branch(ne, to iindex=-1) 20,21,
goto (from iindex= 15 to iindex = 2),
23 = phi  22,21,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
conditional branch(ne, to iindex=-1) 30,21,
31 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
conditional branch(ne, to iindex=-1) 37,21,
conditional branch(ne, to iindex=-1) 2,21,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
goto (from iindex= 55 to iindex = 10),
return 30,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
conditional branch(eq, to iindex=-1) 7,9,
conditional branch(eq, to iindex=-1) 11,9,
17 = getCaughtException ,
goto (from iindex= 13 to iindex = 6),
22 = phi  3,3,13,3,3,
27 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 31,
33 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 31,
conditional branch(ne, to iindex=-1) 33,9,
conditional branch(eq, to iindex=-1) 32,9,
conditional branch(ne, to iindex=-1) 42,43,
goto (from iindex= 37 to iindex = 22),
return 9,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
8 = getCaughtException ,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
return,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
13 = load_metadata: <Application,Landroid/os/UserManager>, <Primordial,Ljava/lang/Class>,
32 = checkcast <Application,Landroid/os/UserManager>15 <Application,Landroid/os/UserManager>,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
return 32,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
4 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
return 2,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
conditional branch(eq, to iindex=-1) 3,4,
conditional branch(ne, to iindex=-1) 6,4,
goto (from iindex= 7 to iindex = 2),
11 = phi  10,4,
return 11,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
conditional branch(eq, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
return,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
conditional branch(eq, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 11,6,
13 = phi  11,12,
conditional branch(ne, to iindex=-1) 15,6,
conditional branch(ne, to iindex=-1) 23,6,
30 = phi  23,29,
conditional branch(eq, to iindex=-1) 35,6,
39 = new <Application,Ljava/util/StringJoiner>@76,
52 = phi  50,6,
44 = binaryop(add) 15 , 43,
conditional branch(ge, to iindex=-1) 52,44,
45 = arraylength 38,
conditional branch(ge, to iindex=-1) 52,45,
59 = phi  12,30,57,
return,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
3 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[] p1, LockscreenCredential p2, int p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Initialize SyntheticPassword for user: "");
	StringBuilder v3 = v0.append(p3);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	long v6 = p0.getSyntheticPasswordHandleLocked(p3);
	Preconditions.checkState(phiInstruction, ""Cannot reinitialize SP"");
	IGateKeeperService v8 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationToken v9 = this.mSpManager.newSyntheticPasswordAndSid(v8, p1, p2, p3);
	IGateKeeperService v10 = p0.getGateKeeperService();
	long v11 = this.mSpManager.createPasswordBasedSyntheticPassword(v10, p2, v9, p3);
	boolean v12 = p2.isNone();
	IGateKeeperService v13 = p0.getGateKeeperService();
	this.mSpManager.newSidForUser(v13, v9, p3);
	IGateKeeperService v15 = p0.getGateKeeperService();
	VerifyCredentialResponse v16 = this.mSpManager.verifyChallenge(v15, v9, 0, p3);
	byte[] v17 = v9.deriveDiskEncryptionKey();
	p0.setUserKeyProtection(p3, v17);
	byte[] v19 = v9.deriveKeyStorePassword();
	p0.setKeystorePassword(v19, p3);
	p0.fixateNewestUserKeyAuth(p3);
	p0.setSyntheticPasswordHandleLocked(v11, p3);
	p0.onAuthTokenKnownForUser(p3, v9);
	return v9;
}
-----
depth : 2
public boolean spBasedSetLockCredentialInternalLocked(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	boolean v1 = p2.isNone();
	boolean v2 = p0.isProfileWithUnifiedLock(p3);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v4 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	long v5 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p3, 0);
	int v8 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v9 = Slog.w(""LockSettingsService"", ""Failed to enroll: incorrect credential."");
	return 0;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	[resolveCodeAbst] + 8 = getCaughtException .printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public UserManager getUserManagerFromCache(int p1){
	UserHandle v1 = UserHandle.of(p1);
	boolean v2 = this.mUserManagerCache.containsKey(v1);
	Context v3 = this.mContext.createPackageContextAsUser(""system"", 0, v1);
	Object v4 = v3.getSystemService(UserManage.class);
	Object v5 = this.mUserManagerCache.put(v1, v4);
	return v4;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 2
public void setDeviceLockedForUser(int p1, boolean p2){
	this.mService.setDeviceLockedForUser(p1, p2);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 2
public boolean isDeviceEncryptionEnabled(){
	boolean v1 = StorageManager.isEncrypted();
	return v1;
}
-----
depth : 2
public boolean shouldEncryptWithCredentials(){
	boolean v1 = p0.isCredentialRequiredToDecrypt();
	boolean v2 = p0.isDoNotAskCredentialsOnBootSet();
	return phiInstruction;
}
-----
depth : 2
public void setCredentialRequiredToDecrypt(boolean p1){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	ContentResolver v2 = this.mContext.getContentResolver();
	boolean v3 = Settings$Global.putInt(v2, ""require_password_to_decrypt"", p1);
	return;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void updatePasswordHistory(LockscreenCredential p1, int p2){
	boolean v1 = p1.isNone();
	boolean v2 = p1.isPattern();
	String v3 = p0.getString(""lockscreen.passwordhistory"", 0, p2);
	int v4 = p0.getRequestedPasswordHistoryLength(p2);
	byte[] v5 = p0.getHashFactor(p1, p2);
	String v6 = p0.getSalt(p2);
	byte[] v7 = v6.getBytes();
	String v8 = p1.passwordToHistoryHash(v7, v5);
	int v9 = Slog.e(""LockSettingsService"", ""Compute new style password hash failed, fallback to legacy style"");
	String v10 = p1.legacyPasswordToHash(v7);
	boolean v11 = TextUtils.isEmpty(phiInstruction);
	String v12 = [resolveCodeAbst] + 13 = phi  11,12.split("","");
	StringJoiner v12 = new StringJoiner("","");
	StringJoiner v14 = v12.add(phiInstruction);
	String v15 = v12.toString();
	p0.setString(""lockscreen.passwordhistory"", phiInstruction, p2);
	return;
}
-----
depth : 2
public void reportEnabledTrustAgentsChanged(int p1){
	this.mService.reportEnabledTrustAgentsChanged(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
return 7,
conditional branch(ne, to iindex=-1) 9,7,
goto (from iindex= 11 to iindex = 2),
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
return 7,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 20,6,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
return 40,
41 = getCaughtException ,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
5 = new <Application,Ljava/lang/StringBuilder>@0,
20 = binaryop(lt) 18 , 19,
conditional branch(ne, to iindex=-1) 20,21,
goto (from iindex= 15 to iindex = 2),
23 = phi  22,21,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
conditional branch(ne, to iindex=-1) 30,21,
31 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
conditional branch(ne, to iindex=-1) 37,21,
conditional branch(ne, to iindex=-1) 2,21,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
goto (from iindex= 55 to iindex = 10),
return 30,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
conditional branch(eq, to iindex=-1) 7,9,
conditional branch(eq, to iindex=-1) 11,9,
17 = getCaughtException ,
goto (from iindex= 13 to iindex = 6),
22 = phi  3,3,13,3,3,
27 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 31,
33 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 31,
conditional branch(ne, to iindex=-1) 33,9,
conditional branch(eq, to iindex=-1) 32,9,
conditional branch(ne, to iindex=-1) 42,43,
goto (from iindex= 37 to iindex = 22),
return 9,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
8 = getCaughtException ,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
return,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
13 = load_metadata: <Application,Landroid/os/UserManager>, <Primordial,Ljava/lang/Class>,
32 = checkcast <Application,Landroid/os/UserManager>15 <Application,Landroid/os/UserManager>,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
return 32,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
4 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
return 2,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
conditional branch(eq, to iindex=-1) 3,4,
conditional branch(ne, to iindex=-1) 6,4,
goto (from iindex= 7 to iindex = 2),
11 = phi  10,4,
return 11,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
conditional branch(eq, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
return,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
conditional branch(eq, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 11,6,
13 = phi  11,12,
conditional branch(ne, to iindex=-1) 15,6,
conditional branch(ne, to iindex=-1) 23,6,
30 = phi  23,29,
conditional branch(eq, to iindex=-1) 35,6,
39 = new <Application,Ljava/util/StringJoiner>@76,
52 = phi  50,6,
44 = binaryop(add) 15 , 43,
conditional branch(ge, to iindex=-1) 52,44,
45 = arraylength 38,
conditional branch(ge, to iindex=-1) 52,45,
59 = phi  12,30,57,
return,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
3 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[] p1, LockscreenCredential p2, int p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Initialize SyntheticPassword for user: "");
	StringBuilder v3 = v0.append(p3);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	long v6 = p0.getSyntheticPasswordHandleLocked(p3);
	Preconditions.checkState(phiInstruction, ""Cannot reinitialize SP"");
	IGateKeeperService v8 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationToken v9 = this.mSpManager.newSyntheticPasswordAndSid(v8, p1, p2, p3);
	IGateKeeperService v10 = p0.getGateKeeperService();
	long v11 = this.mSpManager.createPasswordBasedSyntheticPassword(v10, p2, v9, p3);
	boolean v12 = p2.isNone();
	IGateKeeperService v13 = p0.getGateKeeperService();
	this.mSpManager.newSidForUser(v13, v9, p3);
	IGateKeeperService v15 = p0.getGateKeeperService();
	VerifyCredentialResponse v16 = this.mSpManager.verifyChallenge(v15, v9, 0, p3);
	byte[] v17 = v9.deriveDiskEncryptionKey();
	p0.setUserKeyProtection(p3, v17);
	byte[] v19 = v9.deriveKeyStorePassword();
	p0.setKeystorePassword(v19, p3);
	p0.fixateNewestUserKeyAuth(p3);
	p0.setSyntheticPasswordHandleLocked(v11, p3);
	p0.onAuthTokenKnownForUser(p3, v9);
	return v9;
}
-----
depth : 2
public boolean spBasedSetLockCredentialInternalLocked(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	boolean v1 = p2.isNone();
	boolean v2 = p0.isProfileWithUnifiedLock(p3);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v4 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	long v5 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p3, 0);
	int v8 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v9 = Slog.w(""LockSettingsService"", ""Failed to enroll: incorrect credential."");
	return 0;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	[resolveCodeAbst] + 8 = getCaughtException .printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public UserManager getUserManagerFromCache(int p1){
	UserHandle v1 = UserHandle.of(p1);
	boolean v2 = this.mUserManagerCache.containsKey(v1);
	Context v3 = this.mContext.createPackageContextAsUser(""system"", 0, v1);
	Object v4 = v3.getSystemService(UserManage.class);
	Object v5 = this.mUserManagerCache.put(v1, v4);
	return v4;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 2
public void setDeviceLockedForUser(int p1, boolean p2){
	this.mService.setDeviceLockedForUser(p1, p2);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 2
public boolean isDeviceEncryptionEnabled(){
	boolean v1 = StorageManager.isEncrypted();
	return v1;
}
-----
depth : 2
public boolean shouldEncryptWithCredentials(){
	boolean v1 = p0.isCredentialRequiredToDecrypt();
	boolean v2 = p0.isDoNotAskCredentialsOnBootSet();
	return phiInstruction;
}
-----
depth : 2
public void setCredentialRequiredToDecrypt(boolean p1){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	ContentResolver v2 = this.mContext.getContentResolver();
	boolean v3 = Settings$Global.putInt(v2, ""require_password_to_decrypt"", p1);
	return;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void updatePasswordHistory(LockscreenCredential p1, int p2){
	boolean v1 = p1.isNone();
	boolean v2 = p1.isPattern();
	String v3 = p0.getString(""lockscreen.passwordhistory"", 0, p2);
	int v4 = p0.getRequestedPasswordHistoryLength(p2);
	byte[] v5 = p0.getHashFactor(p1, p2);
	String v6 = p0.getSalt(p2);
	byte[] v7 = v6.getBytes();
	String v8 = p1.passwordToHistoryHash(v7, v5);
	int v9 = Slog.e(""LockSettingsService"", ""Compute new style password hash failed, fallback to legacy style"");
	String v10 = p1.legacyPasswordToHash(v7);
	boolean v11 = TextUtils.isEmpty(phiInstruction);
	String v12 = [resolveCodeAbst] + 13 = phi  11,12.split("","");
	StringJoiner v12 = new StringJoiner("","");
	StringJoiner v14 = v12.add(phiInstruction);
	String v15 = v12.toString();
	p0.setString(""lockscreen.passwordhistory"", phiInstruction, p2);
	return;
}
-----
depth : 2
public void reportEnabledTrustAgentsChanged(int p1){
	this.mService.reportEnabledTrustAgentsChanged(p1);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;","0","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
return 6,","depth : 0
public String generateKeyWithMetadata(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;","1","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 13,11 @20 exception:14,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, generateAndStoreKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B)[B > 26,15,11,9,2,3 @30 exception:27,
29 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 29,11,9,2,28 @36 exception:30,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,11,9,2 @39 exception:39,
return 40,
return 6,","depth : 0
public String generateKeyWithMetadata(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
	return v1;
}
-----
depth : 1
public String generateKeyWithMetadata(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4);
	byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6);
	String v8 = p0.getAlias(v4, v3, p1);
	return v8;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;","2","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 13,11 @20 exception:14,
10 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
12 = new <Application,[Ljava/lang/Object>@1411 ,
arraystore 12[13] = 15,
return 24,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, generateAndStoreKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B)[B > 26,15,11,9,2,3 @30 exception:27,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mKeyGenerator, <Application,Ljavax/crypto/KeyGenerator> > 1,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mKeyGenerator, <Application,Ljavax/crypto/KeyGenerator> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
19 = binaryop(lt) 17 , 18,
conditional branch(eq, to iindex=-1) 19,21,
32 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
36 = binaryop(lt) 34 , 35,
conditional branch(ge, to iindex=-1) 36,21,
return 46,
29 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 29,11,9,2,28 @36 exception:30,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
arraystore 8[11] = 10,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
arraystore 8[19] = 18,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
37 = new <Application,[Ljava/lang/String>@6614 ,
41 = new <Application,[Ljava/lang/String>@7614 ,
return,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,11,9,2 @39 exception:39,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
return 7,
return 40,
return 6,","depth : 0
public String generateKeyWithMetadata(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
	return v1;
}
-----
depth : 1
public String generateKeyWithMetadata(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4);
	byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6);
	String v8 = p0.getAlias(v4, v3, p1);
	return v8;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	Object v2 = new Object(1);
	Integer v3 = Integer.valueOf(p1);
	String v4 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v2);
	int v5 = Log.i(""PlatformKeyManager"", v4);
	p0.regenerate(p1);
	PlatformEncryptionKey v7 = p0.getEncryptKeyInternal(p1);
	return v7;
}
-----
depth : 2
public byte[] generateAndStoreKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5){
	this.mKeyGenerator.init(256);
	SecretKey v2 = this.mKeyGenerator.generateKey();
	WrappedKey v3 = WrappedKey.fromSecretKey(p1, v2, p5);
	long v4 = this.mDatabase.insertKey(p2, p3, p4, v3);
	long v5 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	int v6 = Log.e(""PlatformKeyGen"", ""Failed to set the shoudCreateSnapshot flag in the local DB."");
	byte[] v7 = v2.getEncoded();
	return v7;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;","2","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 13,11 @20 exception:14,
10 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
12 = new <Application,[Ljava/lang/Object>@1411 ,
arraystore 12[13] = 15,
return 24,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, generateAndStoreKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B)[B > 26,15,11,9,2,3 @30 exception:27,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mKeyGenerator, <Application,Ljavax/crypto/KeyGenerator> > 1,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mKeyGenerator, <Application,Ljavax/crypto/KeyGenerator> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
19 = binaryop(lt) 17 , 18,
conditional branch(eq, to iindex=-1) 19,21,
32 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
36 = binaryop(lt) 34 , 35,
conditional branch(ge, to iindex=-1) 36,21,
return 46,
29 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 29,11,9,2,28 @36 exception:30,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
arraystore 8[11] = 10,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
arraystore 8[19] = 18,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
37 = new <Application,[Ljava/lang/String>@6614 ,
41 = new <Application,[Ljava/lang/String>@7614 ,
return,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,11,9,2 @39 exception:39,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
return 7,
return 40,
return 6,","depth : 0
public String generateKeyWithMetadata(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
	return v1;
}
-----
depth : 1
public String generateKeyWithMetadata(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4);
	byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6);
	String v8 = p0.getAlias(v4, v3, p1);
	return v8;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	PlatformEncryptionKey v3 = p0.getEncryptKeyInternal(p1);
	Object v3 = new Object(1);
	Integer v4 = Integer.valueOf(p1);
	String v5 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v3);
	int v6 = Log.i(""PlatformKeyManager"", v5);
	p0.regenerate(p1);
	PlatformEncryptionKey v8 = p0.getEncryptKeyInternal(p1);
	return v8;
}
-----
depth : 2
public byte[] generateAndStoreKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5){
	this.mKeyGenerator.init(256);
	SecretKey v2 = this.mKeyGenerator.generateKey();
	WrappedKey v3 = WrappedKey.fromSecretKey(p1, v2, p5);
	long v4 = this.mDatabase.insertKey(p2, p3, p4, v3);
	long v5 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	int v6 = Log.e(""PlatformKeyGen"", ""Failed to set the shoudCreateSnapshot flag in the local DB."");
	byte[] v7 = v2.getEncoded();
	return v7;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 6,2,3,4 @5 exception:7,
return 8,","depth : 0
public String getString(String p1, String p2, int p3){
	p0.checkReadPermission(p1, p3);
	String v2 = this.mStorage.getString(p1, p2, p3);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 6,2,3,4 @5 exception:7,
conditional branch(ne, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 8,9,
11 = phi  2,10,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readKeyValue(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,11,3,4 @16 exception:12,
return 13,
return 8,","depth : 0
public String getString(String p1, String p2, int p3){
	p0.checkReadPermission(p1, p3);
	String v2 = this.mStorage.getString(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public String getString(String p1, String p2, int p3){
	boolean v1 = legacy_lock_pattern_enabled.equals(p1);
	String v2 = p0.readKeyValue(phiInstruction, p2, p3);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 6,2,3,4 @5 exception:7,
conditional branch(ne, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 8,9,
11 = phi  2,10,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readKeyValue(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,11,3,4 @16 exception:12,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorexit 5,
13 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, DEFAULT, <Application,Ljava/lang/Object> >,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
18 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_QUERY, <Application,[Ljava/lang/String> >,
21 = new <Application,[Ljava/lang/String>@4220 ,
arraystore 21[9] = 23,
arraystore 21[24] = 2,
conditional branch(eq, to iindex=-1) 26,9,
conditional branch(eq, to iindex=-1) 28,9,
goto (from iindex= 41 to iindex = 2),
31 = phi  30,13,
goto (from iindex= 44 to iindex = 2),
35 = phi  31,13,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
conditional branch(ne, to iindex=-1) 35,13,
goto (from iindex= 49 to iindex = 4),
41 = phi  3,40,
return 41,
return 13,
return 8,","depth : 0
public String getString(String p1, String p2, int p3){
	p0.checkReadPermission(p1, p3);
	String v2 = this.mStorage.getString(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public String getString(String p1, String p2, int p3){
	boolean v1 = legacy_lock_pattern_enabled.equals(p1);
	String v2 = p0.readKeyValue(phiInstruction, p2, p3);
	return v2;
}
-----
depth : 2
public String readKeyValue(String p1, String p2, int p3){
	boolean v1 = this.mCache.hasKeyValue(p1, p3);
	int v2 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v3 = this.mOpenHelper.getReadableDatabase();
	String v3 = new String(2);
	String v4 = Integer.toString(p3);
	Cursor v5 = v3.query(""locksettings"", this.COLUMNS_FOR_QUERY, ""user=? AND name=?"", v3, 0, 0, 0);
	boolean v6 = v5.moveToFirst();
	String v7 = v5.getString(0);
	v5.close();
	this.mCache.putKeyValueIfUnchanged(p1, phiInstruction, p3, v2);
	return phiInstruction;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:3,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z > 6,2 @9 exception:7,
return 8,","depth : 0
public boolean registerWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.registerWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:3,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z > 6,2 @9 exception:7,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mListeners, <Application,Landroid/os/RemoteCallbackList> > 1,
5 = invokevirtual < Application, Landroid/os/RemoteCallbackList, register(Landroid/os/IInterface;)Z > 3,2 @2 exception:4,
return 5,
return 8,","depth : 0
public boolean registerWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.registerWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean registerWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	boolean v1 = this.mListeners.register(p1);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","removeGatekeeperPasswordHandle(J)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorexit 4,
return,","depth : 0
public void removeGatekeeperPasswordHandle(long p1){
	p0.checkPasswordReadPermission();
	this.mGatekeeperPasswords.remove(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeGatekeeperPasswordHandle(J)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorexit 4,
return,","depth : 0
public void removeGatekeeperPasswordHandle(long p1){
	p0.checkPasswordReadPermission();
	this.mGatekeeperPasswords.remove(p1);
	return;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V > 3,2 @2 exception:4,
return,","depth : 0
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	this.mRecoverableKeyStoreManager.setSnapshotCreatedPendingIntent(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
6 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mListenersStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, setSnapshotListener(ILandroid/app/PendingIntent;)V > 6,5,2 @9 exception:7,
return,
return,","depth : 0
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	this.mRecoverableKeyStoreManager.setSnapshotCreatedPendingIntent(p1);
	return;
}
-----
depth : 1
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	this.mListenersStorage.setSnapshotListener(v2, p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
6 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mListenersStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, setSnapshotListener(ILandroid/app/PendingIntent;)V > 6,5,2 @9 exception:7,
monitorenter 1,
5 = new <Application,Ljava/lang/StringBuilder>@3,
16 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, mAgentIntents, <Application,Landroid/util/SparseArray> > 1,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, mAgentsWithPendingSnapshots, <Application,Landroid/util/ArraySet> > 1,
conditional branch(eq, to iindex=-1) 22,23,
monitorexit 1,
return,
return,
return,","depth : 0
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	this.mRecoverableKeyStoreManager.setSnapshotCreatedPendingIntent(p1);
	return;
}
-----
depth : 1
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	this.mListenersStorage.setSnapshotListener(v2, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public void setSnapshotListener(int p1, PendingIntent p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Registered listener for agent with uid "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Log.i(""RecoverySnapshotLstnrs"", v4);
	this.mAgentIntents.put(p1, p2);
	Integer v7 = Integer.valueOf(p1);
	boolean v8 = this.mAgentsWithPendingSnapshots.contains(v7);
	int v9 = Log.i(""RecoverySnapshotLstnrs"", ""Snapshot already created for agent. Immediately triggering intent."");
	p0.tryToSendIntent(p1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
6 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mListenersStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, setSnapshotListener(ILandroid/app/PendingIntent;)V > 6,5,2 @9 exception:7,
monitorenter 1,
5 = new <Application,Ljava/lang/StringBuilder>@3,
16 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, mAgentIntents, <Application,Landroid/util/SparseArray> > 1,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, mAgentsWithPendingSnapshots, <Application,Landroid/util/ArraySet> > 1,
conditional branch(eq, to iindex=-1) 22,23,
monitorexit 1,
return,
return,
return,","depth : 0
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	this.mRecoverableKeyStoreManager.setSnapshotCreatedPendingIntent(p1);
	return;
}
-----
depth : 1
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	this.mListenersStorage.setSnapshotListener(v2, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public void setSnapshotListener(int p1, PendingIntent p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Registered listener for agent with uid "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Log.i(""RecoverySnapshotLstnrs"", v4);
	this.mAgentIntents.put(p1, p2);
	Integer v7 = Integer.valueOf(p1);
	boolean v8 = this.mAgentsWithPendingSnapshots.contains(v7);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B","0","8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B > 8,2,3,4,5,6,7 @8 exception:9,
return 10,","depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B","1","8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B > 8,2,3,4,5,6,7 @8 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:9,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 10,3 @7 exception:11,
30 = invokevirtual < Application, Landroid/security/keystore/recovery/RecoveryCertPath, getCertPath()Ljava/security/cert/CertPath; > 4 @42 exception:29,
36 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 36,12 @48 exception:37,
invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, validateCertPath(Ljava/security/cert/X509Certificate;Ljava/security/cert/CertPath;)V > 38,30 @52 exception:39,
54 = checkcast <Application,Ljava/security/cert/Certificate>53 <Application,Ljava/security/cert/Certificate>,
conditional branch(eq, to iindex=-1) 58,51,
65 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySession(Ljava/lang/String;[B[B[BLjava/util/List;)[B > 1,2,58,5,6,7 @81 exception:64,
return 65,
return 10,","depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
depth : 1
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v3 = Objects.requireNonNull(p1, ""invalid session"");
	Object v4 = Objects.requireNonNull(p3, ""verifierCertPath is null"");
	Object v5 = Objects.requireNonNull(p4, ""vaultParams is null"");
	Object v6 = Objects.requireNonNull(p5, ""vaultChallenge is null"");
	Object v7 = Objects.requireNonNull(p6, ""secrets is null"");
	CertPath v8 = p3.getCertPath();
	X509Certificate v9 = this.mTestCertHelper.getRootCertificate(v2);
	CertUtils.validateCertPath(v9, v8);
	List v11 = v8.getCertificates();
	Object v12 = v11.get(0);
	PublicKey v13 = v12.getPublicKey();
	byte[] v14 = v13.getEncoded();
	byte[] v15 = p0.startRecoverySession(p1, v14, p4, p5, p6);
	return v15;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B","2","8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B > 8,2,3,4,5,6,7 @8 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:9,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 10,3 @7 exception:11,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 5,3,
13 = phi  2,11,
return 13,
30 = invokevirtual < Application, Landroid/security/keystore/recovery/RecoveryCertPath, getCertPath()Ljava/security/cert/CertPath; > 4 @42 exception:29,
2 = getfield < Application, Landroid/security/keystore/recovery/RecoveryCertPath, mEncodedCertPath, <Primordial,[B> > 1,
return 4,
36 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 36,12 @48 exception:37,
conditional branch(eq, to iindex=-1) 6,7,
return 15,
invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, validateCertPath(Ljava/security/cert/X509Certificate;Ljava/security/cert/CertPath;)V > 38,30 @52 exception:39,
return,
54 = checkcast <Application,Ljava/security/cert/Certificate>53 <Application,Ljava/security/cert/Certificate>,
conditional branch(eq, to iindex=-1) 58,51,
65 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySession(Ljava/lang/String;[B[B[BLjava/util/List;)[B > 1,2,58,5,6,7 @81 exception:64,
conditional branch(ne, to iindex=-1) 11,12,
conditional branch(eq, to iindex=-1) 25,26,
35 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainProtectionParams>34 <Application,Landroid/security/keystore/recovery/KeyChainProtectionParams>,
38 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
39 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>@43,
42 = new <Application,Ljava/lang/StringBuilder>@51,
return 59,
return 65,
return 10,","depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
depth : 1
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v3 = Objects.requireNonNull(p1, ""invalid session"");
	Object v4 = Objects.requireNonNull(p3, ""verifierCertPath is null"");
	Object v5 = Objects.requireNonNull(p4, ""vaultParams is null"");
	Object v6 = Objects.requireNonNull(p5, ""vaultChallenge is null"");
	Object v7 = Objects.requireNonNull(p6, ""secrets is null"");
	CertPath v8 = p3.getCertPath();
	X509Certificate v9 = this.mTestCertHelper.getRootCertificate(v2);
	CertUtils.validateCertPath(v9, v8);
	List v11 = v8.getCertificates();
	Object v12 = v11.get(0);
	PublicKey v13 = v12.getPublicKey();
	byte[] v14 = v13.getEncoded();
	byte[] v15 = p0.startRecoverySession(p1, v14, p4, p5, p6);
	return v15;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	return phiInstruction;
}
-----
depth : 2
public CertPath getCertPath(){
	CertPath v1 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	return v3;
}
-----
depth : 2
public void validateCertPath(X509Certificate p1, CertPath p2){
	CertUtils.validateCertPath(0, p1, p2);
	return;
}
-----
depth : 2
public byte[] startRecoverySession(String p1, byte[] p2, byte[] p3, byte[] p4, List p5){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	int v3 = p5.size();
	PublicKey v4 = KeySyncUtils.deserializePublicKey(p2);
	boolean v5 = p0.publicKeysMatch(v4, p3);
	byte[] v6 = KeySyncUtils.generateKeyClaimant();
	Object v7 = p5.get(0);
	byte[] v8 = v7.getSecret();
	RecoverySessionStorage$Entry v8 = new RecoverySessionStorage$Entry(p1,v8,v6,p3);
	this.mRecoverySessionStorage.add(v2, v8);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""Received VaultParams for recovery: "");
	String v13 = HexDump.toHexString(p3);
	StringBuilder v14 = v10.append(v13);
	String v15 = v10.toString();
	int v16 = Log.i(""RecoverableKeyStoreMgr"", v15);
	byte[] v17 = KeySyncUtils.calculateThmKfHash(v8);
	byte[] v18 = KeySyncUtils.encryptRecoveryClaim(v4, p3, p4, v17, v6);
	return v18;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B","2","8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B > 8,2,3,4,5,6,7 @8 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:9,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 10,3 @7 exception:11,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 5,3,
13 = phi  2,11,
return 13,
30 = invokevirtual < Application, Landroid/security/keystore/recovery/RecoveryCertPath, getCertPath()Ljava/security/cert/CertPath; > 4 @42 exception:29,
2 = getfield < Application, Landroid/security/keystore/recovery/RecoveryCertPath, mEncodedCertPath, <Primordial,[B> > 1,
return 4,
36 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 36,12 @48 exception:37,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 9,7,
return 9,
invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, validateCertPath(Ljava/security/cert/X509Certificate;Ljava/security/cert/CertPath;)V > 38,30 @52 exception:39,
return,
54 = checkcast <Application,Ljava/security/cert/Certificate>53 <Application,Ljava/security/cert/Certificate>,
conditional branch(eq, to iindex=-1) 58,51,
65 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySession(Ljava/lang/String;[B[B[BLjava/util/List;)[B > 1,2,58,5,6,7 @81 exception:64,
conditional branch(ne, to iindex=-1) 11,12,
conditional branch(eq, to iindex=-1) 25,26,
35 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainProtectionParams>34 <Application,Landroid/security/keystore/recovery/KeyChainProtectionParams>,
38 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
39 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>@43,
42 = new <Application,Ljava/lang/StringBuilder>@51,
return 59,
return 65,
return 10,","depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
depth : 1
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v3 = Objects.requireNonNull(p1, ""invalid session"");
	Object v4 = Objects.requireNonNull(p3, ""verifierCertPath is null"");
	Object v5 = Objects.requireNonNull(p4, ""vaultParams is null"");
	Object v6 = Objects.requireNonNull(p5, ""vaultChallenge is null"");
	Object v7 = Objects.requireNonNull(p6, ""secrets is null"");
	CertPath v8 = p3.getCertPath();
	X509Certificate v9 = this.mTestCertHelper.getRootCertificate(v2);
	CertUtils.validateCertPath(v9, v8);
	List v11 = v8.getCertificates();
	Object v12 = v11.get(0);
	PublicKey v13 = v12.getPublicKey();
	byte[] v14 = v13.getEncoded();
	byte[] v15 = p0.startRecoverySession(p1, v14, p4, p5, p6);
	return v15;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	return phiInstruction;
}
-----
depth : 2
public CertPath getCertPath(){
	CertPath v1 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getRootCertificate(v1);
	return v3;
}
-----
depth : 2
public void validateCertPath(X509Certificate p1, CertPath p2){
	CertUtils.validateCertPath(0, p1, p2);
	return;
}
-----
depth : 2
public byte[] startRecoverySession(String p1, byte[] p2, byte[] p3, byte[] p4, List p5){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	int v3 = p5.size();
	PublicKey v4 = KeySyncUtils.deserializePublicKey(p2);
	boolean v5 = p0.publicKeysMatch(v4, p3);
	byte[] v6 = KeySyncUtils.generateKeyClaimant();
	Object v7 = p5.get(0);
	byte[] v8 = v7.getSecret();
	RecoverySessionStorage$Entry v8 = new RecoverySessionStorage$Entry(p1,v8,v6,p3);
	this.mRecoverySessionStorage.add(v2, v8);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""Received VaultParams for recovery: "");
	String v13 = HexDump.toHexString(p3);
	StringBuilder v14 = v10.append(v13);
	String v15 = v10.toString();
	int v16 = Log.i(""RecoverableKeyStoreMgr"", v15);
	byte[] v17 = KeySyncUtils.calculateThmKfHash(v8);
	byte[] v18 = KeySyncUtils.encryptRecoveryClaim(v4, p3, p4, v17, v6);
	return v18;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
9 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0>@8,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, addEscrowToken([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 1,2,13,3,9 @18 exception:14,
return 15,","depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
9 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0>@8,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, addEscrowToken([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 1,2,13,3,9 @18 exception:14,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isUserSecure(I)Z > 1,4 @3 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldMigrateToSyntheticPasswordLocked(I)Z > 1,4 @10 exception:10,
conditional branch(eq, to iindex=-1) 11,9,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @25 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @31 exception:15,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @35 exception:17,
20 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 14,16,13,18,4,9 @41 exception:19,
21 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 20,
27 = phi  9,25,21,
31 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @47 exception:30,
conditional branch(eq, to iindex=-1) 31,9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, disableEscrowTokenOnNonManagedDevicesIfNeeded(I)V > 1,4 @53 exception:32,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 33,4 @58 exception:34,
conditional branch(eq, to iindex=-1) 35,9,
goto (from iindex= 34 to iindex = 9),
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createTokenBasedSyntheticPassword([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 42,2,3,4,5 @75 exception:43,
conditional branch(eq, to iindex=-1) 27,9,
45 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, activateTokenBasedSyntheticPassword(JLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 45,44,27,4 @83 exception:46,
monitorexit 6,
return 44,
return 15,","depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public long addEscrowToken(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	boolean v1 = p0.isUserSecure(p3);
	boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);
	long v3 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	LockscreenCredential v5 = LockscreenCredential.createNone();
	SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);
	boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);
	boolean v9 = this.mSpManager.hasEscrowData(p3);
	long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);
	boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);
	return v10;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
9 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0>@8,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, addEscrowToken([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 1,2,13,3,9 @18 exception:14,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isUserSecure(I)Z > 1,4 @3 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldMigrateToSyntheticPasswordLocked(I)Z > 1,4 @10 exception:10,
6 = binaryop(lt) 4 , 5,
conditional branch(ne, to iindex=-1) 6,7,
goto (from iindex= 6 to iindex = 2),
9 = phi  8,7,
return 9,
conditional branch(eq, to iindex=-1) 11,9,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @25 exception:12,
return 6,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @31 exception:15,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @35 exception:17,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
return 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 14,16,13,18,4,9 @41 exception:19,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
conditional branch(ne, to iindex=-1) 16,18,
conditional branch(eq, to iindex=-1) 23,24,
conditional branch(ne, to iindex=-1) 99,18,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
118 = getCaughtException ,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
return 7,
21 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 20,
27 = phi  9,25,21,
31 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @47 exception:30,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 31,9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, disableEscrowTokenOnNonManagedDevicesIfNeeded(I)V > 1,4 @53 exception:32,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
conditional branch(eq, to iindex=-1) 7,9,
conditional branch(eq, to iindex=-1) 11,9,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
conditional branch(ne, to iindex=-1) 16,9,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 22,9,
23 = new <Application,Ljava/lang/StringBuilder>@65,
conditional branch(eq, to iindex=-1) 35,9,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
return,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 33,4 @58 exception:34,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(eq, to iindex=-1) 35,9,
goto (from iindex= 34 to iindex = 9),
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createTokenBasedSyntheticPassword([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 42,2,3,4,5 @75 exception:43,
8 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 12,13,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
17 = new <Application,Landroid/util/ArrayMap>@22,
25 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>@30,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mType, <Primordial,I> > = 3,
conditional branch(eq, to iindex=-1) 31,13,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
33 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, valueSize, <Primordial,I> > 32,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, weaverSecret, <Primordial,[B> > = 35,
36 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, secdiscardableOnDisk, <Primordial,[B> > = 38,
goto (from iindex= 32 to iindex = 6),
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, aggregatedSecret, <Primordial,[B> > = 44,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mCallback, <Application,Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback> > = 5,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
50 = checkcast <Application,Landroid/util/ArrayMap>49 <Application,Landroid/util/ArrayMap>,
return 7,
conditional branch(eq, to iindex=-1) 27,9,
45 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, activateTokenBasedSyntheticPassword(JLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 45,44,27,4 @83 exception:46,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
16 = checkcast <Application,Landroid/util/ArrayMap>15 <Application,Landroid/util/ArrayMap>,
21 = checkcast <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>20 <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>,
conditional branch(ne, to iindex=-1) 21,10,
conditional branch(ne, to iindex=-1) 23,10,
conditional branch(eq, to iindex=-1) 26,10,
29 = new <Application,Ljava/lang/StringBuilder>@63,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, weaverSecret, <Primordial,[B> > 21,
conditional branch(ne, to iindex=-1) 47,10,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
55 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, secdiscardableOnDisk, <Primordial,[B> > 21,
57 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mType, <Primordial,I> > 21,
60 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, aggregatedSecret, <Primordial,[B> > 21,
63 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
68 = checkcast <Application,Landroid/util/ArrayMap>67 <Application,Landroid/util/ArrayMap>,
73 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mCallback, <Application,Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback> > 21,
conditional branch(eq, to iindex=-1) 73,10,
return 76,
monitorexit 6,
return 44,
return 15,","depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public long addEscrowToken(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	boolean v1 = p0.isUserSecure(p3);
	boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);
	long v3 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	LockscreenCredential v5 = LockscreenCredential.createNone();
	SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);
	boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);
	boolean v9 = this.mSpManager.hasEscrowData(p3);
	long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);
	boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);
	return v10;
}
-----
depth : 2
public boolean isUserSecure(int p1){
	int v1 = p0.getCredentialTypeInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldMigrateToSyntheticPasswordLocked(int p1){
	long v1 = p0.getSyntheticPasswordHandleLocked(p1);
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public void disableEscrowTokenOnNonManagedDevicesIfNeeded(int p1){
	UserManagerInternal v1 = this.mInjector.getUserManagerInternal();
	boolean v2 = v1.isUserManaged(p1);
	boolean v3 = v1.isDeviceManaged();
	DeviceStateCache v4 = this.mInjector.getDeviceStateCache();
	boolean v5 = v4.isDeviceProvisioned();
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.hardware.type.automotive"");
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Disabling escrow token on user "");
	StringBuilder v10 = v7.append(p1);
	String v11 = v7.toString();
	int v12 = Slog.i(""LockSettingsService"", v11);
	boolean v13 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	this.mSpManager.destroyEscrowData(p1);
	return;
}
-----
depth : 2
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public long createTokenBasedSyntheticPassword(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	long v1 = SyntheticPasswordManager.generateHandle();
	Integer v2 = Integer.valueOf(p3);
	boolean v3 = this.tokenMap.containsKey(v2);
	Integer v4 = Integer.valueOf(p3);
	ArrayMap v4 = new ArrayMap();
	Object v6 = this.tokenMap.put(v4, v4);
	SyntheticPasswordManager$TokenData v6 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v8 = SyntheticPasswordManager.secureRandom(16384);
	boolean v9 = p0.isWeaverAvailable();
	byte[] v10 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v10;
	byte[] v11 = SyntheticPasswordCrypto.encrypt(v10, this.PERSONALISATION_WEAVER_TOKEN, v8);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v11;
	byte[] v12 = p0.transformUnderSecdiscardable(p1, v8);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v12;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v13 = Integer.valueOf(p3);
	Object v14 = this.tokenMap.get(v13);
	Long v15 = Long.valueOf(v1);
	Object v16 = v14.put(v15, v6);
	return v1;
}
-----
depth : 2
public boolean activateTokenBasedSyntheticPassword(long p1, SyntheticPasswordManager$AuthenticationToken p2, int p3){
	Integer v1 = Integer.valueOf(p3);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p3);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.get(v5);
	boolean v7 = p0.loadEscrowData(p2, p3);
	boolean v8 = p0.isWeaverAvailable();
	int v9 = p0.getNextAvailableWeaverSlot();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""Weaver enroll token to slot "");
	StringBuilder v12 = v9.append(v9);
	StringBuilder v13 = v9.append("" for user "");
	StringBuilder v14 = v9.append(p3);
	String v15 = v9.toString();
	int v16 = Slog.i(""SyntheticPasswordManager"", v15);
	byte[] v17 = p0.weaverEnroll(v9, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	p0.saveWeaverSlot(v9, p1, p3);
	this.mPasswordSlotManager.markSlotInUse(v9);
	p0.saveSecdiscardable(p1, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v21 = p0.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	p0.createSyntheticPasswordBlob(p1, v21, p2, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v23 = Integer.valueOf(p3);
	Object v24 = this.tokenMap.get(v23);
	Long v25 = Long.valueOf(p1);
	Object v26 = v24.remove(v25);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(p1, p3);
	return 1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
9 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0>@8,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, addEscrowToken([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 1,2,13,3,9 @18 exception:14,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isUserSecure(I)Z > 1,4 @3 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldMigrateToSyntheticPasswordLocked(I)Z > 1,4 @10 exception:10,
6 = binaryop(lt) 4 , 5,
conditional branch(ne, to iindex=-1) 6,7,
goto (from iindex= 6 to iindex = 2),
9 = phi  8,7,
return 9,
conditional branch(eq, to iindex=-1) 11,9,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @25 exception:12,
return 6,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @31 exception:15,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
goto (from iindex= 14 to iindex = 9),
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @35 exception:17,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
return 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 14,16,13,18,4,9 @41 exception:19,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
conditional branch(ne, to iindex=-1) 16,18,
conditional branch(eq, to iindex=-1) 23,24,
conditional branch(ne, to iindex=-1) 99,18,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
118 = getCaughtException ,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
return 7,
21 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 20,
27 = phi  9,25,21,
31 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @47 exception:30,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 31,9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, disableEscrowTokenOnNonManagedDevicesIfNeeded(I)V > 1,4 @53 exception:32,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
conditional branch(eq, to iindex=-1) 7,9,
conditional branch(eq, to iindex=-1) 11,9,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
conditional branch(ne, to iindex=-1) 16,9,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 22,9,
23 = new <Application,Ljava/lang/StringBuilder>@65,
conditional branch(eq, to iindex=-1) 35,9,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
return,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 33,4 @58 exception:34,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(eq, to iindex=-1) 35,9,
goto (from iindex= 34 to iindex = 9),
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createTokenBasedSyntheticPassword([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 42,2,3,4,5 @75 exception:43,
8 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 12,13,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
17 = new <Application,Landroid/util/ArrayMap>@22,
25 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>@30,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mType, <Primordial,I> > = 3,
conditional branch(eq, to iindex=-1) 31,13,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
33 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, valueSize, <Primordial,I> > 32,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, weaverSecret, <Primordial,[B> > = 35,
36 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, secdiscardableOnDisk, <Primordial,[B> > = 38,
goto (from iindex= 32 to iindex = 6),
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, aggregatedSecret, <Primordial,[B> > = 44,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mCallback, <Application,Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback> > = 5,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
50 = checkcast <Application,Landroid/util/ArrayMap>49 <Application,Landroid/util/ArrayMap>,
return 7,
conditional branch(eq, to iindex=-1) 27,9,
45 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, activateTokenBasedSyntheticPassword(JLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 45,44,27,4 @83 exception:46,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
16 = checkcast <Application,Landroid/util/ArrayMap>15 <Application,Landroid/util/ArrayMap>,
21 = checkcast <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>20 <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>,
conditional branch(ne, to iindex=-1) 21,10,
conditional branch(ne, to iindex=-1) 23,10,
conditional branch(eq, to iindex=-1) 26,10,
29 = new <Application,Ljava/lang/StringBuilder>@63,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, weaverSecret, <Primordial,[B> > 21,
conditional branch(ne, to iindex=-1) 47,10,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
55 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, secdiscardableOnDisk, <Primordial,[B> > 21,
57 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mType, <Primordial,I> > 21,
60 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, aggregatedSecret, <Primordial,[B> > 21,
63 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
68 = checkcast <Application,Landroid/util/ArrayMap>67 <Application,Landroid/util/ArrayMap>,
73 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mCallback, <Application,Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback> > 21,
conditional branch(eq, to iindex=-1) 73,10,
return 76,
monitorexit 6,
return 44,
return 15,","depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public long addEscrowToken(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	boolean v1 = p0.isUserSecure(p3);
	boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);
	long v3 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	LockscreenCredential v5 = LockscreenCredential.createNone();
	SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);
	boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);
	boolean v9 = this.mSpManager.hasEscrowData(p3);
	long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);
	boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);
	return v10;
}
-----
depth : 2
public boolean isUserSecure(int p1){
	int v1 = p0.getCredentialTypeInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldMigrateToSyntheticPasswordLocked(int p1){
	long v1 = p0.getSyntheticPasswordHandleLocked(p1);
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	IGateKeeperService v4 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v4;
	return v4;
}
-----
depth : 2
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public void disableEscrowTokenOnNonManagedDevicesIfNeeded(int p1){
	UserManagerInternal v1 = this.mInjector.getUserManagerInternal();
	boolean v2 = v1.isUserManaged(p1);
	boolean v3 = v1.isDeviceManaged();
	DeviceStateCache v4 = this.mInjector.getDeviceStateCache();
	boolean v5 = v4.isDeviceProvisioned();
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.hardware.type.automotive"");
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Disabling escrow token on user "");
	StringBuilder v10 = v7.append(p1);
	String v11 = v7.toString();
	int v12 = Slog.i(""LockSettingsService"", v11);
	boolean v13 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	this.mSpManager.destroyEscrowData(p1);
	return;
}
-----
depth : 2
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public long createTokenBasedSyntheticPassword(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	long v1 = SyntheticPasswordManager.generateHandle();
	Integer v2 = Integer.valueOf(p3);
	boolean v3 = this.tokenMap.containsKey(v2);
	Integer v4 = Integer.valueOf(p3);
	ArrayMap v4 = new ArrayMap();
	Object v6 = this.tokenMap.put(v4, v4);
	SyntheticPasswordManager$TokenData v6 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v8 = SyntheticPasswordManager.secureRandom(16384);
	boolean v9 = p0.isWeaverAvailable();
	byte[] v10 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v10;
	byte[] v11 = SyntheticPasswordCrypto.encrypt(v10, this.PERSONALISATION_WEAVER_TOKEN, v8);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v11;
	byte[] v12 = p0.transformUnderSecdiscardable(p1, v8);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v12;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v13 = Integer.valueOf(p3);
	Object v14 = this.tokenMap.get(v13);
	Long v15 = Long.valueOf(v1);
	Object v16 = v14.put(v15, v6);
	return v1;
}
-----
depth : 2
public boolean activateTokenBasedSyntheticPassword(long p1, SyntheticPasswordManager$AuthenticationToken p2, int p3){
	Integer v1 = Integer.valueOf(p3);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p3);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.get(v5);
	boolean v7 = p0.loadEscrowData(p2, p3);
	boolean v8 = p0.isWeaverAvailable();
	int v9 = p0.getNextAvailableWeaverSlot();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""Weaver enroll token to slot "");
	StringBuilder v12 = v9.append(v9);
	StringBuilder v13 = v9.append("" for user "");
	StringBuilder v14 = v9.append(p3);
	String v15 = v9.toString();
	int v16 = Slog.i(""SyntheticPasswordManager"", v15);
	byte[] v17 = p0.weaverEnroll(v9, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	p0.saveWeaverSlot(v9, p1, p3);
	this.mPasswordSlotManager.markSlotInUse(v9);
	p0.saveSecdiscardable(p1, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v21 = p0.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	p0.createSyntheticPasswordBlob(p1, v21, p2, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v23 = Integer.valueOf(p3);
	Object v24 = this.tokenMap.get(v23);
	Long v25 = Long.valueOf(p1);
	Object v26 = v24.remove(v25);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(p1, p3);
	return 1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","hasPendingEscrowToken(I)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getPendingTokensForUser(I)Ljava/util/Set; > 5,2 @8 exception:6,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 10 to iindex = 2),
12 = phi  11,10,
monitorexit 4,
return 12,","depth : 0
public boolean hasPendingEscrowToken(int p1){
	p0.checkPasswordReadPermission();
	Set v2 = this.mSpManager.getPendingTokensForUser(p1);
	boolean v3 = v2.isEmpty();
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","hasPendingEscrowToken(I)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getPendingTokensForUser(I)Ljava/util/Set; > 5,2 @8 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 7,8,
9 = new <Application,Landroid/util/ArraySet>@17,
10 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
15 = checkcast <Application,Landroid/util/ArrayMap>14 <Application,Landroid/util/ArrayMap>,
return 9,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 10 to iindex = 2),
12 = phi  11,10,
monitorexit 4,
return 12,","depth : 0
public boolean hasPendingEscrowToken(int p1){
	p0.checkPasswordReadPermission();
	Set v2 = this.mSpManager.getPendingTokensForUser(p1);
	boolean v3 = v2.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public Set getPendingTokensForUser(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.tokenMap.containsKey(v1);
	ArraySet v2 = new ArraySet(v5);
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.tokenMap.get(v3);
	Set v5 = v4.keySet();
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","hasPendingEscrowToken(I)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getPendingTokensForUser(I)Ljava/util/Set; > 5,2 @8 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 7,8,
9 = new <Application,Landroid/util/ArraySet>@17,
10 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
15 = checkcast <Application,Landroid/util/ArrayMap>14 <Application,Landroid/util/ArrayMap>,
return 9,
conditional branch(ne, to iindex=-1) 9,10,
12 = phi  11,10,
monitorexit 4,
return 12,","depth : 0
public boolean hasPendingEscrowToken(int p1){
	p0.checkPasswordReadPermission();
	Set v2 = this.mSpManager.getPendingTokensForUser(p1);
	boolean v3 = v2.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public Set getPendingTokensForUser(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.tokenMap.containsKey(v1);
	ArraySet v2 = new ArraySet(v5);
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.tokenMap.get(v3);
	Set v5 = v4.keySet();
	return v2;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
monitorexit 8,
return 12,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w(""LockSettingsService"", ""Invalid escrow token supplied"");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
monitorexit 8,
return 12,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w(""LockSettingsService"", ""Invalid escrow token supplied"");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
monitorexit 8,
return 19,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	Binder.restoreCallingIdentity(v2);
	return 1;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@4,
conditional branch(eq, to iindex=-1) 12,13,
conditional branch(ne, to iindex=-1) 15,17,
conditional branch(ne, to iindex=-1) 21,17,
conditional branch(ne, to iindex=-1) 23,17,
26 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
goto (from iindex= 35 to iindex = 11),
29 = phi  10,28,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 38,
conditional branch(eq, to iindex=-1) 38,17,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 41,
conditional branch(ne, to iindex=-1) 41,17,
42 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, OK, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 42,
goto (from iindex= 63 to iindex = 5),
return 7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
monitorexit 8,
return 12,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w(""LockSettingsService"", ""Invalid escrow token supplied"");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPasswordInternal(IGateKeeperService p1, long p2, byte p3, byte[] p4, int p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadSecdiscardable(p2, p5);
	int v3 = p0.loadWeaverSlot(p2, p5);
	boolean v4 = p0.isWeaverAvailable();
	VerifyCredentialResponse v5 = p0.weaverVerify(v3, 0);
	int v6 = v5.getResponseCode();
	byte[] v7 = v5.getGatekeeperHAT();
	byte[] v8 = v5.getGatekeeperHAT();
	byte[] v9 = SyntheticPasswordCrypto.decrypt(v8, this.PERSONALISATION_WEAVER_TOKEN, v2);
	byte[] v10 = p0.transformUnderSecdiscardable(p4, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v11 = p0.unwrapSyntheticPasswordBlob(p2, p3, v10, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.authToken = v11;
	VerifyCredentialResponse v12 = p0.verifyChallenge(p1, v11, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v12;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@4,
conditional branch(eq, to iindex=-1) 12,13,
conditional branch(ne, to iindex=-1) 15,17,
conditional branch(ne, to iindex=-1) 21,17,
conditional branch(ne, to iindex=-1) 23,17,
26 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
goto (from iindex= 35 to iindex = 11),
29 = phi  10,28,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 38,
conditional branch(eq, to iindex=-1) 38,17,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 41,
conditional branch(ne, to iindex=-1) 41,17,
42 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, OK, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 42,
goto (from iindex= 63 to iindex = 5),
return 7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
monitorexit 8,
return 12,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w(""LockSettingsService"", ""Invalid escrow token supplied"");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPasswordInternal(IGateKeeperService p1, long p2, byte p3, byte[] p4, int p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadSecdiscardable(p2, p5);
	int v3 = p0.loadWeaverSlot(p2, p5);
	boolean v4 = p0.isWeaverAvailable();
	VerifyCredentialResponse v5 = p0.weaverVerify(v3, 0);
	int v6 = v5.getResponseCode();
	byte[] v7 = v5.getGatekeeperHAT();
	byte[] v8 = v5.getGatekeeperHAT();
	byte[] v9 = SyntheticPasswordCrypto.decrypt(v8, this.PERSONALISATION_WEAVER_TOKEN, v2);
	byte[] v10 = p0.transformUnderSecdiscardable(p4, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v11 = p0.unwrapSyntheticPasswordBlob(p2, p3, v10, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.authToken = v11;
	VerifyCredentialResponse v12 = p0.verifyChallenge(p1, v11, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v12;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@4,
conditional branch(eq, to iindex=-1) 12,13,
conditional branch(ne, to iindex=-1) 15,17,
conditional branch(ne, to iindex=-1) 21,17,
conditional branch(ne, to iindex=-1) 23,17,
26 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
goto (from iindex= 35 to iindex = 11),
29 = phi  10,28,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 38,
conditional branch(eq, to iindex=-1) 38,17,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 41,
conditional branch(ne, to iindex=-1) 41,17,
42 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, OK, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 42,
goto (from iindex= 63 to iindex = 5),
return 7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
monitorexit 8,
return 19,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	Binder.restoreCallingIdentity(v2);
	return 1;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPasswordInternal(IGateKeeperService p1, long p2, byte p3, byte[] p4, int p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadSecdiscardable(p2, p5);
	int v3 = p0.loadWeaverSlot(p2, p5);
	boolean v4 = p0.isWeaverAvailable();
	VerifyCredentialResponse v5 = p0.weaverVerify(v3, 0);
	int v6 = v5.getResponseCode();
	byte[] v7 = v5.getGatekeeperHAT();
	byte[] v8 = v5.getGatekeeperHAT();
	byte[] v9 = SyntheticPasswordCrypto.decrypt(v8, this.PERSONALISATION_WEAVER_TOKEN, v2);
	byte[] v10 = p0.transformUnderSecdiscardable(p4, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v11 = p0.unwrapSyntheticPasswordBlob(p2, p3, v10, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.authToken = v11;
	VerifyCredentialResponse v12 = p0.verifyChallenge(p1, v11, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v12;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	return v0;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getStrongAuthForUser(I)I","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuthTracker, <Application,Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker, getStrongAuthForUser(I)I > 4,2 @5 exception:5,
return 6,","depth : 0
public int getStrongAuthForUser(int p1){
	p0.checkPasswordReadPermission();
	int v2 = this.mStrongAuthTracker.getStrongAuthForUser(p1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getStrongAuthForUser(I)I","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuthTracker, <Application,Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker, getStrongAuthForUser(I)I > 4,2 @5 exception:5,
monitorenter 1,
4 = invokespecial < Application, Lcom/android/internal/widget/LockPatternUtils$StrongAuthTracker, getStrongAuthForUser(I)I > 1,2 @1 exception:3,
monitorexit 1,
return 4,
return 6,","depth : 0
public int getStrongAuthForUser(int p1){
	p0.checkPasswordReadPermission();
	int v2 = this.mStrongAuthTracker.getStrongAuthForUser(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public int getStrongAuthForUser(int p1){
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getStrongAuthForUser(I)I","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuthTracker, <Application,Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker, getStrongAuthForUser(I)I > 4,2 @5 exception:5,
monitorenter 1,
4 = invokespecial < Application, Lcom/android/internal/widget/LockPatternUtils$StrongAuthTracker, getStrongAuthForUser(I)I > 1,2 @1 exception:3,
3 = getfield < Application, Lcom/android/internal/widget/LockPatternUtils$StrongAuthTracker, mStrongAuthRequiredForUser, <Application,Landroid/util/SparseIntArray> > 1,
4 = getfield < Application, Lcom/android/internal/widget/LockPatternUtils$StrongAuthTracker, mDefaultStrongAuthFlags, <Primordial,I> > 1,
return 6,
monitorexit 1,
return 4,
return 6,","depth : 0
public int getStrongAuthForUser(int p1){
	p0.checkPasswordReadPermission();
	int v2 = this.mStrongAuthTracker.getStrongAuthForUser(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public int getStrongAuthForUser(int p1){
	return v1;
}
-----
depth : 2
public int getStrongAuthForUser(int p1){
	int v1 = this.mStrongAuthRequiredForUser.get(p1, this.mDefaultStrongAuthFlags);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","hasSecureLockScreen()Z","0","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
return 2,","depth : 0
public boolean hasSecureLockScreen(){
	return this.mHasSecureLockScreen;
}
-----
","NONE"

"Lcom/android/server/locksettings/LockSettingsService","initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V","0","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V > 5,2,3,4 @2 exception:6,
return,","depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:6,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 7,2 @7 exception:8,
17 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parse([B)Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml; > 4 @23 exception:16,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
39 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 37,9 @29 exception:38,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, verifyFileSignature(Ljava/security/cert/X509Certificate;[B)V > 17,39,3 @33 exception:40,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryService(Ljava/lang/String;[B)V > 1,9,3 @36 exception:67,
return,
return,","depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
depth : 1
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v3 = Objects.requireNonNull(p2, ""recoveryServiceCertFile is null"");
	Object v4 = Objects.requireNonNull(p3, ""recoveryServiceSigFile is null"");
	SigXml v5 = SigXml.parse(p3);
	X509Certificate v6 = this.mTestCertHelper.getRootCertificate(v2);
	v5.verifyFileSignature(v6, p2);
	p0.initRecoveryService(v2, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:6,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 7,2 @7 exception:8,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 5,3,
13 = phi  2,11,
return 13,
17 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parse([B)Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml; > 4 @23 exception:16,
4 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml>@4,
return 4,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
39 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 37,9 @29 exception:38,
conditional branch(eq, to iindex=-1) 6,7,
return 15,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, verifyFileSignature(Ljava/security/cert/X509Certificate;[B)V > 17,39,3 @33 exception:40,
return,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryService(Ljava/lang/String;[B)V > 1,9,3 @36 exception:67,
9 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
12 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
conditional branch(eq, to iindex=-1) 14,16,
20 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
conditional branch(ne, to iindex=-1) 22,16,
47 = new <Application,Ljava/lang/StringBuilder>@41,
goto (from iindex= 31 to iindex = 43),
67 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
71 = binaryop(lt) 69 , 70,
conditional branch(lt, to iindex=-1) 71,16,
99 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
conditional branch(eq, to iindex=-1) 101,16,
104 = binaryop(lt) 103 , 98,
conditional branch(lt, to iindex=-1) 104,16,
105 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
conditional branch(ne, to iindex=-1) 107,16,
205 = binaryop(lt) 204 , 98,
conditional branch(ne, to iindex=-1) 205,16,
return,
return,
return,","depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
depth : 1
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v3 = Objects.requireNonNull(p2, ""recoveryServiceCertFile is null"");
	Object v4 = Objects.requireNonNull(p3, ""recoveryServiceSigFile is null"");
	SigXml v5 = SigXml.parse(p3);
	X509Certificate v6 = this.mTestCertHelper.getRootCertificate(v2);
	v5.verifyFileSignature(v6, p2);
	p0.initRecoveryService(v2, p2);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	return phiInstruction;
}
-----
depth : 2
public SigXml parse(byte[] p1){
	Element v1 = CertUtils.getXmlRootNode(p1);
	SigXml v1 = new SigXml(v2,v3,v4);
	List v2 = SigXml.parseIntermediateCerts(v1);
	X509Certificate v3 = SigXml.parseSignerCert(v1);
	byte[] v4 = SigXml.parseFileSignature(v1);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	return v3;
}
-----
depth : 2
public void verifyFileSignature(X509Certificate p1, byte[] p2){
	p0.verifyFileSignature(p1, p2, 0);
	return;
}
-----
depth : 2
public void initRecoveryService(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	String v4 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	boolean v5 = this.mTestCertHelper.isValidRootCertificateAlias(v4);
	String v6 = this.mDatabase.getActiveRootOfTrust(v2, v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Root of trust for recovery agent + "");
	StringBuilder v9 = v6.append(v3);
	StringBuilder v10 = v6.append("" is assigned for the first time to "");
	StringBuilder v11 = v6.append(v4);
	String v12 = v6.toString();
	int v13 = Log.d(""RecoverableKeyStoreMgr"", v12);
	long v14 = this.mDatabase.setActiveRootOfTrust(v2, v3, v4);
	CertXml v15 = CertXml.parse(p2);
	long v16 = v15.getSerial();
	Long v17 = this.mDatabase.getRecoveryServiceCertSerial(v2, v3, v4);
	long v18 = v17.longValue();
	boolean v19 = this.mTestCertHelper.isTestOnlyCertificateAlias(v4);
	long v20 = v17.longValue();
	int v21 = Log.i(""RecoverableKeyStoreMgr"", ""The cert file serial number is the same, so skip updating."");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:6,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 7,2 @7 exception:8,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 5,3,
13 = phi  2,11,
return 13,
17 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parse([B)Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml; > 4 @23 exception:16,
4 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml>@4,
return 4,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
39 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 37,9 @29 exception:38,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 9,7,
return 9,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, verifyFileSignature(Ljava/security/cert/X509Certificate;[B)V > 17,39,3 @33 exception:40,
return,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryService(Ljava/lang/String;[B)V > 1,9,3 @36 exception:67,
9 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
12 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
conditional branch(eq, to iindex=-1) 14,16,
20 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
conditional branch(ne, to iindex=-1) 22,16,
47 = new <Application,Ljava/lang/StringBuilder>@41,
goto (from iindex= 31 to iindex = 43),
67 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
71 = binaryop(lt) 69 , 70,
conditional branch(lt, to iindex=-1) 71,16,
99 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
conditional branch(eq, to iindex=-1) 101,16,
104 = binaryop(lt) 103 , 98,
conditional branch(lt, to iindex=-1) 104,16,
105 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
conditional branch(ne, to iindex=-1) 107,16,
205 = binaryop(lt) 204 , 98,
conditional branch(ne, to iindex=-1) 205,16,
return,
return,
return,","depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
depth : 1
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v3 = Objects.requireNonNull(p2, ""recoveryServiceCertFile is null"");
	Object v4 = Objects.requireNonNull(p3, ""recoveryServiceSigFile is null"");
	SigXml v5 = SigXml.parse(p3);
	X509Certificate v6 = this.mTestCertHelper.getRootCertificate(v2);
	v5.verifyFileSignature(v6, p2);
	p0.initRecoveryService(v2, p2);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	return phiInstruction;
}
-----
depth : 2
public SigXml parse(byte[] p1){
	Element v1 = CertUtils.getXmlRootNode(p1);
	SigXml v1 = new SigXml(v2,v3,v4);
	List v2 = SigXml.parseIntermediateCerts(v1);
	X509Certificate v3 = SigXml.parseSignerCert(v1);
	byte[] v4 = SigXml.parseFileSignature(v1);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getRootCertificate(v1);
	return v3;
}
-----
depth : 2
public void verifyFileSignature(X509Certificate p1, byte[] p2){
	p0.verifyFileSignature(p1, p2, 0);
	return;
}
-----
depth : 2
public void initRecoveryService(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	String v4 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	boolean v5 = this.mTestCertHelper.isValidRootCertificateAlias(v4);
	String v6 = this.mDatabase.getActiveRootOfTrust(v2, v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Root of trust for recovery agent + "");
	StringBuilder v9 = v6.append(v3);
	StringBuilder v10 = v6.append("" is assigned for the first time to "");
	StringBuilder v11 = v6.append(v4);
	String v12 = v6.toString();
	int v13 = Log.d(""RecoverableKeyStoreMgr"", v12);
	long v14 = this.mDatabase.setActiveRootOfTrust(v2, v3, v4);
	CertXml v15 = CertXml.parse(p2);
	long v16 = v15.getSerial();
	Long v17 = this.mDatabase.getRecoveryServiceCertSerial(v2, v3, v4);
	long v18 = v17.longValue();
	boolean v19 = this.mTestCertHelper.isTestOnlyCertificateAlias(v4);
	long v20 = v17.longValue();
	int v21 = Log.i(""RecoverableKeyStoreMgr"", ""The cert file serial number is the same, so skip updating."");
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePasswordHashFactor()[B > 29 @81 exception:30,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @86 exception:32,
return 31,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
118 = getCaughtException ,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePasswordHashFactor()[B > 29 @81 exception:30,
3 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH()[B > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePassword([B)[B > 1,3 @4 exception:4,
return 5,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @86 exception:32,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 31,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
118 = getCaughtException ,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @77 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 7,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	int v8 = Slog.w(""LockSettingsService"", ""Current credential is incorrect"");
	p0.scheduleGc();
	return 0;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
return 2,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
28 = new <Application,[Ljava/lang/String>@5729 ,
37 = new <Application,[Ljava/lang/String>@7529 ,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
55 = getCaughtException ,
monitorexit 4,
return,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
conditional branch(ne, to iindex=-1) 3,4,
12 = getCaughtException ,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, NONE, <Application,Lcom/android/server/locksettings/LockSettingsStorage$PersistentData> >,
return 17,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return 8,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return 7,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
2 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData>@0,
4 = arraylength 1,
7 = arraylength 1,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > = 14,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > = 16,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > = 18,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > = 20,
23 = new <Primordial,[B>@4622 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > = 23,
conditional branch(le, to iindex=-1) 27,8,
28 = new <Primordial,[B>@5927 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, passwordHandle, <Primordial,[B> > = 28,
goto (from iindex= 32 to iindex = 4),
return 2,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
conditional branch(eq, to iindex=-1) 5,6,
9 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, DEFAULT_PASSWORD, <Primordial,[B> >,
goto (from iindex= 4 to iindex = 5),
10 = phi  9,8,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > 3,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > 3,
16 = binaryop(SHL) 15 , 14,
17 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > 3,
18 = binaryop(SHL) 15 , 17,
19 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > 3,
20 = binaryop(SHL) 15 , 19,
return 23,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
conditional branch(eq, to iindex=-1) 6,8,
9 = arraylength 6,
conditional branch(eq, to iindex=-1) 9,10,
13 = arraylength 6,
conditional branch(eq, to iindex=-1) 19,20,
23 = new <Application,Ljava/lang/StringBuilder>@34,
return 7,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
conditional branch(eq, to iindex=-1) 2,4,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
6 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, slots, <Primordial,I> > 5,
conditional branch(ge, to iindex=-1) 2,6,
conditional branch(ne, to iindex=-1) 3,11,
17 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, keySize, <Primordial,I> > 5,
18 = new <Primordial,[B>@1317 ,
goto (from iindex= 8 to iindex = 6),
21 = phi  18,3,
23 = new <Application,[Lcom/android/internal/widget/VerifyCredentialResponse>@2222 ,
24 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
27 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda1>@31,
30 = getCaughtException ,
31 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
arraystore 23[11] = 31,
32 = new <Application,Ljava/lang/StringBuilder>@45,
50 = arrayload 23[11],
return 50,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mGatekeeperHAT, <Primordial,[B> > 1,
return 2,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
4 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_PASSWORD, <Primordial,[B> >,
6 = new <Primordial,[[B>@35 ,
arraystore 6[7] = 3,
10 = arraylength 2,
11 = arraylength 9,
12 = binaryop(add) 10 , 11,
13 = new <Primordial,[B>@1512 ,
14 = arraylength 2,
16 = arraylength 2,
17 = arraylength 9,
return 13,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
118 = getCaughtException ,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
conditional branch(ne, to iindex=-1) 9,10,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 13,15,
conditional branch(ne, to iindex=-1) 13,16,
goto (from iindex= 20 to iindex = 9),
20 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 20,3,
conditional branch(ne, to iindex=-1) 13,16,
31 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mContent, <Primordial,[B> > 12,
goto (from iindex= 33 to iindex = 11),
34 = phi  33,28,
conditional branch(ne, to iindex=-1) 34,10,
39 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken>@95,
40 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(eq, to iindex=-1) 3,16,
conditional branch(ne, to iindex=-1) 3,15,
goto (from iindex= 55 to iindex = 5),
conditional branch(ne, to iindex=-1) 44,10,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 49,16,
50 = new <Application,Ljava/lang/StringBuilder>@145,
return 39,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
return 9,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
return 6,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
9 = new <Primordial,[B>@58 ,
10 = new <Application,Lcom/android/server/locksettings/VersionedPasswordMetrics>@7,
return,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePasswordHashFactor()[B > 29 @81 exception:30,
3 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH()[B > @0 exception:2,
1 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALIZATION_PASSWORD_HASH, <Primordial,[B> >,
return 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePassword([B)[B > 1,3 @4 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mVersion, <Primordial,B> > 1,
conditional branch(ne, to iindex=-1) 3,4,
6 = new <Primordial,[[B>@225 ,
8 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mSyntheticPassword, <Primordial,[B> > 1,
arraystore 6[7] = 8,
return 10,
return 5,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @86 exception:32,
return 31,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	int v16 = Slog.e(""ManagedProfilePasswordCache"", ""Cannot generate key"", caughtException);
	return;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$PersistentData readPersistentDataBlock(){
	PersistentDataBlockManagerInternal v1 = p0.getPersistentDataBlockManager();
	byte[] v2 = v1.getFrpCredentialHandle();
	int v3 = Slog.e(""LockSettingsStorage"", ""Error reading persistent data block"", caughtException);
	return LockSettingsStorage$PersistentData.NONE;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public byte[] loadState(String p1, long p2, int p3){
	byte[] v1 = this.mStorage.readSyntheticPasswordState(p3, p2, p1);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$PasswordData fromBytes(byte[] p1){
	SyntheticPasswordManager$PasswordData v0 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v2 = ByteBuffer.allocate(p1.length);
	ByteBuffer v3 = v2.put(p1, 0, p1.length);
	Buffer v4 = v2.flip();
	int v5 = v2.getInt();
	this.credentialType = v5;
	byte v6 = v2.get();
	this.scryptN = v6;
	byte v7 = v2.get();
	this.scryptR = v7;
	byte v8 = v2.get();
	this.scryptP = v8;
	int v9 = v2.getInt();
	[B v9 = new [B(v9);
	this.salt = v9;
	ByteBuffer v10 = v2.get(v9);
	int v11 = v2.getInt();
	[B v11 = new [B(v11);
	this.passwordHandle = v11;
	ByteBuffer v12 = v2.get(v11);
	return v0;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public byte[] computePasswordToken(LockscreenCredential p1, SyntheticPasswordManager$PasswordData p2){
	boolean v1 = p1.isNone();
	byte[] v2 = p0.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	return v2;
}
-----
depth : 2
public int loadWeaverSlot(long p1, int p2){
	byte[] v1 = p0.loadState(""weaver"", p1, p2);
	ByteBuffer v2 = ByteBuffer.allocate(5);
	ByteBuffer v3 = v2.put(v1, 0, v1.length);
	Buffer v4 = v2.flip();
	byte v5 = v2.get();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Invalid weaver slot version of handle "");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	int v10 = Slog.e(""SyntheticPasswordManager"", v9);
	return -1;
}
-----
depth : 2
public VerifyCredentialResponse weaverVerify(int p1, byte[] p2){
	[B v0 = new [B(WeaverConfig.keySize);
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(1);
	ArrayList v1 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v0,p1);
	this.mWeaver.read(p1, v1, v1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""weaver read failed, slot: "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.e(""SyntheticPasswordManager"", v7, caughtException);
	return v0[0];
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getGatekeeperHAT(){
	return this.mGatekeeperHAT;
}
-----
depth : 2
public byte[] transformUnderWeaverSecret(byte[] p1, byte[] p2){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v0);
	[B v1 = new [B((p1.length + v1.length));
	System.arraycopy(p1, 0, v1, 0, p1.length);
	System.arraycopy(v1, 0, v1, p1.length, v1.length);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken unwrapSyntheticPasswordBlob(long p1, byte p2, byte[] p3, long p4, int p5){
	byte[] v1 = p0.loadState(""spblob"", p1, p5);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	String v3 = p0.getKeyName(p1);
	byte[] v4 = SyntheticPasswordCrypto.decryptBlobV1(v3, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, p3);
	SyntheticPasswordManager$AuthenticationToken v4 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v6 = p0.loadEscrowData(v4, p5);
	v4.recreateFromEscrow(phiInstruction);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Upgrade v1 SP blob for user "");
	StringBuilder v10 = v7.append(p5);
	StringBuilder v11 = v7.append("", type = "");
	StringBuilder v12 = v7.append(p2);
	String v13 = v7.toString();
	int v14 = Slog.i(""SyntheticPasswordManager"", v13);
	p0.createSyntheticPasswordBlob(p1, p2, v4, p3, p4, p5);
	return v4;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallenge(IGateKeeperService p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveGkPassword();
	VerifyCredentialResponse v2 = p0.verifyChallengeInternal(p1, v1, p3, p4);
	return v2;
}
-----
depth : 2
public boolean hasPasswordMetrics(long p1, int p2){
	boolean v1 = p0.hasState(""metrics"", p1, p2);
	return v1;
}
-----
depth : 2
public void savePasswordMetrics(LockscreenCredential p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveMetricsKey();
	[B v1 = new [B(0);
	VersionedPasswordMetrics v1 = new VersionedPasswordMetrics(p1);
	byte[] v3 = v1.serialize();
	byte[] v4 = SyntheticPasswordCrypto.encrypt(v1, v1, v3);
	p0.saveState(""metrics"", v4, p3, p4);
	return;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 2
public byte[] -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH(){
	return this.PERSONALIZATION_PASSWORD_HASH;
}
-----
depth : 2
public byte[] derivePassword(byte[] p1){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(p1, v0);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
return 2,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
28 = new <Application,[Ljava/lang/String>@5729 ,
37 = new <Application,[Ljava/lang/String>@7529 ,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
55 = getCaughtException ,
monitorexit 4,
return,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
conditional branch(ne, to iindex=-1) 3,4,
12 = getCaughtException ,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, NONE, <Application,Lcom/android/server/locksettings/LockSettingsStorage$PersistentData> >,
return 17,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return 8,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return 7,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
2 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData>@0,
4 = arraylength 1,
7 = arraylength 1,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > = 14,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > = 16,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > = 18,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > = 20,
23 = new <Primordial,[B>@4622 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > = 23,
conditional branch(le, to iindex=-1) 27,8,
28 = new <Primordial,[B>@5927 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, passwordHandle, <Primordial,[B> > = 28,
goto (from iindex= 32 to iindex = 4),
return 2,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
conditional branch(eq, to iindex=-1) 5,6,
9 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, DEFAULT_PASSWORD, <Primordial,[B> >,
goto (from iindex= 4 to iindex = 5),
10 = phi  9,8,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > 3,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > 3,
16 = binaryop(SHL) 15 , 14,
17 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > 3,
18 = binaryop(SHL) 15 , 17,
19 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > 3,
20 = binaryop(SHL) 15 , 19,
return 23,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
conditional branch(eq, to iindex=-1) 6,8,
9 = arraylength 6,
conditional branch(eq, to iindex=-1) 9,10,
13 = arraylength 6,
conditional branch(eq, to iindex=-1) 19,20,
23 = new <Application,Ljava/lang/StringBuilder>@34,
return 7,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
conditional branch(eq, to iindex=-1) 2,4,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
6 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, slots, <Primordial,I> > 5,
conditional branch(ge, to iindex=-1) 2,6,
conditional branch(ne, to iindex=-1) 3,11,
17 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, keySize, <Primordial,I> > 5,
18 = new <Primordial,[B>@1317 ,
goto (from iindex= 8 to iindex = 6),
21 = phi  18,3,
23 = new <Application,[Lcom/android/internal/widget/VerifyCredentialResponse>@2222 ,
24 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
27 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda1>@31,
30 = getCaughtException ,
31 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
arraystore 23[11] = 31,
32 = new <Application,Ljava/lang/StringBuilder>@45,
50 = arrayload 23[11],
return 50,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mGatekeeperHAT, <Primordial,[B> > 1,
return 2,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
4 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_PASSWORD, <Primordial,[B> >,
6 = new <Primordial,[[B>@35 ,
arraystore 6[7] = 3,
10 = arraylength 2,
11 = arraylength 9,
12 = binaryop(add) 10 , 11,
13 = new <Primordial,[B>@1512 ,
14 = arraylength 2,
16 = arraylength 2,
17 = arraylength 9,
return 13,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
118 = getCaughtException ,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
conditional branch(ne, to iindex=-1) 9,10,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 13,15,
conditional branch(ne, to iindex=-1) 13,16,
goto (from iindex= 20 to iindex = 9),
20 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 20,3,
conditional branch(ne, to iindex=-1) 13,16,
31 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mContent, <Primordial,[B> > 12,
goto (from iindex= 33 to iindex = 11),
34 = phi  33,28,
conditional branch(ne, to iindex=-1) 34,10,
39 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken>@95,
40 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(eq, to iindex=-1) 3,16,
conditional branch(ne, to iindex=-1) 3,15,
goto (from iindex= 55 to iindex = 5),
conditional branch(ne, to iindex=-1) 44,10,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 49,16,
50 = new <Application,Ljava/lang/StringBuilder>@145,
return 39,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
return 9,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
return 6,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
9 = new <Primordial,[B>@58 ,
10 = new <Application,Lcom/android/server/locksettings/VersionedPasswordMetrics>@7,
return,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePasswordHashFactor()[B > 29 @81 exception:30,
3 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH()[B > @0 exception:2,
1 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALIZATION_PASSWORD_HASH, <Primordial,[B> >,
return 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePassword([B)[B > 1,3 @4 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mVersion, <Primordial,B> > 1,
conditional branch(ne, to iindex=-1) 3,4,
6 = new <Primordial,[[B>@225 ,
8 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mSyntheticPassword, <Primordial,[B> > 1,
arraystore 6[7] = 8,
return 10,
return 5,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @86 exception:32,
return 31,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	int v16 = Slog.e(""ManagedProfilePasswordCache"", ""Cannot generate key"", caughtException);
	return;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$PersistentData readPersistentDataBlock(){
	PersistentDataBlockManagerInternal v1 = p0.getPersistentDataBlockManager();
	byte[] v2 = v1.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v3 = LockSettingsStorage$PersistentData.fromBytes(v2);
	int v4 = Slog.e(""LockSettingsStorage"", ""Error reading persistent data block"", caughtException);
	return LockSettingsStorage$PersistentData.NONE;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public byte[] loadState(String p1, long p2, int p3){
	byte[] v1 = this.mStorage.readSyntheticPasswordState(p3, p2, p1);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$PasswordData fromBytes(byte[] p1){
	SyntheticPasswordManager$PasswordData v0 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v2 = ByteBuffer.allocate(p1.length);
	ByteBuffer v3 = v2.put(p1, 0, p1.length);
	Buffer v4 = v2.flip();
	int v5 = v2.getInt();
	this.credentialType = v5;
	byte v6 = v2.get();
	this.scryptN = v6;
	byte v7 = v2.get();
	this.scryptR = v7;
	byte v8 = v2.get();
	this.scryptP = v8;
	int v9 = v2.getInt();
	[B v9 = new [B(v9);
	this.salt = v9;
	ByteBuffer v10 = v2.get(v9);
	int v11 = v2.getInt();
	[B v11 = new [B(v11);
	this.passwordHandle = v11;
	ByteBuffer v12 = v2.get(v11);
	return v0;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public byte[] computePasswordToken(LockscreenCredential p1, SyntheticPasswordManager$PasswordData p2){
	boolean v1 = p1.isNone();
	byte[] v2 = p0.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	return v2;
}
-----
depth : 2
public int loadWeaverSlot(long p1, int p2){
	byte[] v1 = p0.loadState(""weaver"", p1, p2);
	ByteBuffer v2 = ByteBuffer.allocate(5);
	ByteBuffer v3 = v2.put(v1, 0, v1.length);
	Buffer v4 = v2.flip();
	byte v5 = v2.get();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Invalid weaver slot version of handle "");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	int v10 = Slog.e(""SyntheticPasswordManager"", v9);
	return -1;
}
-----
depth : 2
public VerifyCredentialResponse weaverVerify(int p1, byte[] p2){
	[B v0 = new [B(WeaverConfig.keySize);
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(1);
	ArrayList v1 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v0,p1);
	this.mWeaver.read(p1, v1, v1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""weaver read failed, slot: "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.e(""SyntheticPasswordManager"", v7, caughtException);
	return v0[0];
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getGatekeeperHAT(){
	return this.mGatekeeperHAT;
}
-----
depth : 2
public byte[] transformUnderWeaverSecret(byte[] p1, byte[] p2){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v0);
	[B v1 = new [B((p1.length + v1.length));
	System.arraycopy(p1, 0, v1, 0, p1.length);
	System.arraycopy(v1, 0, v1, p1.length, v1.length);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken unwrapSyntheticPasswordBlob(long p1, byte p2, byte[] p3, long p4, int p5){
	byte[] v1 = p0.loadState(""spblob"", p1, p5);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	String v3 = p0.getKeyName(p1);
	byte[] v4 = SyntheticPasswordCrypto.decryptBlobV1(v3, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, p3);
	SyntheticPasswordManager$AuthenticationToken v4 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v6 = p0.loadEscrowData(v4, p5);
	v4.recreateFromEscrow(phiInstruction);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Upgrade v1 SP blob for user "");
	StringBuilder v10 = v7.append(p5);
	StringBuilder v11 = v7.append("", type = "");
	StringBuilder v12 = v7.append(p2);
	String v13 = v7.toString();
	int v14 = Slog.i(""SyntheticPasswordManager"", v13);
	p0.createSyntheticPasswordBlob(p1, p2, v4, p3, p4, p5);
	return v4;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallenge(IGateKeeperService p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveGkPassword();
	VerifyCredentialResponse v2 = p0.verifyChallengeInternal(p1, v1, p3, p4);
	return v2;
}
-----
depth : 2
public boolean hasPasswordMetrics(long p1, int p2){
	boolean v1 = p0.hasState(""metrics"", p1, p2);
	return v1;
}
-----
depth : 2
public void savePasswordMetrics(LockscreenCredential p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveMetricsKey();
	[B v1 = new [B(0);
	VersionedPasswordMetrics v1 = new VersionedPasswordMetrics(p1);
	byte[] v3 = v1.serialize();
	byte[] v4 = SyntheticPasswordCrypto.encrypt(v1, v1, v3);
	p0.saveState(""metrics"", v4, p3, p4);
	return;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 2
public byte[] -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH(){
	return this.PERSONALIZATION_PASSWORD_HASH;
}
-----
depth : 2
public byte[] derivePassword(byte[] p1){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(p1, v0);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
return 2,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
28 = new <Application,[Ljava/lang/String>@5729 ,
37 = new <Application,[Ljava/lang/String>@7529 ,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
55 = getCaughtException ,
monitorexit 4,
return,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
conditional branch(ne, to iindex=-1) 3,4,
12 = getCaughtException ,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, NONE, <Application,Lcom/android/server/locksettings/LockSettingsStorage$PersistentData> >,
return 17,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return 8,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return 7,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
2 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData>@0,
4 = arraylength 1,
7 = arraylength 1,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > = 14,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > = 16,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > = 18,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > = 20,
23 = new <Primordial,[B>@4622 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > = 23,
conditional branch(le, to iindex=-1) 27,8,
28 = new <Primordial,[B>@5927 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, passwordHandle, <Primordial,[B> > = 28,
goto (from iindex= 32 to iindex = 4),
return 2,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
conditional branch(eq, to iindex=-1) 5,6,
9 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, DEFAULT_PASSWORD, <Primordial,[B> >,
goto (from iindex= 4 to iindex = 5),
10 = phi  9,8,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > 3,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > 3,
16 = binaryop(SHL) 15 , 14,
17 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > 3,
18 = binaryop(SHL) 15 , 17,
19 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > 3,
20 = binaryop(SHL) 15 , 19,
return 23,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
conditional branch(eq, to iindex=-1) 6,8,
9 = arraylength 6,
conditional branch(eq, to iindex=-1) 9,10,
13 = arraylength 6,
conditional branch(eq, to iindex=-1) 19,20,
23 = new <Application,Ljava/lang/StringBuilder>@34,
return 7,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
conditional branch(eq, to iindex=-1) 2,4,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
6 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, slots, <Primordial,I> > 5,
conditional branch(ge, to iindex=-1) 2,6,
conditional branch(ne, to iindex=-1) 3,11,
17 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, keySize, <Primordial,I> > 5,
18 = new <Primordial,[B>@1317 ,
goto (from iindex= 8 to iindex = 6),
21 = phi  18,3,
23 = new <Application,[Lcom/android/internal/widget/VerifyCredentialResponse>@2222 ,
24 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
27 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda1>@31,
30 = getCaughtException ,
31 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
arraystore 23[11] = 31,
32 = new <Application,Ljava/lang/StringBuilder>@45,
50 = arrayload 23[11],
return 50,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mGatekeeperHAT, <Primordial,[B> > 1,
return 2,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
4 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_PASSWORD, <Primordial,[B> >,
6 = new <Primordial,[[B>@35 ,
arraystore 6[7] = 3,
10 = arraylength 2,
11 = arraylength 9,
12 = binaryop(add) 10 , 11,
13 = new <Primordial,[B>@1512 ,
14 = arraylength 2,
16 = arraylength 2,
17 = arraylength 9,
return 13,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
118 = getCaughtException ,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
conditional branch(ne, to iindex=-1) 9,10,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 13,15,
conditional branch(ne, to iindex=-1) 13,16,
goto (from iindex= 20 to iindex = 9),
20 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 20,3,
conditional branch(ne, to iindex=-1) 13,16,
31 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mContent, <Primordial,[B> > 12,
goto (from iindex= 33 to iindex = 11),
34 = phi  33,28,
conditional branch(ne, to iindex=-1) 34,10,
39 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken>@95,
40 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(eq, to iindex=-1) 3,16,
conditional branch(ne, to iindex=-1) 3,15,
goto (from iindex= 55 to iindex = 5),
conditional branch(ne, to iindex=-1) 44,10,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 49,16,
50 = new <Application,Ljava/lang/StringBuilder>@145,
return 39,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
return 9,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
return 6,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
9 = new <Primordial,[B>@58 ,
10 = new <Application,Lcom/android/server/locksettings/VersionedPasswordMetrics>@7,
return,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePasswordHashFactor()[B > 29 @81 exception:30,
3 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH()[B > @0 exception:2,
1 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALIZATION_PASSWORD_HASH, <Primordial,[B> >,
return 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePassword([B)[B > 1,3 @4 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mVersion, <Primordial,B> > 1,
conditional branch(ne, to iindex=-1) 3,4,
6 = new <Primordial,[[B>@225 ,
8 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mSyntheticPassword, <Primordial,[B> > 1,
arraystore 6[7] = 8,
return 10,
return 5,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @86 exception:32,
return 31,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	int v16 = Slog.e(""ManagedProfilePasswordCache"", ""Cannot generate key"", caughtException);
	return;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$PersistentData readPersistentDataBlock(){
	PersistentDataBlockManagerInternal v1 = p0.getPersistentDataBlockManager();
	byte[] v2 = v1.getFrpCredentialHandle();
	int v3 = Slog.e(""LockSettingsStorage"", ""Error reading persistent data block"", caughtException);
	return LockSettingsStorage$PersistentData.NONE;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public byte[] loadState(String p1, long p2, int p3){
	byte[] v1 = this.mStorage.readSyntheticPasswordState(p3, p2, p1);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$PasswordData fromBytes(byte[] p1){
	SyntheticPasswordManager$PasswordData v0 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v2 = ByteBuffer.allocate(p1.length);
	ByteBuffer v3 = v2.put(p1, 0, p1.length);
	Buffer v4 = v2.flip();
	int v5 = v2.getInt();
	this.credentialType = v5;
	byte v6 = v2.get();
	this.scryptN = v6;
	byte v7 = v2.get();
	this.scryptR = v7;
	byte v8 = v2.get();
	this.scryptP = v8;
	int v9 = v2.getInt();
	[B v9 = new [B(v9);
	this.salt = v9;
	ByteBuffer v10 = v2.get(v9);
	int v11 = v2.getInt();
	[B v11 = new [B(v11);
	this.passwordHandle = v11;
	ByteBuffer v12 = v2.get(v11);
	return v0;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public byte[] computePasswordToken(LockscreenCredential p1, SyntheticPasswordManager$PasswordData p2){
	boolean v1 = p1.isNone();
	byte[] v2 = p0.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	return v2;
}
-----
depth : 2
public int loadWeaverSlot(long p1, int p2){
	byte[] v1 = p0.loadState(""weaver"", p1, p2);
	ByteBuffer v2 = ByteBuffer.allocate(5);
	ByteBuffer v3 = v2.put(v1, 0, v1.length);
	Buffer v4 = v2.flip();
	byte v5 = v2.get();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Invalid weaver slot version of handle "");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	int v10 = Slog.e(""SyntheticPasswordManager"", v9);
	return -1;
}
-----
depth : 2
public VerifyCredentialResponse weaverVerify(int p1, byte[] p2){
	[B v0 = new [B(WeaverConfig.keySize);
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(1);
	ArrayList v1 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v0,p1);
	this.mWeaver.read(p1, v1, v1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""weaver read failed, slot: "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.e(""SyntheticPasswordManager"", v7, caughtException);
	return v0[0];
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getGatekeeperHAT(){
	return this.mGatekeeperHAT;
}
-----
depth : 2
public byte[] transformUnderWeaverSecret(byte[] p1, byte[] p2){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v0);
	[B v1 = new [B((p1.length + v1.length));
	System.arraycopy(p1, 0, v1, 0, p1.length);
	System.arraycopy(v1, 0, v1, p1.length, v1.length);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken unwrapSyntheticPasswordBlob(long p1, byte p2, byte[] p3, long p4, int p5){
	byte[] v1 = p0.loadState(""spblob"", p1, p5);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	String v3 = p0.getKeyName(p1);
	byte[] v4 = SyntheticPasswordCrypto.decryptBlobV1(v3, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, p3);
	SyntheticPasswordManager$AuthenticationToken v4 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v6 = p0.loadEscrowData(v4, p5);
	v4.recreateFromEscrow(phiInstruction);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Upgrade v1 SP blob for user "");
	StringBuilder v10 = v7.append(p5);
	StringBuilder v11 = v7.append("", type = "");
	StringBuilder v12 = v7.append(p2);
	String v13 = v7.toString();
	int v14 = Slog.i(""SyntheticPasswordManager"", v13);
	p0.createSyntheticPasswordBlob(p1, p2, v4, p3, p4, p5);
	return v4;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallenge(IGateKeeperService p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveGkPassword();
	VerifyCredentialResponse v2 = p0.verifyChallengeInternal(p1, v1, p3, p4);
	return v2;
}
-----
depth : 2
public boolean hasPasswordMetrics(long p1, int p2){
	boolean v1 = p0.hasState(""metrics"", p1, p2);
	return v1;
}
-----
depth : 2
public void savePasswordMetrics(LockscreenCredential p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveMetricsKey();
	[B v1 = new [B(0);
	VersionedPasswordMetrics v1 = new VersionedPasswordMetrics(p1);
	byte[] v3 = v1.serialize();
	byte[] v4 = SyntheticPasswordCrypto.encrypt(v1, v1, v3);
	p0.saveState(""metrics"", v4, p3, p4);
	return;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 2
public byte[] -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH(){
	return this.PERSONALIZATION_PASSWORD_HASH;
}
-----
depth : 2
public byte[] derivePassword(byte[] p1){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(p1, v0);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","requireStrongAuth(II)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,3 @0 exception:4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, requireStrongAuth(II)V > 5,2,3 @5 exception:6,
return,","depth : 0
public void requireStrongAuth(int p1, int p2){
	p0.checkWritePermission(p2);
	this.mStrongAuth.requireStrongAuth(p1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","requireStrongAuth(II)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,3 @0 exception:4,
return,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, requireStrongAuth(II)V > 5,2,3 @5 exception:6,
conditional branch(eq, to iindex=-1) 3,4,
conditional branch(lt, to iindex=-1) 3,5,
goto (from iindex= 3 to iindex = 10),
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 12 @22 exception:13,
return,
return,","depth : 0
public void requireStrongAuth(int p1, int p2){
	p0.checkWritePermission(p2);
	this.mStrongAuth.requireStrongAuth(p1, p2);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void requireStrongAuth(int p1, int p2){
	Message v1 = this.mHandler.obtainMessage(1, p1, p2);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
4 = new <Application,Ljava/util/ArrayList>@3,
6 = new <Application,Ljava/util/ArrayList>@8,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
105 = phi  15,104,15,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
6 = new <Application,Ljava/util/ArrayList>@8,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
goto (from iindex= 4 to iindex = 2),
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
8 = getCaughtException ,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	int v2 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
6 = new <Application,Ljava/util/ArrayList>@8,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
8 = getCaughtException ,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	int v2 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
6 = new <Application,Ljava/util/ArrayList>@8,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
goto (from iindex= 4 to iindex = 2),
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
return 5,
8 = getCaughtException ,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	int v2 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
depth : 2
public IKeystoreMaintenance getService(){
	IBinder v1 = ServiceManager.checkService(""android.security.maintenance"");
	IKeystoreMaintenance v2 = IKeystoreMaintenance$Stub.asInterface(v1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
6 = new <Application,Ljava/util/ArrayList>@8,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
goto (from iindex= 4 to iindex = 2),
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
return 5,
8 = getCaughtException ,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	v1.clearNamespace(p1, p2);
	int v3 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
depth : 2
public IKeystoreMaintenance getService(){
	IBinder v1 = ServiceManager.checkService(""android.security.maintenance"");
	IKeystoreMaintenance v2 = IKeystoreMaintenance$Stub.asInterface(v1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
6 = new <Application,Ljava/util/ArrayList>@8,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
return 5,
8 = getCaughtException ,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	int v2 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
depth : 2
public IKeystoreMaintenance getService(){
	IBinder v1 = ServiceManager.checkService(""android.security.maintenance"");
	IKeystoreMaintenance v2 = IKeystoreMaintenance$Stub.asInterface(v1);
	return v2;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","removeCachedUnifiedChallenge(I)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, removePassword(I)V > 3,2 @2 exception:4,
return,","depth : 0
public void removeCachedUnifiedChallenge(int p1){
	this.mManagedProfilePasswordCache.removePassword(p1);
	return;
}
-----
","NONE"
"Lcom/android/server/locksettings/LockSettingsService","removeCachedUnifiedChallenge(I)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, removePassword(I)V > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
5 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @3 exception:4,
7 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getLegacyEncryptionKeyName(I)Ljava/lang/String; > 2 @7 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
conditional branch(eq, to iindex=-1) 10,11,
12 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
25 = getCaughtException ,
35 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
conditional branch(eq, to iindex=-1) 37,11,
38 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
41 = checkcast <Primordial,[B>40 <Primordial,[B>,
43 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorexit 3,
return,
return,","depth : 0
public void removeCachedUnifiedChallenge(int p1){
	this.mManagedProfilePasswordCache.removePassword(p1);
	return;
}
-----
depth : 1
public void removePassword(int p1){
	String v1 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	String v2 = ManagedProfilePasswordCache.getLegacyEncryptionKeyName(p1);
	boolean v3 = this.mKeyStore.containsAlias(v1);
	this.mKeyStore.deleteEntry(v1);
	boolean v5 = this.mKeyStore.containsAlias(v2);
	int v6 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot delete key"", caughtException);
	boolean v7 = this.mEncryptedPasswords.contains(p1);
	Object v8 = this.mEncryptedPasswords.get(p1);
	Arrays.fill(v8, 0);
	this.mEncryptedPasswords.remove(p1);
	return;
}
-----
","NONE"
"Lcom/android/server/locksettings/LockSettingsService","removeCachedUnifiedChallenge(I)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, removePassword(I)V > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
5 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @3 exception:4,
2 = new <Application,Ljava/lang/StringBuilder>@0,
return 10,
7 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getLegacyEncryptionKeyName(I)Ljava/lang/String; > 2 @7 exception:6,
2 = new <Application,Ljava/lang/StringBuilder>@0,
return 10,
8 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
conditional branch(eq, to iindex=-1) 10,11,
12 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
25 = getCaughtException ,
35 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
conditional branch(eq, to iindex=-1) 37,11,
38 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
41 = checkcast <Primordial,[B>40 <Primordial,[B>,
43 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorexit 3,
return,
return,","depth : 0
public void removeCachedUnifiedChallenge(int p1){
	this.mManagedProfilePasswordCache.removePassword(p1);
	return;
}
-----
depth : 1
public void removePassword(int p1){
	String v1 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	String v2 = ManagedProfilePasswordCache.getLegacyEncryptionKeyName(p1);
	boolean v3 = this.mKeyStore.containsAlias(v1);
	this.mKeyStore.deleteEntry(v1);
	boolean v5 = this.mKeyStore.containsAlias(v2);
	int v6 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot delete key"", caughtException);
	boolean v7 = this.mEncryptedPasswords.contains(p1);
	Object v8 = this.mEncryptedPasswords.get(p1);
	Arrays.fill(v8, 0);
	this.mEncryptedPasswords.remove(p1);
	return;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 2
public String getLegacyEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
","NONE"
"Lcom/android/server/locksettings/LockSettingsService","removeCachedUnifiedChallenge(I)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, removePassword(I)V > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
5 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @3 exception:4,
2 = new <Application,Ljava/lang/StringBuilder>@0,
return 10,
7 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getLegacyEncryptionKeyName(I)Ljava/lang/String; > 2 @7 exception:6,
2 = new <Application,Ljava/lang/StringBuilder>@0,
return 10,
8 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
conditional branch(eq, to iindex=-1) 10,11,
12 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
25 = getCaughtException ,
35 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
conditional branch(eq, to iindex=-1) 37,11,
38 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
41 = checkcast <Primordial,[B>40 <Primordial,[B>,
43 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorexit 3,
return,
return,","depth : 0
public void removeCachedUnifiedChallenge(int p1){
	this.mManagedProfilePasswordCache.removePassword(p1);
	return;
}
-----
depth : 1
public void removePassword(int p1){
	String v1 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	String v2 = ManagedProfilePasswordCache.getLegacyEncryptionKeyName(p1);
	boolean v3 = this.mKeyStore.containsAlias(v1);
	this.mKeyStore.deleteEntry(v1);
	int v5 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot delete key"", caughtException);
	boolean v6 = this.mEncryptedPasswords.contains(p1);
	Object v7 = this.mEncryptedPasswords.get(p1);
	Arrays.fill(v7, 0);
	this.mEncryptedPasswords.remove(p1);
	return;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 2
public String getLegacyEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
","NONE"

"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","0","conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","1","conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
9 = getCaughtException ,
goto (from iindex= 9 to iindex = 6),
return,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, isProvisioned()Z > 1 @16 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, reportDeviceSetupComplete()V > 1 @29 exception:14,
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
conditional branch(eq, to iindex=-1) 26,7,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/hardware/fingerprint/FingerprintManager>12 <Application,Landroid/hardware/fingerprint/FingerprintManager>,
return 13,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/hardware/face/FaceManager>12 <Application,Landroid/hardware/face/FaceManager>,
return 13,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 1
public void getAuthSecretHal(){
	IAuthSecret v1 = IAuthSecret.getService(1);
	int v2 = Slog.w(""LockSettingsService"", ""Failed to get AuthSecret HAL"", caughtException);
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	boolean v3 = p0.isProvisioned();
	int v4 = Slog.i(""LockSettingsService"", ""FRP credential disabled, reporting device setup complete to Gatekeeper immediately"");
	p0.reportDeviceSetupComplete();
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 1
public FingerprintManager getFingerprintManager(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature(""android.hardware.fingerprint"");
	Object v3 = this.mContext.getSystemService(""fingerprint"");
	return v3;
}
-----
depth : 1
public FaceManager getFaceManager(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature(""android.hardware.biometrics.face"");
	Object v3 = this.mContext.getSystemService(""face"");
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","1","conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mAuthSecretService, <Application,Landroid/hardware/authsecret/V1_0/IAuthSecret> > = 5,
goto (from iindex= 5 to iindex = 13),
return,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, isProvisioned()Z > 1 @16 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, reportDeviceSetupComplete()V > 1 @29 exception:14,
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
conditional branch(eq, to iindex=-1) 26,7,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/hardware/fingerprint/FingerprintManager>12 <Application,Landroid/hardware/fingerprint/FingerprintManager>,
return 13,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/hardware/face/FaceManager>12 <Application,Landroid/hardware/face/FaceManager>,
return 13,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 1
public void getAuthSecretHal(){
	IAuthSecret v1 = IAuthSecret.getService(1);
	this.mAuthSecretService = v1;
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	boolean v3 = p0.isProvisioned();
	int v4 = Slog.i(""LockSettingsService"", ""FRP credential disabled, reporting device setup complete to Gatekeeper immediately"");
	p0.reportDeviceSetupComplete();
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 1
public FingerprintManager getFingerprintManager(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature(""android.hardware.fingerprint"");
	Object v3 = this.mContext.getSystemService(""fingerprint"");
	return v3;
}
-----
depth : 1
public FaceManager getFaceManager(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature(""android.hardware.biometrics.face"");
	Object v3 = this.mContext.getSystemService(""face"");
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","2","conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
6 = new <Application,Ljava/util/HashSet>@9,
conditional branch(eq, to iindex=-1) 13,14,
return 6,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
3 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
conditional branch(ne, to iindex=-1) 3,4,
5 = new <Application,Ljava/util/HashSet>@12,
7 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
conditional branch(eq, to iindex=-1) 13,4,
conditional branch(eq, to iindex=-1) 35,4,
conditional branch(eq, to iindex=-1) 49,4,
return,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
return 2,
conditional branch(eq, to iindex=-1) 6,7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, updateRegistration()V > 1 @12 exception:15,
5 = binaryop(xor) 3 , 4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, mRegistered, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 5,7,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, mDeviceProvisionedUri, <Application,Landroid/net/Uri> > 1,
goto (from iindex= 15 to iindex = 14),
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, mRegistered, <Primordial,Z> > = 5,
return,
goto (from iindex= 7 to iindex = 17),
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
return,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
return 3,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
conditional branch(eq, to iindex=-1) 26,7,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 2
public IWeaver getWeaverService(){
	IWeaver v1 = IWeaver.getService(1);
	int v2 = Slog.i(""SyntheticPasswordManager"", ""Device does not support weaver"");
	return 0;
}
-----
depth : 2
public Set getUsedWeaverSlots(){
	Map v1 = this.mStorage.listSyntheticPasswordHandlesForAllUsers(""weaver"");
	HashSet v1 = new HashSet();
	Set v3 = v1.entrySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v1;
}
-----
depth : 2
public void refreshActiveSlots(Set p1){
	HashSet v0 = new HashSet();
	Set v2 = this.mSlotMap.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	Iterator v5 = v0.iterator();
	boolean v6 = v5.hasNext();
	Iterator v7 = p1.iterator();
	boolean v8 = v7.hasNext();
	p0.saveSlotMap();
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	p0.updateRegistration();
	return;
}
-----
depth : 2
public Context -$$Nest$fgetmContext(LockSettingsService p1){
	return this.mContext;
}
-----
depth : 2
public void updateRegistration(){
	boolean v1 = p0.isProvisioned();
	Context v2 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v3 = v2.getContentResolver();
	v3.registerContentObserver(this.mDeviceProvisionedUri, 0, p0);
	this.mRegistered = (v1 ^ 1);
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 2
public boolean isFetched(int p1){
	boolean v1 = p0.contains(2, """", p1);
	return v1;
}
-----
depth : 2
public void setFetched(int p1){
	p0.put(2, ""isFetched"", ""true"", p1);
	return;
}
-----
depth : 2
public int -$$Nest$mgetVersion(LockSettingsStorage$Cache p1){
	int v1 = p1.getVersion();
	return v1;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","2","conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
6 = new <Application,Ljava/util/HashSet>@9,
conditional branch(eq, to iindex=-1) 13,14,
return 6,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
3 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
conditional branch(ne, to iindex=-1) 3,4,
5 = new <Application,Ljava/util/HashSet>@12,
7 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
conditional branch(eq, to iindex=-1) 13,4,
conditional branch(eq, to iindex=-1) 35,4,
conditional branch(eq, to iindex=-1) 49,4,
return,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
return 2,
conditional branch(eq, to iindex=-1) 6,7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, updateRegistration()V > 1 @12 exception:15,
5 = binaryop(xor) 3 , 4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, mRegistered, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 5,7,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, mDeviceProvisionedUri, <Application,Landroid/net/Uri> > 1,
goto (from iindex= 15 to iindex = 14),
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, mRegistered, <Primordial,Z> > = 5,
return,
goto (from iindex= 7 to iindex = 17),
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
return,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
return 3,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
conditional branch(eq, to iindex=-1) 26,7,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 2
public IWeaver getWeaverService(){
	IWeaver v1 = IWeaver.getService(1);
	int v2 = Slog.i(""SyntheticPasswordManager"", ""Device does not support weaver"");
	return 0;
}
-----
depth : 2
public Set getUsedWeaverSlots(){
	Map v1 = this.mStorage.listSyntheticPasswordHandlesForAllUsers(""weaver"");
	HashSet v1 = new HashSet();
	Set v3 = v1.entrySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v1;
}
-----
depth : 2
public void refreshActiveSlots(Set p1){
	HashSet v0 = new HashSet();
	Set v2 = this.mSlotMap.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	Iterator v5 = v0.iterator();
	boolean v6 = v5.hasNext();
	Iterator v7 = p1.iterator();
	boolean v8 = v7.hasNext();
	p0.saveSlotMap();
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	p0.updateRegistration();
	return;
}
-----
depth : 2
public Context -$$Nest$fgetmContext(LockSettingsService p1){
	return this.mContext;
}
-----
depth : 2
public void updateRegistration(){
	boolean v1 = p0.isProvisioned();
	Context v2 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v3 = v2.getContentResolver();
	v3.registerContentObserver(this.mDeviceProvisionedUri, 0, p0);
	this.mRegistered = (v1 ^ 1);
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 2
public boolean isFetched(int p1){
	boolean v1 = p0.contains(2, """", p1);
	return v1;
}
-----
depth : 2
public void setFetched(int p1){
	p0.put(2, ""isFetched"", ""true"", p1);
	return;
}
-----
depth : 2
public int -$$Nest$mgetVersion(LockSettingsStorage$Cache p1){
	int v1 = p1.getVersion();
	return v1;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","2","conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
return 4,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
6 = new <Application,Ljava/util/HashSet>@9,
conditional branch(eq, to iindex=-1) 13,14,
return 6,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
3 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
conditional branch(ne, to iindex=-1) 3,4,
5 = new <Application,Ljava/util/HashSet>@12,
7 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
conditional branch(eq, to iindex=-1) 13,4,
conditional branch(eq, to iindex=-1) 35,4,
conditional branch(eq, to iindex=-1) 49,4,
return,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
return 2,
conditional branch(eq, to iindex=-1) 6,7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, updateRegistration()V > 1 @12 exception:15,
5 = binaryop(xor) 3 , 4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, mRegistered, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 5,7,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, mDeviceProvisionedUri, <Application,Landroid/net/Uri> > 1,
goto (from iindex= 15 to iindex = 14),
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, mRegistered, <Primordial,Z> > = 5,
return,
goto (from iindex= 7 to iindex = 17),
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
return,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
return 3,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
conditional branch(eq, to iindex=-1) 26,7,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 2
public IWeaver getWeaverService(){
	IWeaver v1 = IWeaver.getService(1);
	return v1;
}
-----
depth : 2
public Set getUsedWeaverSlots(){
	Map v1 = this.mStorage.listSyntheticPasswordHandlesForAllUsers(""weaver"");
	HashSet v1 = new HashSet();
	Set v3 = v1.entrySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v1;
}
-----
depth : 2
public void refreshActiveSlots(Set p1){
	HashSet v0 = new HashSet();
	Set v2 = this.mSlotMap.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	Iterator v5 = v0.iterator();
	boolean v6 = v5.hasNext();
	Iterator v7 = p1.iterator();
	boolean v8 = v7.hasNext();
	p0.saveSlotMap();
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	p0.updateRegistration();
	return;
}
-----
depth : 2
public Context -$$Nest$fgetmContext(LockSettingsService p1){
	return this.mContext;
}
-----
depth : 2
public void updateRegistration(){
	boolean v1 = p0.isProvisioned();
	Context v2 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v3 = v2.getContentResolver();
	v3.registerContentObserver(this.mDeviceProvisionedUri, 0, p0);
	this.mRegistered = (v1 ^ 1);
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 2
public boolean isFetched(int p1){
	boolean v1 = p0.contains(2, """", p1);
	return v1;
}
-----
depth : 2
public void setFetched(int p1){
	p0.put(2, ""isFetched"", ""true"", p1);
	return;
}
-----
depth : 2
public int -$$Nest$mgetVersion(LockSettingsStorage$Cache p1){
	int v1 = p1.getVersion();
	return v1;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","0","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","1","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mSnapshotStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, get(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 5,4 @9 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
return 7,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
depth : 1
public KeyChainSnapshot getKeyChainSnapshot(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	KeyChainSnapshot v3 = this.mSnapshotStorage.get(v2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mSnapshotStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, get(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 5,4 @9 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, mSnapshotByUid, <Application,Landroid/util/SparseArray> > 1,
6 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>5 <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 1,
return 6,
conditional branch(eq, to iindex=-1) 7,8,
return 7,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
depth : 1
public KeyChainSnapshot getKeyChainSnapshot(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	KeyChainSnapshot v3 = this.mSnapshotStorage.get(v2);
	return v3;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public KeyChainSnapshot get(int p1){
	Object v1 = this.mSnapshotByUid.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mSnapshotStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, get(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 5,4 @9 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, mSnapshotByUid, <Application,Landroid/util/SparseArray> > 1,
6 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>5 <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>,
conditional branch(eq, to iindex=-1) 6,7,
10 = getCaughtException ,
12 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
15 = new <Application,[Ljava/lang/Object>@2714 ,
arraystore 15[7] = 17,
monitorexit 1,
return 7,
conditional branch(eq, to iindex=-1) 7,8,
return 7,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
depth : 1
public KeyChainSnapshot getKeyChainSnapshot(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	KeyChainSnapshot v3 = this.mSnapshotStorage.get(v2);
	return v3;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public KeyChainSnapshot get(int p1){
	Object v1 = this.mSnapshotByUid.get(p1);
	KeyChainSnapshot v2 = p0.readFromDisk(p1);
	Object v2 = new Object(1);
	Integer v3 = Integer.valueOf(p1);
	String v4 = String.format(Locale.US, ""Error reading snapshot for %d from disk"", v2);
	int v5 = Log.e(""RecoverySnapshotStorage"", v4, caughtException);
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mSnapshotStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, get(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 5,4 @9 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, mSnapshotByUid, <Application,Landroid/util/SparseArray> > 1,
6 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>5 <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 1,
return 9,
conditional branch(eq, to iindex=-1) 7,8,
return 7,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
depth : 1
public KeyChainSnapshot getKeyChainSnapshot(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	KeyChainSnapshot v3 = this.mSnapshotStorage.get(v2);
	return v3;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public KeyChainSnapshot get(int p1){
	Object v1 = this.mSnapshotByUid.get(p1);
	KeyChainSnapshot v2 = p0.readFromDisk(p1);
	return v2;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","0","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 27,25 @30 exception:28,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, importKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B[B)V > 40,29,25,23,2,3,4 @41 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 42,25,23,2,3 @46 exception:43,
52 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,25,23,2 @49 exception:51,
return 52,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 27,25 @30 exception:28,
10 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
12 = new <Application,[Ljava/lang/Object>@1411 ,
arraystore 12[13] = 15,
return 24,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, importKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B[B)V > 40,29,25,23,2,3,4 @41 exception:41,
8 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@0,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = binaryop(lt) 15 , 16,
conditional branch(eq, to iindex=-1) 17,19,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
return,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 42,25,23,2,3 @46 exception:43,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
arraystore 8[11] = 10,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
arraystore 8[19] = 18,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
37 = new <Application,[Ljava/lang/String>@6614 ,
41 = new <Application,[Ljava/lang/String>@7614 ,
return,
52 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,25,23,2 @49 exception:51,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
return 7,
return 52,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	Object v2 = new Object(1);
	Integer v3 = Integer.valueOf(p1);
	String v4 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v2);
	int v5 = Log.i(""PlatformKeyManager"", v4);
	p0.regenerate(p1);
	PlatformEncryptionKey v7 = p0.getEncryptKeyInternal(p1);
	return v7;
}
-----
depth : 2
public void importKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5, byte[] p6){
	SecretKeySpec v0 = new SecretKeySpec(p5,""AES"");
	WrappedKey v2 = WrappedKey.fromSecretKey(p1, v0, p6);
	long v3 = this.mDatabase.insertKey(p2, p3, p4, v2);
	long v4 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	return;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 27,25 @30 exception:28,
10 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
12 = new <Application,[Ljava/lang/Object>@1411 ,
arraystore 12[13] = 15,
return 24,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, importKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B[B)V > 40,29,25,23,2,3,4 @41 exception:41,
8 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@0,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = binaryop(lt) 15 , 16,
conditional branch(eq, to iindex=-1) 17,19,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
return,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 42,25,23,2,3 @46 exception:43,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
arraystore 8[11] = 10,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
arraystore 8[19] = 18,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
37 = new <Application,[Ljava/lang/String>@6614 ,
41 = new <Application,[Ljava/lang/String>@7614 ,
return,
52 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,25,23,2 @49 exception:51,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
return 7,
return 52,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	PlatformEncryptionKey v3 = p0.getEncryptKeyInternal(p1);
	Object v3 = new Object(1);
	Integer v4 = Integer.valueOf(p1);
	String v5 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v3);
	int v6 = Log.i(""PlatformKeyManager"", v5);
	p0.regenerate(p1);
	PlatformEncryptionKey v8 = p0.getEncryptKeyInternal(p1);
	return v8;
}
-----
depth : 2
public void importKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5, byte[] p6){
	SecretKeySpec v0 = new SecretKeySpec(p5,""AES"");
	WrappedKey v2 = WrappedKey.fromSecretKey(p1, v0, p6);
	long v3 = this.mDatabase.insertKey(p2, p3, p4, v2);
	long v4 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	return;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 27,25 @30 exception:28,
return 7,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, importKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B[B)V > 40,29,25,23,2,3,4 @41 exception:41,
8 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@0,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = binaryop(lt) 15 , 16,
conditional branch(eq, to iindex=-1) 17,19,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
return,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 42,25,23,2,3 @46 exception:43,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
arraystore 8[11] = 10,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
arraystore 8[19] = 18,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
37 = new <Application,[Ljava/lang/String>@6614 ,
41 = new <Application,[Ljava/lang/String>@7614 ,
return,
52 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,25,23,2 @49 exception:51,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
return 7,
return 52,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	PlatformEncryptionKey v3 = p0.getEncryptKeyInternal(p1);
	return v3;
}
-----
depth : 2
public void importKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5, byte[] p6){
	SecretKeySpec v0 = new SecretKeySpec(p5,""AES"");
	WrappedKey v2 = WrappedKey.fromSecretKey(p1, v0, p6);
	long v3 = this.mDatabase.insertKey(p2, p3, p4, v2);
	long v4 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	return;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getRecoveryStatus()Ljava/util/Map;","0","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoveryStatus()Ljava/util/Map; > 2 @2 exception:3,
return 4,","depth : 0
public Map getRecoveryStatus(){
	Map v1 = this.mRecoverableKeyStoreManager.getRecoveryStatus();
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoveryStatus()Ljava/util/Map;","1","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoveryStatus()Ljava/util/Map; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getStatusForAllKeys(I)Ljava/util/Map; > 3,5 @9 exception:6,
return 7,
return 4,","depth : 0
public Map getRecoveryStatus(){
	Map v1 = this.mRecoverableKeyStoreManager.getRecoveryStatus();
	return v1;
}
-----
depth : 1
public Map getRecoveryStatus(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	Map v3 = this.mDatabase.getStatusForAllKeys(v2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoveryStatus()Ljava/util/Map;","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoveryStatus()Ljava/util/Map; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getStatusForAllKeys(I)Ljava/util/Map; > 3,5 @9 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
9 = new <Application,[Ljava/lang/String>@1310 ,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
20 = new <Application,Ljava/util/HashMap>@39,
conditional branch(eq, to iindex=-1) 23,15,
return 20,
return 7,
return 4,","depth : 0
public Map getRecoveryStatus(){
	Map v1 = this.mRecoverableKeyStoreManager.getRecoveryStatus();
	return v1;
}
-----
depth : 1
public Map getRecoveryStatus(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	Map v3 = this.mDatabase.getStatusForAllKeys(v2);
	return v3;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public Map getStatusForAllKeys(int p1){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(3);
	String v1 = new String(1);
	String v2 = Integer.toString(p1);
	Cursor v3 = v1.query(""keys"", v1, ""uid = ?"", v1, 0, 0, 0);
	HashMap v3 = new HashMap();
	boolean v5 = v3.moveToNext();
	v3.close();
	return v3;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","importKey(Ljava/lang/String;[B)Ljava/lang/String;","0","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKey(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
return 6,","depth : 0
public String importKey(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.importKey(p1, p2);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKey(Ljava/lang/String;[B)Ljava/lang/String;","1","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKey(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 1,2,3,4 @1 exception:5,
return 6,
return 6,","depth : 0
public String importKey(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.importKey(p1, p2);
	return v1;
}
-----
depth : 1
public String importKey(String p1, byte[] p2){
	String v1 = p0.importKeyWithMetadata(p1, p2, 0);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKey(Ljava/lang/String;[B)Ljava/lang/String;","2","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKey(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 1,2,3,4 @1 exception:5,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
return 52,
return 6,
return 6,","depth : 0
public String importKey(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.importKey(p1, p2);
	return v1;
}
-----
depth : 1
public String importKey(String p1, byte[] p2){
	String v1 = p0.importKeyWithMetadata(p1, p2, 0);
	return v1;
}
-----
depth : 2
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
goto (from iindex= 16 to iindex = 5),
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @31 exception:17,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
return 1,
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
4 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1>@2,
return,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	LockscreenCredential v3 = LockscreenCredential.createNone();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 1
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 1
public void notifySeparateProfileChallengeChanged(int p1){
	LockSettingsService$$ExternalSyntheticLambda1 v0 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
goto (from iindex= 16 to iindex = 5),
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
4 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1>@2,
return,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 1
public void notifySeparateProfileChallengeChanged(int p1){
	LockSettingsService$$ExternalSyntheticLambda1 v0 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
goto (from iindex= 16 to iindex = 5),
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
8 = getCaughtException ,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
return,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	[resolveCodeAbst] + 8 = getCaughtException .printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
goto (from iindex= 16 to iindex = 5),
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
8 = getCaughtException ,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
return,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	[resolveCodeAbst] + 8 = getCaughtException .printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @31 exception:17,
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
8 = getCaughtException ,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
return,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	LockscreenCredential v3 = LockscreenCredential.createNone();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	[resolveCodeAbst] + 8 = getCaughtException .printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getKey(Ljava/lang/String;)Ljava/lang/String;","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
return 5,","depth : 0
public String getKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKey(Ljava/lang/String;)Ljava/lang/String;","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,10,8,2 @16 exception:11,
return 12,
return 5,","depth : 0
public String getKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
	return v1;
}
-----
depth : 1
public String getKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	String v5 = p0.getAlias(v4, v3, p1);
	return v5;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKey(Ljava/lang/String;)Ljava/lang/String;","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,10,8,2 @16 exception:11,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
return 7,
return 12,
return 5,","depth : 0
public String getKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
	return v1;
}
-----
depth : 1
public String getKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	String v5 = p0.getAlias(v4, v3, p1);
	return v5;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V > 4,2 @5 exception:5,
return,","depth : 0
public void registerStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.registerStrongAuthTracker(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V > 4,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 6 @7 exception:7,
return,
return,","depth : 0
public void registerStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.registerStrongAuthTracker(p1);
	return;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public void registerStrongAuthTracker(IStrongAuthTracker p1){
	Message v1 = this.mHandler.obtainMessage(2, p1);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenActive(JI)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isEscrowTokenActive(JI)Z > 1,2,3 @7 exception:7,
return 8,","depth : 0
public boolean isWeakEscrowTokenActive(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.isEscrowTokenActive(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenActive(JI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isEscrowTokenActive(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 5,2,3 @5 exception:6,
monitorexit 4,
return 7,
return 8,","depth : 0
public boolean isWeakEscrowTokenActive(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.isEscrowTokenActive(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean isEscrowTokenActive(long p1, int p2){
	boolean v1 = this.mSpManager.existsHandle(p1, p2);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenActive(JI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isEscrowTokenActive(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 5,2,3 @5 exception:6,
return 6,
monitorexit 4,
return 7,
return 8,","depth : 0
public boolean isWeakEscrowTokenActive(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.isEscrowTokenActive(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean isEscrowTokenActive(long p1, int p2){
	boolean v1 = this.mSpManager.existsHandle(p1, p2);
	return v1;
}
-----
depth : 2
public boolean existsHandle(long p1, int p2){
	boolean v1 = p0.hasState(""spblob"", p1, p2);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setBoolean(Ljava/lang/String;ZI)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,","depth : 0
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setBoolean(Ljava/lang/String;ZI)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 3,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,8,4 @7 exception:9,
return,
return,","depth : 0
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setBoolean(String p1, boolean p2, int p3){
	p0.setString(p1, phiInstruction, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setBoolean(Ljava/lang/String;ZI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 3,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,8,4 @7 exception:9,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 14,6,
return,
return,
return,","depth : 0
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setBoolean(String p1, boolean p2, int p3){
	p0.setString(p1, phiInstruction, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setBoolean(Ljava/lang/String;ZI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 3,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,8,4 @7 exception:9,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 14,6,
return,
return,
return,","depth : 0
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setBoolean(String p1, boolean p2, int p3){
	p0.setString(p1, phiInstruction, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","0","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","1","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","1","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
conditional branch(eq, to iindex=-1) 9,5,
conditional branch(ne, to iindex=-1) 12,5,
conditional branch(eq, to iindex=-1) 15,5,
goto (from iindex= 15 to iindex = 3),
23 = phi  3,5,20,
return 23,
monitorexit 3,
return 8,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	boolean v3 = v1.equals(""1"");
	boolean v4 = v1.equals(""true"");
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
conditional branch(eq, to iindex=-1) 9,5,
conditional branch(ne, to iindex=-1) 12,5,
conditional branch(eq, to iindex=-1) 15,5,
goto (from iindex= 17 to iindex = 2),
23 = phi  3,5,20,
return 23,
monitorexit 3,
return 8,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	boolean v3 = v1.equals(""1"");
	boolean v4 = v1.equals(""true"");
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
conditional branch(eq, to iindex=-1) 9,5,
goto (from iindex= 6 to iindex = 22),
23 = phi  3,5,20,
return 23,
monitorexit 3,
return 8,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	return phiInstruction;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","removeWeakEscrowToken(JI)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeEscrowToken(JI)Z > 1,2,3 @7 exception:7,
return 8,","depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeWeakEscrowToken(JI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeEscrowToken(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @3 exception:5,
7 = binaryop(lt) 2 , 6,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, removePendingToken(JI)Z > 9,2,3 @23 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 13,2,3 @34 exception:14,
conditional branch(eq, to iindex=-1) 15,8,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyTokenBasedSyntheticPassword(JI)V > 16,2,3 @42 exception:17,
monitorexit 4,
return 12,
return 8,","depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean removeEscrowToken(long p1, int p2){
	long v1 = p0.getSyntheticPasswordHandleLocked(p2);
	boolean v2 = this.mSpManager.removePendingToken(p1, p2);
	boolean v3 = this.mSpManager.existsHandle(p1, p2);
	this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
	return 1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeWeakEscrowToken(JI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeEscrowToken(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @3 exception:5,
return 6,
7 = binaryop(lt) 2 , 6,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, removePendingToken(JI)Z > 9,2,3 @23 exception:10,
4 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
15 = checkcast <Application,Landroid/util/ArrayMap>14 <Application,Landroid/util/ArrayMap>,
conditional branch(eq, to iindex=-1) 19,9,
21 = phi  9,20,
return 21,
conditional branch(eq, to iindex=-1) 11,8,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 13,2,3 @34 exception:14,
return 6,
conditional branch(eq, to iindex=-1) 15,8,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyTokenBasedSyntheticPassword(JI)V > 16,2,3 @42 exception:17,
12 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 8,
conditional branch(ne, to iindex=-1) 12,13,
return,
monitorexit 4,
return 12,
return 8,","depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean removeEscrowToken(long p1, int p2){
	long v1 = p0.getSyntheticPasswordHandleLocked(p2);
	boolean v2 = this.mSpManager.removePendingToken(p1, p2);
	boolean v3 = this.mSpManager.existsHandle(p1, p2);
	this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
	return 1;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean removePendingToken(long p1, int p2){
	Integer v1 = Integer.valueOf(p2);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p2);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.remove(v5);
	return phiInstruction;
}
-----
depth : 2
public boolean existsHandle(long p1, int p2){
	boolean v1 = p0.hasState(""spblob"", p1, p2);
	return v1;
}
-----
depth : 2
public void destroyTokenBasedSyntheticPassword(long p1, int p2){
	byte[] v1 = p0.loadState(""spblob"", p1, p2);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	p0.destroySyntheticPassword(p1, p2);
	p0.destroyState(""secdis"", p1, p2);
	p0.notifyWeakEscrowTokenRemovedListeners(p1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeWeakEscrowToken(JI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeEscrowToken(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @3 exception:5,
return 6,
7 = binaryop(lt) 2 , 6,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, removePendingToken(JI)Z > 9,2,3 @23 exception:10,
4 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
15 = checkcast <Application,Landroid/util/ArrayMap>14 <Application,Landroid/util/ArrayMap>,
conditional branch(eq, to iindex=-1) 19,9,
21 = phi  9,20,
return 21,
conditional branch(eq, to iindex=-1) 11,8,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 13,2,3 @34 exception:14,
return 6,
conditional branch(eq, to iindex=-1) 15,8,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyTokenBasedSyntheticPassword(JI)V > 16,2,3 @42 exception:17,
12 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 8,
conditional branch(ne, to iindex=-1) 12,13,
return,
monitorexit 4,
return 12,
return 8,","depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean removeEscrowToken(long p1, int p2){
	long v1 = p0.getSyntheticPasswordHandleLocked(p2);
	boolean v2 = this.mSpManager.removePendingToken(p1, p2);
	boolean v3 = this.mSpManager.existsHandle(p1, p2);
	this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
	return 1;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean removePendingToken(long p1, int p2){
	Integer v1 = Integer.valueOf(p2);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p2);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.remove(v5);
	return phiInstruction;
}
-----
depth : 2
public boolean existsHandle(long p1, int p2){
	boolean v1 = p0.hasState(""spblob"", p1, p2);
	return v1;
}
-----
depth : 2
public void destroyTokenBasedSyntheticPassword(long p1, int p2){
	byte[] v1 = p0.loadState(""spblob"", p1, p2);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	p0.destroySyntheticPassword(p1, p2);
	p0.destroyState(""secdis"", p1, p2);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
return 26,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
return 26,
conditional branch(ne, to iindex=-1) 14,15,
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = conversion(I) 7,
return 8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
return 6,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
conditional branch(eq, to iindex=-1) 3,4,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
return 26,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean hasPattern(int p1){
	String v1 = p0.getLockPatternFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public boolean hasPassword(int p1){
	String v1 = p0.getLockPasswordFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = conversion(I) 7,
return 8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
return 6,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
conditional branch(eq, to iindex=-1) 3,4,
return 19,
return 26,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean hasPattern(int p1){
	String v1 = p0.getLockPatternFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public boolean hasPassword(int p1){
	String v1 = p0.getLockPasswordFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	return 4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = conversion(I) 7,
return 8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
return 6,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
conditional branch(eq, to iindex=-1) 3,4,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
return 26,
conditional branch(ne, to iindex=-1) 14,15,
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = lock_pattern_autolock.equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean hasPattern(int p1){
	String v1 = p0.getLockPatternFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public boolean hasPassword(int p1){
	String v1 = p0.getLockPasswordFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getRecoverySecretTypes()[I","0","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoverySecretTypes()[I > 2 @2 exception:3,
return 4,","depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoverySecretTypes()[I","1","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoverySecretTypes()[I > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 3,5,7 @13 exception:8,
return 9,
return 4,","depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
depth : 1
public [I getRecoverySecretTypes(){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	[I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3);
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoverySecretTypes()[I","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoverySecretTypes()[I > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 3,5,7 @13 exception:8,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
11 = new <Application,[Ljava/lang/String>@1712 ,
14 = new <Application,[Ljava/lang/String>@2213 ,
arraystore 14[17] = 16,
arraystore 14[20] = 19,
conditional branch(ne, to iindex=-1) 26,17,
conditional branch(le, to iindex=-1) 26,20,
conditional branch(eq, to iindex=-1) 33,17,
conditional branch(eq, to iindex=-1) 37,17,
41 = arraylength 40,
42 = new <Primordial,[I>@14741 ,
68 = phi  65,17,
43 = arraylength 40,
conditional branch(ge, to iindex=-1) 68,43,
return 42,
return 9,
return 4,","depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
depth : 1
public [I getRecoverySecretTypes(){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	[I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3);
	return v4;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0);
	int v5 = v4.getCount();
	boolean v6 = v4.moveToFirst();
	int v7 = v4.getColumnIndexOrThrow(""secret_types"");
	boolean v8 = v4.isNull(v7);
	String v9 = v4.getString(v7);
	boolean v10 = TextUtils.isEmpty(v9);
	String v11 = v9.split("","");
	[I v11 = new [I(v11.length);
	v4.close();
	return v11;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoverySecretTypes()[I","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoverySecretTypes()[I > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 3,5,7 @13 exception:8,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
11 = new <Application,[Ljava/lang/String>@1712 ,
14 = new <Application,[Ljava/lang/String>@2213 ,
arraystore 14[17] = 16,
arraystore 14[20] = 19,
conditional branch(ne, to iindex=-1) 26,17,
conditional branch(le, to iindex=-1) 26,20,
77 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
80 = new <Application,[Ljava/lang/Object>@7279 ,
arraystore 80[17] = 82,
arraystore 80[20] = 84,
arraystore 80[13] = 86,
91 = new <Primordial,[I>@9917 ,
return 91,
return 9,
return 4,","depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
depth : 1
public [I getRecoverySecretTypes(){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	[I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3);
	return v4;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0);
	int v5 = v4.getCount();
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(v5);
	Integer v7 = Integer.valueOf(p1);
	Integer v8 = Integer.valueOf(p2);
	String v9 = String.format(Locale.US, ""%d deviceId entries found for userId=%d uid=%d. Should only ever be 0 or 1."", v5);
	int v10 = Log.wtf(""RecoverableKeyStoreDb"", v9);
	[I v10 = new [I(0);
	v4.close();
	return v10;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","userPresent(I)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportUnlock(I)V > 4,2 @5 exception:5,
return,","depth : 0
public void userPresent(int p1){
	p0.checkWritePermission(p1);
	this.mStrongAuth.reportUnlock(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","userPresent(I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportUnlock(I)V > 4,2 @5 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, requireStrongAuth(II)V > 1,3,2 @1 exception:4,
return,
return,","depth : 0
public void userPresent(int p1){
	p0.checkWritePermission(p1);
	this.mStrongAuth.reportUnlock(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void reportUnlock(int p1){
	p0.requireStrongAuth(0, p1);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","closeSession(Ljava/lang/String;)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, closeSession(Ljava/lang/String;)V > 3,2 @2 exception:4,
return,","depth : 0
public void closeSession(String p1){
	this.mRecoverableKeyStoreManager.closeSession(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","closeSession(Ljava/lang/String;)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, closeSession(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(ILjava/lang/String;)V > 7,9,2 @14 exception:10,
return,
return,","depth : 0
public void closeSession(String p1){
	this.mRecoverableKeyStoreManager.closeSession(p1);
	return;
}
-----
depth : 1
public void closeSession(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""invalid session"");
	int v3 = Binder.getCallingUid();
	this.mRecoverySessionStorage.remove(v3, p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","closeSession(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, closeSession(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(ILjava/lang/String;)V > 7,9,2 @14 exception:10,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
conditional branch(ne, to iindex=-1) 6,7,
return,
return,
return,","depth : 0
public void closeSession(String p1){
	this.mRecoverableKeyStoreManager.closeSession(p1);
	return;
}
-----
depth : 1
public void closeSession(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""invalid session"");
	int v3 = Binder.getCallingUid();
	this.mRecoverySessionStorage.remove(v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public void remove(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","closeSession(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, closeSession(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(ILjava/lang/String;)V > 7,9,2 @14 exception:10,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
11 = checkcast <Application,Ljava/util/ArrayList>10 <Application,Ljava/util/ArrayList>,
12 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$$ExternalSyntheticLambda0>@17,
return,
return,
return,","depth : 0
public void closeSession(String p1){
	this.mRecoverableKeyStoreManager.closeSession(p1);
	return;
}
-----
depth : 1
public void closeSession(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""invalid session"");
	int v3 = Binder.getCallingUid();
	this.mRecoverySessionStorage.remove(v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public void remove(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	Object v2 = this.mSessionsByUid.get(p1);
	RecoverySessionStorage$$ExternalSyntheticLambda0 v2 = new RecoverySessionStorage$$ExternalSyntheticLambda0(p2);
	boolean v4 = v2.removeIf(v2);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","scheduleNonStrongBiometricIdleTimeout(I)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkBiometricPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, scheduleNonStrongBiometricIdleTimeout(I)V > 4,2 @5 exception:5,
return,","depth : 0
public void scheduleNonStrongBiometricIdleTimeout(int p1){
	p0.checkBiometricPermission();
	this.mStrongAuth.scheduleNonStrongBiometricIdleTimeout(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","scheduleNonStrongBiometricIdleTimeout(I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkBiometricPermission()V > 1 @0 exception:3,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, scheduleNonStrongBiometricIdleTimeout(I)V > 4,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @9 exception:8,
return,
return,","depth : 0
public void scheduleNonStrongBiometricIdleTimeout(int p1){
	p0.checkBiometricPermission();
	this.mStrongAuth.scheduleNonStrongBiometricIdleTimeout(p1);
	return;
}
-----
depth : 1
public void checkBiometricPermission(){
	return;
}
-----
depth : 1
public void scheduleNonStrongBiometricIdleTimeout(int p1){
	Message v1 = this.mHandler.obtainMessage(9, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","reportSuccessfulBiometricUnlock(ZI)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkBiometricPermission()V > 1 @0 exception:4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulBiometricUnlock(ZI)V > 5,2,3 @5 exception:6,
return,","depth : 0
public void reportSuccessfulBiometricUnlock(boolean p1, int p2){
	p0.checkBiometricPermission();
	this.mStrongAuth.reportSuccessfulBiometricUnlock(p1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","reportSuccessfulBiometricUnlock(ZI)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkBiometricPermission()V > 1 @0 exception:4,
return,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulBiometricUnlock(ZI)V > 5,2,3 @5 exception:6,
conditional branch(eq, to iindex=-1) 2,4,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 13 @11 exception:14,
goto (from iindex= 7 to iindex = 11),
return,
return,","depth : 0
public void reportSuccessfulBiometricUnlock(boolean p1, int p2){
	p0.checkBiometricPermission();
	this.mStrongAuth.reportSuccessfulBiometricUnlock(p1, p2);
	return;
}
-----
depth : 1
public void checkBiometricPermission(){
	return;
}
-----
depth : 1
public void reportSuccessfulBiometricUnlock(boolean p1, int p2){
	Message v1 = this.mHandler.obtainMessage(8, p2, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setRecoveryStatus(Ljava/lang/String;I)V","0","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoveryStatus(Ljava/lang/String;I)V > 4,2,3 @2 exception:5,
return,","depth : 0
public void setRecoveryStatus(String p1, int p2){
	this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoveryStatus(Ljava/lang/String;I)V","1","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoveryStatus(Ljava/lang/String;I)V > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoveryStatus(ILjava/lang/String;I)I > 8,10,2,3 @14 exception:11,
13 = conversion(J) 12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,16,
return,
return,","depth : 0
public void setRecoveryStatus(String p1, int p2){
	this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
	return;
}
-----
depth : 1
public void setRecoveryStatus(String p1, int p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = this.mDatabase.setRecoveryStatus(v3, p1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoveryStatus(Ljava/lang/String;I)V","2","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoveryStatus(Ljava/lang/String;I)V > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoveryStatus(ILjava/lang/String;I)I > 8,10,2,3 @14 exception:11,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
8 = new <Application,Landroid/content/ContentValues>@6,
15 = new <Application,[Ljava/lang/String>@2214 ,
arraystore 15[18] = 17,
arraystore 15[19] = 3,
return 23,
13 = conversion(J) 12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,16,
return,
return,","depth : 0
public void setRecoveryStatus(String p1, int p2){
	this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
	return;
}
-----
depth : 1
public void setRecoveryStatus(String p1, int p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = this.mDatabase.setRecoveryStatus(v3, p1, p2);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public int setRecoveryStatus(int p1, String p2, int p3){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	Integer v3 = Integer.valueOf(p3);
	v1.put(""recovery_status"", v3);
	String v4 = new String(2);
	String v5 = String.valueOf(p1);
	int v6 = v1.update(""keys"", v1, ""uid = ? AND alias = ?"", v4);
	return v6;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setServerParams([B)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setServerParams([B)V > 3,2 @2 exception:4,
return,","depth : 0
public void setServerParams(byte[] p1){
	this.mRecoverableKeyStoreManager.setServerParams(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setServerParams([B)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setServerParams([B)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getServerParams(II)[B > 8,5,7 @13 exception:9,
conditional branch(eq, to iindex=-1) 12,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setServerParams(II[B)J > 15,5,7,2 @33 exception:16,
19 = binaryop(lt) 17 , 18,
conditional branch(lt, to iindex=-1) 19,14,
conditional branch(ne, to iindex=-1) 10,14,
24 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 24,5,7 @53 exception:25,
conditional branch(eq, to iindex=-1) 26,14,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 30,5,7,31 @62 exception:32,
goto (from iindex= 34 to iindex = 6),
return,
return,","depth : 0
public void setServerParams(byte[] p1){
	this.mRecoverableKeyStoreManager.setServerParams(p1);
	return;
}
-----
depth : 1
public void setServerParams(byte[] p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	byte[] v4 = this.mDatabase.getServerParams(v2, v3);
	boolean v5 = Arrays.equals(p1, v4);
	long v6 = this.mDatabase.setServerParams(v2, v3, p1);
	Long v7 = this.mDatabase.getSnapshotVersion(v2, v3);
	long v8 = this.mDatabase.setShouldCreateSnapshot(v2, v3, 1);
	int v9 = Log.i(""RecoverableKeyStoreMgr"", ""Updated server params. Snapshot must be updated"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setServerParams([B)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setServerParams([B)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getServerParams(II)[B > 8,5,7 @13 exception:9,
return 6,
conditional branch(eq, to iindex=-1) 12,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setServerParams(II[B)J > 15,5,7,2 @33 exception:16,
return 7,
19 = binaryop(lt) 17 , 18,
conditional branch(lt, to iindex=-1) 19,14,
conditional branch(ne, to iindex=-1) 10,14,
24 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 24,5,7 @53 exception:25,
return 6,
conditional branch(eq, to iindex=-1) 26,14,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 30,5,7,31 @62 exception:32,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
return 11,
goto (from iindex= 34 to iindex = 6),
return,
return,","depth : 0
public void setServerParams(byte[] p1){
	this.mRecoverableKeyStoreManager.setServerParams(p1);
	return;
}
-----
depth : 1
public void setServerParams(byte[] p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	byte[] v4 = this.mDatabase.getServerParams(v2, v3);
	boolean v5 = Arrays.equals(p1, v4);
	long v6 = this.mDatabase.setServerParams(v2, v3, p1);
	Long v7 = this.mDatabase.getSnapshotVersion(v2, v3);
	long v8 = this.mDatabase.setShouldCreateSnapshot(v2, v3, 1);
	int v9 = Log.i(""RecoverableKeyStoreMgr"", ""Updated server params. Snapshot must be updated"");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public byte[] getServerParams(int p1, int p2){
	byte[] v1 = p0.getBytes(p1, p2, ""server_params"");
	return v1;
}
-----
depth : 2
public long setServerParams(int p1, int p2, byte[] p3){
	long v1 = p0.setBytes(p1, p2, ""server_params"", p3);
	return v1;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, ""snapshot_version"");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setServerParams([B)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setServerParams([B)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getServerParams(II)[B > 8,5,7 @13 exception:9,
return 6,
conditional branch(eq, to iindex=-1) 12,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setServerParams(II[B)J > 15,5,7,2 @33 exception:16,
return 7,
19 = binaryop(lt) 17 , 18,
conditional branch(lt, to iindex=-1) 19,14,
conditional branch(ne, to iindex=-1) 10,14,
24 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 24,5,7 @53 exception:25,
return 6,
conditional branch(eq, to iindex=-1) 26,14,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 30,5,7,31 @62 exception:32,
conditional branch(eq, to iindex=-1) 4,5,
8 = phi  7,6,
return 11,
goto (from iindex= 34 to iindex = 6),
return,
return,","depth : 0
public void setServerParams(byte[] p1){
	this.mRecoverableKeyStoreManager.setServerParams(p1);
	return;
}
-----
depth : 1
public void setServerParams(byte[] p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	byte[] v4 = this.mDatabase.getServerParams(v2, v3);
	boolean v5 = Arrays.equals(p1, v4);
	long v6 = this.mDatabase.setServerParams(v2, v3, p1);
	Long v7 = this.mDatabase.getSnapshotVersion(v2, v3);
	long v8 = this.mDatabase.setShouldCreateSnapshot(v2, v3, 1);
	int v9 = Log.i(""RecoverableKeyStoreMgr"", ""Updated server params. Snapshot must be updated"");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public byte[] getServerParams(int p1, int p2){
	byte[] v1 = p0.getBytes(p1, p2, ""server_params"");
	return v1;
}
-----
depth : 2
public long setServerParams(int p1, int p2, byte[] p3){
	long v1 = p0.setBytes(p1, p2, ""server_params"", p3);
	return v1;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, ""snapshot_version"");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
return 32,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
return 40,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
return,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 1
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
return 32,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 19,8,
return 17,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	return v4;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 1
public int getResponseCode(){
	return this.mResponseCode;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
return 2,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
28 = new <Application,[Ljava/lang/String>@5729 ,
37 = new <Application,[Ljava/lang/String>@7529 ,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
55 = getCaughtException ,
monitorexit 4,
return,
return 40,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	int v16 = Slog.e(""ManagedProfilePasswordCache"", ""Cannot generate key"", caughtException);
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
return 2,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
28 = new <Application,[Ljava/lang/String>@5729 ,
37 = new <Application,[Ljava/lang/String>@7529 ,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
55 = getCaughtException ,
monitorexit 4,
return,
return 40,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	int v16 = Slog.e(""ManagedProfilePasswordCache"", ""Cannot generate key"", caughtException);
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
13 = arraylength 5,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
return 2,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
28 = new <Application,[Ljava/lang/String>@5729 ,
37 = new <Application,[Ljava/lang/String>@7529 ,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
55 = getCaughtException ,
monitorexit 4,
return,
return 40,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	int v16 = Slog.e(""ManagedProfilePasswordCache"", ""Cannot generate key"", caughtException);
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
conditional branch(ne, to iindex=-1) 13,8,
22 = arraylength 7,
29 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@48,
46 = getCaughtException ,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
return 32,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
return,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v6 = new GCMParameterSpec(128,v4);
	int v8 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 1
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
conditional branch(ne, to iindex=-1) 13,8,
22 = arraylength 7,
29 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@48,
46 = getCaughtException ,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 5,6,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @11 exception:23,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
return,
return 6,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	v1.close();
	return 0;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v6 = new GCMParameterSpec(128,v4);
	int v8 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
2 = new <Application,Ljava/lang/StringBuilder>@0,
return 10,
conditional branch(ne, to iindex=-1) 13,8,
22 = arraylength 7,
29 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@48,
46 = getCaughtException ,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
conditional branch(ne, to iindex=-1) 3,4,
goto (from iindex= 5 to iindex = 2),
7 = phi  6,5,
return 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > = 3,
return,
return,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v6 = new GCMParameterSpec(128,v4);
	int v8 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public boolean isNone(){
	return phiInstruction;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
depth : 2
public void zeroize(){
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
2 = new <Application,Ljava/lang/StringBuilder>@0,
return 10,
conditional branch(ne, to iindex=-1) 13,8,
22 = arraylength 7,
29 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@48,
46 = getCaughtException ,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
conditional branch(ne, to iindex=-1) 3,4,
goto (from iindex= 5 to iindex = 2),
7 = phi  6,5,
return 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > = 3,
return,
return,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v6 = new GCMParameterSpec(128,v4);
	int v8 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public boolean isNone(){
	return phiInstruction;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
depth : 2
public void zeroize(){
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
2 = new <Application,Ljava/lang/StringBuilder>@0,
return 10,
conditional branch(ne, to iindex=-1) 13,8,
22 = arraylength 7,
46 = getCaughtException ,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
conditional branch(ne, to iindex=-1) 3,4,
goto (from iindex= 5 to iindex = 2),
7 = phi  6,5,
return 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
10 = new <Application,Ljava/lang/StringBuilder>@8,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
conditional branch(eq, to iindex=-1) 57,28,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
conditional branch(eq, to iindex=-1) 4,5,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
conditional branch(eq, to iindex=-1) 15,6,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
25 = getCaughtException ,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
50 = getCaughtException ,
63 = new <Application,Ljava/lang/StringBuilder>@103,
conditional branch(eq, to iindex=-1) 78,6,
conditional branch(eq, to iindex=-1) 39,6,
goto (from iindex= 70 to iindex = 20),
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
return,
return 32,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > = 3,
return,
return,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	int v7 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public boolean isNone(){
	return phiInstruction;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = [resolveCodeAbst] + 31 = phi  24,30.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
depth : 2
public void zeroize(){
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","generateKey(Ljava/lang/String;)Ljava/lang/String;","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
return 5,","depth : 0
public String generateKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.generateKey(p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKey(Ljava/lang/String;)Ljava/lang/String;","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 1,2,3 @1 exception:4,
return 5,
return 5,","depth : 0
public String generateKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.generateKey(p1);
	return v1;
}
-----
depth : 1
public String generateKey(String p1){
	String v1 = p0.generateKeyWithMetadata(p1, 0);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKey(Ljava/lang/String;)Ljava/lang/String;","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 1,2,3 @1 exception:4,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
29 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
return 40,
return 5,
return 5,","depth : 0
public String generateKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.generateKey(p1);
	return v1;
}
-----
depth : 1
public String generateKey(String p1){
	String v1 = p0.generateKeyWithMetadata(p1, 0);
	return v1;
}
-----
depth : 2
public String generateKeyWithMetadata(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4);
	byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6);
	String v8 = p0.getAlias(v4, v3, p1);
	return v8;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,6,4 @4 exception:7,
return,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setLong(String p1, long p2, int p3){
	String v1 = Long.toString(p2);
	p0.setString(p1, v1, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,6,4 @4 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 14,6,
return,
return,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setLong(String p1, long p2, int p3){
	String v1 = Long.toString(p2);
	p0.setString(p1, v1, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,6,4 @4 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 14,6,
return,
return,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setLong(String p1, long p2, int p3){
	String v1 = Long.toString(p2);
	p0.setString(p1, v1, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,6,4 @4 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
8 = phi  7,6,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 14,6,
return,
return,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setLong(String p1, long p2, int p3){
	String v1 = Long.toString(p2);
	p0.setString(p1, v1, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 15,10,8,16 @27 exception:17,
19 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, deleteEntry(IILjava/lang/String;)V > 19,10,8,2 @32 exception:20,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	long v6 = this.mDatabase.setShouldCreateSnapshot(v4, v3, 1);
	this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
conditional branch(eq, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 15,10,8,16 @27 exception:17,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
return 11,
19 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, deleteEntry(IILjava/lang/String;)V > 19,10,8,2 @32 exception:20,
5 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
7 = new <Application,[Ljava/lang/Object>@36 ,
arraystore 7[10] = 9,
arraystore 7[13] = 12,
arraystore 7[14] = 4,
21 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
return,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	long v6 = this.mDatabase.setShouldCreateSnapshot(v4, v3, 1);
	this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public boolean removeKey(int p1, String p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	int v3 = v1.delete(""keys"", ""uid = ? AND alias = ?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
depth : 2
public void deleteEntry(int p1, int p2, String p3){
	Object v0 = new Object(3);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	String v3 = String.format(Locale.US, ""Del %d/%d/%s"", v0);
	int v4 = Log.i(""RecoverableAppKeyStore"", v3);
	String v5 = p0.getInternalAlias(p1, p2, p3);
	this.mKeyStore.deleteEntry(v5);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
conditional branch(eq, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 15,10,8,16 @27 exception:17,
conditional branch(eq, to iindex=-1) 4,5,
8 = phi  7,6,
return 11,
19 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, deleteEntry(IILjava/lang/String;)V > 19,10,8,2 @32 exception:20,
5 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
7 = new <Application,[Ljava/lang/Object>@36 ,
arraystore 7[10] = 9,
arraystore 7[13] = 12,
arraystore 7[14] = 4,
21 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
return,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	long v6 = this.mDatabase.setShouldCreateSnapshot(v4, v3, 1);
	this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public boolean removeKey(int p1, String p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	int v3 = v1.delete(""keys"", ""uid = ? AND alias = ?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
depth : 2
public void deleteEntry(int p1, int p2, String p3){
	Object v0 = new Object(3);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	String v3 = String.format(Locale.US, ""Del %d/%d/%s"", v0);
	int v4 = Log.i(""RecoverableAppKeyStore"", v3);
	String v5 = p0.getInternalAlias(p1, p2, p3);
	this.mKeyStore.deleteEntry(v5);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
conditional branch(eq, to iindex=-1) 13,14,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public boolean removeKey(int p1, String p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	int v3 = v1.delete(""keys"", ""uid = ? AND alias = ?"", v1);
	return phiInstruction;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:3,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z > 6,2 @9 exception:7,
return 8,","depth : 0
public boolean unregisterWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.unregisterWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:3,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
conditional branch(eq, to iindex=-1) 11,12,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z > 6,2 @9 exception:7,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mListeners, <Application,Landroid/os/RemoteCallbackList> > 1,
5 = invokevirtual < Application, Landroid/os/RemoteCallbackList, unregister(Landroid/os/IInterface;)Z > 3,2 @2 exception:4,
return 5,
return 8,","depth : 0
public boolean unregisterWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.unregisterWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean unregisterWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	boolean v1 = this.mListeners.unregister(p1);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setString(Ljava/lang/String;Ljava/lang/String;I)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 6,2,3,4 @5 exception:7,
return,","depth : 0
public void setString(String p1, String p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setString(p1, p2, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setString(Ljava/lang/String;Ljava/lang/String;I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 14,6,
invokestatic < Application, Landroid/app/backup/BackupManager, dataChanged(Ljava/lang/String;)V > 15 @25 exception:16,
return,
return,","depth : 0
public void setString(String p1, String p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setString(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setString(Ljava/lang/String;Ljava/lang/String;I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
return,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 14,6,
invokestatic < Application, Landroid/app/backup/BackupManager, dataChanged(Ljava/lang/String;)V > 15 @25 exception:16,
return,
return,","depth : 0
public void setString(String p1, String p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setString(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
depth : 2
public void writeKeyValue(String p1, String p2, int p3){
	SQLiteDatabase v1 = this.mOpenHelper.getWritableDatabase();
	p0.writeKeyValue(v1, p1, p2, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setString(Ljava/lang/String;Ljava/lang/String;I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
return,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 14,6,
return,
return,","depth : 0
public void setString(String p1, String p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setString(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	return;
}
-----
depth : 2
public void writeKeyValue(String p1, String p2, int p3){
	SQLiteDatabase v1 = this.mOpenHelper.getWritableDatabase();
	p0.writeKeyValue(v1, p1, p2, p3);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setRecoverySecretTypes([I)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoverySecretTypes([I)V > 3,2 @2 exception:4,
return,","depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoverySecretTypes([I)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoverySecretTypes([I)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 11,8,10 @19 exception:12,
conditional branch(eq, to iindex=-1) 15,17,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoverySecretTypes(II[I)J > 18,8,10,2 @39 exception:19,
22 = binaryop(lt) 20 , 21,
conditional branch(lt, to iindex=-1) 22,17,
27 = arraylength 13,
conditional branch(ne, to iindex=-1) 27,17,
31 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 31,8,10 @65 exception:32,
conditional branch(eq, to iindex=-1) 33,17,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 37,8,10,38 @74 exception:39,
goto (from iindex= 39 to iindex = 6),
return,
return,","depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
depth : 1
public void setRecoverySecretTypes([I p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""secretTypes is null"");
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
	boolean v6 = Arrays.equals(p1, v5);
	long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);
	int v8 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot pending."");
	Long v9 = this.mDatabase.getSnapshotVersion(v3, v4);
	long v10 = this.mDatabase.setShouldCreateSnapshot(v3, v4, 1);
	int v11 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot must be updated"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoverySecretTypes([I)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoverySecretTypes([I)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 11,8,10 @19 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
11 = new <Application,[Ljava/lang/String>@1712 ,
14 = new <Application,[Ljava/lang/String>@2213 ,
arraystore 14[17] = 16,
arraystore 14[20] = 19,
conditional branch(ne, to iindex=-1) 26,17,
conditional branch(le, to iindex=-1) 26,20,
conditional branch(eq, to iindex=-1) 33,17,
conditional branch(eq, to iindex=-1) 37,17,
41 = arraylength 40,
42 = new <Primordial,[I>@14741 ,
68 = phi  65,17,
43 = arraylength 40,
conditional branch(ge, to iindex=-1) 68,43,
return 42,
conditional branch(eq, to iindex=-1) 15,17,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoverySecretTypes(II[I)J > 18,8,10,2 @39 exception:19,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
8 = new <Application,Landroid/content/ContentValues>@6,
10 = new <Application,Ljava/util/StringJoiner>@11,
15 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb$$ExternalSyntheticLambda0>@22,
24 = new <Application,[Ljava/lang/String>@4423 ,
arraystore 24[27] = 26,
arraystore 24[30] = 29,
35 = conversion(J) 34,
return 35,
22 = binaryop(lt) 20 , 21,
conditional branch(lt, to iindex=-1) 22,17,
27 = arraylength 13,
conditional branch(ne, to iindex=-1) 27,17,
31 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 31,8,10 @65 exception:32,
return 6,
conditional branch(eq, to iindex=-1) 33,17,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 37,8,10,38 @74 exception:39,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
return 11,
goto (from iindex= 39 to iindex = 6),
return,
return,","depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
depth : 1
public void setRecoverySecretTypes([I p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""secretTypes is null"");
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
	boolean v6 = Arrays.equals(p1, v5);
	long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);
	int v8 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot pending."");
	Long v9 = this.mDatabase.getSnapshotVersion(v3, v4);
	long v10 = this.mDatabase.setShouldCreateSnapshot(v3, v4, 1);
	int v11 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot must be updated"");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0);
	int v5 = v4.getCount();
	boolean v6 = v4.moveToFirst();
	int v7 = v4.getColumnIndexOrThrow(""secret_types"");
	boolean v8 = v4.isNull(v7);
	String v9 = v4.getString(v7);
	boolean v10 = TextUtils.isEmpty(v9);
	String v11 = v9.split("","");
	[I v11 = new [I(v11.length);
	v4.close();
	return v11;
}
-----
depth : 2
public long setRecoverySecretTypes(int p1, int p2, [I p3){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	StringJoiner v2 = new StringJoiner("","");
	IntStream v4 = Arrays.stream(p3);
	RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v4 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v2);
	v4.forEach(v4);
	String v7 = v2.toString();
	v1.put(""secret_types"", v7);
	p0.ensureRecoveryServiceMetadataEntryExists(p1, p2);
	String v9 = new String(2);
	String v10 = String.valueOf(p1);
	String v11 = String.valueOf(p2);
	int v12 = v1.update(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v9);
	return v12;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, ""snapshot_version"");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoverySecretTypes([I)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoverySecretTypes([I)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 11,8,10 @19 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
11 = new <Application,[Ljava/lang/String>@1712 ,
14 = new <Application,[Ljava/lang/String>@2213 ,
arraystore 14[17] = 16,
arraystore 14[20] = 19,
conditional branch(ne, to iindex=-1) 26,17,
conditional branch(le, to iindex=-1) 26,20,
77 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
80 = new <Application,[Ljava/lang/Object>@7279 ,
arraystore 80[17] = 82,
arraystore 80[20] = 84,
arraystore 80[13] = 86,
91 = new <Primordial,[I>@9917 ,
return 91,
conditional branch(eq, to iindex=-1) 15,17,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoverySecretTypes(II[I)J > 18,8,10,2 @39 exception:19,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
8 = new <Application,Landroid/content/ContentValues>@6,
10 = new <Application,Ljava/util/StringJoiner>@11,
15 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb$$ExternalSyntheticLambda0>@22,
24 = new <Application,[Ljava/lang/String>@4423 ,
arraystore 24[27] = 26,
arraystore 24[30] = 29,
35 = conversion(J) 34,
return 35,
22 = binaryop(lt) 20 , 21,
conditional branch(lt, to iindex=-1) 22,17,
27 = arraylength 13,
conditional branch(ne, to iindex=-1) 27,17,
31 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 31,8,10 @65 exception:32,
return 6,
conditional branch(eq, to iindex=-1) 33,17,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 37,8,10,38 @74 exception:39,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
return 11,
goto (from iindex= 39 to iindex = 6),
return,
return,","depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
depth : 1
public void setRecoverySecretTypes([I p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""secretTypes is null"");
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
	boolean v6 = Arrays.equals(p1, v5);
	long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);
	int v8 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot pending."");
	Long v9 = this.mDatabase.getSnapshotVersion(v3, v4);
	long v10 = this.mDatabase.setShouldCreateSnapshot(v3, v4, 1);
	int v11 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot must be updated"");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0);
	int v5 = v4.getCount();
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(v5);
	Integer v7 = Integer.valueOf(p1);
	Integer v8 = Integer.valueOf(p2);
	String v9 = String.format(Locale.US, ""%d deviceId entries found for userId=%d uid=%d. Should only ever be 0 or 1."", v5);
	int v10 = Log.wtf(""RecoverableKeyStoreDb"", v9);
	[I v10 = new [I(0);
	v4.close();
	return v10;
}
-----
depth : 2
public long setRecoverySecretTypes(int p1, int p2, [I p3){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	StringJoiner v2 = new StringJoiner("","");
	IntStream v4 = Arrays.stream(p3);
	RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v4 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v2);
	v4.forEach(v4);
	String v7 = v2.toString();
	v1.put(""secret_types"", v7);
	p0.ensureRecoveryServiceMetadataEntryExists(p1, p2);
	String v9 = new String(2);
	String v10 = String.valueOf(p1);
	String v11 = String.valueOf(p2);
	int v12 = v1.update(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v9);
	return v12;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, ""snapshot_version"");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
return 26,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
return 26,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = conversion(I) 7,
return 8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
return 6,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
conditional branch(eq, to iindex=-1) 3,4,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
return 26,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean hasPattern(int p1){
	String v1 = p0.getLockPatternFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public boolean hasPassword(int p1){
	String v1 = p0.getLockPasswordFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = conversion(I) 7,
return 8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
return 6,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
conditional branch(eq, to iindex=-1) 3,4,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
return 26,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean hasPattern(int p1){
	String v1 = p0.getLockPatternFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public boolean hasPassword(int p1){
	String v1 = p0.getLockPasswordFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = conversion(I) 7,
return 8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
return 6,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
return 6,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
conditional branch(eq, to iindex=-1) 3,4,
return 19,
return 26,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean hasPattern(int p1){
	String v1 = p0.getLockPatternFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public boolean hasPassword(int p1){
	String v1 = p0.getLockPasswordFilename(p1);
	boolean v2 = p0.hasFile(v1);
	return v2;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	return 4;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;","0","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map; > 5,2,3,4 @2 exception:6,
return 7,","depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, get(ILjava/lang/String;)Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry; > 10,9,2 @13 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
27 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, decryptRecoveryKey(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;[B)[B > 1,12,3 @19 exception:26,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverApplicationKeys([BLjava/util/List;)Ljava/util/Map; > 1,27,4 @23 exception:28,
31 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyMaterials(IILjava/util/Map;)Ljava/util/Map; > 1,7,9,29 @27 exception:30,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, destroy()V > 12 @31 exception:47,
48 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(I)V > 48,9 @36 exception:49,
return 31,
return 7,","depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
depth : 1
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v4 = this.mRecoverySessionStorage.get(v3, p1);
	byte[] v5 = p0.decryptRecoveryKey(v4, p2);
	Map v6 = p0.recoverApplicationKeys(v5, p3);
	Map v7 = p0.importKeyMaterials(v2, v3, v6);
	v4.destroy();
	this.mRecoverySessionStorage.remove(v3);
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, get(ILjava/lang/String;)Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry; > 10,9,2 @13 exception:11,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
7 = checkcast <Application,Ljava/util/ArrayList>6 <Application,Ljava/util/ArrayList>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(eq, to iindex=-1) 12,8,
15 = checkcast <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>14 <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>,
conditional branch(eq, to iindex=-1) 19,8,
return 15,
conditional branch(eq, to iindex=-1) 12,13,
27 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, decryptRecoveryKey(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;[B)[B > 1,12,3 @19 exception:26,
return 56,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverApplicationKeys([BLjava/util/List;)Ljava/util/Map; > 1,27,4 @23 exception:28,
4 = new <Application,Ljava/util/HashMap>@0,
conditional branch(eq, to iindex=-1) 9,12,
conditional branch(ne, to iindex=-1) 47,12,
conditional branch(ne, to iindex=-1) 49,12,
goto (from iindex= 71 to iindex = 12),
return 4,
31 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyMaterials(IILjava/util/Map;)Ljava/util/Map; > 1,7,9,29 @27 exception:30,
5 = new <Application,Landroid/util/ArrayMap>@0,
conditional branch(eq, to iindex=-1) 14,15,
return 5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, destroy()V > 12 @31 exception:47,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, mLskfHash, <Primordial,[B> > 1,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, mKeyClaimant, <Primordial,[B> > 1,
return,
48 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(I)V > 48,9 @36 exception:49,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
6 = checkcast <Application,Ljava/util/ArrayList>5 <Application,Ljava/util/ArrayList>,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 11,7,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
return,
return 31,
return 7,","depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
depth : 1
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v4 = this.mRecoverySessionStorage.get(v3, p1);
	byte[] v5 = p0.decryptRecoveryKey(v4, p2);
	Map v6 = p0.recoverApplicationKeys(v5, p3);
	Map v7 = p0.importKeyMaterials(v2, v3, v6);
	v4.destroy();
	this.mRecoverySessionStorage.remove(v3);
	return v7;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public RecoverySessionStorage$Entry get(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	Object v4 = v2.next();
	String v5 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v4);
	boolean v6 = p2.equals(v5);
	return v4;
}
-----
depth : 2
public byte[] decryptRecoveryKey(RecoverySessionStorage$Entry p1, byte[] p2){
	byte[] v1 = p1.getKeyClaimant();
	byte[] v2 = p1.getVaultParams();
	byte[] v3 = KeySyncUtils.decryptRecoveryClaimResponse(v1, v2, p2);
	byte[] v4 = p1.getLskfHash();
	byte[] v5 = KeySyncUtils.decryptRecoveryKey(v4, v3);
	return v5;
}
-----
depth : 2
public Map recoverApplicationKeys(byte[] p1, List p2){
	HashMap v0 = new HashMap();
	Iterator v2 = p2.iterator();
	boolean v3 = v2.hasNext();
	boolean v4 = p2.isEmpty();
	boolean v5 = v0.isEmpty();
	return v0;
}
-----
depth : 2
public Map importKeyMaterials(int p1, int p2, Map p3){
	ArrayMap v0 = new ArrayMap(v1);
	int v1 = p3.size();
	Set v3 = p3.keySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v0;
}
-----
depth : 2
public void destroy(){
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	return;
}
-----
depth : 2
public void remove(int p1){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	this.mSessionsByUid.remove(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
return,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, get(ILjava/lang/String;)Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry; > 10,9,2 @13 exception:11,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
7 = checkcast <Application,Ljava/util/ArrayList>6 <Application,Ljava/util/ArrayList>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(eq, to iindex=-1) 12,8,
15 = checkcast <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>14 <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>,
conditional branch(eq, to iindex=-1) 19,8,
return 15,
conditional branch(eq, to iindex=-1) 12,13,
27 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, decryptRecoveryKey(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;[B)[B > 1,12,3 @19 exception:26,
return 56,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverApplicationKeys([BLjava/util/List;)Ljava/util/Map; > 1,27,4 @23 exception:28,
4 = new <Application,Ljava/util/HashMap>@0,
conditional branch(eq, to iindex=-1) 9,12,
conditional branch(ne, to iindex=-1) 47,12,
conditional branch(ne, to iindex=-1) 49,12,
goto (from iindex= 71 to iindex = 12),
return 4,
31 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyMaterials(IILjava/util/Map;)Ljava/util/Map; > 1,7,9,29 @27 exception:30,
5 = new <Application,Landroid/util/ArrayMap>@0,
conditional branch(eq, to iindex=-1) 14,15,
return 5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, destroy()V > 12 @31 exception:47,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, mLskfHash, <Primordial,[B> > 1,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, mKeyClaimant, <Primordial,[B> > 1,
return,
48 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(I)V > 48,9 @36 exception:49,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
6 = checkcast <Application,Ljava/util/ArrayList>5 <Application,Ljava/util/ArrayList>,
conditional branch(ne, to iindex=-1) 6,7,
return,
return 31,
return 7,","depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
depth : 1
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v4 = this.mRecoverySessionStorage.get(v3, p1);
	byte[] v5 = p0.decryptRecoveryKey(v4, p2);
	Map v6 = p0.recoverApplicationKeys(v5, p3);
	Map v7 = p0.importKeyMaterials(v2, v3, v6);
	v4.destroy();
	this.mRecoverySessionStorage.remove(v3);
	return v7;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public RecoverySessionStorage$Entry get(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	Object v4 = v2.next();
	String v5 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v4);
	boolean v6 = p2.equals(v5);
	return v4;
}
-----
depth : 2
public byte[] decryptRecoveryKey(RecoverySessionStorage$Entry p1, byte[] p2){
	byte[] v1 = p1.getKeyClaimant();
	byte[] v2 = p1.getVaultParams();
	byte[] v3 = KeySyncUtils.decryptRecoveryClaimResponse(v1, v2, p2);
	byte[] v4 = p1.getLskfHash();
	byte[] v5 = KeySyncUtils.decryptRecoveryKey(v4, v3);
	return v5;
}
-----
depth : 2
public Map recoverApplicationKeys(byte[] p1, List p2){
	HashMap v0 = new HashMap();
	Iterator v2 = p2.iterator();
	boolean v3 = v2.hasNext();
	boolean v4 = p2.isEmpty();
	boolean v5 = v0.isEmpty();
	return v0;
}
-----
depth : 2
public Map importKeyMaterials(int p1, int p2, Map p3){
	ArrayMap v0 = new ArrayMap(v1);
	int v1 = p3.size();
	Set v3 = p3.keySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v0;
}
-----
depth : 2
public void destroy(){
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	return;
}
-----
depth : 2
public void remove(int p1){
	Object v1 = this.mSessionsByUid.get(p1);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V > 4,2 @5 exception:5,
return,","depth : 0
public void unregisterStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.unregisterStrongAuthTracker(p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V > 4,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 6 @7 exception:7,
return,
return,","depth : 0
public void unregisterStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.unregisterStrongAuthTracker(p1);
	return;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public void unregisterStrongAuthTracker(IStrongAuthTracker p1){
	Message v1 = this.mHandler.obtainMessage(3, p1);
	v1.sendToTarget();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 17,19,10,3,4 @39 exception:20,
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:18,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 17,19,10,3,4 @39 exception:20,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
conditional branch(eq, to iindex=-1) 42,9,
45 = getCaughtException ,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
conditional branch(ne, to iindex=-1) 55,9,
74 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 50 @67 exception:73,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveSyntheticPasswordHandle([BI)V > 1,74,5 @71 exception:75,
77 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @74 exception:76,
return 77,
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = [resolveCodeAbst] + 50 = phi  44,49.getResponseCode();
	byte[] v12 = [resolveCodeAbst] + 50 = phi  44,49.getPayload();
	p0.saveSyntheticPasswordHandle(v12, p4);
	VerifyCredentialResponse v14 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v14;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
26 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
goto (from iindex= 16 to iindex = 13),
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	int v3 = Slog.d(""LockSettingsService"", ""No gatekeeper password for handle"");
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:18,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 17,19,10,3,4 @39 exception:20,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
return 6,
conditional branch(ne, to iindex=-1) 8,9,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
putfield 1.< Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > = 2,
return 1,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
2 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse>@0,
3 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > 1,
4 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperPasswordHandle, <Primordial,J> > 1,
return 2,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mShouldReEnroll, <Primordial,Z> > 1,
return 2,
conditional branch(eq, to iindex=-1) 42,9,
45 = getCaughtException ,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 55,9,
74 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 50 @67 exception:73,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveSyntheticPasswordHandle([BI)V > 1,74,5 @71 exception:75,
return,
77 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @74 exception:76,
conditional branch(ne, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
conditional branch(eq, to iindex=-1) 42,9,
45 = getCaughtException ,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
conditional branch(ne, to iindex=-1) 55,9,
56 = new <Application,Ljava/lang/StringBuilder>@79,
return 40,
return 77,
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = [resolveCodeAbst] + 50 = phi  44,49.getResponseCode();
	byte[] v12 = [resolveCodeAbst] + 50 = phi  44,49.getPayload();
	p0.saveSyntheticPasswordHandle(v12, p4);
	VerifyCredentialResponse v14 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v14;
}
-----
depth : 2
public byte[] loadSyntheticPasswordHandle(int p1){
	byte[] v1 = p0.loadState(""handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public VerifyCredentialResponse$Builder setGatekeeperHAT(byte[] p1){
	this.mGatekeeperHAT = p1;
	return p0;
}
-----
depth : 2
public VerifyCredentialResponse build(){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	return v0;
}
-----
depth : 2
public boolean getShouldReEnroll(){
	return this.mShouldReEnroll;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public void saveSyntheticPasswordHandle(byte[] p1, int p2){
	p0.saveState(""handle"", p1, 0, p2);
	return;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = [resolveCodeAbst] + 50 = phi  44,49.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""Fail to re-enroll SP handle for user "");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w(""SyntheticPasswordManager"", v15);
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:18,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 17,19,10,3,4 @39 exception:20,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
return 6,
conditional branch(ne, to iindex=-1) 8,9,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
putfield 1.< Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > = 2,
return 1,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
2 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse>@0,
3 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > 1,
4 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperPasswordHandle, <Primordial,J> > 1,
return 2,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mShouldReEnroll, <Primordial,Z> > 1,
return 2,
conditional branch(eq, to iindex=-1) 42,9,
45 = getCaughtException ,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 55,9,
74 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 50 @67 exception:73,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveSyntheticPasswordHandle([BI)V > 1,74,5 @71 exception:75,
return,
77 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @74 exception:76,
conditional branch(ne, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
conditional branch(eq, to iindex=-1) 42,9,
45 = getCaughtException ,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
conditional branch(ne, to iindex=-1) 55,9,
56 = new <Application,Ljava/lang/StringBuilder>@79,
return 40,
return 77,
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = [resolveCodeAbst] + 50 = phi  44,49.getResponseCode();
	byte[] v12 = [resolveCodeAbst] + 50 = phi  44,49.getPayload();
	p0.saveSyntheticPasswordHandle(v12, p4);
	VerifyCredentialResponse v14 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v14;
}
-----
depth : 2
public byte[] loadSyntheticPasswordHandle(int p1){
	byte[] v1 = p0.loadState(""handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public VerifyCredentialResponse$Builder setGatekeeperHAT(byte[] p1){
	this.mGatekeeperHAT = p1;
	return p0;
}
-----
depth : 2
public VerifyCredentialResponse build(){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	return v0;
}
-----
depth : 2
public boolean getShouldReEnroll(){
	return this.mShouldReEnroll;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public void saveSyntheticPasswordHandle(byte[] p1, int p2){
	p0.saveState(""handle"", p1, 0, p2);
	return;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = [resolveCodeAbst] + 50 = phi  44,49.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""Fail to re-enroll SP handle for user "");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w(""SyntheticPasswordManager"", v15);
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:18,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
14 = getCaughtException ,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 17,19,10,3,4 @39 exception:20,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
return 6,
conditional branch(ne, to iindex=-1) 8,9,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
putfield 1.< Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > = 2,
return 1,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
2 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse>@0,
3 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > 1,
4 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperPasswordHandle, <Primordial,J> > 1,
return 2,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mShouldReEnroll, <Primordial,Z> > 1,
return 2,
conditional branch(eq, to iindex=-1) 42,9,
goto (from iindex= 29 to iindex = 9),
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 55,9,
74 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 50 @67 exception:73,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveSyntheticPasswordHandle([BI)V > 1,74,5 @71 exception:75,
return,
77 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @74 exception:76,
conditional branch(ne, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
conditional branch(eq, to iindex=-1) 42,9,
45 = getCaughtException ,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
conditional branch(ne, to iindex=-1) 55,9,
56 = new <Application,Ljava/lang/StringBuilder>@79,
return 40,
return 77,
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = [resolveCodeAbst] + 50 = phi  44,49.getResponseCode();
	byte[] v11 = [resolveCodeAbst] + 50 = phi  44,49.getPayload();
	p0.saveSyntheticPasswordHandle(v11, p4);
	VerifyCredentialResponse v13 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v13;
}
-----
depth : 2
public byte[] loadSyntheticPasswordHandle(int p1){
	byte[] v1 = p0.loadState(""handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public VerifyCredentialResponse$Builder setGatekeeperHAT(byte[] p1){
	this.mGatekeeperHAT = p1;
	return p0;
}
-----
depth : 2
public VerifyCredentialResponse build(){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	return v0;
}
-----
depth : 2
public boolean getShouldReEnroll(){
	return this.mShouldReEnroll;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public void saveSyntheticPasswordHandle(byte[] p1, int p2){
	p0.saveState(""handle"", p1, 0, p2);
	return;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = [resolveCodeAbst] + 50 = phi  44,49.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""Fail to re-enroll SP handle for user "");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w(""SyntheticPasswordManager"", v15);
	return v7;
}
-----
","SYS_OR_SIG"

