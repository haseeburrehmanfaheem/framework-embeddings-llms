"Class","Method","Depth","Trace Instruction(s) ...","Java Code Representation","Code Merged","Access Control Level"
"Lcom/android/server/locksettings/LockSettingsService","checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,6 @4 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @8 exception:11,
return 8,","depth : 0
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	p0.checkPasswordReadPermission();
	VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
	p0.scheduleGc();
	return v2;
}
-----
","public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	p0.checkPasswordReadPermission();
	VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
	p0.scheduleGc();
	return v2;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,6 @4 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @8 exception:11,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
return 8,","depth : 0
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	p0.checkPasswordReadPermission();
	VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
	p0.scheduleGc();
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	boolean v4 = p1.isNone();
	ContentResolver v5 = this.mContext.getContentResolver();
	int v6 = this.mInjector.settingsGlobalGetInt(v5, ""device_provisioned"", 0);
	VerifyCredentialResponse v7 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, p3, 0);
	LockSettingsStorage$CredentialHash v8 = this.mStorage.readCredentialHash(p2);
	boolean v9 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v15 = p1.getType();
	VerifyCredentialResponse v3 = VerifyCredentialResponse.ERROR;
	LockSettingsService$$ExternalSyntheticLambda3 v20 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v22 = this.mHandler.postDelayed(v20, 2000);
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,6 @4 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @8 exception:11,
return 8,","depth : 0
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	p0.checkPasswordReadPermission();
	VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
	p0.scheduleGc();
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	boolean v4 = p1.isNone();
	ContentResolver v5 = this.mContext.getContentResolver();
	int v7 = Settings$Global.getInt(v5, ""device_provisioned"", 0);
	int v6 = v7;
	boolean v9 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v18 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v19 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v20 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v21 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v20, v19, p1, p2, p3);
	int v22 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v23 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v23);
	IGateKeeperService v25 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v26 = this.mSpManager.verifyChallenge(v25, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v27 = v26.getResponseCode();
	VerifyCredentialResponse v8 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v30 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v31 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v32 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v29 = v32;
	int v34 = LockscreenCredential.getType();
	int v35 = LockscreenCredential.getType();
	boolean v33 = phiInstruction;
	boolean v37 = p1.isNone();
	boolean v38 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v40 = LockSettingsService.getGateKeeperService();
	byte[] v41 = p1.getCredential();
	GateKeeperResponse v42 = v40.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v41);
	VerifyCredentialResponse v44 = LockSettingsService.convertResponse(phiInstruction);
	boolean v45 = phiInstruction.getShouldReEnroll();
	int v46 = v44.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v50 = p1.getCredential();
	LockSettingsService.unlockKeystore(v50, p2);
	byte[] v58 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v58);
	boolean v60 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v62 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v36 = v44;
	int v64 = this.mResponseCode;
	Message v66 = this.mHandler.obtainMessage(5, p2, 0);
	v66.sendToTarget();
	VerifyCredentialResponse v3 = v36;
	p0.scheduleGc();
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,6 @4 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @8 exception:11,
return 8,","depth : 0
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	p0.checkPasswordReadPermission();
	VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
	p0.scheduleGc();
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	boolean v4 = p1.isNone();
	ContentResolver v5 = this.mContext.getContentResolver();
	int v7 = Settings$Global.getInt(v5, ""device_provisioned"", 0);
	int v6 = v7;
	boolean v9 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v18 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v19 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v20 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v21 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v20, v19, p1, p2, p3);
	int v22 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v23 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v23);
	IGateKeeperService v25 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v26 = this.mSpManager.verifyChallenge(v25, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v27 = v26.getResponseCode();
	VerifyCredentialResponse v8 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v30 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v31 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v29 = v31;
	int v33 = LockscreenCredential.getType();
	int v34 = LockscreenCredential.getType();
	boolean v32 = phiInstruction;
	boolean v36 = p1.isNone();
	boolean v37 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v39 = LockSettingsService.getGateKeeperService();
	byte[] v40 = p1.getCredential();
	GateKeeperResponse v41 = v39.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v40);
	VerifyCredentialResponse v43 = LockSettingsService.convertResponse(phiInstruction);
	boolean v44 = phiInstruction.getShouldReEnroll();
	int v45 = v43.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v49 = p1.getCredential();
	LockSettingsService.unlockKeystore(v49, p2);
	byte[] v57 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v57);
	boolean v59 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v61 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v35 = v43;
	int v63 = this.mResponseCode;
	Message v65 = this.mHandler.obtainMessage(5, p2, 0);
	v65.sendToTarget();
	VerifyCredentialResponse v3 = v35;
	p0.scheduleGc();
	return v3;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
","public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
goto (from iindex= 6 to iindex = 5),
12 = phi  3,11,
return 12,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public long getLong(String p1, long p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	return phiInstruction;
}
-----
","public long getLong(String p1, long p2, int p3){
	int v2 = Binder.getCallingUid();
	String v4 = LockSettingsStorage.getString(p1, 0, p3);
	boolean v5 = TextUtils.isEmpty(v4);
	long v3 = phiInstruction;
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
11 = invokestatic < Application, Ljava/lang/Long, parseLong(Ljava/lang/String;)J > 7 @12 exception:10,
12 = phi  3,11,
return 12,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public long getLong(String p1, long p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	long v3 = Long.parseLong(v1);
	return phiInstruction;
}
-----
","public long getLong(String p1, long p2, int p3){
	int v2 = Binder.getCallingUid();
	String v4 = LockSettingsStorage.getString(p1, 0, p3);
	boolean v5 = TextUtils.isEmpty(v4);
	long v6 = Long.parseLong(v4);
	long v3 = phiInstruction;
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
conditional branch(ne, to iindex=-1) 4,5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
11 = phi  2,10,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readKeyValue(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,11,3,4 @16 exception:12,
return 13,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
goto (from iindex= 6 to iindex = 5),
12 = phi  3,11,
return 12,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public long getLong(String p1, long p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	return phiInstruction;
}
-----
depth : 2
public String getString(String p1, String p2, int p3){
	boolean v1 = ""legacy_lock_pattern_enabled"".equals(p1);
	String v2 = p0.readKeyValue(phiInstruction, p2, p3);
	return v2;
}
-----
","public long getLong(String p1, long p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v5 = ""legacy_lock_pattern_enabled"".equals(p1);
	String v6 = LockSettingsStorage.readKeyValue(phiInstruction, 0, p3);
	String v4 = v6;
	boolean v7 = TextUtils.isEmpty(v4);
	long v3 = phiInstruction;
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getLong(Ljava/lang/String;JI)J","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
conditional branch(ne, to iindex=-1) 4,5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
11 = phi  2,10,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readKeyValue(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,11,3,4 @16 exception:12,
return 13,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
11 = invokestatic < Application, Ljava/lang/Long, parseLong(Ljava/lang/String;)J > 7 @12 exception:10,
12 = phi  3,11,
return 12,
return 8,","depth : 0
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public long getLong(String p1, long p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	long v3 = Long.parseLong(v1);
	return phiInstruction;
}
-----
depth : 2
public String getString(String p1, String p2, int p3){
	boolean v1 = ""legacy_lock_pattern_enabled"".equals(p1);
	String v2 = p0.readKeyValue(phiInstruction, p2, p3);
	return v2;
}
-----
","public long getLong(String p1, long p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v5 = ""legacy_lock_pattern_enabled"".equals(p1);
	String v6 = LockSettingsStorage.readKeyValue(phiInstruction, 0, p3);
	String v4 = v6;
	boolean v7 = TextUtils.isEmpty(v4);
	long v8 = Long.parseLong(v4);
	long v3 = phiInstruction;
	return v3;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","0","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
35 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @62 exception:34,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
43 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 41,4 @84 exception:42,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 35 @144 exception:67,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
","public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
35 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @62 exception:34,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 2 @2 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
goto (from iindex= 11 to iindex = 2),
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
43 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 41,4 @84 exception:42,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 1,4,3 @6 exception:5,
return 1,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 2 @0 exception:6,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 3 @3 exception:8,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
41 = getCaughtException ,
44 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 24,42,41 @97 exception:43,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
5 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda2>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda2, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/internal/widget/LockscreenCredential;I)V > 5,1,2,3 @4 exception:6,
8 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 4,5 @7 exception:7,
return,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
6 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 3,4 @4 exception:5,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
4 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1, <init>(I)V > 4,2 @4 exception:5,
7 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 3,4 @7 exception:6,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
26 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 23,24 @43 exception:25,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 35 @144 exception:67,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 1
public void notifyPasswordChanged(LockscreenCredential p1, int p2){
	LockSettingsService$$ExternalSyntheticLambda2 v0 = new LockSettingsService$$ExternalSyntheticLambda2(p0,p1,p2);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 1
public void notifySeparateProfileChallengeChanged(int p1){
	LockSettingsService$$ExternalSyntheticLambda1 v0 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	LockscreenCredential.ensureNotZeroized();
	int v1 = this.mType;
	boolean v3 = phiInstruction;
	boolean v5 = phiInstruction;
	boolean v7 = phiInstruction;
	boolean v9 = p2.isNone();
	long v10 = Binder.clearCallingIdentity();
	ContentResolver v12 = this.mContext.getContentResolver();
	int v13 = this.mInjector.settingsSecureGetInt(v12, ""user_setup_complete"", 0, 0);
	int v14 = this.mInjector.settingsSecureGetInt(v12, ""secure_frp_mode"", 0, 0);
	boolean v15 = p2.isNone();
	boolean v17 = LockSettingsService.isCredentialSharableWithParent(p3);
	boolean v18 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p3);
	boolean v16 = phiInstruction;
	UserInfo v19 = this.mUserManager.getProfileParent(p3);
	boolean v21 = LockSettingsService.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v22 = LockSettingsService.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v23 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v24 = LockSettingsService.doVerifyCredential(p2, UserInfo.id, 0, 0);
	Binder.restoreCallingIdentity(v23);
	LockSettingsService.scheduleGc();
	VerifyCredentialResponse v20 = v24;
	p2.zeroize();
	LockscreenCredential v29 = new LockscreenCredential(-1,v30);
	[B v30 = new [B(0);
	LockscreenCredential v28 = v29;
	Object v33 = Objects.requireNonNull(p1);
	Object v34 = Objects.requireNonNull(phiInstruction);
	boolean v35 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v36 = p1.isNone();
	LockSettingsStorage$CredentialHash v37 = this.mStorage.readCredentialHash(p3);
	boolean v38 = LockSettingsService.isProfileWithUnifiedLock(p3);
	boolean v39 = phiInstruction.isNone();
	LockscreenCredential v40 = LockSettingsService.getDecryptedPasswordForTiedProfile(p3);
	SyntheticPasswordManager$AuthenticationToken v42 = LockSettingsService.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v43 = LockSettingsService.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, 0);
	boolean v32 = v43;
	boolean v45 = LockSettingsService.getBoolean(""lockscreen.profilechallenge"", 0, p3);
	LockSettingsService.setBoolean(""lockscreen.profilechallenge"", 1, p3);
	this.mStorage.removeChildProfileLock(p3);
	LockSettingsService.removeKeystoreProfileKey(p3);
	LockSettingsService$$ExternalSyntheticLambda2 v50 = new LockSettingsService$$ExternalSyntheticLambda2(LockSettingsService,p1,p3);
	boolean v52 = this.mHandler.post(v50);
	UserManager v54 = LockSettingsService.getUserManagerFromCache(p3);
	boolean v55 = v54.isCredentialSharableWithParent();
	boolean v53 = v55;
	Object v57 = this.mContext.getSystemService(TrustManage.class);
	v57.setDeviceLockedForUser(p3, 0);
	LockSettingsService$$ExternalSyntheticLambda1 v60 = new LockSettingsService$$ExternalSyntheticLambda1(p3);
	boolean v62 = this.mHandler.post(v60);
	boolean v64 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v65 = LockSettingsService.shouldEncryptWithCredentials();
	boolean v66 = p1.isNone();
	LockSettingsService.setCredentialRequiredToDecrypt(0);
	boolean v68 = p1.isPattern();
	LockSettingsService.setBoolean(""lockscreen.patterneverchosen"", 1, p3);
	LockSettingsService.updatePasswordHistory(p1, p3);
	Object v71 = this.mContext.getSystemService(TrustManage.class);
	v71.reportEnabledTrustAgentsChanged(p3);
	LockSettingsService$$ExternalSyntheticLambda3 v74 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v76 = this.mHandler.postDelayed(v74, 2000);
	Binder.restoreCallingIdentity(v10);
	return 1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
35 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @62 exception:34,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 2 @2 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
goto (from iindex= 11 to iindex = 2),
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
43 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 41,4 @84 exception:42,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 1,4,3 @6 exception:5,
return 1,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 2 @0 exception:6,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 3 @3 exception:8,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
41 = getCaughtException ,
44 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 24,42,41 @97 exception:43,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
5 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda2>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda2, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/internal/widget/LockscreenCredential;I)V > 5,1,2,3 @4 exception:6,
8 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 4,5 @7 exception:7,
return,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
6 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 3,4 @4 exception:5,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
4 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1, <init>(I)V > 4,2 @4 exception:5,
7 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 3,4 @7 exception:6,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
26 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 23,24 @43 exception:25,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 35 @144 exception:67,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 1
public void notifyPasswordChanged(LockscreenCredential p1, int p2){
	LockSettingsService$$ExternalSyntheticLambda2 v0 = new LockSettingsService$$ExternalSyntheticLambda2(p0,p1,p2);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 1
public void notifySeparateProfileChallengeChanged(int p1){
	LockSettingsService$$ExternalSyntheticLambda1 v0 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	LockscreenCredential.ensureNotZeroized();
	int v1 = this.mType;
	boolean v3 = phiInstruction;
	boolean v5 = phiInstruction;
	boolean v7 = phiInstruction;
	boolean v9 = p2.isNone();
	long v10 = Binder.clearCallingIdentity();
	ContentResolver v12 = this.mContext.getContentResolver();
	int v13 = this.mInjector.settingsSecureGetInt(v12, ""user_setup_complete"", 0, 0);
	int v14 = this.mInjector.settingsSecureGetInt(v12, ""secure_frp_mode"", 0, 0);
	boolean v15 = p2.isNone();
	boolean v17 = LockSettingsService.isCredentialSharableWithParent(p3);
	boolean v18 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p3);
	boolean v16 = phiInstruction;
	UserInfo v19 = this.mUserManager.getProfileParent(p3);
	boolean v21 = LockSettingsService.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v22 = LockSettingsService.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v23 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v24 = LockSettingsService.doVerifyCredential(p2, UserInfo.id, 0, 0);
	Binder.restoreCallingIdentity(v23);
	LockSettingsService.scheduleGc();
	VerifyCredentialResponse v20 = v24;
	p2.zeroize();
	LockscreenCredential v29 = new LockscreenCredential(-1,v30);
	[B v30 = new [B(0);
	LockscreenCredential v28 = v29;
	Object v33 = Objects.requireNonNull(p1);
	Object v34 = Objects.requireNonNull(phiInstruction);
	boolean v35 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v36 = p1.isNone();
	LockSettingsStorage$CredentialHash v37 = this.mStorage.readCredentialHash(p3);
	boolean v38 = LockSettingsService.isProfileWithUnifiedLock(p3);
	boolean v39 = phiInstruction.isNone();
	LockscreenCredential v40 = LockSettingsService.getDecryptedPasswordForTiedProfile(p3);
	SyntheticPasswordManager$AuthenticationToken v42 = LockSettingsService.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v43 = LockSettingsService.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, 0);
	boolean v32 = v43;
	boolean v45 = LockSettingsService.getBoolean(""lockscreen.profilechallenge"", 0, p3);
	LockSettingsService.setBoolean(""lockscreen.profilechallenge"", 1, p3);
	this.mStorage.removeChildProfileLock(p3);
	LockSettingsService.removeKeystoreProfileKey(p3);
	LockSettingsService$$ExternalSyntheticLambda2 v50 = new LockSettingsService$$ExternalSyntheticLambda2(LockSettingsService,p1,p3);
	boolean v52 = this.mHandler.post(v50);
	UserManager v54 = LockSettingsService.getUserManagerFromCache(p3);
	boolean v55 = v54.isCredentialSharableWithParent();
	boolean v53 = v55;
	Object v57 = this.mContext.getSystemService(TrustManage.class);
	v57.setDeviceLockedForUser(p3, 0);
	LockSettingsService$$ExternalSyntheticLambda1 v60 = new LockSettingsService$$ExternalSyntheticLambda1(p3);
	boolean v62 = this.mHandler.post(v60);
	boolean v64 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v65 = LockSettingsService.shouldEncryptWithCredentials();
	boolean v66 = p1.isNone();
	LockSettingsService.setCredentialRequiredToDecrypt(0);
	boolean v68 = p1.isPattern();
	LockSettingsService.setBoolean(""lockscreen.patterneverchosen"", 1, p3);
	LockSettingsService.updatePasswordHistory(p1, p3);
	Object v71 = this.mContext.getSystemService(TrustManage.class);
	v71.reportEnabledTrustAgentsChanged(p3);
	LockSettingsService$$ExternalSyntheticLambda3 v74 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v76 = this.mHandler.postDelayed(v74, 2000);
	Binder.restoreCallingIdentity(v10);
	return 1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 5,6 @9 exception:7,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
35 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @62 exception:34,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 2 @2 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
7 = invokestatic < Application, Landroid/provider/Settings$Secure, getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 2,3,4,5 @0 exception:6,
return 7,
conditional branch(ne, to iindex=-1) 9,7,
goto (from iindex= 11 to iindex = 2),
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
7 = invokestatic < Application, Landroid/provider/Settings$Secure, getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 2,3,4,5 @0 exception:6,
return 7,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
43 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 41,4 @84 exception:42,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 2 @0 exception:6,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 3 @3 exception:8,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
return 40,
41 = getCaughtException ,
44 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 24,42,41 @97 exception:43,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
5 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 5 @2 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 5,7 @7 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 5,4 @10 exception:10,
13 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 5 @13 exception:12,
16 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 14,13 @19 exception:15,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @22 exception:17,
20 = binaryop(lt) 18 , 19,
conditional branch(ne, to iindex=-1) 20,21,
goto (from iindex= 15 to iindex = 2),
23 = phi  22,21,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 23,24 @37 exception:25,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @42 exception:27,
30 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, newSyntheticPasswordAndSid(Landroid/service/gatekeeper/IGateKeeperService;[BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 26,28,2,3,4 @46 exception:29,
conditional branch(ne, to iindex=-1) 30,21,
31 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @61 exception:32,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)J > 31,33,3,30,4 @65 exception:34,
37 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:36,
conditional branch(ne, to iindex=-1) 37,21,
conditional branch(ne, to iindex=-1) 2,21,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @79 exception:42,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, newSidForUser(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)V > 41,43,30,4 @83 exception:44,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @88 exception:50,
53 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,30,19,4 @96 exception:52,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveDiskEncryptionKey()[B > 30 @99 exception:54,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserKeyProtection(I[B)V > 1,4,55 @103 exception:56,
58 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveKeyStorePassword()[B > 30 @106 exception:57,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setKeystorePassword([BI)V > 1,58,4 @110 exception:59,
goto (from iindex= 55 to iindex = 10),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, fixateNewestUserKeyAuth(I)V > 1,4 @123 exception:66,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSyntheticPasswordHandleLocked(JI)V > 1,35,4 @126 exception:67,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onAuthTokenKnownForUser(ILcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;)V > 1,4,30 @129 exception:68,
return 30,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
7 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @8 exception:10,
conditional branch(eq, to iindex=-1) 11,9,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @14 exception:12,
17 = getCaughtException ,
20 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 8,18,17 @22 exception:19,
goto (from iindex= 13 to iindex = 6),
22 = phi  3,3,13,3,3,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @32 exception:25,
27 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @38 exception:28,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 27,29,26,22,4,9 @45 exception:30,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 31,
33 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 31,
conditional branch(ne, to iindex=-1) 33,9,
conditional branch(eq, to iindex=-1) 32,9,
42 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @59 exception:41,
conditional branch(ne, to iindex=-1) 42,43,
45 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @67 exception:44,
conditional branch(ne, to iindex=-1) 45,34,
51 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 8,49 @75 exception:50,
return 9,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, deleteFile(Ljava/lang/String;)V > 1,4 @4 exception:5,
8 = getCaughtException ,
invokevirtual < Application, Ljava/lang/Exception, printStackTrace()V > 8 @9 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @7 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,2 @10 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @13 exception:10,
14 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 12,11 @19 exception:13,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @26 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,2 @35 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @38 exception:23,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 15,24 @42 exception:25,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 27 @49 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 27,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 27,2 @58 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 27 @61 exception:34,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 26,35 @65 exception:36,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @72 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,2 @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @83 exception:50,
53 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 12,51,42 @87 exception:52,
return,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
4 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 2 @0 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
7 = invokevirtual < Application, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > 5,4 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, createPackageContextAsUser(Ljava/lang/String;ILandroid/os/UserHandle;)Landroid/content/Context; > 9,10,8,4 @27 exception:11,
13 = load_metadata: <Application,Landroid/os/UserManager>, <Primordial,Ljava/lang/Class>,
15 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 12,13 @33 exception:14,
32 = checkcast <Application,Landroid/os/UserManager>15 <Application,Landroid/os/UserManager>,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
35 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 33,4,32 @41 exception:34,
return 32,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
6 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 3,4 @4 exception:5,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
4 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
invokeinterface < Application, Landroid/app/trust/ITrustManager, setDeviceLockedForUser(IZ)V > 4,2,3 @2 exception:5,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
2 = invokestatic < Application, Landroid/os/storage/StorageManager, isEncrypted()Z > @0 exception:1,
return 2,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
3 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialRequiredToDecrypt()Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isDoNotAskCredentialsOnBootSet()Z > 1 @6 exception:5,
conditional branch(ne, to iindex=-1) 6,4,
goto (from iindex= 7 to iindex = 2),
11 = phi  10,4,
return 11,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 6 @8 exception:7,
11 = invokestatic < Application, Landroid/provider/Settings$Global, putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z > 8,9,2 @15 exception:10,
return,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
5 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,6,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,9,6,3 @17 exception:10,
conditional branch(ne, to iindex=-1) 11,6,
13 = phi  11,12,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getRequestedPasswordHistoryLength(I)I > 1,3 @26 exception:14,
conditional branch(ne, to iindex=-1) 15,6,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B > 1,2,3 @33 exception:16,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSalt(I)Ljava/lang/String; > 1,3 @37 exception:18,
21 = invokevirtual < Application, Ljava/lang/String, getBytes()[B > 19 @41 exception:20,
23 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, passwordToHistoryHash([B[B)Ljava/lang/String; > 2,21,17 @45 exception:22,
conditional branch(ne, to iindex=-1) 23,6,
27 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;)I > 24,25 @55 exception:26,
29 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, legacyPasswordToHash([B)Ljava/lang/String; > 2,21 @58 exception:28,
30 = phi  23,29,
35 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 13 @63 exception:34,
conditional branch(eq, to iindex=-1) 35,6,
38 = invokevirtual < Application, Ljava/lang/String, split(Ljava/lang/String;)[Ljava/lang/String; > 13,36 @72 exception:37,
39 = new <Application,Ljava/util/StringJoiner>@76,
invokespecial < Application, Ljava/util/StringJoiner, <init>(Ljava/lang/CharSequence;)V > 39,36 @78 exception:40,
42 = invokevirtual < Application, Ljava/util/StringJoiner, add(Ljava/lang/CharSequence;)Ljava/util/StringJoiner; > 39,30 @81 exception:41,
52 = phi  50,6,
44 = binaryop(add) 15 , 43,
conditional branch(ge, to iindex=-1) 52,44,
45 = arraylength 38,
conditional branch(ge, to iindex=-1) 52,45,
57 = invokevirtual < Application, Ljava/util/StringJoiner, toString()Ljava/lang/String; > 39 @100 exception:56,
59 = phi  12,30,57,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,9,59,3 @104 exception:64,
return,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
26 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 23,24 @43 exception:25,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
3 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
invokeinterface < Application, Landroid/app/trust/ITrustManager, reportEnabledTrustAgentsChanged(I)V > 3,2 @2 exception:4,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 35 @144 exception:67,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[] p1, LockscreenCredential p2, int p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Initialize SyntheticPassword for user: "");
	StringBuilder v3 = v0.append(p3);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	long v6 = p0.getSyntheticPasswordHandleLocked(p3);
	Preconditions.checkState(phiInstruction, ""Cannot reinitialize SP"");
	IGateKeeperService v8 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationToken v9 = this.mSpManager.newSyntheticPasswordAndSid(v8, p1, p2, p3);
	IGateKeeperService v10 = p0.getGateKeeperService();
	long v11 = this.mSpManager.createPasswordBasedSyntheticPassword(v10, p2, v9, p3);
	boolean v12 = p2.isNone();
	IGateKeeperService v13 = p0.getGateKeeperService();
	this.mSpManager.newSidForUser(v13, v9, p3);
	IGateKeeperService v15 = p0.getGateKeeperService();
	VerifyCredentialResponse v16 = this.mSpManager.verifyChallenge(v15, v9, 0, p3);
	byte[] v17 = v9.deriveDiskEncryptionKey();
	p0.setUserKeyProtection(p3, v17);
	byte[] v19 = v9.deriveKeyStorePassword();
	p0.setKeystorePassword(v19, p3);
	p0.fixateNewestUserKeyAuth(p3);
	p0.setSyntheticPasswordHandleLocked(v11, p3);
	p0.onAuthTokenKnownForUser(p3, v9);
	return v9;
}
-----
depth : 2
public boolean spBasedSetLockCredentialInternalLocked(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	boolean v1 = p2.isNone();
	boolean v2 = p0.isProfileWithUnifiedLock(p3);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v4 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	long v5 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p3, 0);
	int v8 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v9 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v10 = Slog.w(""LockSettingsService"", ""Failed to enroll: rate limit exceeded."");
	return 0;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	caughtException.printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public UserManager getUserManagerFromCache(int p1){
	UserHandle v1 = UserHandle.of(p1);
	boolean v2 = this.mUserManagerCache.containsKey(v1);
	Context v3 = this.mContext.createPackageContextAsUser(""system"", 0, v1);
	Object v4 = v3.getSystemService(UserManage.class);
	Object v5 = this.mUserManagerCache.put(v1, v4);
	return v4;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 2
public void setDeviceLockedForUser(int p1, boolean p2){
	this.mService.setDeviceLockedForUser(p1, p2);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 2
public boolean isDeviceEncryptionEnabled(){
	boolean v1 = StorageManager.isEncrypted();
	return v1;
}
-----
depth : 2
public boolean shouldEncryptWithCredentials(){
	boolean v1 = p0.isCredentialRequiredToDecrypt();
	boolean v2 = p0.isDoNotAskCredentialsOnBootSet();
	return phiInstruction;
}
-----
depth : 2
public void setCredentialRequiredToDecrypt(boolean p1){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	ContentResolver v2 = this.mContext.getContentResolver();
	boolean v3 = Settings$Global.putInt(v2, ""require_password_to_decrypt"", p1);
	return;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void updatePasswordHistory(LockscreenCredential p1, int p2){
	boolean v1 = p1.isNone();
	boolean v2 = p1.isPattern();
	String v3 = p0.getString(""lockscreen.passwordhistory"", 0, p2);
	int v4 = p0.getRequestedPasswordHistoryLength(p2);
	byte[] v5 = p0.getHashFactor(p1, p2);
	String v6 = p0.getSalt(p2);
	byte[] v7 = v6.getBytes();
	String v8 = p1.passwordToHistoryHash(v7, v5);
	int v9 = Slog.e(""LockSettingsService"", ""Compute new style password hash failed, fallback to legacy style"");
	String v10 = p1.legacyPasswordToHash(v7);
	boolean v11 = TextUtils.isEmpty(phiInstruction);
	String v12 = phiInstruction.split("","");
	StringJoiner v12 = new StringJoiner("","");
	StringJoiner v14 = v12.add(phiInstruction);
	String v15 = v12.toString();
	p0.setString(""lockscreen.passwordhistory"", phiInstruction, p2);
	return;
}
-----
depth : 2
public void reportEnabledTrustAgentsChanged(int p1){
	this.mService.reportEnabledTrustAgentsChanged(p1);
	return;
}
-----
","public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	int v1 = this.mType;
	boolean v4 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v5 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v6 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v7 = p2.isNone();
	long v8 = Binder.clearCallingIdentity();
	ContentResolver v10 = this.mContext.getContentResolver();
	int v12 = Settings$Secure.getIntForUser(v10, ""user_setup_complete"", 0, 0);
	int v11 = v12;
	int v14 = Settings$Secure.getIntForUser(v10, ""secure_frp_mode"", 0, 0);
	int v13 = v14;
	boolean v15 = p2.isNone();
	UserManager v18 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v19 = v18.isCredentialSharableWithParent();
	boolean v17 = v19;
	boolean v21 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v20 = v21;
	boolean v16 = phiInstruction;
	UserInfo v22 = this.mUserManager.getProfileParent(p3);
	boolean v24 = phiInstruction;
	boolean v26 = phiInstruction;
	long v28 = Binder.clearCallingIdentity();
	boolean v30 = p1.isNone();
	ContentResolver v31 = this.mContext.getContentResolver();
	int v32 = this.mInjector.settingsGlobalGetInt(v31, ""device_provisioned"", 0);
	VerifyCredentialResponse v33 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
	LockSettingsStorage$CredentialHash v34 = this.mStorage.readCredentialHash(p2);
	boolean v35 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v41 = p1.getType();
	VerifyCredentialResponse v29 = VerifyCredentialResponse.ERROR;
	Binder.restoreCallingIdentity(v28);
	LockSettingsService$$ExternalSyntheticLambda3 v47 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v49 = this.mHandler.postDelayed(v47, 2000);
	VerifyCredentialResponse v23 = v29;
	p2.zeroize();
	LockscreenCredential v51 = LockscreenCredential.createNone();
	Object v53 = Objects.requireNonNull(p1);
	Object v54 = Objects.requireNonNull(phiInstruction);
	LockSettingsStorage$PersistentData v56 = this.mStorage.readPersistentDataBlock();
	boolean v55 = phiInstruction;
	boolean v57 = p1.isNone();
	LockSettingsStorage$CredentialHash v59 = LockSettingsStorage.readPasswordHashIfExists(p3);
	LockSettingsStorage$CredentialHash v60 = LockSettingsStorage.readPatternHashIfExists(p3);
	LockSettingsStorage$CredentialHash v61 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v58 = v61;
	boolean v63 = LockSettingsService.isCredentialSharableWithParent(p3);
	boolean v64 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p3);
	boolean v62 = phiInstruction;
	boolean v65 = phiInstruction.isNone();
	byte[] v67 = this.mStorage.readChildProfileLock(p3);
	byte[] v68 = Arrays.copyOfRange(v67, 0, 12);
	byte[] v69 = Arrays.copyOfRange(v67, 12, v67.length);
	StringBuilder v70 = new StringBuilder();
	StringBuilder v72 = v70.append(""profile_key_name_decrypt_"");
	StringBuilder v73 = v70.append(p3);
	String v74 = v70.toString();
	Key v75 = this.mJavaKeyStore.getKey(v74, 0);
	Cipher v76 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v77 = new GCMParameterSpec(128,v68);
	v76.init(2, v75, v77);
	byte[] v80 = v76.doFinal(v69);
	LockscreenCredential v81 = LockscreenCredential.createManagedPassword(v80);
	Arrays.fill(v80, 0);
	this.mManagedProfilePasswordCache.storePassword(p3, v81);
	LockscreenCredential v66 = v81;
	long v92 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	Preconditions.checkState(phiInstruction, ""Cannot reinitialize SP"");
	IGateKeeperService v94 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationToken v95 = this.mSpManager.newSyntheticPasswordAndSid(v94, LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	IGateKeeperService v96 = LockSettingsService.getGateKeeperService();
	long v97 = this.mSpManager.createPasswordBasedSyntheticPassword(v96, phiInstruction, v95, p3);
	boolean v98 = phiInstruction.isNone();
	IGateKeeperService v99 = LockSettingsService.getGateKeeperService();
	this.mSpManager.newSidForUser(v99, v95, p3);
	IGateKeeperService v101 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v102 = this.mSpManager.verifyChallenge(v101, v95, 0, p3);
	byte[] v103 = v95.deriveDiskEncryptionKey();
	LockSettingsService.setUserKeyProtection(p3, v103);
	byte[] v105 = v95.deriveKeyStorePassword();
	LockSettingsService.setKeystorePassword(v105, p3);
	LockSettingsService.fixateNewestUserKeyAuth(p3);
	LockSettingsService.setSyntheticPasswordHandleLocked(v97, p3);
	LockSettingsService.onAuthTokenKnownForUser(p3, v95);
	SyntheticPasswordManager$AuthenticationToken v85 = v95;
	boolean v111 = phiInstruction.isNone();
	boolean v112 = LockSettingsService.isProfileWithUnifiedLock(p3);
	LockscreenCredential v113 = LockSettingsService.getDecryptedPasswordForTiedProfile(p3);
	long v115 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v116 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v117 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v116, v115, phiInstruction, p3, 0);
	int v118 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v119 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	boolean v110 = 0;
	boolean v52 = v110;
	LockSettingsService.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v124 = ""lock_pattern_autolock"".equals(""lockscreen.profilechallenge"");
	int v125 = LockSettingsService.getCredentialTypeInternal(p1);
	boolean v122 = phiInstruction;
	LockSettingsService.checkWritePermission(p1);
	this.mStorage.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	String v130 = LockSettingsStorage.getChildProfileLockFile(p1);
	LockSettingsStorage.deleteFile(v130);
	caughtException.printStackTrace();
	StringBuilder v140 = new StringBuilder();
	StringBuilder v142 = v140.append(""profile_key_name_encrypt_"");
	StringBuilder v143 = v140.append(p1);
	String v144 = v140.toString();
	this.mJavaKeyStore.deleteEntry(v144);
	StringBuilder v146 = new StringBuilder();
	StringBuilder v148 = v146.append(""profile_key_name_decrypt_"");
	StringBuilder v149 = v146.append(p1);
	String v150 = v146.toString();
	this.mJavaKeyStore.deleteEntry(v150);
	p0.notifyPasswordChanged(p1, p3);
	UserHandle v161 = UserHandle.of(p1);
	boolean v162 = this.mUserManagerCache.containsKey(v161);
	Context v163 = this.mContext.createPackageContextAsUser(""system"", 0, v161);
	Object v164 = v163.getSystemService(UserManage.class);
	Object v165 = this.mUserManagerCache.put(v161, v164);
	UserManager v160 = v164;
	boolean v166 = v160.isCredentialSharableWithParent();
	boolean v159 = v166;
	Object v168 = this.mContext.getSystemService(TrustManage.class);
	this.mService.setDeviceLockedForUser(p1, 0);
	p0.notifySeparateProfileChallengeChanged(p3);
	boolean v174 = StorageManager.isEncrypted();
	boolean v173 = v174;
	boolean v176 = LockSettingsService.isCredentialRequiredToDecrypt();
	boolean v177 = LockSettingsService.isDoNotAskCredentialsOnBootSet();
	boolean v175 = phiInstruction;
	boolean v178 = p1.isNone();
	boolean v180 = LockSettingsService.isDeviceEncryptionEnabled();
	ContentResolver v181 = this.mContext.getContentResolver();
	boolean v182 = Settings$Global.putInt(v181, ""require_password_to_decrypt"", 0);
	boolean v183 = p1.isPattern();
	LockSettingsService.checkWritePermission(p2);
	this.mStorage.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	boolean v188 = p1.isNone();
	boolean v189 = p1.isPattern();
	String v190 = LockSettingsService.getString(""lockscreen.passwordhistory"", 0, p2);
	int v191 = LockSettingsService.getRequestedPasswordHistoryLength(p2);
	byte[] v192 = LockSettingsService.getHashFactor(p1, p2);
	String v193 = LockSettingsService.getSalt(p2);
	byte[] v194 = v193.getBytes();
	String v195 = p1.passwordToHistoryHash(v194, v192);
	String v197 = p1.legacyPasswordToHash(v194);
	boolean v198 = TextUtils.isEmpty(phiInstruction);
	String v199 = phiInstruction.split("","");
	StringJoiner v200 = new StringJoiner("","");
	StringJoiner v202 = v200.add(phiInstruction);
	String v203 = v200.toString();
	LockSettingsService.setString(""lockscreen.passwordhistory"", phiInstruction, p2);
	Object v205 = this.mContext.getSystemService(TrustManage.class);
	this.mService.reportEnabledTrustAgentsChanged(p2);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v8);
	return 1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
5 = phi  4,3,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 5,6 @9 exception:7,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
35 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @62 exception:34,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 2 @2 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
7 = invokestatic < Application, Landroid/provider/Settings$Secure, getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 2,3,4,5 @0 exception:6,
return 7,
conditional branch(ne, to iindex=-1) 9,7,
goto (from iindex= 11 to iindex = 2),
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
7 = invokestatic < Application, Landroid/provider/Settings$Secure, getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 2,3,4,5 @0 exception:6,
return 7,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
43 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 41,4 @84 exception:42,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 2 @0 exception:6,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 3 @3 exception:8,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
return 40,
41 = getCaughtException ,
44 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 24,42,41 @97 exception:43,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
5 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 5 @2 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 5,7 @7 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 5,4 @10 exception:10,
13 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 5 @13 exception:12,
16 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 14,13 @19 exception:15,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @22 exception:17,
20 = binaryop(lt) 18 , 19,
conditional branch(ne, to iindex=-1) 20,21,
goto (from iindex= 15 to iindex = 2),
23 = phi  22,21,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 23,24 @37 exception:25,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @42 exception:27,
30 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, newSyntheticPasswordAndSid(Landroid/service/gatekeeper/IGateKeeperService;[BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 26,28,2,3,4 @46 exception:29,
conditional branch(ne, to iindex=-1) 30,21,
31 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @61 exception:32,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)J > 31,33,3,30,4 @65 exception:34,
37 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:36,
conditional branch(ne, to iindex=-1) 37,21,
conditional branch(ne, to iindex=-1) 2,21,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @79 exception:42,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, newSidForUser(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)V > 41,43,30,4 @83 exception:44,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @88 exception:50,
53 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,30,19,4 @96 exception:52,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveDiskEncryptionKey()[B > 30 @99 exception:54,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserKeyProtection(I[B)V > 1,4,55 @103 exception:56,
58 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveKeyStorePassword()[B > 30 @106 exception:57,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setKeystorePassword([BI)V > 1,58,4 @110 exception:59,
goto (from iindex= 55 to iindex = 10),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, fixateNewestUserKeyAuth(I)V > 1,4 @123 exception:66,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSyntheticPasswordHandleLocked(JI)V > 1,35,4 @126 exception:67,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onAuthTokenKnownForUser(ILcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;)V > 1,4,30 @129 exception:68,
return 30,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
7 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @8 exception:10,
conditional branch(eq, to iindex=-1) 11,9,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @14 exception:12,
17 = getCaughtException ,
20 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 8,18,17 @22 exception:19,
goto (from iindex= 13 to iindex = 6),
22 = phi  3,3,13,3,3,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @32 exception:25,
27 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @38 exception:28,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 27,29,26,22,4,9 @45 exception:30,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 31,
33 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 31,
conditional branch(ne, to iindex=-1) 33,9,
conditional branch(eq, to iindex=-1) 32,9,
42 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @59 exception:41,
conditional branch(ne, to iindex=-1) 42,43,
45 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @67 exception:44,
conditional branch(ne, to iindex=-1) 45,34,
51 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 8,49 @75 exception:50,
return 9,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, deleteFile(Ljava/lang/String;)V > 1,4 @4 exception:5,
8 = getCaughtException ,
invokevirtual < Application, Ljava/lang/Exception, printStackTrace()V > 8 @9 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @7 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,2 @10 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @13 exception:10,
14 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 12,11 @19 exception:13,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @26 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,2 @35 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @38 exception:23,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 15,24 @42 exception:25,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 27 @49 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 27,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 27,2 @58 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 27 @61 exception:34,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 26,35 @65 exception:36,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @72 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,2 @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @83 exception:50,
53 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 12,51,42 @87 exception:52,
return,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
4 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 2 @0 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
7 = invokevirtual < Application, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > 5,4 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, createPackageContextAsUser(Ljava/lang/String;ILandroid/os/UserHandle;)Landroid/content/Context; > 9,10,8,4 @27 exception:11,
13 = load_metadata: <Application,Landroid/os/UserManager>, <Primordial,Ljava/lang/Class>,
15 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 12,13 @33 exception:14,
32 = checkcast <Application,Landroid/os/UserManager>15 <Application,Landroid/os/UserManager>,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
35 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 33,4,32 @41 exception:34,
return 32,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
6 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 3,4 @4 exception:5,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
4 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
invokeinterface < Application, Landroid/app/trust/ITrustManager, setDeviceLockedForUser(IZ)V > 4,2,3 @2 exception:5,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
2 = invokestatic < Application, Landroid/os/storage/StorageManager, isEncrypted()Z > @0 exception:1,
return 2,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
3 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialRequiredToDecrypt()Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isDoNotAskCredentialsOnBootSet()Z > 1 @6 exception:5,
conditional branch(ne, to iindex=-1) 6,4,
goto (from iindex= 7 to iindex = 2),
11 = phi  10,4,
return 11,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 6 @8 exception:7,
11 = invokestatic < Application, Landroid/provider/Settings$Global, putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z > 8,9,2 @15 exception:10,
return,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
5 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,6,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,9,6,3 @17 exception:10,
conditional branch(ne, to iindex=-1) 11,6,
13 = phi  11,12,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getRequestedPasswordHistoryLength(I)I > 1,3 @26 exception:14,
conditional branch(ne, to iindex=-1) 15,6,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B > 1,2,3 @33 exception:16,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSalt(I)Ljava/lang/String; > 1,3 @37 exception:18,
21 = invokevirtual < Application, Ljava/lang/String, getBytes()[B > 19 @41 exception:20,
23 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, passwordToHistoryHash([B[B)Ljava/lang/String; > 2,21,17 @45 exception:22,
conditional branch(ne, to iindex=-1) 23,6,
27 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;)I > 24,25 @55 exception:26,
29 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, legacyPasswordToHash([B)Ljava/lang/String; > 2,21 @58 exception:28,
30 = phi  23,29,
35 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 13 @63 exception:34,
conditional branch(eq, to iindex=-1) 35,6,
38 = invokevirtual < Application, Ljava/lang/String, split(Ljava/lang/String;)[Ljava/lang/String; > 13,36 @72 exception:37,
39 = new <Application,Ljava/util/StringJoiner>@76,
invokespecial < Application, Ljava/util/StringJoiner, <init>(Ljava/lang/CharSequence;)V > 39,36 @78 exception:40,
42 = invokevirtual < Application, Ljava/util/StringJoiner, add(Ljava/lang/CharSequence;)Ljava/util/StringJoiner; > 39,30 @81 exception:41,
52 = phi  50,6,
44 = binaryop(add) 15 , 43,
conditional branch(ge, to iindex=-1) 52,44,
45 = arraylength 38,
conditional branch(ge, to iindex=-1) 52,45,
57 = invokevirtual < Application, Ljava/util/StringJoiner, toString()Ljava/lang/String; > 39 @100 exception:56,
59 = phi  12,30,57,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,9,59,3 @104 exception:64,
return,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
26 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 23,24 @43 exception:25,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
3 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
invokeinterface < Application, Landroid/app/trust/ITrustManager, reportEnabledTrustAgentsChanged(I)V > 3,2 @2 exception:4,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 35 @144 exception:67,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[] p1, LockscreenCredential p2, int p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Initialize SyntheticPassword for user: "");
	StringBuilder v3 = v0.append(p3);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	long v6 = p0.getSyntheticPasswordHandleLocked(p3);
	Preconditions.checkState(phiInstruction, ""Cannot reinitialize SP"");
	IGateKeeperService v8 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationToken v9 = this.mSpManager.newSyntheticPasswordAndSid(v8, p1, p2, p3);
	IGateKeeperService v10 = p0.getGateKeeperService();
	long v11 = this.mSpManager.createPasswordBasedSyntheticPassword(v10, p2, v9, p3);
	boolean v12 = p2.isNone();
	IGateKeeperService v13 = p0.getGateKeeperService();
	this.mSpManager.newSidForUser(v13, v9, p3);
	IGateKeeperService v15 = p0.getGateKeeperService();
	VerifyCredentialResponse v16 = this.mSpManager.verifyChallenge(v15, v9, 0, p3);
	byte[] v17 = v9.deriveDiskEncryptionKey();
	p0.setUserKeyProtection(p3, v17);
	byte[] v19 = v9.deriveKeyStorePassword();
	p0.setKeystorePassword(v19, p3);
	p0.fixateNewestUserKeyAuth(p3);
	p0.setSyntheticPasswordHandleLocked(v11, p3);
	p0.onAuthTokenKnownForUser(p3, v9);
	return v9;
}
-----
depth : 2
public boolean spBasedSetLockCredentialInternalLocked(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	boolean v1 = p2.isNone();
	boolean v2 = p0.isProfileWithUnifiedLock(p3);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v4 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	long v5 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p3, 0);
	int v8 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v9 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v10 = Slog.w(""LockSettingsService"", ""Failed to enroll: rate limit exceeded."");
	return 0;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	caughtException.printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public UserManager getUserManagerFromCache(int p1){
	UserHandle v1 = UserHandle.of(p1);
	boolean v2 = this.mUserManagerCache.containsKey(v1);
	Context v3 = this.mContext.createPackageContextAsUser(""system"", 0, v1);
	Object v4 = v3.getSystemService(UserManage.class);
	Object v5 = this.mUserManagerCache.put(v1, v4);
	return v4;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 2
public void setDeviceLockedForUser(int p1, boolean p2){
	this.mService.setDeviceLockedForUser(p1, p2);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 2
public boolean isDeviceEncryptionEnabled(){
	boolean v1 = StorageManager.isEncrypted();
	return v1;
}
-----
depth : 2
public boolean shouldEncryptWithCredentials(){
	boolean v1 = p0.isCredentialRequiredToDecrypt();
	boolean v2 = p0.isDoNotAskCredentialsOnBootSet();
	return phiInstruction;
}
-----
depth : 2
public void setCredentialRequiredToDecrypt(boolean p1){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	ContentResolver v2 = this.mContext.getContentResolver();
	boolean v3 = Settings$Global.putInt(v2, ""require_password_to_decrypt"", p1);
	return;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void updatePasswordHistory(LockscreenCredential p1, int p2){
	boolean v1 = p1.isNone();
	boolean v2 = p1.isPattern();
	String v3 = p0.getString(""lockscreen.passwordhistory"", 0, p2);
	int v4 = p0.getRequestedPasswordHistoryLength(p2);
	byte[] v5 = p0.getHashFactor(p1, p2);
	String v6 = p0.getSalt(p2);
	byte[] v7 = v6.getBytes();
	String v8 = p1.passwordToHistoryHash(v7, v5);
	int v9 = Slog.e(""LockSettingsService"", ""Compute new style password hash failed, fallback to legacy style"");
	String v10 = p1.legacyPasswordToHash(v7);
	boolean v11 = TextUtils.isEmpty(phiInstruction);
	String v12 = phiInstruction.split("","");
	StringJoiner v12 = new StringJoiner("","");
	StringJoiner v14 = v12.add(phiInstruction);
	String v15 = v12.toString();
	p0.setString(""lockscreen.passwordhistory"", phiInstruction, p2);
	return;
}
-----
depth : 2
public void reportEnabledTrustAgentsChanged(int p1){
	this.mService.reportEnabledTrustAgentsChanged(p1);
	return;
}
-----
","public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	int v1 = this.mType;
	boolean v4 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v5 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v6 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v7 = p2.isNone();
	long v8 = Binder.clearCallingIdentity();
	ContentResolver v10 = this.mContext.getContentResolver();
	int v12 = Settings$Secure.getIntForUser(v10, ""user_setup_complete"", 0, 0);
	int v11 = v12;
	int v14 = Settings$Secure.getIntForUser(v10, ""secure_frp_mode"", 0, 0);
	int v13 = v14;
	boolean v15 = p2.isNone();
	UserManager v18 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v19 = v18.isCredentialSharableWithParent();
	boolean v17 = v19;
	boolean v21 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v20 = v21;
	boolean v16 = phiInstruction;
	UserInfo v22 = this.mUserManager.getProfileParent(p3);
	boolean v24 = phiInstruction;
	boolean v26 = phiInstruction;
	long v28 = Binder.clearCallingIdentity();
	boolean v30 = p1.isNone();
	ContentResolver v31 = this.mContext.getContentResolver();
	int v32 = this.mInjector.settingsGlobalGetInt(v31, ""device_provisioned"", 0);
	VerifyCredentialResponse v33 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
	LockSettingsStorage$CredentialHash v34 = this.mStorage.readCredentialHash(p2);
	boolean v35 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v41 = p1.getType();
	VerifyCredentialResponse v29 = VerifyCredentialResponse.ERROR;
	Binder.restoreCallingIdentity(v28);
	LockSettingsService$$ExternalSyntheticLambda3 v47 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v49 = this.mHandler.postDelayed(v47, 2000);
	VerifyCredentialResponse v23 = v29;
	p2.zeroize();
	LockscreenCredential v51 = LockscreenCredential.createNone();
	Object v53 = Objects.requireNonNull(p1);
	Object v54 = Objects.requireNonNull(phiInstruction);
	LockSettingsStorage$PersistentData v56 = this.mStorage.readPersistentDataBlock();
	boolean v55 = phiInstruction;
	boolean v57 = p1.isNone();
	LockSettingsStorage$CredentialHash v59 = LockSettingsStorage.readPasswordHashIfExists(p3);
	LockSettingsStorage$CredentialHash v60 = LockSettingsStorage.readPatternHashIfExists(p3);
	LockSettingsStorage$CredentialHash v61 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v58 = v61;
	boolean v63 = LockSettingsService.isCredentialSharableWithParent(p3);
	boolean v64 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p3);
	boolean v62 = phiInstruction;
	boolean v65 = phiInstruction.isNone();
	byte[] v67 = this.mStorage.readChildProfileLock(p3);
	byte[] v68 = Arrays.copyOfRange(v67, 0, 12);
	byte[] v69 = Arrays.copyOfRange(v67, 12, v67.length);
	StringBuilder v70 = new StringBuilder();
	StringBuilder v72 = v70.append(""profile_key_name_decrypt_"");
	StringBuilder v73 = v70.append(p3);
	String v74 = v70.toString();
	Key v75 = this.mJavaKeyStore.getKey(v74, 0);
	Cipher v76 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v77 = new GCMParameterSpec(128,v68);
	v76.init(2, v75, v77);
	byte[] v80 = v76.doFinal(v69);
	LockscreenCredential v81 = LockscreenCredential.createManagedPassword(v80);
	Arrays.fill(v80, 0);
	this.mManagedProfilePasswordCache.storePassword(p3, v81);
	LockscreenCredential v66 = v81;
	long v92 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	Preconditions.checkState(phiInstruction, ""Cannot reinitialize SP"");
	IGateKeeperService v94 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationToken v95 = this.mSpManager.newSyntheticPasswordAndSid(v94, LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	IGateKeeperService v96 = LockSettingsService.getGateKeeperService();
	long v97 = this.mSpManager.createPasswordBasedSyntheticPassword(v96, phiInstruction, v95, p3);
	boolean v98 = phiInstruction.isNone();
	IGateKeeperService v99 = LockSettingsService.getGateKeeperService();
	this.mSpManager.newSidForUser(v99, v95, p3);
	IGateKeeperService v101 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v102 = this.mSpManager.verifyChallenge(v101, v95, 0, p3);
	byte[] v103 = v95.deriveDiskEncryptionKey();
	LockSettingsService.setUserKeyProtection(p3, v103);
	byte[] v105 = v95.deriveKeyStorePassword();
	LockSettingsService.setKeystorePassword(v105, p3);
	LockSettingsService.fixateNewestUserKeyAuth(p3);
	LockSettingsService.setSyntheticPasswordHandleLocked(v97, p3);
	LockSettingsService.onAuthTokenKnownForUser(p3, v95);
	SyntheticPasswordManager$AuthenticationToken v85 = v95;
	boolean v111 = phiInstruction.isNone();
	boolean v112 = LockSettingsService.isProfileWithUnifiedLock(p3);
	LockscreenCredential v113 = LockSettingsService.getDecryptedPasswordForTiedProfile(p3);
	long v115 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v116 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v117 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v116, v115, phiInstruction, p3, 0);
	int v118 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v119 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	boolean v110 = 0;
	boolean v52 = v110;
	LockSettingsService.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v124 = ""lock_pattern_autolock"".equals(""lockscreen.profilechallenge"");
	int v125 = LockSettingsService.getCredentialTypeInternal(p1);
	boolean v122 = phiInstruction;
	LockSettingsService.checkWritePermission(p1);
	this.mStorage.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	String v130 = LockSettingsStorage.getChildProfileLockFile(p1);
	LockSettingsStorage.deleteFile(v130);
	caughtException.printStackTrace();
	StringBuilder v140 = new StringBuilder();
	StringBuilder v142 = v140.append(""profile_key_name_encrypt_"");
	StringBuilder v143 = v140.append(p1);
	String v144 = v140.toString();
	this.mJavaKeyStore.deleteEntry(v144);
	StringBuilder v146 = new StringBuilder();
	StringBuilder v148 = v146.append(""profile_key_name_decrypt_"");
	StringBuilder v149 = v146.append(p1);
	String v150 = v146.toString();
	this.mJavaKeyStore.deleteEntry(v150);
	p0.notifyPasswordChanged(p1, p3);
	UserHandle v161 = UserHandle.of(p1);
	boolean v162 = this.mUserManagerCache.containsKey(v161);
	Context v163 = this.mContext.createPackageContextAsUser(""system"", 0, v161);
	Object v164 = v163.getSystemService(UserManage.class);
	Object v165 = this.mUserManagerCache.put(v161, v164);
	UserManager v160 = v164;
	boolean v166 = v160.isCredentialSharableWithParent();
	boolean v159 = v166;
	Object v168 = this.mContext.getSystemService(TrustManage.class);
	this.mService.setDeviceLockedForUser(p1, 0);
	p0.notifySeparateProfileChallengeChanged(p3);
	boolean v174 = StorageManager.isEncrypted();
	boolean v173 = v174;
	boolean v176 = LockSettingsService.isCredentialRequiredToDecrypt();
	boolean v177 = LockSettingsService.isDoNotAskCredentialsOnBootSet();
	boolean v175 = phiInstruction;
	boolean v178 = p1.isNone();
	boolean v180 = LockSettingsService.isDeviceEncryptionEnabled();
	ContentResolver v181 = this.mContext.getContentResolver();
	boolean v182 = Settings$Global.putInt(v181, ""require_password_to_decrypt"", 0);
	boolean v183 = p1.isPattern();
	LockSettingsService.checkWritePermission(p2);
	this.mStorage.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	boolean v188 = p1.isNone();
	boolean v189 = p1.isPattern();
	String v190 = LockSettingsService.getString(""lockscreen.passwordhistory"", 0, p2);
	int v191 = LockSettingsService.getRequestedPasswordHistoryLength(p2);
	byte[] v192 = LockSettingsService.getHashFactor(p1, p2);
	String v193 = LockSettingsService.getSalt(p2);
	byte[] v194 = v193.getBytes();
	String v195 = p1.passwordToHistoryHash(v194, v192);
	String v197 = p1.legacyPasswordToHash(v194);
	boolean v198 = TextUtils.isEmpty(phiInstruction);
	String v199 = phiInstruction.split("","");
	StringJoiner v200 = new StringJoiner("","");
	StringJoiner v202 = v200.add(phiInstruction);
	String v203 = v200.toString();
	LockSettingsService.setString(""lockscreen.passwordhistory"", phiInstruction, p2);
	Object v205 = this.mContext.getSystemService(TrustManage.class);
	this.mService.reportEnabledTrustAgentsChanged(p2);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v8);
	return 1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @6 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 5,6 @9 exception:7,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 8,9,
goto (from iindex= 7 to iindex = 9),
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,6,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,17 @32 exception:18,
conditional branch(ne, to iindex=-1) 19,6,
22 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,20 @40 exception:21,
conditional branch(eq, to iindex=-1) 22,6,
24 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @46 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
goto (from iindex= 27 to iindex = 10),
35 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @62 exception:34,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, enforceFrpResolved()V > 1 @66 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 2 @2 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 5,4,6,7,7 @12 exception:8,
7 = invokestatic < Application, Landroid/provider/Settings$Secure, getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 2,3,4,5 @0 exception:6,
return 7,
conditional branch(ne, to iindex=-1) 9,7,
11 = phi  10,7,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsSecureGetInt(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 12,4,13,7,7 @27 exception:14,
7 = invokestatic < Application, Landroid/provider/Settings$Secure, getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I > 2,3,4,5 @0 exception:6,
return 7,
conditional branch(ne, to iindex=-1) 15,10,
16 = phi  7,10,
conditional branch(eq, to iindex=-1) 11,7,
conditional branch(ne, to iindex=-1) 16,7,
goto (from iindex= 21 to iindex = 9),
return,
38 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:37,
conditional branch(ne, to iindex=-1) 38,6,
40 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @76 exception:39,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 40,6,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
43 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 41,4 @84 exception:42,
44 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 43,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,44,6 @90 exception:45,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
return 21,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 3 @93 exception:47,
49 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @96 exception:48,
51 = phi  3,3,49,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 54,
56 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,51,4,6 @103 exception:55,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 2 @0 exception:6,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;)Ljava/lang/Object; > 3 @3 exception:8,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 10,
12 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @9 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 12,13,
monitorexit 10,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 16,4 @71 exception:17,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @75 exception:19,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 20,13,
35 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @81 exception:34,
conditional branch(eq, to iindex=-1) 35,13,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @87 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
return 40,
41 = getCaughtException ,
44 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 24,42,41 @97 exception:43,
goto (from iindex= 49 to iindex = 33),
47 = phi  3,37,3,3,3,33,
50 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 50,
51 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 18,
53 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, initializeSyntheticPasswordLocked([BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,51,47,4 @138 exception:52,
5 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 5 @2 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 5,7 @7 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 5,4 @10 exception:10,
13 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 5 @13 exception:12,
16 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 14,13 @19 exception:15,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @22 exception:17,
20 = binaryop(lt) 18 , 19,
conditional branch(ne, to iindex=-1) 20,21,
goto (from iindex= 15 to iindex = 2),
23 = phi  22,21,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 23,24 @37 exception:25,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @42 exception:27,
30 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, newSyntheticPasswordAndSid(Landroid/service/gatekeeper/IGateKeeperService;[BLcom/android/internal/widget/LockscreenCredential;I)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 26,28,2,3,4 @46 exception:29,
conditional branch(ne, to iindex=-1) 30,21,
31 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @61 exception:32,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)J > 31,33,3,30,4 @65 exception:34,
37 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @69 exception:36,
conditional branch(ne, to iindex=-1) 37,21,
conditional branch(ne, to iindex=-1) 2,21,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @79 exception:42,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, newSidForUser(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)V > 41,43,30,4 @83 exception:44,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @88 exception:50,
53 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,30,19,4 @96 exception:52,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveDiskEncryptionKey()[B > 30 @99 exception:54,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserKeyProtection(I[B)V > 1,4,55 @103 exception:56,
58 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveKeyStorePassword()[B > 30 @106 exception:57,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setKeystorePassword([BI)V > 1,58,4 @110 exception:59,
goto (from iindex= 55 to iindex = 10),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, fixateNewestUserKeyAuth(I)V > 1,4 @123 exception:66,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSyntheticPasswordHandleLocked(JI)V > 1,35,4 @126 exception:67,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onAuthTokenKnownForUser(ILcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;)V > 1,4,30 @129 exception:68,
return 30,
55 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedSetLockCredentialInternalLocked(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,2,47,4,5 @141 exception:54,
7 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 3 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,4 @8 exception:10,
conditional branch(eq, to iindex=-1) 11,9,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,4 @14 exception:12,
17 = getCaughtException ,
20 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 8,18,17 @22 exception:19,
goto (from iindex= 13 to iindex = 6),
22 = phi  3,3,13,3,3,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @32 exception:25,
27 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @38 exception:28,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 27,29,26,22,4,9 @45 exception:30,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 31,
33 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 31,
conditional branch(ne, to iindex=-1) 33,9,
conditional branch(eq, to iindex=-1) 32,9,
42 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @59 exception:41,
conditional branch(ne, to iindex=-1) 42,43,
45 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @67 exception:44,
conditional branch(ne, to iindex=-1) 45,34,
51 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 8,49 @75 exception:50,
return 9,
monitorexit 50,
return 55,
conditional branch(ne, to iindex=-1) 56,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,4,57,6 @119 exception:58,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, deleteFile(Ljava/lang/String;)V > 1,4 @4 exception:5,
8 = getCaughtException ,
invokevirtual < Application, Ljava/lang/Exception, printStackTrace()V > 8 @9 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @7 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,2 @10 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @13 exception:10,
14 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 12,11 @19 exception:13,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @26 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,2 @35 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @38 exception:23,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 15,24 @42 exception:25,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 27 @49 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 27,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 27,2 @58 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 27 @61 exception:34,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 26,35 @65 exception:36,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @72 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,2 @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @83 exception:50,
53 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 12,51,42 @87 exception:52,
return,
goto (from iindex= 9 to iindex = 4),
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifyPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @122 exception:59,
monitorexit 54,
61 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,4 @126 exception:60,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
4 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 2 @0 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
7 = invokevirtual < Application, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > 5,4 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, createPackageContextAsUser(Ljava/lang/String;ILandroid/os/UserHandle;)Landroid/content/Context; > 9,10,8,4 @27 exception:11,
13 = load_metadata: <Application,Landroid/os/UserManager>, <Primordial,Ljava/lang/Class>,
15 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 12,13 @33 exception:14,
32 = checkcast <Application,Landroid/os/UserManager>15 <Application,Landroid/os/UserManager>,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManagerCache, <Application,Ljava/util/HashMap> > 1,
35 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 33,4,32 @41 exception:34,
return 32,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 61,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,4 @132 exception:62,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
4 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
6 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 3,4 @4 exception:5,
7 = checkcast <Application,Landroid/app/trust/TrustManager>6 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, setDeviceLockedForUser(IZ)V > 7,2,8 @11 exception:9,
4 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
invokeinterface < Application, Landroid/app/trust/ITrustManager, setDeviceLockedForUser(IZ)V > 4,2,3 @2 exception:5,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,4 @135 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, onPostPasswordChanged(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,4 @138 exception:65,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @2 exception:5,
2 = invokestatic < Application, Landroid/os/storage/StorageManager, isEncrypted()Z > @0 exception:1,
return 2,
conditional branch(eq, to iindex=-1) 6,4,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldEncryptWithCredentials()Z > 1 @8 exception:7,
3 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialRequiredToDecrypt()Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isDoNotAskCredentialsOnBootSet()Z > 1 @6 exception:5,
conditional branch(ne, to iindex=-1) 6,4,
goto (from iindex= 7 to iindex = 2),
11 = phi  10,4,
return 11,
conditional branch(eq, to iindex=-1) 8,4,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setCredentialRequiredToDecrypt(Z)V > 1,4 @21 exception:11,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, isDeviceEncryptionEnabled()Z > @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 6 @8 exception:7,
11 = invokestatic < Application, Landroid/provider/Settings$Global, putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z > 8,9,2 @15 exception:10,
return,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,4,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,18,17,3 @33 exception:19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, updatePasswordHistory(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,2,3 @36 exception:22,
5 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isPattern()Z > 2 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,6,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,9,6,3 @17 exception:10,
conditional branch(ne, to iindex=-1) 11,6,
13 = phi  11,12,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getRequestedPasswordHistoryLength(I)I > 1,3 @26 exception:14,
conditional branch(ne, to iindex=-1) 15,6,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B > 1,2,3 @33 exception:16,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSalt(I)Ljava/lang/String; > 1,3 @37 exception:18,
21 = invokevirtual < Application, Ljava/lang/String, getBytes()[B > 19 @41 exception:20,
23 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, passwordToHistoryHash([B[B)Ljava/lang/String; > 2,21,17 @45 exception:22,
conditional branch(ne, to iindex=-1) 23,6,
27 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;)I > 24,25 @55 exception:26,
29 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, legacyPasswordToHash([B)Ljava/lang/String; > 2,21 @58 exception:28,
30 = phi  23,29,
35 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 13 @63 exception:34,
conditional branch(eq, to iindex=-1) 35,6,
38 = invokevirtual < Application, Ljava/lang/String, split(Ljava/lang/String;)[Ljava/lang/String; > 13,36 @72 exception:37,
39 = new <Application,Ljava/util/StringJoiner>@76,
invokespecial < Application, Ljava/util/StringJoiner, <init>(Ljava/lang/CharSequence;)V > 39,36 @78 exception:40,
42 = invokevirtual < Application, Ljava/util/StringJoiner, add(Ljava/lang/CharSequence;)Ljava/util/StringJoiner; > 39,30 @81 exception:41,
52 = phi  50,6,
44 = binaryop(add) 15 , 43,
conditional branch(ge, to iindex=-1) 52,44,
45 = arraylength 38,
conditional branch(ge, to iindex=-1) 52,45,
57 = invokevirtual < Application, Ljava/util/StringJoiner, toString()Ljava/lang/String; > 39 @100 exception:56,
59 = phi  12,30,57,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,9,59,3 @104 exception:64,
return,
23 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
24 = load_metadata: <Application,Landroid/app/trust/TrustManager>, <Primordial,Ljava/lang/Class>,
26 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/Class;)Ljava/lang/Object; > 23,24 @43 exception:25,
27 = checkcast <Application,Landroid/app/trust/TrustManager>26 <Application,Landroid/app/trust/TrustManager>,
invokevirtual < Application, Landroid/app/trust/TrustManager, reportEnabledTrustAgentsChanged(I)V > 27,3 @49 exception:28,
3 = getfield < Application, Landroid/app/trust/TrustManager, mService, <Application,Landroid/app/trust/ITrustManager> > 1,
invokeinterface < Application, Landroid/app/trust/ITrustManager, reportEnabledTrustAgentsChanged(I)V > 3,2 @2 exception:4,
return,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @141 exception:66,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 35 @144 exception:67,
return 57,","depth : 0
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	int v1 = p1.getType();
	boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v4 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v5 = p2.isNone();
	long v6 = Binder.clearCallingIdentity();
	p0.enforceFrpResolved();
	boolean v8 = p2.isNone();
	boolean v9 = p0.isProfileWithUnifiedLock(p3);
	UserInfo v10 = this.mUserManager.getProfileParent(p3);
	VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);
	p2.zeroize();
	LockscreenCredential v13 = LockscreenCredential.createNone();
	boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);
	p0.setSeparateProfileChallengeEnabledLocked(p3, 1, 0);
	p0.notifyPasswordChanged(p1, p3);
	boolean v17 = p0.isCredentialSharableWithParent(p3);
	p0.setDeviceUnlockedForUser(p3);
	p0.notifySeparateProfileChallengeChanged(p3);
	p0.onPostPasswordChanged(p1, p3);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v6);
	return 1;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void enforceFrpResolved(){
	ContentResolver v1 = this.mContext.getContentResolver();
	int v2 = this.mInjector.settingsSecureGetInt(v1, ""user_setup_complete"", 0, 0);
	int v3 = this.mInjector.settingsSecureGetInt(v1, ""secure_frp_mode"", 0, 0);
	return;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 2
public int settingsSecureGetInt(ContentResolver p1, String p2, int p3, int p4){
	int v1 = Settings$Secure.getIntForUser(p1, p2, p3, p4);
	return v1;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
depth : 1
public boolean setLockCredentialInternal(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	boolean v3 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	boolean v4 = p1.isNone();
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p3);
	boolean v6 = p0.isProfileWithUnifiedLock(p3);
	boolean v7 = p2.isNone();
	LockscreenCredential v8 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v9 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v10 = p0.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	boolean v11 = p0.spBasedSetLockCredentialInternalLocked(p1, phiInstruction, p3, p4);
	return v11;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[] p1, LockscreenCredential p2, int p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Initialize SyntheticPassword for user: "");
	StringBuilder v3 = v0.append(p3);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	long v6 = p0.getSyntheticPasswordHandleLocked(p3);
	Preconditions.checkState(phiInstruction, ""Cannot reinitialize SP"");
	IGateKeeperService v8 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationToken v9 = this.mSpManager.newSyntheticPasswordAndSid(v8, p1, p2, p3);
	IGateKeeperService v10 = p0.getGateKeeperService();
	long v11 = this.mSpManager.createPasswordBasedSyntheticPassword(v10, p2, v9, p3);
	boolean v12 = p2.isNone();
	IGateKeeperService v13 = p0.getGateKeeperService();
	this.mSpManager.newSidForUser(v13, v9, p3);
	IGateKeeperService v15 = p0.getGateKeeperService();
	VerifyCredentialResponse v16 = this.mSpManager.verifyChallenge(v15, v9, 0, p3);
	byte[] v17 = v9.deriveDiskEncryptionKey();
	p0.setUserKeyProtection(p3, v17);
	byte[] v19 = v9.deriveKeyStorePassword();
	p0.setKeystorePassword(v19, p3);
	p0.fixateNewestUserKeyAuth(p3);
	p0.setSyntheticPasswordHandleLocked(v11, p3);
	p0.onAuthTokenKnownForUser(p3, v9);
	return v9;
}
-----
depth : 2
public boolean spBasedSetLockCredentialInternalLocked(LockscreenCredential p1, LockscreenCredential p2, int p3, boolean p4){
	boolean v1 = p2.isNone();
	boolean v2 = p0.isProfileWithUnifiedLock(p3);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p3);
	int v4 = Slog.e(""LockSettingsService"", ""Failed to decrypt child profile key"", caughtException);
	long v5 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p3, 0);
	int v8 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v9 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v10 = Slog.w(""LockSettingsService"", ""Failed to enroll: rate limit exceeded."");
	return 0;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	caughtException.printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
depth : 1
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public UserManager getUserManagerFromCache(int p1){
	UserHandle v1 = UserHandle.of(p1);
	boolean v2 = this.mUserManagerCache.containsKey(v1);
	Context v3 = this.mContext.createPackageContextAsUser(""system"", 0, v1);
	Object v4 = v3.getSystemService(UserManage.class);
	Object v5 = this.mUserManagerCache.put(v1, v4);
	return v4;
}
-----
depth : 1
public void setDeviceUnlockedForUser(int p1){
	Object v1 = this.mContext.getSystemService(TrustManage.class);
	v1.setDeviceLockedForUser(p1, 0);
	return;
}
-----
depth : 2
public void setDeviceLockedForUser(int p1, boolean p2){
	this.mService.setDeviceLockedForUser(p1, p2);
	return;
}
-----
depth : 1
public void onPostPasswordChanged(LockscreenCredential p1, int p2){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	boolean v2 = p0.shouldEncryptWithCredentials();
	boolean v3 = p1.isNone();
	p0.setCredentialRequiredToDecrypt(0);
	boolean v5 = p1.isPattern();
	p0.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	p0.updatePasswordHistory(p1, p2);
	Object v8 = this.mContext.getSystemService(TrustManage.class);
	v8.reportEnabledTrustAgentsChanged(p2);
	return;
}
-----
depth : 2
public boolean isDeviceEncryptionEnabled(){
	boolean v1 = StorageManager.isEncrypted();
	return v1;
}
-----
depth : 2
public boolean shouldEncryptWithCredentials(){
	boolean v1 = p0.isCredentialRequiredToDecrypt();
	boolean v2 = p0.isDoNotAskCredentialsOnBootSet();
	return phiInstruction;
}
-----
depth : 2
public void setCredentialRequiredToDecrypt(boolean p1){
	boolean v1 = LockSettingsService.isDeviceEncryptionEnabled();
	ContentResolver v2 = this.mContext.getContentResolver();
	boolean v3 = Settings$Global.putInt(v2, ""require_password_to_decrypt"", p1);
	return;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void updatePasswordHistory(LockscreenCredential p1, int p2){
	boolean v1 = p1.isNone();
	boolean v2 = p1.isPattern();
	String v3 = p0.getString(""lockscreen.passwordhistory"", 0, p2);
	int v4 = p0.getRequestedPasswordHistoryLength(p2);
	byte[] v5 = p0.getHashFactor(p1, p2);
	String v6 = p0.getSalt(p2);
	byte[] v7 = v6.getBytes();
	String v8 = p1.passwordToHistoryHash(v7, v5);
	int v9 = Slog.e(""LockSettingsService"", ""Compute new style password hash failed, fallback to legacy style"");
	String v10 = p1.legacyPasswordToHash(v7);
	boolean v11 = TextUtils.isEmpty(phiInstruction);
	String v12 = phiInstruction.split("","");
	StringJoiner v12 = new StringJoiner("","");
	StringJoiner v14 = v12.add(phiInstruction);
	String v15 = v12.toString();
	p0.setString(""lockscreen.passwordhistory"", phiInstruction, p2);
	return;
}
-----
depth : 2
public void reportEnabledTrustAgentsChanged(int p1){
	this.mService.reportEnabledTrustAgentsChanged(p1);
	return;
}
-----
","public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	int v1 = this.mType;
	boolean v4 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v5 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	boolean v6 = p0.hasPermission(""android.permission.SET_INITIAL_LOCK"");
	boolean v7 = p2.isNone();
	long v8 = Binder.clearCallingIdentity();
	ContentResolver v10 = this.mContext.getContentResolver();
	int v12 = Settings$Secure.getIntForUser(v10, ""user_setup_complete"", 0, 0);
	int v11 = v12;
	int v14 = Settings$Secure.getIntForUser(v10, ""secure_frp_mode"", 0, 0);
	int v13 = v14;
	boolean v15 = p2.isNone();
	UserManager v18 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v19 = v18.isCredentialSharableWithParent();
	boolean v17 = v19;
	boolean v21 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v20 = v21;
	boolean v16 = phiInstruction;
	UserInfo v22 = this.mUserManager.getProfileParent(p3);
	boolean v24 = phiInstruction;
	boolean v26 = phiInstruction;
	long v28 = Binder.clearCallingIdentity();
	boolean v30 = p1.isNone();
	ContentResolver v31 = this.mContext.getContentResolver();
	int v32 = this.mInjector.settingsGlobalGetInt(v31, ""device_provisioned"", 0);
	VerifyCredentialResponse v33 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
	LockSettingsStorage$CredentialHash v34 = this.mStorage.readCredentialHash(p2);
	boolean v35 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v41 = p1.getType();
	VerifyCredentialResponse v29 = VerifyCredentialResponse.ERROR;
	Binder.restoreCallingIdentity(v28);
	LockSettingsService$$ExternalSyntheticLambda3 v47 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v49 = this.mHandler.postDelayed(v47, 2000);
	VerifyCredentialResponse v23 = v29;
	p2.zeroize();
	LockscreenCredential v51 = LockscreenCredential.createNone();
	Object v53 = Objects.requireNonNull(p1);
	Object v54 = Objects.requireNonNull(phiInstruction);
	LockSettingsStorage$PersistentData v56 = this.mStorage.readPersistentDataBlock();
	boolean v55 = phiInstruction;
	boolean v57 = p1.isNone();
	LockSettingsStorage$CredentialHash v59 = LockSettingsStorage.readPasswordHashIfExists(p3);
	LockSettingsStorage$CredentialHash v60 = LockSettingsStorage.readPatternHashIfExists(p3);
	LockSettingsStorage$CredentialHash v61 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v58 = v61;
	boolean v63 = LockSettingsService.isCredentialSharableWithParent(p3);
	boolean v64 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p3);
	boolean v62 = phiInstruction;
	boolean v65 = phiInstruction.isNone();
	byte[] v67 = this.mStorage.readChildProfileLock(p3);
	byte[] v68 = Arrays.copyOfRange(v67, 0, 12);
	byte[] v69 = Arrays.copyOfRange(v67, 12, v67.length);
	StringBuilder v70 = new StringBuilder();
	StringBuilder v72 = v70.append(""profile_key_name_decrypt_"");
	StringBuilder v73 = v70.append(p3);
	String v74 = v70.toString();
	Key v75 = this.mJavaKeyStore.getKey(v74, 0);
	Cipher v76 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v77 = new GCMParameterSpec(128,v68);
	v76.init(2, v75, v77);
	byte[] v80 = v76.doFinal(v69);
	LockscreenCredential v81 = LockscreenCredential.createManagedPassword(v80);
	Arrays.fill(v80, 0);
	this.mManagedProfilePasswordCache.storePassword(p3, v81);
	LockscreenCredential v66 = v81;
	long v92 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	Preconditions.checkState(phiInstruction, ""Cannot reinitialize SP"");
	IGateKeeperService v94 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationToken v95 = this.mSpManager.newSyntheticPasswordAndSid(v94, LockSettingsStorage$CredentialHash.hash, phiInstruction, p3);
	IGateKeeperService v96 = LockSettingsService.getGateKeeperService();
	long v97 = this.mSpManager.createPasswordBasedSyntheticPassword(v96, phiInstruction, v95, p3);
	boolean v98 = phiInstruction.isNone();
	IGateKeeperService v99 = LockSettingsService.getGateKeeperService();
	this.mSpManager.newSidForUser(v99, v95, p3);
	IGateKeeperService v101 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v102 = this.mSpManager.verifyChallenge(v101, v95, 0, p3);
	byte[] v103 = v95.deriveDiskEncryptionKey();
	LockSettingsService.setUserKeyProtection(p3, v103);
	byte[] v105 = v95.deriveKeyStorePassword();
	LockSettingsService.setKeystorePassword(v105, p3);
	LockSettingsService.fixateNewestUserKeyAuth(p3);
	LockSettingsService.setSyntheticPasswordHandleLocked(v97, p3);
	LockSettingsService.onAuthTokenKnownForUser(p3, v95);
	SyntheticPasswordManager$AuthenticationToken v85 = v95;
	boolean v111 = phiInstruction.isNone();
	boolean v112 = LockSettingsService.isProfileWithUnifiedLock(p3);
	LockscreenCredential v113 = LockSettingsService.getDecryptedPasswordForTiedProfile(p3);
	long v115 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v116 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v117 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v116, v115, phiInstruction, p3, 0);
	int v118 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	int v119 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	boolean v110 = 0;
	boolean v52 = v110;
	LockSettingsService.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v124 = ""lock_pattern_autolock"".equals(""lockscreen.profilechallenge"");
	int v125 = LockSettingsService.getCredentialTypeInternal(p1);
	boolean v122 = phiInstruction;
	LockSettingsService.checkWritePermission(p1);
	this.mStorage.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	String v130 = LockSettingsStorage.getChildProfileLockFile(p1);
	LockSettingsStorage.deleteFile(v130);
	caughtException.printStackTrace();
	StringBuilder v140 = new StringBuilder();
	StringBuilder v142 = v140.append(""profile_key_name_encrypt_"");
	StringBuilder v143 = v140.append(p1);
	String v144 = v140.toString();
	this.mJavaKeyStore.deleteEntry(v144);
	StringBuilder v146 = new StringBuilder();
	StringBuilder v148 = v146.append(""profile_key_name_decrypt_"");
	StringBuilder v149 = v146.append(p1);
	String v150 = v146.toString();
	this.mJavaKeyStore.deleteEntry(v150);
	p0.notifyPasswordChanged(p1, p3);
	UserHandle v161 = UserHandle.of(p1);
	boolean v162 = this.mUserManagerCache.containsKey(v161);
	Context v163 = this.mContext.createPackageContextAsUser(""system"", 0, v161);
	Object v164 = v163.getSystemService(UserManage.class);
	Object v165 = this.mUserManagerCache.put(v161, v164);
	UserManager v160 = v164;
	boolean v166 = v160.isCredentialSharableWithParent();
	boolean v159 = v166;
	Object v168 = this.mContext.getSystemService(TrustManage.class);
	this.mService.setDeviceLockedForUser(p1, 0);
	p0.notifySeparateProfileChallengeChanged(p3);
	boolean v174 = StorageManager.isEncrypted();
	boolean v173 = v174;
	boolean v176 = LockSettingsService.isCredentialRequiredToDecrypt();
	boolean v177 = LockSettingsService.isDoNotAskCredentialsOnBootSet();
	boolean v175 = phiInstruction;
	boolean v178 = p1.isNone();
	boolean v180 = LockSettingsService.isDeviceEncryptionEnabled();
	ContentResolver v181 = this.mContext.getContentResolver();
	boolean v182 = Settings$Global.putInt(v181, ""require_password_to_decrypt"", 0);
	boolean v183 = p1.isPattern();
	LockSettingsService.checkWritePermission(p2);
	this.mStorage.setBoolean(""lockscreen.patterneverchosen"", 1, p2);
	boolean v188 = p1.isNone();
	boolean v189 = p1.isPattern();
	String v190 = LockSettingsService.getString(""lockscreen.passwordhistory"", 0, p2);
	int v191 = LockSettingsService.getRequestedPasswordHistoryLength(p2);
	byte[] v192 = LockSettingsService.getHashFactor(p1, p2);
	String v193 = LockSettingsService.getSalt(p2);
	byte[] v194 = v193.getBytes();
	String v195 = p1.passwordToHistoryHash(v194, v192);
	String v197 = p1.legacyPasswordToHash(v194);
	boolean v198 = TextUtils.isEmpty(phiInstruction);
	String v199 = phiInstruction.split("","");
	StringJoiner v200 = new StringJoiner("","");
	StringJoiner v202 = v200.add(phiInstruction);
	String v203 = v200.toString();
	LockSettingsService.setString(""lockscreen.passwordhistory"", phiInstruction, p2);
	Object v205 = this.mContext.getSystemService(TrustManage.class);
	this.mService.reportEnabledTrustAgentsChanged(p2);
	p0.scheduleGc();
	Binder.restoreCallingIdentity(v8);
	return 1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;","0","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
return 6,","depth : 0
public String generateKeyWithMetadata(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
	return v1;
}
-----
","public String generateKeyWithMetadata(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;","1","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @5 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:8,
11 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:10,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 13,11 @20 exception:14,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, generateAndStoreKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B)[B > 26,15,11,9,2,3 @30 exception:27,
29 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 29,11,9,2,28 @36 exception:30,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,11,9,2 @39 exception:39,
return 40,
return 6,","depth : 0
public String generateKeyWithMetadata(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
	return v1;
}
-----
depth : 1
public String generateKeyWithMetadata(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4);
	byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6);
	String v8 = p0.getAlias(v4, v3, p1);
	return v8;
}
-----
","public String generateKeyWithMetadata(String p1, byte[] p2){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v3 = Objects.requireNonNull(p1, ""alias is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	byte[] v7 = this.mRecoverableKeyGenerator.generateAndStoreKey(v6, v5, v4, p1, p2);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, v7);
	String v9 = RecoverableKeyStoreManager.getAlias(v5, v4, p1);
	String v1 = v9;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;","2","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @5 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:8,
11 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:10,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 13,11 @20 exception:14,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, init(I)V > 1,2 @0 exception:3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getDecryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformDecryptionKey; > 1,2 @3 exception:4,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 1,2 @6 exception:6,
10 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
12 = new <Application,[Ljava/lang/Object>@1411 ,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @17 exception:14,
arraystore 12[13] = 15,
18 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 10,16,12 @25 exception:17,
21 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 19,18 @31 exception:20,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, regenerate(I)V > 1,2 @34 exception:22,
24 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 1,2 @37 exception:23,
return 24,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, generateAndStoreKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B)[B > 26,15,11,9,2,3 @30 exception:27,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mKeyGenerator, <Application,Ljavax/crypto/KeyGenerator> > 1,
invokevirtual < Application, Ljavax/crypto/KeyGenerator, init(I)V > 7,8 @4 exception:9,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mKeyGenerator, <Application,Ljavax/crypto/KeyGenerator> > 1,
12 = invokevirtual < Application, Ljavax/crypto/KeyGenerator, generateKey()Ljavax/crypto/SecretKey; > 10 @9 exception:11,
14 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/WrappedKey, fromSecretKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;Ljavax/crypto/SecretKey;[B)Lcom/android/server/locksettings/recoverablekeystore/WrappedKey; > 2,12,6 @13 exception:13,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, insertKey(IILjava/lang/String;Lcom/android/server/locksettings/recoverablekeystore/WrappedKey;)J > 15,3,4,5,14 @19 exception:16,
19 = binaryop(lt) 17 , 18,
conditional branch(eq, to iindex=-1) 19,21,
32 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
34 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 32,3,4,20 @32 exception:33,
36 = binaryop(lt) 34 , 35,
conditional branch(ge, to iindex=-1) 36,21,
40 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 37,38 @46 exception:39,
46 = invokeinterface < Application, Ljavax/crypto/SecretKey, getEncoded()[B > 12 @49 exception:45,
return 46,
29 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 29,11,9,2,28 @36 exception:30,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
10 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @5 exception:9,
arraystore 8[11] = 10,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @12 exception:12,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
18 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 16 @23 exception:17,
arraystore 8[19] = 18,
22 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 6,20,8 @32 exception:21,
25 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 23,22 @38 exception:24,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getInternalAlias(IILjava/lang/String;)Ljava/lang/String; > 1,2,3,4 @43 exception:27,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
invokespecial < Application, Ljavax/crypto/spec/SecretKeySpec, <init>([BLjava/lang/String;)V > 30,5,31 @53 exception:32,
invokespecial < Application, Ljava/security/KeyStore$SecretKeyEntry, <init>(Ljavax/crypto/SecretKey;)V > 29,30 @56 exception:33,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
invokespecial < Application, Landroid/security/keystore/KeyProtection$Builder, <init>(I)V > 34,19 @61 exception:35,
37 = new <Application,[Ljava/lang/String>@6614 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 34,37 @70 exception:38,
41 = new <Application,[Ljava/lang/String>@7614 ,
43 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 39,41 @80 exception:42,
45 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, build()Landroid/security/keystore/KeyProtection; > 43 @84 exception:44,
invokeinterface < Application, Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy, setEntry(Ljava/lang/String;Ljava/security/KeyStore$Entry;Ljava/security/KeyStore$ProtectionParameter;)V > 26,28,29,45 @88 exception:46,
return,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,11,9,2 @39 exception:39,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getGrantAlias(IILjava/lang/String;)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
return 7,
return 40,
return 6,","depth : 0
public String generateKeyWithMetadata(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
	return v1;
}
-----
depth : 1
public String generateKeyWithMetadata(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4);
	byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6);
	String v8 = p0.getAlias(v4, v3, p1);
	return v8;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	PlatformEncryptionKey v3 = p0.getEncryptKeyInternal(p1);
	Object v3 = new Object(1);
	Integer v4 = Integer.valueOf(p1);
	String v5 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v3);
	int v6 = Log.i(""PlatformKeyManager"", v5);
	p0.regenerate(p1);
	PlatformEncryptionKey v8 = p0.getEncryptKeyInternal(p1);
	return v8;
}
-----
depth : 2
public byte[] generateAndStoreKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5){
	this.mKeyGenerator.init(256);
	SecretKey v2 = this.mKeyGenerator.generateKey();
	WrappedKey v3 = WrappedKey.fromSecretKey(p1, v2, p5);
	long v4 = this.mDatabase.insertKey(p2, p3, p4, v3);
	long v5 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	int v6 = Log.e(""PlatformKeyGen"", ""Failed to set the shoudCreateSnapshot flag in the local DB."");
	byte[] v7 = v2.getEncoded();
	return v7;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","public String generateKeyWithMetadata(String p1, byte[] p2){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v16);
	PlatformDecryptionKey v19 = PlatformKeyManager.getDecryptKeyInternal(v16);
	PlatformEncryptionKey v20 = PlatformKeyManager.getEncryptKeyInternal(v16);
	Object v21 = new Object(1);
	Integer v22 = Integer.valueOf(v16);
	String v23 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v21);
	int v24 = Log.i(""PlatformKeyManager"", v23);
	PlatformKeyManager.regenerate(v16);
	PlatformEncryptionKey v26 = PlatformKeyManager.getEncryptKeyInternal(v16);
	PlatformEncryptionKey v17 = v26;
	this.mKeyGenerator.init(256);
	SecretKey v29 = this.mKeyGenerator.generateKey();
	WrappedKey v30 = WrappedKey.fromSecretKey(v17, v29, p2);
	long v31 = this.mDatabase.insertKey(v16, v15, p1, v30);
	long v32 = this.mDatabase.setShouldCreateSnapshot(v16, v15, 1);
	int v33 = Log.e(""PlatformKeyGen"", ""Failed to set the shoudCreateSnapshot flag in the local DB."");
	byte[] v34 = v29.getEncoded();
	byte[] v27 = v34;
	Object v36 = new Object(4);
	Integer v37 = Integer.valueOf(v16);
	Integer v38 = Integer.valueOf(v15);
	Integer v39 = Integer.valueOf(v27.length);
	String v40 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v36);
	int v41 = Log.i(""RecoverableAppKeyStore"", v40);
	String v42 = ApplicationKeyStorage.getInternalAlias(v16, v15, p1);
	KeyStore$SecretKeyEntry v43 = new KeyStore$SecretKeyEntry(v44);
	SecretKeySpec v44 = new SecretKeySpec(v27,""AES"");
	KeyProtection$Builder v47 = new KeyProtection$Builder(3);
	String v49 = new String(1);
	KeyProtection$Builder v50 = v47.setBlockModes(v49);
	String v51 = new String(1);
	KeyProtection$Builder v52 = v50.setEncryptionPaddings(v51);
	KeyProtection v53 = v52.build();
	this.mKeyStore.setEntry(v42, v43, v53);
	String v56 = this.mApplicationKeyStorage.getGrantAlias(v16, v15, p1);
	String v55 = v56;
	String v1 = v55;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;","2","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @5 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:8,
11 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:10,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 13,11 @20 exception:14,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, init(I)V > 1,2 @0 exception:3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getDecryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformDecryptionKey; > 1,2 @3 exception:4,
10 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
12 = new <Application,[Ljava/lang/Object>@1411 ,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @17 exception:14,
arraystore 12[13] = 15,
18 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 10,16,12 @25 exception:17,
21 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 19,18 @31 exception:20,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, regenerate(I)V > 1,2 @34 exception:22,
24 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 1,2 @37 exception:23,
return 24,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, generateAndStoreKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B)[B > 26,15,11,9,2,3 @30 exception:27,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mKeyGenerator, <Application,Ljavax/crypto/KeyGenerator> > 1,
invokevirtual < Application, Ljavax/crypto/KeyGenerator, init(I)V > 7,8 @4 exception:9,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mKeyGenerator, <Application,Ljavax/crypto/KeyGenerator> > 1,
12 = invokevirtual < Application, Ljavax/crypto/KeyGenerator, generateKey()Ljavax/crypto/SecretKey; > 10 @9 exception:11,
14 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/WrappedKey, fromSecretKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;Ljavax/crypto/SecretKey;[B)Lcom/android/server/locksettings/recoverablekeystore/WrappedKey; > 2,12,6 @13 exception:13,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, insertKey(IILjava/lang/String;Lcom/android/server/locksettings/recoverablekeystore/WrappedKey;)J > 15,3,4,5,14 @19 exception:16,
19 = binaryop(lt) 17 , 18,
conditional branch(eq, to iindex=-1) 19,21,
32 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
34 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 32,3,4,20 @32 exception:33,
36 = binaryop(lt) 34 , 35,
conditional branch(ge, to iindex=-1) 36,21,
40 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 37,38 @46 exception:39,
46 = invokeinterface < Application, Ljavax/crypto/SecretKey, getEncoded()[B > 12 @49 exception:45,
return 46,
29 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 29,11,9,2,28 @36 exception:30,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
10 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @5 exception:9,
arraystore 8[11] = 10,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @12 exception:12,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
18 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 16 @23 exception:17,
arraystore 8[19] = 18,
22 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 6,20,8 @32 exception:21,
25 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 23,22 @38 exception:24,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getInternalAlias(IILjava/lang/String;)Ljava/lang/String; > 1,2,3,4 @43 exception:27,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
invokespecial < Application, Ljavax/crypto/spec/SecretKeySpec, <init>([BLjava/lang/String;)V > 30,5,31 @53 exception:32,
invokespecial < Application, Ljava/security/KeyStore$SecretKeyEntry, <init>(Ljavax/crypto/SecretKey;)V > 29,30 @56 exception:33,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
invokespecial < Application, Landroid/security/keystore/KeyProtection$Builder, <init>(I)V > 34,19 @61 exception:35,
37 = new <Application,[Ljava/lang/String>@6614 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 34,37 @70 exception:38,
41 = new <Application,[Ljava/lang/String>@7614 ,
43 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 39,41 @80 exception:42,
45 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, build()Landroid/security/keystore/KeyProtection; > 43 @84 exception:44,
invokeinterface < Application, Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy, setEntry(Ljava/lang/String;Ljava/security/KeyStore$Entry;Ljava/security/KeyStore$ProtectionParameter;)V > 26,28,29,45 @88 exception:46,
return,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,11,9,2 @39 exception:39,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getGrantAlias(IILjava/lang/String;)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
return 7,
return 40,
return 6,","depth : 0
public String generateKeyWithMetadata(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
	return v1;
}
-----
depth : 1
public String generateKeyWithMetadata(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4);
	byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6);
	String v8 = p0.getAlias(v4, v3, p1);
	return v8;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	Object v2 = new Object(1);
	Integer v3 = Integer.valueOf(p1);
	String v4 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v2);
	int v5 = Log.i(""PlatformKeyManager"", v4);
	p0.regenerate(p1);
	PlatformEncryptionKey v7 = p0.getEncryptKeyInternal(p1);
	return v7;
}
-----
depth : 2
public byte[] generateAndStoreKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5){
	this.mKeyGenerator.init(256);
	SecretKey v2 = this.mKeyGenerator.generateKey();
	WrappedKey v3 = WrappedKey.fromSecretKey(p1, v2, p5);
	long v4 = this.mDatabase.insertKey(p2, p3, p4, v3);
	long v5 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	int v6 = Log.e(""PlatformKeyGen"", ""Failed to set the shoudCreateSnapshot flag in the local DB."");
	byte[] v7 = v2.getEncoded();
	return v7;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","public String generateKeyWithMetadata(String p1, byte[] p2){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v16);
	PlatformDecryptionKey v19 = PlatformKeyManager.getDecryptKeyInternal(v16);
	Object v20 = new Object(1);
	Integer v21 = Integer.valueOf(v16);
	String v22 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v20);
	int v23 = Log.i(""PlatformKeyManager"", v22);
	PlatformKeyManager.regenerate(v16);
	PlatformEncryptionKey v25 = PlatformKeyManager.getEncryptKeyInternal(v16);
	PlatformEncryptionKey v17 = v25;
	this.mKeyGenerator.init(256);
	SecretKey v28 = this.mKeyGenerator.generateKey();
	WrappedKey v29 = WrappedKey.fromSecretKey(v17, v28, p2);
	long v30 = this.mDatabase.insertKey(v16, v15, p1, v29);
	long v31 = this.mDatabase.setShouldCreateSnapshot(v16, v15, 1);
	int v32 = Log.e(""PlatformKeyGen"", ""Failed to set the shoudCreateSnapshot flag in the local DB."");
	byte[] v33 = v28.getEncoded();
	byte[] v26 = v33;
	Object v35 = new Object(4);
	Integer v36 = Integer.valueOf(v16);
	Integer v37 = Integer.valueOf(v15);
	Integer v38 = Integer.valueOf(v26.length);
	String v39 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v35);
	int v40 = Log.i(""RecoverableAppKeyStore"", v39);
	String v41 = ApplicationKeyStorage.getInternalAlias(v16, v15, p1);
	KeyStore$SecretKeyEntry v42 = new KeyStore$SecretKeyEntry(v43);
	SecretKeySpec v43 = new SecretKeySpec(v26,""AES"");
	KeyProtection$Builder v46 = new KeyProtection$Builder(3);
	String v48 = new String(1);
	KeyProtection$Builder v49 = v46.setBlockModes(v48);
	String v50 = new String(1);
	KeyProtection$Builder v51 = v49.setEncryptionPaddings(v50);
	KeyProtection v52 = v51.build();
	this.mKeyStore.setEntry(v41, v42, v52);
	String v55 = this.mApplicationKeyStorage.getGrantAlias(v16, v15, p1);
	String v54 = v55;
	String v1 = v54;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 6,2,3,4 @5 exception:7,
return 8,","depth : 0
public String getString(String p1, String p2, int p3){
	p0.checkReadPermission(p1, p3);
	String v2 = this.mStorage.getString(p1, p2, p3);
	return v2;
}
-----
","public String getString(String p1, String p2, int p3){
	p0.checkReadPermission(p1, p3);
	String v2 = this.mStorage.getString(p1, p2, p3);
	return v2;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 6,2,3,4 @5 exception:7,
conditional branch(ne, to iindex=-1) 4,5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
11 = phi  2,10,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readKeyValue(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,11,3,4 @16 exception:12,
return 13,
return 8,","depth : 0
public String getString(String p1, String p2, int p3){
	p0.checkReadPermission(p1, p3);
	String v2 = this.mStorage.getString(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public String getString(String p1, String p2, int p3){
	boolean v1 = ""legacy_lock_pattern_enabled"".equals(p1);
	String v2 = p0.readKeyValue(phiInstruction, p2, p3);
	return v2;
}
-----
","public String getString(String p1, String p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v4 = ""legacy_lock_pattern_enabled"".equals(p1);
	String v5 = LockSettingsStorage.readKeyValue(phiInstruction, p2, p3);
	String v3 = v5;
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 6,2,3,4 @5 exception:7,
conditional branch(ne, to iindex=-1) 4,5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
11 = phi  2,10,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readKeyValue(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,11,3,4 @16 exception:12,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, hasKeyValue(Ljava/lang/String;I)Z > 6,2,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @21 exception:11,
monitorexit 5,
13 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, DEFAULT, <Application,Ljava/lang/Object> >,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
16 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 14 @30 exception:15,
18 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_QUERY, <Application,[Ljava/lang/String> >,
21 = new <Application,[Ljava/lang/String>@4220 ,
23 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 4 @44 exception:22,
arraystore 21[9] = 23,
arraystore 21[24] = 2,
26 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 16,17,18,19,21,9,9,9 @57 exception:25,
conditional branch(eq, to iindex=-1) 26,9,
28 = invokeinterface < Application, Landroid/database/Cursor, moveToFirst()Z > 26 @63 exception:27,
conditional branch(eq, to iindex=-1) 28,9,
30 = invokeinterface < Application, Landroid/database/Cursor, getString(I)Ljava/lang/String; > 26,9 @69 exception:29,
goto (from iindex= 41 to iindex = 2),
31 = phi  30,13,
invokeinterface < Application, Landroid/database/Cursor, close()V > 26 @75 exception:34,
goto (from iindex= 44 to iindex = 2),
35 = phi  31,13,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, putKeyValueIfUnchanged(Ljava/lang/String;Ljava/lang/Object;II)V > 38,2,35,4,12 @82 exception:39,
conditional branch(ne, to iindex=-1) 35,13,
goto (from iindex= 49 to iindex = 4),
41 = phi  3,40,
return 41,
return 13,
return 8,","depth : 0
public String getString(String p1, String p2, int p3){
	p0.checkReadPermission(p1, p3);
	String v2 = this.mStorage.getString(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public String getString(String p1, String p2, int p3){
	boolean v1 = ""legacy_lock_pattern_enabled"".equals(p1);
	String v2 = p0.readKeyValue(phiInstruction, p2, p3);
	return v2;
}
-----
depth : 2
public String readKeyValue(String p1, String p2, int p3){
	boolean v1 = this.mCache.hasKeyValue(p1, p3);
	int v2 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v3 = this.mOpenHelper.getReadableDatabase();
	String v3 = new String(2);
	String v4 = Integer.toString(p3);
	Cursor v5 = v3.query(""locksettings"", this.COLUMNS_FOR_QUERY, ""user=? AND name=?"", v3, 0, 0, 0);
	boolean v6 = v5.moveToFirst();
	String v7 = v5.getString(0);
	v5.close();
	this.mCache.putKeyValueIfUnchanged(p1, phiInstruction, p3, v2);
	return phiInstruction;
}
-----
","public String getString(String p1, String p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v4 = ""legacy_lock_pattern_enabled"".equals(p1);
	boolean v6 = this.mCache.hasKeyValue(phiInstruction, p3);
	int v7 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v8 = this.mOpenHelper.getReadableDatabase();
	String v9 = new String(2);
	String v10 = Integer.toString(p3);
	Cursor v11 = v8.query(""locksettings"", this.COLUMNS_FOR_QUERY, ""user=? AND name=?"", v9, 0, 0, 0);
	boolean v12 = v11.moveToFirst();
	String v13 = v11.getString(0);
	v11.close();
	this.mCache.putKeyValueIfUnchanged(phiInstruction, phiInstruction, p3, v7);
	String v5 = phiInstruction;
	String v3 = v5;
	return v3;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:3,
5 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z > 6,2 @9 exception:7,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 5 @13 exception:13,
return 8,","depth : 0
public boolean registerWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.registerWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
","public boolean registerWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.registerWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
5 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z > 6,2 @9 exception:7,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mListeners, <Application,Landroid/os/RemoteCallbackList> > 1,
5 = invokevirtual < Application, Landroid/os/RemoteCallbackList, register(Landroid/os/IInterface;)Z > 3,2 @2 exception:4,
return 5,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 5 @13 exception:13,
return 8,","depth : 0
public boolean registerWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.registerWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean registerWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	boolean v1 = this.mListeners.register(p1);
	return v1;
}
-----
","public boolean registerWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = this.mListeners.register(p1);
	boolean v6 = v7;
	Binder.restoreCallingIdentity(v5);
	return v6;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","removeGatekeeperPasswordHandle(J)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
invokevirtual < Application, Landroid/util/LongSparseArray, remove(J)V > 5,2 @8 exception:6,
monitorexit 4,
return,","depth : 0
public void removeGatekeeperPasswordHandle(long p1){
	p0.checkPasswordReadPermission();
	this.mGatekeeperPasswords.remove(p1);
	return;
}
-----
","public void removeGatekeeperPasswordHandle(long p1){
	p0.checkPasswordReadPermission();
	this.mGatekeeperPasswords.remove(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeGatekeeperPasswordHandle(J)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
invokevirtual < Application, Landroid/util/LongSparseArray, remove(J)V > 5,2 @8 exception:6,
monitorexit 4,
return,","depth : 0
public void removeGatekeeperPasswordHandle(long p1){
	p0.checkPasswordReadPermission();
	this.mGatekeeperPasswords.remove(p1);
	return;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
","public void removeGatekeeperPasswordHandle(long p1){
	this.mGatekeeperPasswords.remove(p1);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V > 3,2 @2 exception:4,
return,","depth : 0
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	this.mRecoverableKeyStoreManager.setSnapshotCreatedPendingIntent(p1);
	return;
}
-----
","public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	this.mRecoverableKeyStoreManager.setSnapshotCreatedPendingIntent(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @3 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mListenersStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, setSnapshotListener(ILandroid/app/PendingIntent;)V > 6,5,2 @9 exception:7,
return,
return,","depth : 0
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	this.mRecoverableKeyStoreManager.setSnapshotCreatedPendingIntent(p1);
	return;
}
-----
depth : 1
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	this.mListenersStorage.setSnapshotListener(v2, p1);
	return;
}
-----
","public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v3 = Binder.getCallingUid();
	this.mListenersStorage.setSnapshotListener(v3, p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @3 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mListenersStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, setSnapshotListener(ILandroid/app/PendingIntent;)V > 6,5,2 @9 exception:7,
monitorenter 1,
5 = new <Application,Ljava/lang/StringBuilder>@3,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 5 @5 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 5,7 @10 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 5,2 @13 exception:10,
13 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 5 @16 exception:12,
15 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 4,13 @20 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, mAgentIntents, <Application,Landroid/util/SparseArray> > 1,
invokevirtual < Application, Landroid/util/SparseArray, put(ILjava/lang/Object;)V > 16,2,3 @25 exception:17,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, mAgentsWithPendingSnapshots, <Application,Landroid/util/ArraySet> > 1,
20 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @30 exception:19,
22 = invokevirtual < Application, Landroid/util/ArraySet, contains(Ljava/lang/Object;)Z > 18,20 @34 exception:21,
conditional branch(eq, to iindex=-1) 22,23,
26 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 4,24 @44 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, tryToSendIntent(ILandroid/app/PendingIntent;)V > 1,2,3 @47 exception:27,
monitorexit 1,
return,
return,
return,","depth : 0
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	this.mRecoverableKeyStoreManager.setSnapshotCreatedPendingIntent(p1);
	return;
}
-----
depth : 1
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	this.mListenersStorage.setSnapshotListener(v2, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public void setSnapshotListener(int p1, PendingIntent p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Registered listener for agent with uid "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Log.i(""RecoverySnapshotLstnrs"", v4);
	this.mAgentIntents.put(p1, p2);
	Integer v7 = Integer.valueOf(p1);
	boolean v8 = this.mAgentsWithPendingSnapshots.contains(v7);
	int v9 = Log.i(""RecoverySnapshotLstnrs"", ""Snapshot already created for agent. Immediately triggering intent."");
	p0.tryToSendIntent(p1, p2);
	return;
}
-----
","public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = Binder.getCallingUid();
	StringBuilder v16 = new StringBuilder();
	StringBuilder v18 = v16.append(""Registered listener for agent with uid "");
	StringBuilder v19 = v16.append(v14);
	String v20 = v16.toString();
	int v21 = Log.i(""RecoverySnapshotLstnrs"", v20);
	this.mAgentIntents.put(v14, p1);
	Integer v23 = Integer.valueOf(v14);
	boolean v24 = this.mAgentsWithPendingSnapshots.contains(v23);
	int v25 = Log.i(""RecoverySnapshotLstnrs"", ""Snapshot already created for agent. Immediately triggering intent."");
	RecoverySnapshotListenersStorage.tryToSendIntent(v14, p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @3 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mListenersStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, setSnapshotListener(ILandroid/app/PendingIntent;)V > 6,5,2 @9 exception:7,
monitorenter 1,
5 = new <Application,Ljava/lang/StringBuilder>@3,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 5 @5 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 5,7 @10 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 5,2 @13 exception:10,
13 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 5 @16 exception:12,
15 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 4,13 @20 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, mAgentIntents, <Application,Landroid/util/SparseArray> > 1,
invokevirtual < Application, Landroid/util/SparseArray, put(ILjava/lang/Object;)V > 16,2,3 @25 exception:17,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverySnapshotListenersStorage, mAgentsWithPendingSnapshots, <Application,Landroid/util/ArraySet> > 1,
20 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @30 exception:19,
22 = invokevirtual < Application, Landroid/util/ArraySet, contains(Ljava/lang/Object;)Z > 18,20 @34 exception:21,
conditional branch(eq, to iindex=-1) 22,23,
monitorexit 1,
return,
return,
return,","depth : 0
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	this.mRecoverableKeyStoreManager.setSnapshotCreatedPendingIntent(p1);
	return;
}
-----
depth : 1
public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	this.mListenersStorage.setSnapshotListener(v2, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public void setSnapshotListener(int p1, PendingIntent p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Registered listener for agent with uid "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Log.i(""RecoverySnapshotLstnrs"", v4);
	this.mAgentIntents.put(p1, p2);
	Integer v7 = Integer.valueOf(p1);
	boolean v8 = this.mAgentsWithPendingSnapshots.contains(v7);
	return;
}
-----
","public void setSnapshotCreatedPendingIntent(PendingIntent p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = Binder.getCallingUid();
	StringBuilder v16 = new StringBuilder();
	StringBuilder v18 = v16.append(""Registered listener for agent with uid "");
	StringBuilder v19 = v16.append(v14);
	String v20 = v16.toString();
	int v21 = Log.i(""RecoverySnapshotLstnrs"", v20);
	this.mAgentIntents.put(v14, p1);
	Integer v23 = Integer.valueOf(v14);
	boolean v24 = this.mAgentsWithPendingSnapshots.contains(v23);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B","0","8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B > 8,2,3,4,5,6,7 @8 exception:9,
return 10,","depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
","public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B","1","8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B > 8,2,3,4,5,6,7 @8 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:9,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 10,3 @7 exception:11,
15 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,13 @13 exception:14,
18 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,16 @19 exception:17,
21 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 5,19 @25 exception:20,
24 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 6,22 @31 exception:23,
27 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 7,25 @37 exception:26,
30 = invokevirtual < Application, Landroid/security/keystore/recovery/RecoveryCertPath, getCertPath()Ljava/security/cert/CertPath; > 4 @42 exception:29,
36 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 36,12 @48 exception:37,
invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, validateCertPath(Ljava/security/cert/X509Certificate;Ljava/security/cert/CertPath;)V > 38,30 @52 exception:39,
50 = invokevirtual < Application, Ljava/security/cert/CertPath, getCertificates()Ljava/util/List; > 30 @55 exception:49,
53 = invokeinterface < Application, Ljava/util/List, get(I)Ljava/lang/Object; > 50,51 @60 exception:52,
54 = checkcast <Application,Ljava/security/cert/Certificate>53 <Application,Ljava/security/cert/Certificate>,
56 = invokevirtual < Application, Ljava/security/cert/Certificate, getPublicKey()Ljava/security/PublicKey; > 54 @66 exception:55,
58 = invokeinterface < Application, Ljava/security/PublicKey, getEncoded()[B > 56 @70 exception:57,
conditional branch(eq, to iindex=-1) 58,51,
65 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySession(Ljava/lang/String;[B[B[BLjava/util/List;)[B > 1,2,58,5,6,7 @81 exception:64,
return 65,
return 10,","depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
depth : 1
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v3 = Objects.requireNonNull(p1, ""invalid session"");
	Object v4 = Objects.requireNonNull(p3, ""verifierCertPath is null"");
	Object v5 = Objects.requireNonNull(p4, ""vaultParams is null"");
	Object v6 = Objects.requireNonNull(p5, ""vaultChallenge is null"");
	Object v7 = Objects.requireNonNull(p6, ""secrets is null"");
	CertPath v8 = p3.getCertPath();
	X509Certificate v9 = this.mTestCertHelper.getRootCertificate(v2);
	CertUtils.validateCertPath(v9, v8);
	List v11 = v8.getCertificates();
	Object v12 = v11.get(0);
	PublicKey v13 = v12.getPublicKey();
	byte[] v14 = v13.getEncoded();
	byte[] v15 = p0.startRecoverySession(p1, v14, p4, p5, p6);
	return v15;
}
-----
","public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v4 = Objects.requireNonNull(p1, ""invalid session"");
	Object v5 = Objects.requireNonNull(p3, ""verifierCertPath is null"");
	Object v6 = Objects.requireNonNull(p4, ""vaultParams is null"");
	Object v7 = Objects.requireNonNull(p5, ""vaultChallenge is null"");
	Object v8 = Objects.requireNonNull(p6, ""secrets is null"");
	CertPath v9 = p3.getCertPath();
	X509Certificate v10 = this.mTestCertHelper.getRootCertificate(v3);
	CertUtils.validateCertPath(v10, v9);
	List v12 = v9.getCertificates();
	Object v13 = v12.get(0);
	PublicKey v14 = v13.getPublicKey();
	byte[] v15 = v14.getEncoded();
	byte[] v16 = RecoverableKeyStoreManager.startRecoverySession(p1, v15, p4, p5, p6);
	byte[] v1 = v16;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B","2","8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B > 8,2,3,4,5,6,7 @8 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:9,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 10,3 @7 exception:11,
conditional branch(eq, to iindex=-1) 2,3,
5 = invokevirtual < Application, Ljava/lang/String, isEmpty()Z > 2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,3,
10 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 7,8 @13 exception:9,
13 = phi  2,11,
return 13,
15 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,13 @13 exception:14,
18 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,16 @19 exception:17,
21 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 5,19 @25 exception:20,
24 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 6,22 @31 exception:23,
27 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 7,25 @37 exception:26,
30 = invokevirtual < Application, Landroid/security/keystore/recovery/RecoveryCertPath, getCertPath()Ljava/security/cert/CertPath; > 4 @42 exception:29,
2 = getfield < Application, Landroid/security/keystore/recovery/RecoveryCertPath, mEncodedCertPath, <Primordial,[B> > 1,
4 = invokestatic < Application, Landroid/security/keystore/recovery/RecoveryCertPath, decodeCertPath([B)Ljava/security/cert/CertPath; > 2 @2 exception:3,
return 4,
36 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 36,12 @48 exception:37,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, isTestOnlyCertificateAlias(Ljava/lang/String;)Z > 1,4 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
15 = invokestatic < Application, Landroid/security/keystore/recovery/TrustedRootCertificates, getTestOnlyInsecureCertificate()Ljava/security/cert/X509Certificate; > @10 exception:14,
return 15,
invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, validateCertPath(Ljava/security/cert/X509Certificate;Ljava/security/cert/CertPath;)V > 38,30 @52 exception:39,
invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, validateCertPath(Ljava/util/Date;Ljava/security/cert/X509Certificate;Ljava/security/cert/CertPath;)V > 3,1,2 @1 exception:4,
return,
50 = invokevirtual < Application, Ljava/security/cert/CertPath, getCertificates()Ljava/util/List; > 30 @55 exception:49,
53 = invokeinterface < Application, Ljava/util/List, get(I)Ljava/lang/Object; > 50,51 @60 exception:52,
54 = checkcast <Application,Ljava/security/cert/Certificate>53 <Application,Ljava/security/cert/Certificate>,
56 = invokevirtual < Application, Ljava/security/cert/Certificate, getPublicKey()Ljava/security/PublicKey; > 54 @66 exception:55,
58 = invokeinterface < Application, Ljava/security/PublicKey, getEncoded()[B > 56 @70 exception:57,
conditional branch(eq, to iindex=-1) 58,51,
65 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySession(Ljava/lang/String;[B[B[BLjava/util/List;)[B > 1,2,58,5,6,7 @81 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:7,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @3 exception:8,
11 = invokeinterface < Application, Ljava/util/List, size()I > 6 @7 exception:10,
conditional branch(ne, to iindex=-1) 11,12,
18 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, deserializePublicKey([B)Ljava/security/PublicKey; > 3 @16 exception:17,
25 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, publicKeysMatch(Ljava/security/PublicKey;[B)Z > 1,18,4 @20 exception:24,
conditional branch(eq, to iindex=-1) 25,26,
32 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, generateKeyClaimant()[B > @26 exception:31,
34 = invokeinterface < Application, Ljava/util/List, get(I)Ljava/lang/Object; > 6,26 @31 exception:33,
35 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainProtectionParams>34 <Application,Landroid/security/keystore/recovery/KeyChainProtectionParams>,
37 = invokevirtual < Application, Landroid/security/keystore/recovery/KeyChainProtectionParams, getSecret()[B > 35 @37 exception:36,
38 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
39 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>@43,
invokespecial < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, <init>(Ljava/lang/String;[B[B[B)V > 39,2,37,32,4 @45 exception:40,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, add(ILcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;)V > 38,9,39 @48 exception:41,
42 = new <Application,Ljava/lang/StringBuilder>@51,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 42 @53 exception:43,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 42,44 @58 exception:45,
48 = invokestatic < Application, Lcom/android/internal/util/HexDump, toHexString([B)Ljava/lang/String; > 4 @61 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 42,48 @65 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 42 @68 exception:51,
55 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 53,52 @74 exception:54,
57 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, calculateThmKfHash([B)[B > 37 @77 exception:56,
59 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, encryptRecoveryClaim(Ljava/security/PublicKey;[B[B[B[B)[B > 18,4,5,57,32 @81 exception:58,
return 59,
return 65,
return 10,","depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
depth : 1
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v3 = Objects.requireNonNull(p1, ""invalid session"");
	Object v4 = Objects.requireNonNull(p3, ""verifierCertPath is null"");
	Object v5 = Objects.requireNonNull(p4, ""vaultParams is null"");
	Object v6 = Objects.requireNonNull(p5, ""vaultChallenge is null"");
	Object v7 = Objects.requireNonNull(p6, ""secrets is null"");
	CertPath v8 = p3.getCertPath();
	X509Certificate v9 = this.mTestCertHelper.getRootCertificate(v2);
	CertUtils.validateCertPath(v9, v8);
	List v11 = v8.getCertificates();
	Object v12 = v11.get(0);
	PublicKey v13 = v12.getPublicKey();
	byte[] v14 = v13.getEncoded();
	byte[] v15 = p0.startRecoverySession(p1, v14, p4, p5, p6);
	return v15;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	return phiInstruction;
}
-----
depth : 2
public CertPath getCertPath(){
	CertPath v1 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	return v3;
}
-----
depth : 2
public void validateCertPath(X509Certificate p1, CertPath p2){
	CertUtils.validateCertPath(0, p1, p2);
	return;
}
-----
depth : 2
public byte[] startRecoverySession(String p1, byte[] p2, byte[] p3, byte[] p4, List p5){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	int v3 = p5.size();
	PublicKey v4 = KeySyncUtils.deserializePublicKey(p2);
	boolean v5 = p0.publicKeysMatch(v4, p3);
	byte[] v6 = KeySyncUtils.generateKeyClaimant();
	Object v7 = p5.get(0);
	byte[] v8 = v7.getSecret();
	RecoverySessionStorage$Entry v8 = new RecoverySessionStorage$Entry(p1,v8,v6,p3);
	this.mRecoverySessionStorage.add(v2, v8);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""Received VaultParams for recovery: "");
	String v13 = HexDump.toHexString(p3);
	StringBuilder v14 = v10.append(v13);
	String v15 = v10.toString();
	int v16 = Log.i(""RecoverableKeyStoreMgr"", v15);
	byte[] v17 = KeySyncUtils.calculateThmKfHash(v8);
	byte[] v18 = KeySyncUtils.encryptRecoveryClaim(v4, p3, p4, v17, v6);
	return v18;
}
-----
","public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	boolean v15 = p2.isEmpty();
	int v16 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	String v14 = phiInstruction;
	Object v17 = Objects.requireNonNull(p1, ""invalid session"");
	Object v18 = Objects.requireNonNull(p3, ""verifierCertPath is null"");
	Object v19 = Objects.requireNonNull(p4, ""vaultParams is null"");
	Object v20 = Objects.requireNonNull(p5, ""vaultChallenge is null"");
	Object v21 = Objects.requireNonNull(p6, ""secrets is null"");
	CertPath v23 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	CertPath v22 = v23;
	String v25 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v26 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v25);
	X509Certificate v27 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	X509Certificate v24 = v27;
	CertUtils.validateCertPath(0, v24, v22);
	List v30 = v22.getCertificates();
	Object v31 = v30.get(0);
	PublicKey v32 = v31.getPublicKey();
	byte[] v33 = v32.getEncoded();
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v36 = Binder.getCallingUid();
	int v37 = p6.size();
	PublicKey v38 = KeySyncUtils.deserializePublicKey(v33);
	boolean v39 = RecoverableKeyStoreManager.publicKeysMatch(v38, p4);
	byte[] v40 = KeySyncUtils.generateKeyClaimant();
	Object v41 = p6.get(0);
	byte[] v42 = v41.getSecret();
	RecoverySessionStorage$Entry v43 = new RecoverySessionStorage$Entry(p1,v42,v40,p4);
	this.mRecoverySessionStorage.add(v36, v43);
	StringBuilder v46 = new StringBuilder();
	StringBuilder v48 = v46.append(""Received VaultParams for recovery: "");
	String v49 = HexDump.toHexString(p4);
	StringBuilder v50 = v46.append(v49);
	String v51 = v46.toString();
	int v52 = Log.i(""RecoverableKeyStoreMgr"", v51);
	byte[] v53 = KeySyncUtils.calculateThmKfHash(v42);
	byte[] v54 = KeySyncUtils.encryptRecoveryClaim(v38, p4, p5, v53, v40);
	byte[] v34 = v54;
	byte[] v1 = v34;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B","2","8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B > 8,2,3,4,5,6,7 @8 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:9,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 10,3 @7 exception:11,
conditional branch(eq, to iindex=-1) 2,3,
5 = invokevirtual < Application, Ljava/lang/String, isEmpty()Z > 2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,3,
10 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 7,8 @13 exception:9,
13 = phi  2,11,
return 13,
15 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,13 @13 exception:14,
18 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,16 @19 exception:17,
21 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 5,19 @25 exception:20,
24 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 6,22 @31 exception:23,
27 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 7,25 @37 exception:26,
30 = invokevirtual < Application, Landroid/security/keystore/recovery/RecoveryCertPath, getCertPath()Ljava/security/cert/CertPath; > 4 @42 exception:29,
2 = getfield < Application, Landroid/security/keystore/recovery/RecoveryCertPath, mEncodedCertPath, <Primordial,[B> > 1,
4 = invokestatic < Application, Landroid/security/keystore/recovery/RecoveryCertPath, decodeCertPath([B)Ljava/security/cert/CertPath; > 2 @2 exception:3,
return 4,
36 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 36,12 @48 exception:37,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, isTestOnlyCertificateAlias(Ljava/lang/String;)Z > 1,4 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokestatic < Application, Landroid/security/keystore/recovery/TrustedRootCertificates, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 4 @15 exception:8,
conditional branch(eq, to iindex=-1) 9,7,
return 9,
invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, validateCertPath(Ljava/security/cert/X509Certificate;Ljava/security/cert/CertPath;)V > 38,30 @52 exception:39,
invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, validateCertPath(Ljava/util/Date;Ljava/security/cert/X509Certificate;Ljava/security/cert/CertPath;)V > 3,1,2 @1 exception:4,
return,
50 = invokevirtual < Application, Ljava/security/cert/CertPath, getCertificates()Ljava/util/List; > 30 @55 exception:49,
53 = invokeinterface < Application, Ljava/util/List, get(I)Ljava/lang/Object; > 50,51 @60 exception:52,
54 = checkcast <Application,Ljava/security/cert/Certificate>53 <Application,Ljava/security/cert/Certificate>,
56 = invokevirtual < Application, Ljava/security/cert/Certificate, getPublicKey()Ljava/security/PublicKey; > 54 @66 exception:55,
58 = invokeinterface < Application, Ljava/security/PublicKey, getEncoded()[B > 56 @70 exception:57,
conditional branch(eq, to iindex=-1) 58,51,
65 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, startRecoverySession(Ljava/lang/String;[B[B[BLjava/util/List;)[B > 1,2,58,5,6,7 @81 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:7,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @3 exception:8,
11 = invokeinterface < Application, Ljava/util/List, size()I > 6 @7 exception:10,
conditional branch(ne, to iindex=-1) 11,12,
18 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, deserializePublicKey([B)Ljava/security/PublicKey; > 3 @16 exception:17,
25 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, publicKeysMatch(Ljava/security/PublicKey;[B)Z > 1,18,4 @20 exception:24,
conditional branch(eq, to iindex=-1) 25,26,
32 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, generateKeyClaimant()[B > @26 exception:31,
34 = invokeinterface < Application, Ljava/util/List, get(I)Ljava/lang/Object; > 6,26 @31 exception:33,
35 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainProtectionParams>34 <Application,Landroid/security/keystore/recovery/KeyChainProtectionParams>,
37 = invokevirtual < Application, Landroid/security/keystore/recovery/KeyChainProtectionParams, getSecret()[B > 35 @37 exception:36,
38 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
39 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>@43,
invokespecial < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, <init>(Ljava/lang/String;[B[B[B)V > 39,2,37,32,4 @45 exception:40,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, add(ILcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;)V > 38,9,39 @48 exception:41,
42 = new <Application,Ljava/lang/StringBuilder>@51,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 42 @53 exception:43,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 42,44 @58 exception:45,
48 = invokestatic < Application, Lcom/android/internal/util/HexDump, toHexString([B)Ljava/lang/String; > 4 @61 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 42,48 @65 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 42 @68 exception:51,
55 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 53,52 @74 exception:54,
57 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, calculateThmKfHash([B)[B > 37 @77 exception:56,
59 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, encryptRecoveryClaim(Ljava/security/PublicKey;[B[B[B[B)[B > 18,4,5,57,32 @81 exception:58,
return 59,
return 65,
return 10,","depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
depth : 1
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v3 = Objects.requireNonNull(p1, ""invalid session"");
	Object v4 = Objects.requireNonNull(p3, ""verifierCertPath is null"");
	Object v5 = Objects.requireNonNull(p4, ""vaultParams is null"");
	Object v6 = Objects.requireNonNull(p5, ""vaultChallenge is null"");
	Object v7 = Objects.requireNonNull(p6, ""secrets is null"");
	CertPath v8 = p3.getCertPath();
	X509Certificate v9 = this.mTestCertHelper.getRootCertificate(v2);
	CertUtils.validateCertPath(v9, v8);
	List v11 = v8.getCertificates();
	Object v12 = v11.get(0);
	PublicKey v13 = v12.getPublicKey();
	byte[] v14 = v13.getEncoded();
	byte[] v15 = p0.startRecoverySession(p1, v14, p4, p5, p6);
	return v15;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	return phiInstruction;
}
-----
depth : 2
public CertPath getCertPath(){
	CertPath v1 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getRootCertificate(v1);
	return v3;
}
-----
depth : 2
public void validateCertPath(X509Certificate p1, CertPath p2){
	CertUtils.validateCertPath(0, p1, p2);
	return;
}
-----
depth : 2
public byte[] startRecoverySession(String p1, byte[] p2, byte[] p3, byte[] p4, List p5){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	int v3 = p5.size();
	PublicKey v4 = KeySyncUtils.deserializePublicKey(p2);
	boolean v5 = p0.publicKeysMatch(v4, p3);
	byte[] v6 = KeySyncUtils.generateKeyClaimant();
	Object v7 = p5.get(0);
	byte[] v8 = v7.getSecret();
	RecoverySessionStorage$Entry v8 = new RecoverySessionStorage$Entry(p1,v8,v6,p3);
	this.mRecoverySessionStorage.add(v2, v8);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""Received VaultParams for recovery: "");
	String v13 = HexDump.toHexString(p3);
	StringBuilder v14 = v10.append(v13);
	String v15 = v10.toString();
	int v16 = Log.i(""RecoverableKeyStoreMgr"", v15);
	byte[] v17 = KeySyncUtils.calculateThmKfHash(v8);
	byte[] v18 = KeySyncUtils.encryptRecoveryClaim(v4, p3, p4, v17, v6);
	return v18;
}
-----
","public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	boolean v15 = p2.isEmpty();
	int v16 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	String v14 = phiInstruction;
	Object v17 = Objects.requireNonNull(p1, ""invalid session"");
	Object v18 = Objects.requireNonNull(p3, ""verifierCertPath is null"");
	Object v19 = Objects.requireNonNull(p4, ""vaultParams is null"");
	Object v20 = Objects.requireNonNull(p5, ""vaultChallenge is null"");
	Object v21 = Objects.requireNonNull(p6, ""secrets is null"");
	CertPath v23 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	CertPath v22 = v23;
	String v25 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v26 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v25);
	X509Certificate v27 = TrustedRootCertificates.getRootCertificate(v25);
	X509Certificate v24 = v27;
	CertUtils.validateCertPath(0, v24, v22);
	List v30 = v22.getCertificates();
	Object v31 = v30.get(0);
	PublicKey v32 = v31.getPublicKey();
	byte[] v33 = v32.getEncoded();
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v36 = Binder.getCallingUid();
	int v37 = p6.size();
	PublicKey v38 = KeySyncUtils.deserializePublicKey(v33);
	boolean v39 = RecoverableKeyStoreManager.publicKeysMatch(v38, p4);
	byte[] v40 = KeySyncUtils.generateKeyClaimant();
	Object v41 = p6.get(0);
	byte[] v42 = v41.getSecret();
	RecoverySessionStorage$Entry v43 = new RecoverySessionStorage$Entry(p1,v42,v40,p4);
	this.mRecoverySessionStorage.add(v36, v43);
	StringBuilder v46 = new StringBuilder();
	StringBuilder v48 = v46.append(""Received VaultParams for recovery: "");
	String v49 = HexDump.toHexString(p4);
	StringBuilder v50 = v46.append(v49);
	String v51 = v46.toString();
	int v52 = Log.i(""RecoverableKeyStoreMgr"", v51);
	byte[] v53 = KeySyncUtils.calculateThmKfHash(v42);
	byte[] v54 = KeySyncUtils.encryptRecoveryClaim(v38, p4, p5, v53, v40);
	byte[] v34 = v54;
	byte[] v1 = v34;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,6 @5 exception:7,
9 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0>@8,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0, <init>(Lcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)V > 9,4 @10 exception:10,
12 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @13 exception:11,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, addEscrowToken([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 1,2,13,3,9 @18 exception:14,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 12 @22 exception:18,
return 15,","depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
","public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v3 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v5 = Binder.clearCallingIdentity();
	long v6 = p0.addEscrowToken(p1, 1, p2, v3);
	Binder.restoreCallingIdentity(v5);
	return v6;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,6 @5 exception:7,
9 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0>@8,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0, <init>(Lcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)V > 9,4 @10 exception:10,
12 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @13 exception:11,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, addEscrowToken([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 1,2,13,3,9 @18 exception:14,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isUserSecure(I)Z > 1,4 @3 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldMigrateToSyntheticPasswordLocked(I)Z > 1,4 @10 exception:10,
conditional branch(eq, to iindex=-1) 11,9,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @25 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @31 exception:15,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @35 exception:17,
20 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 14,16,13,18,4,9 @41 exception:19,
21 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 20,
27 = phi  9,25,21,
31 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @47 exception:30,
conditional branch(eq, to iindex=-1) 31,9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, disableEscrowTokenOnNonManagedDevicesIfNeeded(I)V > 1,4 @53 exception:32,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 33,4 @58 exception:34,
conditional branch(eq, to iindex=-1) 35,9,
goto (from iindex= 34 to iindex = 9),
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createTokenBasedSyntheticPassword([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 42,2,3,4,5 @75 exception:43,
conditional branch(eq, to iindex=-1) 27,9,
45 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, activateTokenBasedSyntheticPassword(JLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 45,44,27,4 @83 exception:46,
monitorexit 6,
return 44,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 12 @22 exception:18,
return 15,","depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public long addEscrowToken(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	boolean v1 = p0.isUserSecure(p3);
	boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);
	long v3 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	LockscreenCredential v5 = LockscreenCredential.createNone();
	SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);
	boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);
	boolean v9 = this.mSpManager.hasEscrowData(p3);
	long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);
	boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);
	return v10;
}
-----
","public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	Object v5 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v6 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v8 = Binder.clearCallingIdentity();
	boolean v10 = LockSettingsService.isUserSecure(p2);
	boolean v11 = LockSettingsService.shouldMigrateToSyntheticPasswordLocked(p2);
	long v12 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v13 = LockSettingsService.getGateKeeperService();
	LockscreenCredential v14 = LockscreenCredential.createNone();
	SyntheticPasswordManager$AuthenticationResult v15 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v13, v12, v14, p2, 0);
	boolean v16 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	LockSettingsService.disableEscrowTokenOnNonManagedDevicesIfNeeded(p2);
	boolean v18 = this.mSpManager.hasEscrowData(p2);
	long v19 = this.mSpManager.createTokenBasedSyntheticPassword(p1, 1, p2, v6);
	boolean v20 = this.mSpManager.activateTokenBasedSyntheticPassword(v19, phiInstruction, p2);
	long v9 = v19;
	Binder.restoreCallingIdentity(v8);
	return v9;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,6 @5 exception:7,
9 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0>@8,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0, <init>(Lcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)V > 9,4 @10 exception:10,
12 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @13 exception:11,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, addEscrowToken([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 1,2,13,3,9 @18 exception:14,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isUserSecure(I)Z > 1,4 @3 exception:7,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldMigrateToSyntheticPasswordLocked(I)Z > 1,4 @10 exception:10,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,2 @0 exception:3,
6 = binaryop(lt) 4 , 5,
conditional branch(ne, to iindex=-1) 6,7,
goto (from iindex= 6 to iindex = 2),
9 = phi  8,7,
return 9,
conditional branch(eq, to iindex=-1) 11,9,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @25 exception:12,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @31 exception:15,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @35 exception:17,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 1,4,3 @6 exception:5,
return 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 14,16,13,18,4,9 @41 exception:19,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @10 exception:8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 6 @279 exception:117,
118 = getCaughtException ,
121 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 19,119,118 @288 exception:120,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
return 7,
21 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 20,
27 = phi  9,25,21,
31 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @47 exception:30,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 31,9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, disableEscrowTokenOnNonManagedDevicesIfNeeded(I)V > 1,4 @53 exception:32,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getUserManagerInternal()Lcom/android/server/pm/UserManagerInternal; > 3 @2 exception:4,
7 = invokevirtual < Application, Lcom/android/server/pm/UserManagerInternal, isUserManaged(I)Z > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
11 = invokevirtual < Application, Lcom/android/server/pm/UserManagerInternal, isDeviceManaged()Z > 5 @20 exception:10,
conditional branch(eq, to iindex=-1) 11,9,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getDeviceStateCache()Landroid/app/admin/DeviceStateCache; > 12 @34 exception:13,
16 = invokevirtual < Application, Landroid/app/admin/DeviceStateCache, isDeviceProvisioned()Z > 14 @38 exception:15,
conditional branch(ne, to iindex=-1) 16,9,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
19 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 17 @52 exception:18,
22 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 19,20 @58 exception:21,
conditional branch(eq, to iindex=-1) 22,9,
23 = new <Application,Ljava/lang/StringBuilder>@65,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 23 @67 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,25 @72 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,2 @75 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 23 @78 exception:30,
33 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 8,31 @82 exception:32,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @85 exception:34,
conditional branch(eq, to iindex=-1) 35,9,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyEscrowData(I)V > 36,2 @93 exception:37,
return,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 33,4 @58 exception:34,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(eq, to iindex=-1) 35,9,
goto (from iindex= 34 to iindex = 9),
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createTokenBasedSyntheticPassword([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 42,2,3,4,5 @75 exception:43,
7 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, generateHandle()J > @0 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
10 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @6 exception:9,
12 = invokevirtual < Application, Landroid/util/ArrayMap, containsKey(Ljava/lang/Object;)Z > 8,10 @10 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
16 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @18 exception:15,
17 = new <Application,Landroid/util/ArrayMap>@22,
invokespecial < Application, Landroid/util/ArrayMap, <init>()V > 17 @24 exception:18,
20 = invokevirtual < Application, Landroid/util/ArrayMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 14,16,17 @27 exception:19,
25 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>@30,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, <init>()V > 25 @32 exception:26,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mType, <Primordial,I> > = 3,
29 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, secureRandom(I)[B > 27 @39 exception:28,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @43 exception:30,
conditional branch(eq, to iindex=-1) 31,13,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
33 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, valueSize, <Primordial,I> > 32,
35 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, secureRandom(I)[B > 33 @53 exception:34,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, weaverSecret, <Primordial,[B> > = 35,
36 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
38 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, encrypt([B[B[B)[B > 35,36,29 @61 exception:37,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, secdiscardableOnDisk, <Primordial,[B> > = 38,
goto (from iindex= 32 to iindex = 6),
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderSecdiscardable([B[B)[B > 1,2,29 @73 exception:43,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, aggregatedSecret, <Primordial,[B> > = 44,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mCallback, <Application,Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback> > = 5,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
47 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @83 exception:46,
49 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 45,47 @87 exception:48,
50 = checkcast <Application,Landroid/util/ArrayMap>49 <Application,Landroid/util/ArrayMap>,
52 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 7 @93 exception:51,
54 = invokevirtual < Application, Landroid/util/ArrayMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 50,52,25 @97 exception:53,
return 7,
conditional branch(eq, to iindex=-1) 27,9,
45 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, activateTokenBasedSyntheticPassword(JLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 45,44,27,4 @83 exception:46,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
7 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @2 exception:6,
9 = invokevirtual < Application, Landroid/util/ArrayMap, containsKey(Ljava/lang/Object;)Z > 5,7 @6 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @16 exception:12,
15 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 11,13 @20 exception:14,
16 = checkcast <Application,Landroid/util/ArrayMap>15 <Application,Landroid/util/ArrayMap>,
18 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @26 exception:17,
20 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 16,18 @30 exception:19,
21 = checkcast <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>20 <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>,
conditional branch(ne, to iindex=-1) 21,10,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadEscrowData(Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 1,3,4 @39 exception:22,
conditional branch(ne, to iindex=-1) 23,10,
26 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @53 exception:25,
conditional branch(eq, to iindex=-1) 26,10,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getNextAvailableWeaverSlot()I > 1 @59 exception:27,
29 = new <Application,Ljava/lang/StringBuilder>@63,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 29 @65 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 29,31 @70 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 29,28 @73 exception:34,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 29,36 @78 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 29,4 @81 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 29 @84 exception:41,
44 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 24,42 @88 exception:43,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, weaverSecret, <Primordial,[B> > 21,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverEnroll(I[B[B)[B > 1,28,10,45 @94 exception:46,
conditional branch(ne, to iindex=-1) 47,10,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveWeaverSlot(IJI)V > 1,28,2,4 @106 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, markSlotInUse(I)V > 49,28 @111 exception:50,
55 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, secdiscardableOnDisk, <Primordial,[B> > 21,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveSecdiscardable(J[BI)V > 1,2,55,4 @116 exception:56,
57 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mType, <Primordial,I> > 21,
59 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getTokenBasedBlobType(I)B > 1,57 @121 exception:58,
60 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, aggregatedSecret, <Primordial,[B> > 21,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createSyntheticPasswordBlob(JBLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;[BJI)V > 1,2,59,3,60,61,4 @133 exception:62,
63 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
65 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @138 exception:64,
67 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 63,65 @142 exception:66,
68 = checkcast <Application,Landroid/util/ArrayMap>67 <Application,Landroid/util/ArrayMap>,
70 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @148 exception:69,
72 = invokevirtual < Application, Landroid/util/ArrayMap, remove(Ljava/lang/Object;)Ljava/lang/Object; > 68,70 @152 exception:71,
73 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mCallback, <Application,Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback> > 21,
conditional branch(eq, to iindex=-1) 73,10,
invokeinterface < Application, Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback, onEscrowTokenActivated(JI)V > 73,2,4 @159 exception:74,
return 76,
monitorexit 6,
return 44,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 12 @22 exception:18,
return 15,","depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public long addEscrowToken(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	boolean v1 = p0.isUserSecure(p3);
	boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);
	long v3 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	LockscreenCredential v5 = LockscreenCredential.createNone();
	SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);
	boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);
	boolean v9 = this.mSpManager.hasEscrowData(p3);
	long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);
	boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);
	return v10;
}
-----
depth : 2
public boolean isUserSecure(int p1){
	int v1 = p0.getCredentialTypeInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldMigrateToSyntheticPasswordLocked(int p1){
	long v1 = p0.getSyntheticPasswordHandleLocked(p1);
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public void disableEscrowTokenOnNonManagedDevicesIfNeeded(int p1){
	UserManagerInternal v1 = this.mInjector.getUserManagerInternal();
	boolean v2 = v1.isUserManaged(p1);
	boolean v3 = v1.isDeviceManaged();
	DeviceStateCache v4 = this.mInjector.getDeviceStateCache();
	boolean v5 = v4.isDeviceProvisioned();
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.hardware.type.automotive"");
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Disabling escrow token on user "");
	StringBuilder v10 = v7.append(p1);
	String v11 = v7.toString();
	int v12 = Slog.i(""LockSettingsService"", v11);
	boolean v13 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	this.mSpManager.destroyEscrowData(p1);
	return;
}
-----
depth : 2
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public long createTokenBasedSyntheticPassword(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	long v1 = SyntheticPasswordManager.generateHandle();
	Integer v2 = Integer.valueOf(p3);
	boolean v3 = this.tokenMap.containsKey(v2);
	Integer v4 = Integer.valueOf(p3);
	ArrayMap v4 = new ArrayMap();
	Object v6 = this.tokenMap.put(v4, v4);
	SyntheticPasswordManager$TokenData v6 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v8 = SyntheticPasswordManager.secureRandom(16384);
	boolean v9 = p0.isWeaverAvailable();
	byte[] v10 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v10;
	byte[] v11 = SyntheticPasswordCrypto.encrypt(v10, this.PERSONALISATION_WEAVER_TOKEN, v8);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v11;
	byte[] v12 = p0.transformUnderSecdiscardable(p1, v8);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v12;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v13 = Integer.valueOf(p3);
	Object v14 = this.tokenMap.get(v13);
	Long v15 = Long.valueOf(v1);
	Object v16 = v14.put(v15, v6);
	return v1;
}
-----
depth : 2
public boolean activateTokenBasedSyntheticPassword(long p1, SyntheticPasswordManager$AuthenticationToken p2, int p3){
	Integer v1 = Integer.valueOf(p3);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p3);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.get(v5);
	boolean v7 = p0.loadEscrowData(p2, p3);
	boolean v8 = p0.isWeaverAvailable();
	int v9 = p0.getNextAvailableWeaverSlot();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""Weaver enroll token to slot "");
	StringBuilder v12 = v9.append(v9);
	StringBuilder v13 = v9.append("" for user "");
	StringBuilder v14 = v9.append(p3);
	String v15 = v9.toString();
	int v16 = Slog.i(""SyntheticPasswordManager"", v15);
	byte[] v17 = p0.weaverEnroll(v9, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	p0.saveWeaverSlot(v9, p1, p3);
	this.mPasswordSlotManager.markSlotInUse(v9);
	p0.saveSecdiscardable(p1, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v21 = p0.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	p0.createSyntheticPasswordBlob(p1, v21, p2, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v23 = Integer.valueOf(p3);
	Object v24 = this.tokenMap.get(v23);
	Long v25 = Long.valueOf(p1);
	Object v26 = v24.remove(v25);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(p1, p3);
	return 1;
}
-----
","public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	Object v5 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v6 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v8 = Binder.clearCallingIdentity();
	int v11 = LockSettingsService.getCredentialTypeInternal(p3);
	boolean v10 = phiInstruction;
	long v13 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	boolean v12 = phiInstruction;
	long v15 = LockSettingsService.getLong(""sp-handle"", 0, p3);
	long v14 = v15;
	IBinder v17 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v18 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v17.linkToDeath(v18, 0);
	IGateKeeperService v22 = IGateKeeperService$Stub.asInterface(v17);
	this.mGateKeeperService = v22;
	IGateKeeperService v16 = v22;
	LockscreenCredential v24 = new LockscreenCredential(-1,v25);
	[B v25 = new [B(0);
	LockscreenCredential v23 = v24;
	SyntheticPasswordManager$AuthenticationResult v28 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v30 = SyntheticPasswordManager.loadState(""pwd"", v14, p3);
	SyntheticPasswordManager$PasswordData v31 = SyntheticPasswordManager$PasswordData.fromBytes(v30);
	boolean v32 = v23.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v33 = SyntheticPasswordManager.computePasswordToken(v23, v31);
	int v34 = SyntheticPasswordManager.loadWeaverSlot(v14, p3);
	boolean v35 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v36 = SyntheticPasswordManager.passwordTokenToWeaverKey(v33);
	VerifyCredentialResponse v37 = SyntheticPasswordManager.weaverVerify(v34, v36);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
	int v38 = v37.getResponseCode();
	byte[] v39 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v40 = SyntheticPasswordManager.transformUnderWeaverSecret(v33, v39);
	0.onCredentialVerified();
	SyntheticPasswordManager$AuthenticationToken v43 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(v14, 0, phiInstruction, phiInstruction, p3);
	SyntheticPasswordManager$AuthenticationResult.authToken = v43;
	VerifyCredentialResponse v44 = SyntheticPasswordManager.verifyChallenge(v16, v43, 0, p3);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v44;
	boolean v45 = SyntheticPasswordManager.hasPasswordMetrics(v14, p3);
	SyntheticPasswordManager.savePasswordMetrics(v23, SyntheticPasswordManager$AuthenticationResult.authToken, v14, p3);
	SyntheticPasswordManager$AuthenticationResult v27 = v28;
	LockSettingsStorage$PersistentData v48 = this.mStorage.readPersistentDataBlock();
	boolean v47 = phiInstruction;
	UserManagerInternal v50 = this.mInjector.getUserManagerInternal();
	boolean v51 = v50.isUserManaged(p3);
	boolean v52 = v50.isDeviceManaged();
	DeviceStateCache v53 = this.mInjector.getDeviceStateCache();
	boolean v54 = v53.isDeviceProvisioned();
	PackageManager v55 = this.mContext.getPackageManager();
	boolean v56 = v55.hasSystemFeature(""android.hardware.type.automotive"");
	boolean v63 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
	this.mSpManager.destroyEscrowData(p3);
	boolean v66 = SyntheticPasswordManager.hasState(""e0"", 0, p3);
	boolean v67 = SyntheticPasswordManager.hasState(""p1"", 0, p3);
	boolean v65 = phiInstruction;
	long v69 = SyntheticPasswordManager.generateHandle();
	Integer v70 = Integer.valueOf(p3);
	boolean v71 = this.tokenMap.containsKey(v70);
	Integer v72 = Integer.valueOf(p3);
	ArrayMap v73 = new ArrayMap();
	Object v75 = this.tokenMap.put(v72, v73);
	SyntheticPasswordManager$TokenData v76 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v78 = SyntheticPasswordManager.secureRandom(16384);
	boolean v79 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v80 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v80;
	byte[] v81 = SyntheticPasswordCrypto.encrypt(v80, this.PERSONALISATION_WEAVER_TOKEN, v78);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v81;
	byte[] v82 = SyntheticPasswordManager.transformUnderSecdiscardable(p1, v78);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v82;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v83 = Integer.valueOf(p3);
	Object v84 = this.tokenMap.get(v83);
	Long v85 = Long.valueOf(v69);
	Object v86 = v84.put(v85, v76);
	long v68 = v69;
	Integer v88 = Integer.valueOf(p3);
	boolean v89 = this.tokenMap.containsKey(v88);
	Integer v90 = Integer.valueOf(p3);
	Object v91 = this.tokenMap.get(v90);
	Long v92 = Long.valueOf(v68);
	Object v93 = v91.get(v92);
	boolean v94 = SyntheticPasswordManager.loadEscrowData(phiInstruction, p3);
	boolean v95 = SyntheticPasswordManager.isWeaverAvailable();
	int v96 = SyntheticPasswordManager.getNextAvailableWeaverSlot();
	byte[] v105 = SyntheticPasswordManager.weaverEnroll(v96, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	SyntheticPasswordManager.saveWeaverSlot(v96, v68, p3);
	this.mPasswordSlotManager.markSlotInUse(v96);
	SyntheticPasswordManager.saveSecdiscardable(v68, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v109 = SyntheticPasswordManager.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	SyntheticPasswordManager.createSyntheticPasswordBlob(v68, v109, phiInstruction, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v111 = Integer.valueOf(p3);
	Object v112 = this.tokenMap.get(v111);
	Long v113 = Long.valueOf(v68);
	Object v114 = v112.remove(v113);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(v68, p3);
	boolean v87 = 1;
	long v9 = v68;
	Binder.restoreCallingIdentity(v8);
	return v9;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,6 @5 exception:7,
9 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0>@8,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda0, <init>(Lcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)V > 9,4 @10 exception:10,
12 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @13 exception:11,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, addEscrowToken([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 1,2,13,3,9 @18 exception:14,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isUserSecure(I)Z > 1,4 @3 exception:7,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, shouldMigrateToSyntheticPasswordLocked(I)Z > 1,4 @10 exception:10,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,2 @0 exception:3,
6 = binaryop(lt) 4 , 5,
conditional branch(ne, to iindex=-1) 6,7,
goto (from iindex= 6 to iindex = 2),
9 = phi  8,7,
return 9,
conditional branch(eq, to iindex=-1) 11,9,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,4 @25 exception:12,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
16 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @31 exception:15,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @35 exception:17,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 1,4,3 @6 exception:5,
return 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 14,16,13,18,4,9 @41 exception:19,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @10 exception:8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 6 @279 exception:117,
118 = getCaughtException ,
121 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 19,119,118 @288 exception:120,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
return 7,
21 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 20,
27 = phi  9,25,21,
31 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,4 @47 exception:30,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 31,9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, disableEscrowTokenOnNonManagedDevicesIfNeeded(I)V > 1,4 @53 exception:32,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getUserManagerInternal()Lcom/android/server/pm/UserManagerInternal; > 3 @2 exception:4,
7 = invokevirtual < Application, Lcom/android/server/pm/UserManagerInternal, isUserManaged(I)Z > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
11 = invokevirtual < Application, Lcom/android/server/pm/UserManagerInternal, isDeviceManaged()Z > 5 @20 exception:10,
conditional branch(eq, to iindex=-1) 11,9,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getDeviceStateCache()Landroid/app/admin/DeviceStateCache; > 12 @34 exception:13,
16 = invokevirtual < Application, Landroid/app/admin/DeviceStateCache, isDeviceProvisioned()Z > 14 @38 exception:15,
conditional branch(ne, to iindex=-1) 16,9,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
19 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 17 @52 exception:18,
22 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 19,20 @58 exception:21,
conditional branch(eq, to iindex=-1) 22,9,
23 = new <Application,Ljava/lang/StringBuilder>@65,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 23 @67 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,25 @72 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,2 @75 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 23 @78 exception:30,
33 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 8,31 @82 exception:32,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @85 exception:34,
conditional branch(eq, to iindex=-1) 35,9,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyEscrowData(I)V > 36,2 @93 exception:37,
return,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 33,4 @58 exception:34,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(eq, to iindex=-1) 35,9,
goto (from iindex= 34 to iindex = 9),
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createTokenBasedSyntheticPassword([BIILcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback;)J > 42,2,3,4,5 @75 exception:43,
7 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, generateHandle()J > @0 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
10 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @6 exception:9,
12 = invokevirtual < Application, Landroid/util/ArrayMap, containsKey(Ljava/lang/Object;)Z > 8,10 @10 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
16 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @18 exception:15,
17 = new <Application,Landroid/util/ArrayMap>@22,
invokespecial < Application, Landroid/util/ArrayMap, <init>()V > 17 @24 exception:18,
20 = invokevirtual < Application, Landroid/util/ArrayMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 14,16,17 @27 exception:19,
25 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>@30,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, <init>()V > 25 @32 exception:26,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mType, <Primordial,I> > = 3,
29 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, secureRandom(I)[B > 27 @39 exception:28,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @43 exception:30,
conditional branch(eq, to iindex=-1) 31,13,
32 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
33 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, valueSize, <Primordial,I> > 32,
35 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, secureRandom(I)[B > 33 @53 exception:34,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, weaverSecret, <Primordial,[B> > = 35,
36 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
38 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, encrypt([B[B[B)[B > 35,36,29 @61 exception:37,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, secdiscardableOnDisk, <Primordial,[B> > = 38,
goto (from iindex= 32 to iindex = 6),
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderSecdiscardable([B[B)[B > 1,2,29 @73 exception:43,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, aggregatedSecret, <Primordial,[B> > = 44,
putfield 25.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mCallback, <Application,Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback> > = 5,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
47 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @83 exception:46,
49 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 45,47 @87 exception:48,
50 = checkcast <Application,Landroid/util/ArrayMap>49 <Application,Landroid/util/ArrayMap>,
52 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 7 @93 exception:51,
54 = invokevirtual < Application, Landroid/util/ArrayMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 50,52,25 @97 exception:53,
return 7,
conditional branch(eq, to iindex=-1) 27,9,
45 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, activateTokenBasedSyntheticPassword(JLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 45,44,27,4 @83 exception:46,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
7 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @2 exception:6,
9 = invokevirtual < Application, Landroid/util/ArrayMap, containsKey(Ljava/lang/Object;)Z > 5,7 @6 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @16 exception:12,
15 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 11,13 @20 exception:14,
16 = checkcast <Application,Landroid/util/ArrayMap>15 <Application,Landroid/util/ArrayMap>,
18 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @26 exception:17,
20 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 16,18 @30 exception:19,
21 = checkcast <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>20 <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData>,
conditional branch(ne, to iindex=-1) 21,10,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadEscrowData(Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 1,3,4 @39 exception:22,
conditional branch(ne, to iindex=-1) 23,10,
26 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @53 exception:25,
conditional branch(eq, to iindex=-1) 26,10,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getNextAvailableWeaverSlot()I > 1 @59 exception:27,
29 = new <Application,Ljava/lang/StringBuilder>@63,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 29 @65 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 29,31 @70 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 29,28 @73 exception:34,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 29,36 @78 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 29,4 @81 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 29 @84 exception:41,
44 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 24,42 @88 exception:43,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, weaverSecret, <Primordial,[B> > 21,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverEnroll(I[B[B)[B > 1,28,10,45 @94 exception:46,
conditional branch(ne, to iindex=-1) 47,10,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveWeaverSlot(IJI)V > 1,28,2,4 @106 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, markSlotInUse(I)V > 49,28 @111 exception:50,
55 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, secdiscardableOnDisk, <Primordial,[B> > 21,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveSecdiscardable(J[BI)V > 1,2,55,4 @116 exception:56,
57 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mType, <Primordial,I> > 21,
59 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getTokenBasedBlobType(I)B > 1,57 @121 exception:58,
60 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, aggregatedSecret, <Primordial,[B> > 21,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createSyntheticPasswordBlob(JBLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;[BJI)V > 1,2,59,3,60,61,4 @133 exception:62,
63 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
65 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @138 exception:64,
67 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 63,65 @142 exception:66,
68 = checkcast <Application,Landroid/util/ArrayMap>67 <Application,Landroid/util/ArrayMap>,
70 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @148 exception:69,
72 = invokevirtual < Application, Landroid/util/ArrayMap, remove(Ljava/lang/Object;)Ljava/lang/Object; > 68,70 @152 exception:71,
73 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$TokenData, mCallback, <Application,Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback> > 21,
conditional branch(eq, to iindex=-1) 73,10,
invokeinterface < Application, Lcom/android/internal/widget/LockPatternUtils$EscrowTokenStateChangeCallback, onEscrowTokenActivated(JI)V > 73,2,4 @159 exception:74,
return 76,
monitorexit 6,
return 44,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 12 @22 exception:18,
return 15,","depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public long addEscrowToken(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	boolean v1 = p0.isUserSecure(p3);
	boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);
	long v3 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	LockscreenCredential v5 = LockscreenCredential.createNone();
	SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);
	boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);
	boolean v9 = this.mSpManager.hasEscrowData(p3);
	long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);
	boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);
	return v10;
}
-----
depth : 2
public boolean isUserSecure(int p1){
	int v1 = p0.getCredentialTypeInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldMigrateToSyntheticPasswordLocked(int p1){
	long v1 = p0.getSyntheticPasswordHandleLocked(p1);
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public void disableEscrowTokenOnNonManagedDevicesIfNeeded(int p1){
	UserManagerInternal v1 = this.mInjector.getUserManagerInternal();
	boolean v2 = v1.isUserManaged(p1);
	boolean v3 = v1.isDeviceManaged();
	DeviceStateCache v4 = this.mInjector.getDeviceStateCache();
	boolean v5 = v4.isDeviceProvisioned();
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.hardware.type.automotive"");
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Disabling escrow token on user "");
	StringBuilder v10 = v7.append(p1);
	String v11 = v7.toString();
	int v12 = Slog.i(""LockSettingsService"", v11);
	boolean v13 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	this.mSpManager.destroyEscrowData(p1);
	return;
}
-----
depth : 2
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public long createTokenBasedSyntheticPassword(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	long v1 = SyntheticPasswordManager.generateHandle();
	Integer v2 = Integer.valueOf(p3);
	boolean v3 = this.tokenMap.containsKey(v2);
	Integer v4 = Integer.valueOf(p3);
	ArrayMap v4 = new ArrayMap();
	Object v6 = this.tokenMap.put(v4, v4);
	SyntheticPasswordManager$TokenData v6 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v8 = SyntheticPasswordManager.secureRandom(16384);
	boolean v9 = p0.isWeaverAvailable();
	byte[] v10 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v10;
	byte[] v11 = SyntheticPasswordCrypto.encrypt(v10, this.PERSONALISATION_WEAVER_TOKEN, v8);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v11;
	byte[] v12 = p0.transformUnderSecdiscardable(p1, v8);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v12;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v13 = Integer.valueOf(p3);
	Object v14 = this.tokenMap.get(v13);
	Long v15 = Long.valueOf(v1);
	Object v16 = v14.put(v15, v6);
	return v1;
}
-----
depth : 2
public boolean activateTokenBasedSyntheticPassword(long p1, SyntheticPasswordManager$AuthenticationToken p2, int p3){
	Integer v1 = Integer.valueOf(p3);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p3);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.get(v5);
	boolean v7 = p0.loadEscrowData(p2, p3);
	boolean v8 = p0.isWeaverAvailable();
	int v9 = p0.getNextAvailableWeaverSlot();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""Weaver enroll token to slot "");
	StringBuilder v12 = v9.append(v9);
	StringBuilder v13 = v9.append("" for user "");
	StringBuilder v14 = v9.append(p3);
	String v15 = v9.toString();
	int v16 = Slog.i(""SyntheticPasswordManager"", v15);
	byte[] v17 = p0.weaverEnroll(v9, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	p0.saveWeaverSlot(v9, p1, p3);
	this.mPasswordSlotManager.markSlotInUse(v9);
	p0.saveSecdiscardable(p1, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v21 = p0.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	p0.createSyntheticPasswordBlob(p1, v21, p2, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v23 = Integer.valueOf(p3);
	Object v24 = this.tokenMap.get(v23);
	Long v25 = Long.valueOf(p1);
	Object v26 = v24.remove(v25);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(p1, p3);
	return 1;
}
-----
","public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	Object v5 = Objects.requireNonNull(p3, ""Listener can not be null."");
	LockSettingsService$$ExternalSyntheticLambda0 v6 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v8 = Binder.clearCallingIdentity();
	int v11 = LockSettingsService.getCredentialTypeInternal(p3);
	boolean v10 = phiInstruction;
	long v13 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	boolean v12 = phiInstruction;
	long v15 = LockSettingsService.getLong(""sp-handle"", 0, p3);
	long v14 = v15;
	IBinder v17 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v18 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v17.linkToDeath(v18, 0);
	IGateKeeperService v22 = IGateKeeperService$Stub.asInterface(v17);
	this.mGateKeeperService = v22;
	IGateKeeperService v16 = v22;
	LockscreenCredential v24 = new LockscreenCredential(-1,v25);
	[B v25 = new [B(0);
	LockscreenCredential v23 = v24;
	SyntheticPasswordManager$AuthenticationResult v28 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v30 = SyntheticPasswordManager.loadState(""pwd"", v14, p3);
	SyntheticPasswordManager$PasswordData v31 = SyntheticPasswordManager$PasswordData.fromBytes(v30);
	boolean v32 = v23.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v33 = SyntheticPasswordManager.computePasswordToken(v23, v31);
	int v34 = SyntheticPasswordManager.loadWeaverSlot(v14, p3);
	boolean v35 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v36 = SyntheticPasswordManager.passwordTokenToWeaverKey(v33);
	VerifyCredentialResponse v37 = SyntheticPasswordManager.weaverVerify(v34, v36);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
	int v38 = v37.getResponseCode();
	byte[] v39 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v40 = SyntheticPasswordManager.transformUnderWeaverSecret(v33, v39);
	0.onCredentialVerified();
	SyntheticPasswordManager$AuthenticationToken v43 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(v14, 0, phiInstruction, phiInstruction, p3);
	SyntheticPasswordManager$AuthenticationResult.authToken = v43;
	VerifyCredentialResponse v44 = SyntheticPasswordManager.verifyChallenge(v16, v43, 0, p3);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v44;
	boolean v45 = SyntheticPasswordManager.hasPasswordMetrics(v14, p3);
	SyntheticPasswordManager.savePasswordMetrics(v23, SyntheticPasswordManager$AuthenticationResult.authToken, v14, p3);
	SyntheticPasswordManager$AuthenticationResult v27 = v28;
	LockSettingsStorage$PersistentData v48 = this.mStorage.readPersistentDataBlock();
	boolean v47 = phiInstruction;
	UserManagerInternal v50 = this.mInjector.getUserManagerInternal();
	boolean v51 = v50.isUserManaged(p3);
	boolean v52 = v50.isDeviceManaged();
	DeviceStateCache v53 = this.mInjector.getDeviceStateCache();
	boolean v54 = v53.isDeviceProvisioned();
	PackageManager v55 = this.mContext.getPackageManager();
	boolean v56 = v55.hasSystemFeature(""android.hardware.type.automotive"");
	boolean v63 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
	this.mSpManager.destroyEscrowData(p3);
	boolean v66 = SyntheticPasswordManager.hasState(""e0"", 0, p3);
	boolean v67 = SyntheticPasswordManager.hasState(""p1"", 0, p3);
	boolean v65 = phiInstruction;
	long v69 = SyntheticPasswordManager.generateHandle();
	Integer v70 = Integer.valueOf(p3);
	boolean v71 = this.tokenMap.containsKey(v70);
	Integer v72 = Integer.valueOf(p3);
	ArrayMap v73 = new ArrayMap();
	Object v75 = this.tokenMap.put(v72, v73);
	SyntheticPasswordManager$TokenData v76 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v78 = SyntheticPasswordManager.secureRandom(16384);
	boolean v79 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v80 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v80;
	byte[] v81 = SyntheticPasswordCrypto.encrypt(v80, this.PERSONALISATION_WEAVER_TOKEN, v78);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v81;
	byte[] v82 = SyntheticPasswordManager.transformUnderSecdiscardable(p1, v78);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v82;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v83 = Integer.valueOf(p3);
	Object v84 = this.tokenMap.get(v83);
	Long v85 = Long.valueOf(v69);
	Object v86 = v84.put(v85, v76);
	long v68 = v69;
	Integer v88 = Integer.valueOf(p3);
	boolean v89 = this.tokenMap.containsKey(v88);
	Integer v90 = Integer.valueOf(p3);
	Object v91 = this.tokenMap.get(v90);
	Long v92 = Long.valueOf(v68);
	Object v93 = v91.get(v92);
	boolean v94 = SyntheticPasswordManager.loadEscrowData(phiInstruction, p3);
	boolean v95 = SyntheticPasswordManager.isWeaverAvailable();
	int v96 = SyntheticPasswordManager.getNextAvailableWeaverSlot();
	byte[] v105 = SyntheticPasswordManager.weaverEnroll(v96, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	SyntheticPasswordManager.saveWeaverSlot(v96, v68, p3);
	this.mPasswordSlotManager.markSlotInUse(v96);
	SyntheticPasswordManager.saveSecdiscardable(v68, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v109 = SyntheticPasswordManager.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	SyntheticPasswordManager.createSyntheticPasswordBlob(v68, v109, phiInstruction, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v111 = Integer.valueOf(p3);
	Object v112 = this.tokenMap.get(v111);
	Long v113 = Long.valueOf(v68);
	Object v114 = v112.remove(v113);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(v68, p3);
	boolean v87 = 1;
	long v9 = v68;
	Binder.restoreCallingIdentity(v8);
	return v9;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","hasPendingEscrowToken(I)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getPendingTokensForUser(I)Ljava/util/Set; > 5,2 @8 exception:6,
9 = invokeinterface < Application, Ljava/util/Set, isEmpty()Z > 7 @12 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 10 to iindex = 2),
12 = phi  11,10,
monitorexit 4,
return 12,","depth : 0
public boolean hasPendingEscrowToken(int p1){
	p0.checkPasswordReadPermission();
	Set v2 = this.mSpManager.getPendingTokensForUser(p1);
	boolean v3 = v2.isEmpty();
	return phiInstruction;
}
-----
","public boolean hasPendingEscrowToken(int p1){
	p0.checkPasswordReadPermission();
	Set v2 = this.mSpManager.getPendingTokensForUser(p1);
	boolean v3 = v2.isEmpty();
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","hasPendingEscrowToken(I)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getPendingTokensForUser(I)Ljava/util/Set; > 5,2 @8 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
5 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @2 exception:4,
7 = invokevirtual < Application, Landroid/util/ArrayMap, containsKey(Ljava/lang/Object;)Z > 3,5 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,8,
9 = new <Application,Landroid/util/ArraySet>@17,
10 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
12 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @21 exception:11,
14 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 10,12 @25 exception:13,
15 = checkcast <Application,Landroid/util/ArrayMap>14 <Application,Landroid/util/ArrayMap>,
17 = invokevirtual < Application, Landroid/util/ArrayMap, keySet()Ljava/util/Set; > 15 @31 exception:16,
invokespecial < Application, Landroid/util/ArraySet, <init>(Ljava/util/Collection;)V > 9,17 @35 exception:18,
return 9,
9 = invokeinterface < Application, Ljava/util/Set, isEmpty()Z > 7 @12 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 10 to iindex = 2),
12 = phi  11,10,
monitorexit 4,
return 12,","depth : 0
public boolean hasPendingEscrowToken(int p1){
	p0.checkPasswordReadPermission();
	Set v2 = this.mSpManager.getPendingTokensForUser(p1);
	boolean v3 = v2.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public Set getPendingTokensForUser(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.tokenMap.containsKey(v1);
	ArraySet v2 = new ArraySet(v5);
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.tokenMap.get(v3);
	Set v5 = v4.keySet();
	return v2;
}
-----
","public boolean hasPendingEscrowToken(int p1){
	Integer v4 = Integer.valueOf(p1);
	boolean v5 = this.tokenMap.containsKey(v4);
	ArraySet v6 = new ArraySet(v9);
	Integer v7 = Integer.valueOf(p1);
	Object v8 = this.tokenMap.get(v7);
	Set v9 = v8.keySet();
	Set v3 = v6;
	boolean v11 = v3.isEmpty();
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","hasPendingEscrowToken(I)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getPendingTokensForUser(I)Ljava/util/Set; > 5,2 @8 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
5 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @2 exception:4,
7 = invokevirtual < Application, Landroid/util/ArrayMap, containsKey(Ljava/lang/Object;)Z > 3,5 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,8,
9 = new <Application,Landroid/util/ArraySet>@17,
10 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
12 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @21 exception:11,
14 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 10,12 @25 exception:13,
15 = checkcast <Application,Landroid/util/ArrayMap>14 <Application,Landroid/util/ArrayMap>,
17 = invokevirtual < Application, Landroid/util/ArrayMap, keySet()Ljava/util/Set; > 15 @31 exception:16,
invokespecial < Application, Landroid/util/ArraySet, <init>(Ljava/util/Collection;)V > 9,17 @35 exception:18,
return 9,
9 = invokeinterface < Application, Ljava/util/Set, isEmpty()Z > 7 @12 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
12 = phi  11,10,
monitorexit 4,
return 12,","depth : 0
public boolean hasPendingEscrowToken(int p1){
	p0.checkPasswordReadPermission();
	Set v2 = this.mSpManager.getPendingTokensForUser(p1);
	boolean v3 = v2.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public Set getPendingTokensForUser(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.tokenMap.containsKey(v1);
	ArraySet v2 = new ArraySet(v5);
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.tokenMap.get(v3);
	Set v5 = v4.keySet();
	return v2;
}
-----
","public boolean hasPendingEscrowToken(int p1){
	Integer v4 = Integer.valueOf(p1);
	boolean v5 = this.tokenMap.containsKey(v4);
	ArraySet v6 = new ArraySet(v9);
	Integer v7 = Integer.valueOf(p1);
	Object v8 = this.tokenMap.get(v7);
	Set v9 = v8.keySet();
	Set v3 = v6;
	boolean v11 = v3.isEmpty();
	return phiInstruction;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
7 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
24 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 21,22 @52 exception:23,
monitorexit 8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 7 @56 exception:25,
return 12,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w(""LockSettingsService"", ""Invalid escrow token supplied"");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
","public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	Binder.restoreCallingIdentity(v2);
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
7 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
24 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 21,22 @52 exception:23,
monitorexit 8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 7 @56 exception:25,
return 12,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w(""LockSettingsService"", ""Invalid escrow token supplied"");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
","public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = SyntheticPasswordManager.hasState(""e0"", 0, p3);
	boolean v8 = SyntheticPasswordManager.hasState(""p1"", 0, p3);
	boolean v6 = phiInstruction;
	IBinder v10 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v11 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v10.linkToDeath(v11, 0);
	IGateKeeperService v15 = IGateKeeperService$Stub.asInterface(v10);
	this.mGateKeeperService = v15;
	IGateKeeperService v9 = v15;
	SyntheticPasswordManager$AuthenticationResult v17 = SyntheticPasswordManager.unwrapTokenBasedSyntheticPasswordInternal(v9, p1, 2, p2, p3);
	SyntheticPasswordManager$AuthenticationResult v16 = v17;
	Binder.restoreCallingIdentity(v5);
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
7 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
monitorexit 8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 7 @62 exception:20,
return 19,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	Binder.restoreCallingIdentity(v2);
	return 1;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
","public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = SyntheticPasswordManager.hasState(""e0"", 0, p3);
	boolean v8 = SyntheticPasswordManager.hasState(""p1"", 0, p3);
	boolean v6 = phiInstruction;
	IBinder v10 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v11 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v10.linkToDeath(v11, 0);
	IGateKeeperService v15 = IGateKeeperService$Stub.asInterface(v10);
	this.mGateKeeperService = v15;
	IGateKeeperService v9 = v15;
	SyntheticPasswordManager$AuthenticationResult v17 = SyntheticPasswordManager.unwrapTokenBasedSyntheticPasswordInternal(v9, p1, 2, p2, p3);
	SyntheticPasswordManager$AuthenticationResult v16 = v17;
	Binder.restoreCallingIdentity(v5);
	return 1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
7 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,2,3,4 @0 exception:5,
8 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([B)Z > 6 @4 exception:7,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,2,3,4 @0 exception:5,
8 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([B)Z > 6 @4 exception:7,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
invokespecial < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy, <init>(Landroid/os/IBinder;)V > 7,1 @22 exception:8,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@4,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @6 exception:8,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSecdiscardable(JI)[B > 1,3,6 @9 exception:9,
12 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,6 @13 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @20 exception:14,
conditional branch(ne, to iindex=-1) 15,17,
19 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,12,17 @39 exception:18,
21 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 19 @43 exception:20,
conditional branch(ne, to iindex=-1) 21,17,
23 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 19 @49 exception:22,
conditional branch(ne, to iindex=-1) 23,17,
25 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 19 @56 exception:24,
26 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
28 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, decrypt([B[B[B)[B > 25,26,10 @62 exception:27,
goto (from iindex= 35 to iindex = 11),
29 = phi  10,28,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderSecdiscardable([B[B)[B > 1,5,29 @79 exception:34,
38 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,4,35,36,6 @90 exception:37,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 38,
conditional branch(eq, to iindex=-1) 38,17,
41 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,38,36,6 @104 exception:40,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 41,
conditional branch(ne, to iindex=-1) 41,17,
42 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, OK, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 42,
goto (from iindex= 63 to iindex = 5),
return 7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
24 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 21,22 @52 exception:23,
monitorexit 8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 7 @56 exception:25,
return 12,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w(""LockSettingsService"", ""Invalid escrow token supplied"");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPasswordInternal(IGateKeeperService p1, long p2, byte p3, byte[] p4, int p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadSecdiscardable(p2, p5);
	int v3 = p0.loadWeaverSlot(p2, p5);
	boolean v4 = p0.isWeaverAvailable();
	VerifyCredentialResponse v5 = p0.weaverVerify(v3, 0);
	int v6 = v5.getResponseCode();
	byte[] v7 = v5.getGatekeeperHAT();
	byte[] v8 = v5.getGatekeeperHAT();
	byte[] v9 = SyntheticPasswordCrypto.decrypt(v8, this.PERSONALISATION_WEAVER_TOKEN, v2);
	byte[] v10 = p0.transformUnderSecdiscardable(p4, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v11 = p0.unwrapSyntheticPasswordBlob(p2, p3, v10, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.authToken = v11;
	VerifyCredentialResponse v12 = p0.verifyChallenge(p1, v11, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v12;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	return v0;
}
-----
","public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	byte[] v8 = SyntheticPasswordManager.loadState(""e0"", 0, p1);
	boolean v9 = ArrayUtils.isEmpty(v8);
	boolean v7 = (v9 ^ 1);
	byte[] v11 = SyntheticPasswordManager.loadState(""p1"", 0, p1);
	boolean v12 = ArrayUtils.isEmpty(v11);
	boolean v10 = (v12 ^ 1);
	boolean v6 = phiInstruction;
	IBinder v14 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v15 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v14.linkToDeath(v15, 0);
	IInterface v20 = v14.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v21 = new IGateKeeperService$Stub$Proxy(v14);
	IGateKeeperService v19 = v21;
	this.mGateKeeperService = v19;
	IGateKeeperService v13 = v19;
	SyntheticPasswordManager$AuthenticationResult v25 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v27 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);
	int v28 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);
	boolean v29 = SyntheticPasswordManager.isWeaverAvailable();
	VerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0);
	int v31 = v30.getResponseCode();
	byte[] v32 = v30.getGatekeeperHAT();
	byte[] v33 = v30.getGatekeeperHAT();
	byte[] v34 = SyntheticPasswordCrypto.decrypt(v33, this.PERSONALISATION_WEAVER_TOKEN, v27);
	byte[] v35 = SyntheticPasswordManager.transformUnderSecdiscardable(p3, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v36 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v35, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v36;
	VerifyCredentialResponse v37 = SyntheticPasswordManager.verifyChallenge(p1, v36, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	SyntheticPasswordManager$AuthenticationResult v24 = v25;
	SyntheticPasswordManager$AuthenticationResult v23 = v24;
	Binder.restoreCallingIdentity(v5);
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
7 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,2,3,4 @0 exception:5,
8 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([B)Z > 6 @4 exception:7,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,2,3,4 @0 exception:5,
8 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([B)Z > 6 @4 exception:7,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 10,7,
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
invokespecial < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy, <init>(Landroid/os/IBinder;)V > 7,1 @22 exception:8,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@4,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @6 exception:8,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSecdiscardable(JI)[B > 1,3,6 @9 exception:9,
12 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,6 @13 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @20 exception:14,
conditional branch(ne, to iindex=-1) 15,17,
19 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,12,17 @39 exception:18,
21 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 19 @43 exception:20,
conditional branch(ne, to iindex=-1) 21,17,
23 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 19 @49 exception:22,
conditional branch(ne, to iindex=-1) 23,17,
25 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 19 @56 exception:24,
26 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
28 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, decrypt([B[B[B)[B > 25,26,10 @62 exception:27,
goto (from iindex= 35 to iindex = 11),
29 = phi  10,28,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderSecdiscardable([B[B)[B > 1,5,29 @79 exception:34,
38 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,4,35,36,6 @90 exception:37,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 38,
conditional branch(eq, to iindex=-1) 38,17,
41 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,38,36,6 @104 exception:40,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 41,
conditional branch(ne, to iindex=-1) 41,17,
42 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, OK, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 42,
goto (from iindex= 63 to iindex = 5),
return 7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
24 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 21,22 @52 exception:23,
monitorexit 8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 7 @56 exception:25,
return 12,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w(""LockSettingsService"", ""Invalid escrow token supplied"");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPasswordInternal(IGateKeeperService p1, long p2, byte p3, byte[] p4, int p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadSecdiscardable(p2, p5);
	int v3 = p0.loadWeaverSlot(p2, p5);
	boolean v4 = p0.isWeaverAvailable();
	VerifyCredentialResponse v5 = p0.weaverVerify(v3, 0);
	int v6 = v5.getResponseCode();
	byte[] v7 = v5.getGatekeeperHAT();
	byte[] v8 = v5.getGatekeeperHAT();
	byte[] v9 = SyntheticPasswordCrypto.decrypt(v8, this.PERSONALISATION_WEAVER_TOKEN, v2);
	byte[] v10 = p0.transformUnderSecdiscardable(p4, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v11 = p0.unwrapSyntheticPasswordBlob(p2, p3, v10, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.authToken = v11;
	VerifyCredentialResponse v12 = p0.verifyChallenge(p1, v11, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v12;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	return v0;
}
-----
","public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	byte[] v8 = SyntheticPasswordManager.loadState(""e0"", 0, p1);
	boolean v9 = ArrayUtils.isEmpty(v8);
	boolean v7 = (v9 ^ 1);
	byte[] v11 = SyntheticPasswordManager.loadState(""p1"", 0, p1);
	boolean v12 = ArrayUtils.isEmpty(v11);
	boolean v10 = (v12 ^ 1);
	boolean v6 = phiInstruction;
	IBinder v14 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v15 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v14.linkToDeath(v15, 0);
	IInterface v20 = v14.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v21 = new IGateKeeperService$Stub$Proxy(v14);
	IGateKeeperService v19 = v21;
	this.mGateKeeperService = v19;
	IGateKeeperService v13 = v19;
	SyntheticPasswordManager$AuthenticationResult v25 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v27 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);
	int v28 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);
	boolean v29 = SyntheticPasswordManager.isWeaverAvailable();
	VerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0);
	int v31 = v30.getResponseCode();
	byte[] v32 = v30.getGatekeeperHAT();
	byte[] v33 = v30.getGatekeeperHAT();
	byte[] v34 = SyntheticPasswordCrypto.decrypt(v33, this.PERSONALISATION_WEAVER_TOKEN, v27);
	byte[] v35 = SyntheticPasswordManager.transformUnderSecdiscardable(p3, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v36 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v35, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v36;
	VerifyCredentialResponse v37 = SyntheticPasswordManager.verifyChallenge(p1, v36, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	SyntheticPasswordManager$AuthenticationResult v24 = v25;
	SyntheticPasswordManager$AuthenticationResult v23 = v24;
	Binder.restoreCallingIdentity(v5);
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenValid(J[BI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
7 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasEscrowData(I)Z > 9,4 @12 exception:10,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,3,4,2 @4 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,2,3,4 @0 exception:5,
8 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([B)Z > 6 @4 exception:7,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 6,7,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,8,4,2 @13 exception:9,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,2,3,4 @0 exception:5,
8 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([B)Z > 6 @4 exception:7,
10 = binaryop(xor) 8 , 9,
return 10,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 10 to iindex = 2),
17 = phi  15,7,
return 17,
conditional branch(ne, to iindex=-1) 11,12,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:14,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapWeakTokenBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;J[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 13,15,2,3,4 @40 exception:16,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapTokenBasedSyntheticPasswordInternal(Landroid/service/gatekeeper/IGateKeeperService;JB[BI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 1,2,3,6,4,5 @6 exception:7,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@4,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @6 exception:8,
10 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSecdiscardable(JI)[B > 1,3,6 @9 exception:9,
12 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,6 @13 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @20 exception:14,
conditional branch(ne, to iindex=-1) 15,17,
19 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,12,17 @39 exception:18,
21 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 19 @43 exception:20,
conditional branch(ne, to iindex=-1) 21,17,
23 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 19 @49 exception:22,
conditional branch(ne, to iindex=-1) 23,17,
25 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 19 @56 exception:24,
26 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_TOKEN, <Primordial,[B> >,
28 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, decrypt([B[B[B)[B > 25,26,10 @62 exception:27,
goto (from iindex= 35 to iindex = 11),
29 = phi  10,28,
35 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderSecdiscardable([B[B)[B > 1,5,29 @79 exception:34,
38 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,4,35,36,6 @90 exception:37,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 38,
conditional branch(eq, to iindex=-1) 38,17,
41 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,38,36,6 @104 exception:40,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 41,
conditional branch(ne, to iindex=-1) 41,17,
42 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, OK, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 42,
goto (from iindex= 63 to iindex = 5),
return 7,
return 8,
18 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 17,
conditional branch(ne, to iindex=-1) 18,12,
24 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 21,22 @52 exception:23,
monitorexit 8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 7 @56 exception:25,
return 12,","depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w(""LockSettingsService"", ""Invalid escrow token supplied"");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState(""e0"", 0, p1);
	boolean v2 = p0.hasState(""p1"", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPasswordInternal(IGateKeeperService p1, long p2, byte p3, byte[] p4, int p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadSecdiscardable(p2, p5);
	int v3 = p0.loadWeaverSlot(p2, p5);
	boolean v4 = p0.isWeaverAvailable();
	VerifyCredentialResponse v5 = p0.weaverVerify(v3, 0);
	int v6 = v5.getResponseCode();
	byte[] v7 = v5.getGatekeeperHAT();
	byte[] v8 = v5.getGatekeeperHAT();
	byte[] v9 = SyntheticPasswordCrypto.decrypt(v8, this.PERSONALISATION_WEAVER_TOKEN, v2);
	byte[] v10 = p0.transformUnderSecdiscardable(p4, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v11 = p0.unwrapSyntheticPasswordBlob(p2, p3, v10, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.authToken = v11;
	VerifyCredentialResponse v12 = p0.verifyChallenge(p1, v11, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v12;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	return v0;
}
-----
","public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	byte[] v8 = SyntheticPasswordManager.loadState(""e0"", 0, p1);
	boolean v9 = ArrayUtils.isEmpty(v8);
	boolean v7 = (v9 ^ 1);
	byte[] v11 = SyntheticPasswordManager.loadState(""p1"", 0, p1);
	boolean v12 = ArrayUtils.isEmpty(v11);
	boolean v10 = (v12 ^ 1);
	boolean v6 = phiInstruction;
	IBinder v14 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v15 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v14.linkToDeath(v15, 0);
	IInterface v20 = v14.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService v19 = v20;
	this.mGateKeeperService = v19;
	IGateKeeperService v13 = v19;
	SyntheticPasswordManager$AuthenticationResult v23 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v25 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);
	int v26 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);
	boolean v27 = SyntheticPasswordManager.isWeaverAvailable();
	VerifyCredentialResponse v28 = SyntheticPasswordManager.weaverVerify(v26, 0);
	int v29 = v28.getResponseCode();
	byte[] v30 = v28.getGatekeeperHAT();
	byte[] v31 = v28.getGatekeeperHAT();
	byte[] v32 = SyntheticPasswordCrypto.decrypt(v31, this.PERSONALISATION_WEAVER_TOKEN, v25);
	byte[] v33 = SyntheticPasswordManager.transformUnderSecdiscardable(p3, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v34 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v33, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v34;
	VerifyCredentialResponse v35 = SyntheticPasswordManager.verifyChallenge(p1, v34, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v35;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	SyntheticPasswordManager$AuthenticationResult v22 = v23;
	SyntheticPasswordManager$AuthenticationResult v21 = v22;
	Binder.restoreCallingIdentity(v5);
	return 0;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getStrongAuthForUser(I)I","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuthTracker, <Application,Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker, getStrongAuthForUser(I)I > 4,2 @5 exception:5,
return 6,","depth : 0
public int getStrongAuthForUser(int p1){
	p0.checkPasswordReadPermission();
	int v2 = this.mStrongAuthTracker.getStrongAuthForUser(p1);
	return v2;
}
-----
","public int getStrongAuthForUser(int p1){
	p0.checkPasswordReadPermission();
	int v2 = this.mStrongAuthTracker.getStrongAuthForUser(p1);
	return v2;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getStrongAuthForUser(I)I","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuthTracker, <Application,Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker, getStrongAuthForUser(I)I > 4,2 @5 exception:5,
monitorenter 1,
4 = invokespecial < Application, Lcom/android/internal/widget/LockPatternUtils$StrongAuthTracker, getStrongAuthForUser(I)I > 1,2 @1 exception:3,
monitorexit 1,
return 4,
return 6,","depth : 0
public int getStrongAuthForUser(int p1){
	p0.checkPasswordReadPermission();
	int v2 = this.mStrongAuthTracker.getStrongAuthForUser(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public int getStrongAuthForUser(int p1){
	int v1 = p0.getStrongAuthForUser(p1);
	return v1;
}
-----
","public int getStrongAuthForUser(int p1){
	int v4 = LockSettingsService$SynchronizedStrongAuthTracker.getStrongAuthForUser(p1);
	int v3 = v4;
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getStrongAuthForUser(I)I","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuthTracker, <Application,Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$SynchronizedStrongAuthTracker, getStrongAuthForUser(I)I > 4,2 @5 exception:5,
monitorenter 1,
4 = invokespecial < Application, Lcom/android/internal/widget/LockPatternUtils$StrongAuthTracker, getStrongAuthForUser(I)I > 1,2 @1 exception:3,
3 = getfield < Application, Lcom/android/internal/widget/LockPatternUtils$StrongAuthTracker, mStrongAuthRequiredForUser, <Application,Landroid/util/SparseIntArray> > 1,
4 = getfield < Application, Lcom/android/internal/widget/LockPatternUtils$StrongAuthTracker, mDefaultStrongAuthFlags, <Primordial,I> > 1,
6 = invokevirtual < Application, Landroid/util/SparseIntArray, get(II)I > 3,2,4 @4 exception:5,
return 6,
monitorexit 1,
return 4,
return 6,","depth : 0
public int getStrongAuthForUser(int p1){
	p0.checkPasswordReadPermission();
	int v2 = this.mStrongAuthTracker.getStrongAuthForUser(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public int getStrongAuthForUser(int p1){
	int v1 = p0.getStrongAuthForUser(p1);
	return v1;
}
-----
depth : 2
public int getStrongAuthForUser(int p1){
	int v1 = this.mStrongAuthRequiredForUser.get(p1, this.mDefaultStrongAuthFlags);
	return v1;
}
-----
","public int getStrongAuthForUser(int p1){
	int v5 = this.mStrongAuthRequiredForUser.get(p1, this.mDefaultStrongAuthFlags);
	int v4 = v5;
	int v3 = v4;
	return v3;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","hasSecureLockScreen()Z","0","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
return 2,","depth : 0
public boolean hasSecureLockScreen(){
	return this.mHasSecureLockScreen;
}
-----
","public boolean hasSecureLockScreen(){
	return this.mHasSecureLockScreen;
}
","NONE"

"Lcom/android/server/locksettings/LockSettingsService","initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V","0","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V > 5,2,3,4 @2 exception:6,
return,","depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
","public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:6,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 7,2 @7 exception:8,
12 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,10 @14 exception:11,
15 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,13 @20 exception:14,
17 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parse([B)Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml; > 4 @23 exception:16,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
39 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 37,9 @29 exception:38,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, verifyFileSignature(Ljava/security/cert/X509Certificate;[B)V > 17,39,3 @33 exception:40,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryService(Ljava/lang/String;[B)V > 1,9,3 @36 exception:67,
return,
return,","depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
depth : 1
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v3 = Objects.requireNonNull(p2, ""recoveryServiceCertFile is null"");
	Object v4 = Objects.requireNonNull(p3, ""recoveryServiceSigFile is null"");
	SigXml v5 = SigXml.parse(p3);
	X509Certificate v6 = this.mTestCertHelper.getRootCertificate(v2);
	v5.verifyFileSignature(v6, p2);
	p0.initRecoveryService(v2, p2);
	return;
}
-----
","public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v4 = Objects.requireNonNull(p2, ""recoveryServiceCertFile is null"");
	Object v5 = Objects.requireNonNull(p3, ""recoveryServiceSigFile is null"");
	SigXml v6 = SigXml.parse(p3);
	X509Certificate v7 = this.mTestCertHelper.getRootCertificate(v3);
	v6.verifyFileSignature(v7, p2);
	RecoverableKeyStoreManager.initRecoveryService(v3, p2);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:6,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 7,2 @7 exception:8,
conditional branch(eq, to iindex=-1) 2,3,
5 = invokevirtual < Application, Ljava/lang/String, isEmpty()Z > 2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,3,
10 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 7,8 @13 exception:9,
13 = phi  2,11,
return 13,
12 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,10 @14 exception:11,
15 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,13 @20 exception:14,
17 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parse([B)Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml; > 4 @23 exception:16,
3 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, getXmlRootNode([B)Lorg/w3c/dom/Element; > 1 @0 exception:2,
4 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml>@4,
6 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parseIntermediateCerts(Lorg/w3c/dom/Element;)Ljava/util/List; > 3 @6 exception:5,
8 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parseSignerCert(Lorg/w3c/dom/Element;)Ljava/security/cert/X509Certificate; > 3 @10 exception:7,
10 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parseFileSignature(Lorg/w3c/dom/Element;)[B > 3 @14 exception:9,
invokespecial < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, <init>(Ljava/util/List;Ljava/security/cert/X509Certificate;[B)V > 4,6,8,10 @18 exception:11,
return 4,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
39 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 37,9 @29 exception:38,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, isTestOnlyCertificateAlias(Ljava/lang/String;)Z > 1,4 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
15 = invokestatic < Application, Landroid/security/keystore/recovery/TrustedRootCertificates, getTestOnlyInsecureCertificate()Ljava/security/cert/X509Certificate; > @10 exception:14,
return 15,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, verifyFileSignature(Ljava/security/cert/X509Certificate;[B)V > 17,39,3 @33 exception:40,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, verifyFileSignature(Ljava/security/cert/X509Certificate;[BLjava/util/Date;)V > 1,2,3,4 @1 exception:5,
return,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryService(Ljava/lang/String;[B)V > 1,9,3 @36 exception:67,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:4,
6 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @5 exception:5,
8 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @9 exception:7,
9 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 9,2 @17 exception:10,
12 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
14 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, isValidRootCertificateAlias(Ljava/lang/String;)Z > 12,11 @23 exception:13,
conditional branch(eq, to iindex=-1) 14,16,
20 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
22 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getActiveRootOfTrust(II)Ljava/lang/String; > 20,6,8 @33 exception:21,
conditional branch(ne, to iindex=-1) 22,16,
47 = new <Application,Ljava/lang/StringBuilder>@41,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 47 @43 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 47,49 @48 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 47,8 @51 exception:52,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 47,54 @56 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 47,11 @59 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 47 @62 exception:59,
62 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 23,60 @66 exception:61,
goto (from iindex= 31 to iindex = 43),
67 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
69 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setActiveRootOfTrust(IILjava/lang/String;)J > 67,6,8,11 @114 exception:68,
71 = binaryop(lt) 69 , 70,
conditional branch(lt, to iindex=-1) 71,16,
78 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertXml, parse([B)Lcom/android/server/locksettings/recoverablekeystore/certificate/CertXml; > 3 @128 exception:77,
98 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertXml, getSerial()J > 78 @132 exception:97,
99 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
101 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoveryServiceCertSerial(IILjava/lang/String;)Ljava/lang/Long; > 99,6,8,11 @138 exception:100,
conditional branch(eq, to iindex=-1) 101,16,
103 = invokevirtual < Application, Ljava/lang/Long, longValue()J > 101 @144 exception:102,
104 = binaryop(lt) 103 , 98,
conditional branch(lt, to iindex=-1) 104,16,
105 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
107 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, isTestOnlyCertificateAlias(Ljava/lang/String;)Z > 105,11 @154 exception:106,
conditional branch(ne, to iindex=-1) 107,16,
204 = invokevirtual < Application, Ljava/lang/Long, longValue()J > 101 @160 exception:203,
205 = binaryop(lt) 204 , 98,
conditional branch(ne, to iindex=-1) 205,16,
214 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 23,212 @170 exception:213,
return,
return,
return,","depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
depth : 1
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v3 = Objects.requireNonNull(p2, ""recoveryServiceCertFile is null"");
	Object v4 = Objects.requireNonNull(p3, ""recoveryServiceSigFile is null"");
	SigXml v5 = SigXml.parse(p3);
	X509Certificate v6 = this.mTestCertHelper.getRootCertificate(v2);
	v5.verifyFileSignature(v6, p2);
	p0.initRecoveryService(v2, p2);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	return phiInstruction;
}
-----
depth : 2
public SigXml parse(byte[] p1){
	Element v1 = CertUtils.getXmlRootNode(p1);
	SigXml v1 = new SigXml(v2,v3,v4);
	List v2 = SigXml.parseIntermediateCerts(v1);
	X509Certificate v3 = SigXml.parseSignerCert(v1);
	byte[] v4 = SigXml.parseFileSignature(v1);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	return v3;
}
-----
depth : 2
public void verifyFileSignature(X509Certificate p1, byte[] p2){
	p0.verifyFileSignature(p1, p2, 0);
	return;
}
-----
depth : 2
public void initRecoveryService(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	String v4 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	boolean v5 = this.mTestCertHelper.isValidRootCertificateAlias(v4);
	String v6 = this.mDatabase.getActiveRootOfTrust(v2, v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Root of trust for recovery agent + "");
	StringBuilder v9 = v6.append(v3);
	StringBuilder v10 = v6.append("" is assigned for the first time to "");
	StringBuilder v11 = v6.append(v4);
	String v12 = v6.toString();
	int v13 = Log.d(""RecoverableKeyStoreMgr"", v12);
	long v14 = this.mDatabase.setActiveRootOfTrust(v2, v3, v4);
	CertXml v15 = CertXml.parse(p2);
	long v16 = v15.getSerial();
	Long v17 = this.mDatabase.getRecoveryServiceCertSerial(v2, v3, v4);
	long v18 = v17.longValue();
	boolean v19 = this.mTestCertHelper.isTestOnlyCertificateAlias(v4);
	long v20 = v17.longValue();
	int v21 = Log.i(""RecoverableKeyStoreMgr"", ""The cert file serial number is the same, so skip updating."");
	return;
}
-----
","public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	boolean v15 = p1.isEmpty();
	int v16 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	String v14 = phiInstruction;
	Object v17 = Objects.requireNonNull(p2, ""recoveryServiceCertFile is null"");
	Object v18 = Objects.requireNonNull(p3, ""recoveryServiceSigFile is null"");
	Element v20 = CertUtils.getXmlRootNode(p3);
	SigXml v21 = new SigXml(v22,v23,v24);
	List v22 = SigXml.parseIntermediateCerts(v20);
	X509Certificate v23 = SigXml.parseSignerCert(v20);
	byte[] v24 = SigXml.parseFileSignature(v20);
	SigXml v19 = v21;
	String v27 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v28 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v27);
	X509Certificate v29 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	X509Certificate v26 = v29;
	SigXml.verifyFileSignature(v26, p2, 0);
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v34 = UserHandle.getCallingUserId();
	int v35 = Binder.getCallingUid();
	String v36 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v37 = this.mTestCertHelper.isValidRootCertificateAlias(v36);
	String v38 = this.mDatabase.getActiveRootOfTrust(v34, v35);
	StringBuilder v39 = new StringBuilder();
	StringBuilder v41 = v39.append(""Root of trust for recovery agent + "");
	StringBuilder v42 = v39.append(v35);
	StringBuilder v43 = v39.append("" is assigned for the first time to "");
	StringBuilder v44 = v39.append(v36);
	String v45 = v39.toString();
	int v46 = Log.d(""RecoverableKeyStoreMgr"", v45);
	long v47 = this.mDatabase.setActiveRootOfTrust(v34, v35, v36);
	CertXml v48 = CertXml.parse(p2);
	long v49 = v48.getSerial();
	Long v50 = this.mDatabase.getRecoveryServiceCertSerial(v34, v35, v36);
	long v51 = v50.longValue();
	boolean v52 = this.mTestCertHelper.isTestOnlyCertificateAlias(v36);
	long v53 = v50.longValue();
	int v54 = Log.i(""RecoverableKeyStoreMgr"", ""The cert file serial number is the same, so skip updating."");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:6,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 7,2 @7 exception:8,
conditional branch(eq, to iindex=-1) 2,3,
5 = invokevirtual < Application, Ljava/lang/String, isEmpty()Z > 2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,3,
10 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 7,8 @13 exception:9,
13 = phi  2,11,
return 13,
12 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,10 @14 exception:11,
15 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 4,13 @20 exception:14,
17 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parse([B)Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml; > 4 @23 exception:16,
3 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertUtils, getXmlRootNode([B)Lorg/w3c/dom/Element; > 1 @0 exception:2,
4 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml>@4,
6 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parseIntermediateCerts(Lorg/w3c/dom/Element;)Ljava/util/List; > 3 @6 exception:5,
8 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parseSignerCert(Lorg/w3c/dom/Element;)Ljava/security/cert/X509Certificate; > 3 @10 exception:7,
10 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, parseFileSignature(Lorg/w3c/dom/Element;)[B > 3 @14 exception:9,
invokespecial < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, <init>(Ljava/util/List;Ljava/security/cert/X509Certificate;[B)V > 4,6,8,10 @18 exception:11,
return 4,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
39 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 37,9 @29 exception:38,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, isTestOnlyCertificateAlias(Ljava/lang/String;)Z > 1,4 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokestatic < Application, Landroid/security/keystore/recovery/TrustedRootCertificates, getRootCertificate(Ljava/lang/String;)Ljava/security/cert/X509Certificate; > 4 @15 exception:8,
conditional branch(eq, to iindex=-1) 9,7,
return 9,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, verifyFileSignature(Ljava/security/cert/X509Certificate;[B)V > 17,39,3 @33 exception:40,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/SigXml, verifyFileSignature(Ljava/security/cert/X509Certificate;[BLjava/util/Date;)V > 1,2,3,4 @1 exception:5,
return,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, initRecoveryService(Ljava/lang/String;[B)V > 1,9,3 @36 exception:67,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @2 exception:4,
6 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @5 exception:5,
8 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @9 exception:7,
9 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, getDefaultCertificateAliasIfEmpty(Ljava/lang/String;)Ljava/lang/String; > 9,2 @17 exception:10,
12 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
14 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, isValidRootCertificateAlias(Ljava/lang/String;)Z > 12,11 @23 exception:13,
conditional branch(eq, to iindex=-1) 14,16,
20 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
22 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getActiveRootOfTrust(II)Ljava/lang/String; > 20,6,8 @33 exception:21,
conditional branch(ne, to iindex=-1) 22,16,
47 = new <Application,Ljava/lang/StringBuilder>@41,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 47 @43 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 47,49 @48 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 47,8 @51 exception:52,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 47,54 @56 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 47,11 @59 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 47 @62 exception:59,
62 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 23,60 @66 exception:61,
goto (from iindex= 31 to iindex = 43),
67 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
69 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setActiveRootOfTrust(IILjava/lang/String;)J > 67,6,8,11 @114 exception:68,
71 = binaryop(lt) 69 , 70,
conditional branch(lt, to iindex=-1) 71,16,
78 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertXml, parse([B)Lcom/android/server/locksettings/recoverablekeystore/certificate/CertXml; > 3 @128 exception:77,
98 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/certificate/CertXml, getSerial()J > 78 @132 exception:97,
99 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
101 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoveryServiceCertSerial(IILjava/lang/String;)Ljava/lang/Long; > 99,6,8,11 @138 exception:100,
conditional branch(eq, to iindex=-1) 101,16,
103 = invokevirtual < Application, Ljava/lang/Long, longValue()J > 101 @144 exception:102,
104 = binaryop(lt) 103 , 98,
conditional branch(lt, to iindex=-1) 104,16,
105 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mTestCertHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper> > 1,
107 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/TestOnlyInsecureCertificateHelper, isTestOnlyCertificateAlias(Ljava/lang/String;)Z > 105,11 @154 exception:106,
conditional branch(ne, to iindex=-1) 107,16,
204 = invokevirtual < Application, Ljava/lang/Long, longValue()J > 101 @160 exception:203,
205 = binaryop(lt) 204 , 98,
conditional branch(ne, to iindex=-1) 205,16,
214 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 23,212 @170 exception:213,
return,
return,
return,","depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
depth : 1
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v3 = Objects.requireNonNull(p2, ""recoveryServiceCertFile is null"");
	Object v4 = Objects.requireNonNull(p3, ""recoveryServiceSigFile is null"");
	SigXml v5 = SigXml.parse(p3);
	X509Certificate v6 = this.mTestCertHelper.getRootCertificate(v2);
	v5.verifyFileSignature(v6, p2);
	p0.initRecoveryService(v2, p2);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	return phiInstruction;
}
-----
depth : 2
public SigXml parse(byte[] p1){
	Element v1 = CertUtils.getXmlRootNode(p1);
	SigXml v1 = new SigXml(v2,v3,v4);
	List v2 = SigXml.parseIntermediateCerts(v1);
	X509Certificate v3 = SigXml.parseSignerCert(v1);
	byte[] v4 = SigXml.parseFileSignature(v1);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getRootCertificate(v1);
	return v3;
}
-----
depth : 2
public void verifyFileSignature(X509Certificate p1, byte[] p2){
	p0.verifyFileSignature(p1, p2, 0);
	return;
}
-----
depth : 2
public void initRecoveryService(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	String v4 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	boolean v5 = this.mTestCertHelper.isValidRootCertificateAlias(v4);
	String v6 = this.mDatabase.getActiveRootOfTrust(v2, v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Root of trust for recovery agent + "");
	StringBuilder v9 = v6.append(v3);
	StringBuilder v10 = v6.append("" is assigned for the first time to "");
	StringBuilder v11 = v6.append(v4);
	String v12 = v6.toString();
	int v13 = Log.d(""RecoverableKeyStoreMgr"", v12);
	long v14 = this.mDatabase.setActiveRootOfTrust(v2, v3, v4);
	CertXml v15 = CertXml.parse(p2);
	long v16 = v15.getSerial();
	Long v17 = this.mDatabase.getRecoveryServiceCertSerial(v2, v3, v4);
	long v18 = v17.longValue();
	boolean v19 = this.mTestCertHelper.isTestOnlyCertificateAlias(v4);
	long v20 = v17.longValue();
	int v21 = Log.i(""RecoverableKeyStoreMgr"", ""The cert file serial number is the same, so skip updating."");
	return;
}
-----
","public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	boolean v15 = p1.isEmpty();
	int v16 = Log.e(""TestCertHelper"", ""rootCertificateAlias is null or empty - use secure default value"");
	String v14 = phiInstruction;
	Object v17 = Objects.requireNonNull(p2, ""recoveryServiceCertFile is null"");
	Object v18 = Objects.requireNonNull(p3, ""recoveryServiceSigFile is null"");
	Element v20 = CertUtils.getXmlRootNode(p3);
	SigXml v21 = new SigXml(v22,v23,v24);
	List v22 = SigXml.parseIntermediateCerts(v20);
	X509Certificate v23 = SigXml.parseSignerCert(v20);
	byte[] v24 = SigXml.parseFileSignature(v20);
	SigXml v19 = v21;
	String v27 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v28 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v27);
	X509Certificate v29 = TrustedRootCertificates.getRootCertificate(v27);
	X509Certificate v26 = v29;
	SigXml.verifyFileSignature(v26, p2, 0);
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v34 = UserHandle.getCallingUserId();
	int v35 = Binder.getCallingUid();
	String v36 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v37 = this.mTestCertHelper.isValidRootCertificateAlias(v36);
	String v38 = this.mDatabase.getActiveRootOfTrust(v34, v35);
	StringBuilder v39 = new StringBuilder();
	StringBuilder v41 = v39.append(""Root of trust for recovery agent + "");
	StringBuilder v42 = v39.append(v35);
	StringBuilder v43 = v39.append("" is assigned for the first time to "");
	StringBuilder v44 = v39.append(v36);
	String v45 = v39.toString();
	int v46 = Log.d(""RecoverableKeyStoreMgr"", v45);
	long v47 = this.mDatabase.setActiveRootOfTrust(v34, v35, v36);
	CertXml v48 = CertXml.parse(p2);
	long v49 = v48.getSerial();
	Long v50 = this.mDatabase.getRecoveryServiceCertSerial(v34, v35, v36);
	long v51 = v50.longValue();
	boolean v52 = this.mTestCertHelper.isTestOnlyCertificateAlias(v36);
	long v53 = v50.longValue();
	int v54 = Log.i(""RecoverableKeyStoreMgr"", ""The cert file serial number is the same, so skip updating."");
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
35 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 11,33 @73 exception:34,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @77 exception:36,
return 7,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	int v8 = Slog.w(""LockSettingsService"", ""Current credential is incorrect"");
	p0.scheduleGc();
	return 0;
}
-----
","public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	p0.scheduleGc();
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @10 exception:8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 6 @279 exception:117,
118 = getCaughtException ,
121 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 19,119,118 @288 exception:120,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePasswordHashFactor()[B > 29 @81 exception:30,
3 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH()[B > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePassword([B)[B > 1,3 @4 exception:4,
return 5,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @86 exception:32,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
return 31,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","public byte[] getHashFactor(LockscreenCredential p1, int p2){
	boolean v4 = LockSettingsService.isCredentialSharableWithParent(p2);
	boolean v5 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p2);
	boolean v3 = phiInstruction;
	byte[] v7 = this.mStorage.readChildProfileLock(p2);
	byte[] v8 = Arrays.copyOfRange(v7, 0, 12);
	byte[] v9 = Arrays.copyOfRange(v7, 12, v7.length);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p2);
	String v14 = v10.toString();
	Key v15 = this.mJavaKeyStore.getKey(v14, 0);
	Cipher v16 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v17 = new GCMParameterSpec(128,v8);
	v16.init(2, v15, v17);
	byte[] v20 = v16.doFinal(v9);
	LockscreenCredential v21 = LockscreenCredential.createManagedPassword(v20);
	Arrays.fill(v20, 0);
	this.mManagedProfilePasswordCache.storePassword(p2, v21);
	LockscreenCredential v6 = v21;
	LockSettingsStorage$PersistentData v25 = this.mStorage.readPersistentDataBlock();
	boolean v24 = phiInstruction;
	long v27 = LockSettingsService.getLong(""sp-handle"", 0, p2);
	long v26 = v27;
	IBinder v29 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v30 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v29.linkToDeath(v30, 0);
	IGateKeeperService v34 = IGateKeeperService$Stub.asInterface(v29);
	this.mGateKeeperService = v34;
	IGateKeeperService v28 = v34;
	SyntheticPasswordManager$AuthenticationResult v36 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v38 = SyntheticPasswordManager.loadState(""pwd"", v26, p2);
	SyntheticPasswordManager$PasswordData v39 = SyntheticPasswordManager$PasswordData.fromBytes(v38);
	boolean v40 = phiInstruction.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v41 = SyntheticPasswordManager.computePasswordToken(phiInstruction, v39);
	int v42 = SyntheticPasswordManager.loadWeaverSlot(v26, p2);
	boolean v43 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v44 = SyntheticPasswordManager.passwordTokenToWeaverKey(v41);
	VerifyCredentialResponse v45 = SyntheticPasswordManager.weaverVerify(v42, v44);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v45;
	int v46 = v45.getResponseCode();
	byte[] v47 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v48 = SyntheticPasswordManager.transformUnderWeaverSecret(v41, v47);
	0.onCredentialVerified();
	SyntheticPasswordManager$AuthenticationToken v51 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(v26, 0, phiInstruction, phiInstruction, p2);
	SyntheticPasswordManager$AuthenticationResult.authToken = v51;
	VerifyCredentialResponse v52 = SyntheticPasswordManager.verifyChallenge(v28, v51, 0, p2);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v52;
	boolean v53 = SyntheticPasswordManager.hasPasswordMetrics(v26, p2);
	SyntheticPasswordManager.savePasswordMetrics(phiInstruction, SyntheticPasswordManager$AuthenticationResult.authToken, v26, p2);
	SyntheticPasswordManager$AuthenticationResult v35 = v36;
	byte[] v56 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v57 = SyntheticPasswordManager$AuthenticationToken.derivePassword(v56);
	byte[] v55 = v57;
	LockSettingsService$$ExternalSyntheticLambda3 v59 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v61 = this.mHandler.postDelayed(v59, 2000);
	return v55;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @10 exception:8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 6 @279 exception:117,
118 = getCaughtException ,
121 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 19,119,118 @288 exception:120,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
35 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 11,33 @73 exception:34,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @77 exception:36,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
return 7,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	int v8 = Slog.w(""LockSettingsService"", ""Current credential is incorrect"");
	p0.scheduleGc();
	return 0;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","public byte[] getHashFactor(LockscreenCredential p1, int p2){
	boolean v4 = LockSettingsService.isCredentialSharableWithParent(p2);
	boolean v5 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p2);
	boolean v3 = phiInstruction;
	byte[] v7 = this.mStorage.readChildProfileLock(p2);
	byte[] v8 = Arrays.copyOfRange(v7, 0, 12);
	byte[] v9 = Arrays.copyOfRange(v7, 12, v7.length);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p2);
	String v14 = v10.toString();
	Key v15 = this.mJavaKeyStore.getKey(v14, 0);
	Cipher v16 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v17 = new GCMParameterSpec(128,v8);
	v16.init(2, v15, v17);
	byte[] v20 = v16.doFinal(v9);
	LockscreenCredential v21 = LockscreenCredential.createManagedPassword(v20);
	Arrays.fill(v20, 0);
	this.mManagedProfilePasswordCache.storePassword(p2, v21);
	LockscreenCredential v6 = v21;
	LockSettingsStorage$PersistentData v25 = this.mStorage.readPersistentDataBlock();
	boolean v24 = phiInstruction;
	long v27 = LockSettingsService.getLong(""sp-handle"", 0, p2);
	long v26 = v27;
	IBinder v29 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v30 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v29.linkToDeath(v30, 0);
	IGateKeeperService v34 = IGateKeeperService$Stub.asInterface(v29);
	this.mGateKeeperService = v34;
	IGateKeeperService v28 = v34;
	SyntheticPasswordManager$AuthenticationResult v36 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v38 = SyntheticPasswordManager.loadState(""pwd"", v26, p2);
	SyntheticPasswordManager$PasswordData v39 = SyntheticPasswordManager$PasswordData.fromBytes(v38);
	boolean v40 = phiInstruction.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v41 = SyntheticPasswordManager.computePasswordToken(phiInstruction, v39);
	int v42 = SyntheticPasswordManager.loadWeaverSlot(v26, p2);
	boolean v43 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v44 = SyntheticPasswordManager.passwordTokenToWeaverKey(v41);
	VerifyCredentialResponse v45 = SyntheticPasswordManager.weaverVerify(v42, v44);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v45;
	int v46 = v45.getResponseCode();
	byte[] v47 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v48 = SyntheticPasswordManager.transformUnderWeaverSecret(v41, v47);
	0.onCredentialVerified();
	SyntheticPasswordManager$AuthenticationToken v51 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(v26, 0, phiInstruction, phiInstruction, p2);
	SyntheticPasswordManager$AuthenticationResult.authToken = v51;
	VerifyCredentialResponse v52 = SyntheticPasswordManager.verifyChallenge(v28, v51, 0, p2);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v52;
	boolean v53 = SyntheticPasswordManager.hasPasswordMetrics(v26, p2);
	SyntheticPasswordManager.savePasswordMetrics(phiInstruction, SyntheticPasswordManager$AuthenticationResult.authToken, v26, p2);
	SyntheticPasswordManager$AuthenticationResult v35 = v36;
	LockSettingsService$$ExternalSyntheticLambda3 v57 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v59 = this.mHandler.postDelayed(v57, 2000);
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readFile(Ljava/lang/String;)[B > 1,4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
5 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 1,3 @3 exception:4,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 2,6,5 @8 exception:7,
return 2,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = invokevirtual < Application, Landroid/util/SparseArray, contains(I)Z > 5,2 @5 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
11 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 9,2 @15 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
14 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @27 exception:13,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
18 = invokevirtual < Application, Ljava/security/KeyStore, getProvider()Ljava/security/Provider; > 16 @35 exception:17,
20 = invokestatic < Application, Ljavax/crypto/KeyGenerator, getInstance(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/KeyGenerator; > 15,18 @39 exception:19,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
invokespecial < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, <init>(Ljava/lang/String;I)V > 21,14,22 @46 exception:23,
26 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setKeySize(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 21,24 @51 exception:25,
28 = new <Application,[Ljava/lang/String>@5729 ,
31 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 26,28 @61 exception:30,
33 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, keyNamespace()I > @65 exception:32,
35 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setNamespace(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 31,33 @69 exception:34,
37 = new <Application,[Ljava/lang/String>@7529 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 35,37 @79 exception:38,
41 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationRequired(Z)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 39,29 @84 exception:40,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
44 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationValidityDurationSeconds(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 41,42 @90 exception:43,
46 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, build()Landroid/security/keystore/KeyGenParameterSpec; > 44 @94 exception:45,
invokevirtual < Application, Ljavax/crypto/KeyGenerator, init(Ljava/security/spec/AlgorithmParameterSpec;)V > 20,46 @98 exception:47,
49 = invokevirtual < Application, Ljavax/crypto/KeyGenerator, generateKey()Ljavax/crypto/SecretKey; > 20 @101 exception:48,
62 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 60 @107 exception:61,
74 = getCaughtException ,
77 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 56,75,74 @150 exception:76,
monitorexit 4,
return,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
3 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getPersistentDataBlockManager()Lcom/android/server/PersistentDataBlockManagerInternal; > 1 @0 exception:2,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokeinterface < Application, Lcom/android/server/PersistentDataBlockManagerInternal, getFrpCredentialHandle()[B > 3 @9 exception:5,
8 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, fromBytes([B)Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 6 @13 exception:7,
12 = getCaughtException ,
16 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 13,14,12 @23 exception:15,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, NONE, <Application,Lcom/android/server/locksettings/LockSettingsStorage$PersistentData> >,
return 17,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
return 8,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
invokespecial < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy, <init>(Landroid/os/IBinder;)V > 7,1 @22 exception:8,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @10 exception:8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readSyntheticPasswordState(IJLjava/lang/String;)[B > 5,4,3,2 @2 exception:6,
return 7,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
2 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData>@0,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, <init>()V > 2 @2 exception:3,
4 = arraylength 1,
6 = invokestatic < Application, Ljava/nio/ByteBuffer, allocate(I)Ljava/nio/ByteBuffer; > 4 @6 exception:5,
7 = arraylength 1,
10 = invokevirtual < Application, Ljava/nio/ByteBuffer, put([BII)Ljava/nio/ByteBuffer; > 6,1,8,7 @12 exception:9,
12 = invokevirtual < Application, Ljava/nio/ByteBuffer, flip()Ljava/nio/Buffer; > 6 @15 exception:11,
14 = invokevirtual < Application, Ljava/nio/ByteBuffer, getInt()I > 6 @18 exception:13,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > = 14,
16 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 6 @24 exception:15,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > = 16,
18 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 6 @30 exception:17,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > = 18,
20 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 6 @36 exception:19,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > = 20,
22 = invokevirtual < Application, Ljava/nio/ByteBuffer, getInt()I > 6 @42 exception:21,
23 = new <Primordial,[B>@4622 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > = 23,
25 = invokevirtual < Application, Ljava/nio/ByteBuffer, get([B)Ljava/nio/ByteBuffer; > 6,23 @50 exception:24,
27 = invokevirtual < Application, Ljava/nio/ByteBuffer, getInt()I > 6 @53 exception:26,
conditional branch(le, to iindex=-1) 27,8,
28 = new <Primordial,[B>@5927 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, passwordHandle, <Primordial,[B> > = 28,
30 = invokevirtual < Application, Ljava/nio/ByteBuffer, get([B)Ljava/nio/ByteBuffer; > 6,28 @63 exception:29,
goto (from iindex= 32 to iindex = 4),
return 2,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
5 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
9 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, DEFAULT_PASSWORD, <Primordial,[B> >,
goto (from iindex= 4 to iindex = 5),
10 = phi  9,8,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > 3,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > 3,
16 = binaryop(SHL) 15 , 14,
17 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > 3,
18 = binaryop(SHL) 15 , 17,
19 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > 3,
20 = binaryop(SHL) 15 , 19,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, scrypt([B[BIIII)[B > 1,10,13,16,18,20,21 @32 exception:22,
return 23,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = arraylength 6,
conditional branch(eq, to iindex=-1) 9,10,
12 = invokestatic < Application, Ljava/nio/ByteBuffer, allocate(I)Ljava/nio/ByteBuffer; > 10 @15 exception:11,
13 = arraylength 6,
15 = invokevirtual < Application, Ljava/nio/ByteBuffer, put([BII)Ljava/nio/ByteBuffer; > 12,6,8,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/nio/ByteBuffer, flip()Ljava/nio/Buffer; > 12 @24 exception:16,
19 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 12 @27 exception:18,
conditional branch(eq, to iindex=-1) 19,20,
23 = new <Application,Ljava/lang/StringBuilder>@34,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 23 @36 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(J)Ljava/lang/StringBuilder; > 23,2 @44 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 23 @47 exception:30,
34 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;)I > 32,31 @53 exception:33,
return 7,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
conditional branch(eq, to iindex=-1) 2,4,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
6 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, slots, <Primordial,I> > 5,
conditional branch(ge, to iindex=-1) 2,6,
conditional branch(ne, to iindex=-1) 3,11,
17 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, keySize, <Primordial,I> > 5,
18 = new <Primordial,[B>@1317 ,
goto (from iindex= 8 to iindex = 6),
21 = phi  18,3,
23 = new <Application,[Lcom/android/internal/widget/VerifyCredentialResponse>@2222 ,
24 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
26 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, toByteArrayList([B)Ljava/util/ArrayList; > 21 @27 exception:25,
27 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda1>@31,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda1, <init>([Lcom/android/internal/widget/VerifyCredentialResponse;I)V > 27,23,2 @33 exception:28,
invokeinterface < Application, Landroid/hardware/weaver/V1_0/IWeaver, read(ILjava/util/ArrayList;Landroid/hardware/weaver/V1_0/IWeaver$readCallback;)V > 24,2,26,27 @36 exception:29,
30 = getCaughtException ,
31 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
arraystore 23[11] = 31,
32 = new <Application,Ljava/lang/StringBuilder>@45,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 32 @47 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 32,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 32,2 @56 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 32 @59 exception:39,
43 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 41,40,30 @65 exception:42,
50 = arrayload 23[11],
return 50,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mGatekeeperHAT, <Primordial,[B> > 1,
return 2,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
4 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_PASSWORD, <Primordial,[B> >,
6 = new <Primordial,[[B>@35 ,
arraystore 6[7] = 3,
9 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, personalisedHash([B[[B)[B > 4,6 @8 exception:8,
10 = arraylength 2,
11 = arraylength 9,
12 = binaryop(add) 10 , 11,
13 = new <Primordial,[B>@1512 ,
14 = arraylength 2,
invokestatic < Application, Ljava/lang/System, arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V > 2,7,13,7,14 @18 exception:15,
16 = arraylength 2,
17 = arraylength 9,
invokestatic < Application, Ljava/lang/System, arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V > 9,7,13,16,17 @23 exception:18,
return 13,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 6 @279 exception:117,
118 = getCaughtException ,
121 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 19,119,118 @288 exception:120,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
9 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,7,2,6 @11 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
12 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob; > 9 @19 exception:11,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 13,15,
conditional branch(ne, to iindex=-1) 13,16,
goto (from iindex= 20 to iindex = 9),
20 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 20,3,
conditional branch(ne, to iindex=-1) 13,16,
30 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getKeyName(J)Ljava/lang/String; > 1,2 @49 exception:29,
31 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mContent, <Primordial,[B> > 12,
33 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, decryptBlobV1(Ljava/lang/String;[B[B)[B > 30,31,4 @55 exception:32,
goto (from iindex= 33 to iindex = 11),
34 = phi  33,28,
conditional branch(ne, to iindex=-1) 34,10,
39 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken>@95,
40 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, <init>(B)V > 39,40 @99 exception:41,
conditional branch(eq, to iindex=-1) 3,16,
conditional branch(ne, to iindex=-1) 3,15,
goto (from iindex= 55 to iindex = 5),
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadEscrowData(Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 1,39,6 @111 exception:43,
conditional branch(ne, to iindex=-1) 44,10,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, recreateFromEscrow([B)V > 39,34 @138 exception:45,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 49,16,
50 = new <Application,Ljava/lang/StringBuilder>@145,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 50 @147 exception:51,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 50,52 @152 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 50,6 @155 exception:55,
59 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 50,57 @160 exception:58,
61 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 50,3 @163 exception:60,
63 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 50 @166 exception:62,
65 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 38,63 @170 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createSyntheticPasswordBlob(JBLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;[BJI)V > 1,2,3,39,4,5,6 @184 exception:66,
return 39,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 3 @0 exception:6,
9 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,7,4,5 @8 exception:8,
return 9,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,4,2,3 @3 exception:5,
return 6,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveMetricsKey()[B > 3 @0 exception:6,
9 = new <Primordial,[B>@58 ,
10 = new <Application,Lcom/android/server/locksettings/VersionedPasswordMetrics>@7,
invokespecial < Application, Lcom/android/server/locksettings/VersionedPasswordMetrics, <init>(Lcom/android/internal/widget/LockscreenCredential;)V > 10,2 @9 exception:11,
13 = invokevirtual < Application, Lcom/android/server/locksettings/VersionedPasswordMetrics, serialize()[B > 10 @12 exception:12,
15 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, encrypt([B[B[B)[B > 7,9,13 @16 exception:14,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveState(Ljava/lang/String;[BJI)V > 1,16,15,4,5 @26 exception:17,
return,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePasswordHashFactor()[B > 29 @81 exception:30,
3 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH()[B > @0 exception:2,
1 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALIZATION_PASSWORD_HASH, <Primordial,[B> >,
return 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePassword([B)[B > 1,3 @4 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mVersion, <Primordial,B> > 1,
conditional branch(ne, to iindex=-1) 3,4,
11 = new <Application,Lcom/android/server/locksettings/SP800Derive>@5,
12 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mSyntheticPassword, <Primordial,[B> > 1,
invokespecial < Application, Lcom/android/server/locksettings/SP800Derive, <init>([B)V > 11,12 @9 exception:13,
15 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALISATION_CONTEXT()[B > @12 exception:14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SP800Derive, withContext([B[B)[B > 11,2,15 @16 exception:16,
return 17,
return 5,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @86 exception:32,
return 31,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance(""AES/GCM/NoPadding"");
	int v18 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot encrypt"", caughtException);
	return;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$PersistentData readPersistentDataBlock(){
	PersistentDataBlockManagerInternal v1 = p0.getPersistentDataBlockManager();
	byte[] v2 = v1.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v3 = LockSettingsStorage$PersistentData.fromBytes(v2);
	int v4 = Slog.e(""LockSettingsStorage"", ""Error reading persistent data block"", caughtException);
	return LockSettingsStorage$PersistentData.NONE;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public byte[] loadState(String p1, long p2, int p3){
	byte[] v1 = this.mStorage.readSyntheticPasswordState(p3, p2, p1);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$PasswordData fromBytes(byte[] p1){
	SyntheticPasswordManager$PasswordData v0 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v2 = ByteBuffer.allocate(p1.length);
	ByteBuffer v3 = v2.put(p1, 0, p1.length);
	Buffer v4 = v2.flip();
	int v5 = v2.getInt();
	this.credentialType = v5;
	byte v6 = v2.get();
	this.scryptN = v6;
	byte v7 = v2.get();
	this.scryptR = v7;
	byte v8 = v2.get();
	this.scryptP = v8;
	int v9 = v2.getInt();
	[B v9 = new [B(v9);
	this.salt = v9;
	ByteBuffer v10 = v2.get(v9);
	int v11 = v2.getInt();
	[B v11 = new [B(v11);
	this.passwordHandle = v11;
	ByteBuffer v12 = v2.get(v11);
	return v0;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public byte[] computePasswordToken(LockscreenCredential p1, SyntheticPasswordManager$PasswordData p2){
	boolean v1 = p1.isNone();
	byte[] v2 = p0.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	return v2;
}
-----
depth : 2
public int loadWeaverSlot(long p1, int p2){
	byte[] v1 = p0.loadState(""weaver"", p1, p2);
	ByteBuffer v2 = ByteBuffer.allocate(5);
	ByteBuffer v3 = v2.put(v1, 0, v1.length);
	Buffer v4 = v2.flip();
	byte v5 = v2.get();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Invalid weaver slot version of handle "");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	int v10 = Slog.e(""SyntheticPasswordManager"", v9);
	return -1;
}
-----
depth : 2
public VerifyCredentialResponse weaverVerify(int p1, byte[] p2){
	[B v0 = new [B(WeaverConfig.keySize);
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(1);
	ArrayList v1 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v0,p1);
	this.mWeaver.read(p1, v1, v1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""weaver read failed, slot: "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.e(""SyntheticPasswordManager"", v7, caughtException);
	return v0[0];
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getGatekeeperHAT(){
	return this.mGatekeeperHAT;
}
-----
depth : 2
public byte[] transformUnderWeaverSecret(byte[] p1, byte[] p2){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v0);
	[B v1 = new [B((p1.length + v1.length));
	System.arraycopy(p1, 0, v1, 0, p1.length);
	System.arraycopy(v1, 0, v1, p1.length, v1.length);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken unwrapSyntheticPasswordBlob(long p1, byte p2, byte[] p3, long p4, int p5){
	byte[] v1 = p0.loadState(""spblob"", p1, p5);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	String v3 = p0.getKeyName(p1);
	byte[] v4 = SyntheticPasswordCrypto.decryptBlobV1(v3, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, p3);
	SyntheticPasswordManager$AuthenticationToken v4 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v6 = p0.loadEscrowData(v4, p5);
	v4.recreateFromEscrow(phiInstruction);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Upgrade v1 SP blob for user "");
	StringBuilder v10 = v7.append(p5);
	StringBuilder v11 = v7.append("", type = "");
	StringBuilder v12 = v7.append(p2);
	String v13 = v7.toString();
	int v14 = Slog.i(""SyntheticPasswordManager"", v13);
	p0.createSyntheticPasswordBlob(p1, p2, v4, p3, p4, p5);
	return v4;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallenge(IGateKeeperService p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveGkPassword();
	VerifyCredentialResponse v2 = p0.verifyChallengeInternal(p1, v1, p3, p4);
	return v2;
}
-----
depth : 2
public boolean hasPasswordMetrics(long p1, int p2){
	boolean v1 = p0.hasState(""metrics"", p1, p2);
	return v1;
}
-----
depth : 2
public void savePasswordMetrics(LockscreenCredential p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveMetricsKey();
	[B v1 = new [B(0);
	VersionedPasswordMetrics v1 = new VersionedPasswordMetrics(p1);
	byte[] v3 = v1.serialize();
	byte[] v4 = SyntheticPasswordCrypto.encrypt(v1, v1, v3);
	p0.saveState(""metrics"", v4, p3, p4);
	return;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 2
public byte[] -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH(){
	return this.PERSONALIZATION_PASSWORD_HASH;
}
-----
depth : 2
public byte[] derivePassword(byte[] p1){
	SP800Derive v0 = new SP800Derive(this.mSyntheticPassword);
	byte[] v2 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
	byte[] v3 = v0.withContext(p1, v2);
	return v3;
}
-----
","public byte[] getHashFactor(LockscreenCredential p1, int p2){
	UserManager v5 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v6 = v5.isCredentialSharableWithParent();
	boolean v4 = v6;
	boolean v8 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v7 = v8;
	boolean v3 = phiInstruction;
	String v11 = LockSettingsStorage.getChildProfileLockFile(p1);
	byte[] v12 = LockSettingsStorage.readFile(v11);
	byte[] v10 = v12;
	byte[] v13 = Arrays.copyOfRange(v10, 0, 12);
	byte[] v14 = Arrays.copyOfRange(v10, 12, v10.length);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""profile_key_name_decrypt_"");
	StringBuilder v18 = v15.append(p2);
	String v19 = v15.toString();
	Key v20 = this.mJavaKeyStore.getKey(v19, 0);
	Cipher v21 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v22 = new GCMParameterSpec(128,v13);
	v21.init(2, v20, v22);
	byte[] v25 = v21.doFinal(v14);
	LockscreenCredential v27 = new LockscreenCredential(4,v28);
	byte[] v28 = Arrays.copyOf(v25, v25.length);
	LockscreenCredential v26 = v27;
	Arrays.fill(v25, 0);
	boolean v32 = this.mEncryptedPasswords.contains(p1);
	UserInfo v33 = this.mUserManager.getProfileParent(p1);
	String v34 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v35 = this.mKeyStore.getProvider();
	KeyGenerator v36 = KeyGenerator.getInstance(""AES"", v35);
	KeyGenParameterSpec$Builder v37 = new KeyGenParameterSpec$Builder(v34,3);
	KeyGenParameterSpec$Builder v39 = v37.setKeySize(256);
	String v40 = new String(1);
	KeyGenParameterSpec$Builder v41 = v39.setBlockModes(v40);
	int v42 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v43 = v41.setNamespace(v42);
	String v44 = new String(1);
	KeyGenParameterSpec$Builder v45 = v43.setEncryptionPaddings(v44);
	KeyGenParameterSpec$Builder v46 = v45.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v47 = v46.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v48 = v47.build();
	v36.init(v48);
	SecretKey v50 = v36.generateKey();
	Cipher v51 = Cipher.getInstance(""AES/GCM/NoPadding"");
	LockscreenCredential v9 = v26;
	PersistentDataBlockManagerInternal v55 = LockSettingsStorage.getPersistentDataBlockManager();
	byte[] v56 = v55.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v57 = LockSettingsStorage$PersistentData.fromBytes(v56);
	LockSettingsStorage$PersistentData v54 = LockSettingsStorage$PersistentData.NONE;
	boolean v53 = phiInstruction;
	LockSettingsService.checkReadPermission(""sp-handle"", p1);
	long v62 = this.mStorage.getLong(""sp-handle"", 0, p1);
	long v60 = v62;
	long v59 = v60;
	IBinder v64 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v65 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v64.linkToDeath(v65, 0);
	IInterface v70 = v64.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v71 = new IGateKeeperService$Stub$Proxy(v64);
	IGateKeeperService v69 = v71;
	this.mGateKeeperService = v69;
	IGateKeeperService v63 = v69;
	SyntheticPasswordManager$AuthenticationResult v74 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v77 = this.mStorage.readSyntheticPasswordState(p4, p2, ""pwd"");
	byte[] v76 = v77;
	SyntheticPasswordManager$PasswordData v79 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v81 = ByteBuffer.allocate(v76.length);
	ByteBuffer v82 = v81.put(v76, 0, v76.length);
	Buffer v83 = v81.flip();
	int v84 = v81.getInt();
	this.credentialType = v84;
	byte v85 = v81.get();
	this.scryptN = v85;
	byte v86 = v81.get();
	this.scryptR = v86;
	byte v87 = v81.get();
	this.scryptP = v87;
	int v88 = v81.getInt();
	[B v89 = new [B(v88);
	this.salt = v89;
	ByteBuffer v90 = v81.get(v89);
	int v91 = v81.getInt();
	[B v92 = new [B(v91);
	this.passwordHandle = v92;
	ByteBuffer v93 = v81.get(v92);
	SyntheticPasswordManager$PasswordData v78 = v79;
	int v95 = LockscreenCredential.getType();
	int v96 = LockscreenCredential.getType();
	boolean v94 = phiInstruction;
	boolean v98 = p3.isNone();
	byte[] v99 = SyntheticPasswordManager.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	byte[] v97 = v99;
	byte[] v101 = SyntheticPasswordManager.loadState(""weaver"", p2, p4);
	ByteBuffer v102 = ByteBuffer.allocate(5);
	ByteBuffer v103 = v102.put(v101, 0, v101.length);
	Buffer v104 = v102.flip();
	byte v105 = v102.get();
	int v100 = -1;
	boolean v112 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v113 = SyntheticPasswordManager.passwordTokenToWeaverKey(v97);
	[B v115 = new [B(WeaverConfig.keySize);
	VerifyCredentialResponse v116 = new VerifyCredentialResponse(1);
	ArrayList v117 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v118 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v116,v100);
	this.mWeaver.read(v100, v117, v118);
	VerifyCredentialResponse v114 = v116[0];
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v114;
	int v127 = this.mResponseCode;
	byte[] v128 = this.mGatekeeperHAT;
	[[B v130 = new [[B(1);
	byte[] v131 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v130);
	[B v132 = new [B((v97.length + v131.length));
	System.arraycopy(v97, 0, v132, 0, v97.length);
	System.arraycopy(v131, 0, v132, v97.length, v131.length);
	byte[] v129 = v132;
	0.onCredentialVerified();
	byte[] v138 = SyntheticPasswordManager.loadState(""spblob"", p2, p4);
	SyntheticPasswordManager$SyntheticPasswordBlob v139 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v138);
	String v140 = SyntheticPasswordManager.getKeyName(p2);
	byte[] v141 = SyntheticPasswordCrypto.decryptBlobV1(v140, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v142 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v144 = SyntheticPasswordManager.loadEscrowData(v142, p4);
	v142.recreateFromEscrow(phiInstruction);
	SyntheticPasswordManager.createSyntheticPasswordBlob(p2, 0, v142, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationToken v137 = v142;
	SyntheticPasswordManager$AuthenticationResult.authToken = v137;
	byte[] v156 = v137.deriveGkPassword();
	VerifyCredentialResponse v157 = SyntheticPasswordManager.verifyChallengeInternal(p1, v156, 0, p4);
	VerifyCredentialResponse v155 = v157;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v155;
	boolean v159 = SyntheticPasswordManager.hasState(""metrics"", p2, p4);
	boolean v158 = v159;
	byte[] v161 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveMetricsKey();
	[B v162 = new [B(0);
	VersionedPasswordMetrics v163 = new VersionedPasswordMetrics(p3);
	byte[] v165 = v163.serialize();
	byte[] v166 = SyntheticPasswordCrypto.encrypt(v161, v162, v165);
	SyntheticPasswordManager.saveState(""metrics"", v166, p2, p4);
	SyntheticPasswordManager$AuthenticationResult v73 = v74;
	byte[] v169 = this.PERSONALIZATION_PASSWORD_HASH;
	SP800Derive v171 = new SP800Derive(this.mSyntheticPassword);
	byte[] v173 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
	byte[] v174 = v171.withContext(v169, v173);
	byte[] v170 = v174;
	byte[] v168 = v170;
	p0.scheduleGc();
	return v168;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readFile(Ljava/lang/String;)[B > 1,4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
5 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 1,3 @3 exception:4,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 2,6,5 @8 exception:7,
return 2,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = invokevirtual < Application, Landroid/util/SparseArray, contains(I)Z > 5,2 @5 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
11 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 9,2 @15 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
14 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @27 exception:13,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
18 = invokevirtual < Application, Ljava/security/KeyStore, getProvider()Ljava/security/Provider; > 16 @35 exception:17,
20 = invokestatic < Application, Ljavax/crypto/KeyGenerator, getInstance(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/KeyGenerator; > 15,18 @39 exception:19,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
invokespecial < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, <init>(Ljava/lang/String;I)V > 21,14,22 @46 exception:23,
26 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setKeySize(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 21,24 @51 exception:25,
28 = new <Application,[Ljava/lang/String>@5729 ,
31 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 26,28 @61 exception:30,
33 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, keyNamespace()I > @65 exception:32,
35 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setNamespace(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 31,33 @69 exception:34,
37 = new <Application,[Ljava/lang/String>@7529 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 35,37 @79 exception:38,
41 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationRequired(Z)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 39,29 @84 exception:40,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
44 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationValidityDurationSeconds(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 41,42 @90 exception:43,
46 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, build()Landroid/security/keystore/KeyGenParameterSpec; > 44 @94 exception:45,
invokevirtual < Application, Ljavax/crypto/KeyGenerator, init(Ljava/security/spec/AlgorithmParameterSpec;)V > 20,46 @98 exception:47,
49 = invokevirtual < Application, Ljavax/crypto/KeyGenerator, generateKey()Ljavax/crypto/SecretKey; > 20 @101 exception:48,
62 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 60 @107 exception:61,
74 = getCaughtException ,
77 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 56,75,74 @150 exception:76,
monitorexit 4,
return,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
3 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getPersistentDataBlockManager()Lcom/android/server/PersistentDataBlockManagerInternal; > 1 @0 exception:2,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokeinterface < Application, Lcom/android/server/PersistentDataBlockManagerInternal, getFrpCredentialHandle()[B > 3 @9 exception:5,
8 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, fromBytes([B)Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 6 @13 exception:7,
12 = getCaughtException ,
16 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 13,14,12 @23 exception:15,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, NONE, <Application,Lcom/android/server/locksettings/LockSettingsStorage$PersistentData> >,
return 17,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
return 8,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
invokespecial < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy, <init>(Landroid/os/IBinder;)V > 7,1 @22 exception:8,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @10 exception:8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readSyntheticPasswordState(IJLjava/lang/String;)[B > 5,4,3,2 @2 exception:6,
return 7,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
2 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData>@0,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, <init>()V > 2 @2 exception:3,
4 = arraylength 1,
6 = invokestatic < Application, Ljava/nio/ByteBuffer, allocate(I)Ljava/nio/ByteBuffer; > 4 @6 exception:5,
7 = arraylength 1,
10 = invokevirtual < Application, Ljava/nio/ByteBuffer, put([BII)Ljava/nio/ByteBuffer; > 6,1,8,7 @12 exception:9,
12 = invokevirtual < Application, Ljava/nio/ByteBuffer, flip()Ljava/nio/Buffer; > 6 @15 exception:11,
14 = invokevirtual < Application, Ljava/nio/ByteBuffer, getInt()I > 6 @18 exception:13,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > = 14,
16 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 6 @24 exception:15,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > = 16,
18 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 6 @30 exception:17,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > = 18,
20 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 6 @36 exception:19,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > = 20,
22 = invokevirtual < Application, Ljava/nio/ByteBuffer, getInt()I > 6 @42 exception:21,
23 = new <Primordial,[B>@4622 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > = 23,
25 = invokevirtual < Application, Ljava/nio/ByteBuffer, get([B)Ljava/nio/ByteBuffer; > 6,23 @50 exception:24,
27 = invokevirtual < Application, Ljava/nio/ByteBuffer, getInt()I > 6 @53 exception:26,
conditional branch(le, to iindex=-1) 27,8,
28 = new <Primordial,[B>@5927 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, passwordHandle, <Primordial,[B> > = 28,
30 = invokevirtual < Application, Ljava/nio/ByteBuffer, get([B)Ljava/nio/ByteBuffer; > 6,28 @63 exception:29,
goto (from iindex= 32 to iindex = 4),
return 2,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
5 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
9 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, DEFAULT_PASSWORD, <Primordial,[B> >,
goto (from iindex= 4 to iindex = 5),
10 = phi  9,8,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > 3,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > 3,
16 = binaryop(SHL) 15 , 14,
17 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > 3,
18 = binaryop(SHL) 15 , 17,
19 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > 3,
20 = binaryop(SHL) 15 , 19,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, scrypt([B[BIIII)[B > 1,10,13,16,18,20,21 @32 exception:22,
return 23,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = arraylength 6,
conditional branch(eq, to iindex=-1) 9,10,
12 = invokestatic < Application, Ljava/nio/ByteBuffer, allocate(I)Ljava/nio/ByteBuffer; > 10 @15 exception:11,
13 = arraylength 6,
15 = invokevirtual < Application, Ljava/nio/ByteBuffer, put([BII)Ljava/nio/ByteBuffer; > 12,6,8,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/nio/ByteBuffer, flip()Ljava/nio/Buffer; > 12 @24 exception:16,
19 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 12 @27 exception:18,
conditional branch(eq, to iindex=-1) 19,20,
23 = new <Application,Ljava/lang/StringBuilder>@34,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 23 @36 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(J)Ljava/lang/StringBuilder; > 23,2 @44 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 23 @47 exception:30,
34 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;)I > 32,31 @53 exception:33,
return 7,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
conditional branch(eq, to iindex=-1) 2,4,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
6 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, slots, <Primordial,I> > 5,
conditional branch(ge, to iindex=-1) 2,6,
conditional branch(ne, to iindex=-1) 3,11,
12 = arraylength 3,
13 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, keySize, <Primordial,I> > 5,
conditional branch(ne, to iindex=-1) 12,13,
21 = phi  18,3,
23 = new <Application,[Lcom/android/internal/widget/VerifyCredentialResponse>@2222 ,
24 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
26 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, toByteArrayList([B)Ljava/util/ArrayList; > 21 @27 exception:25,
27 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda1>@31,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda1, <init>([Lcom/android/internal/widget/VerifyCredentialResponse;I)V > 27,23,2 @33 exception:28,
invokeinterface < Application, Landroid/hardware/weaver/V1_0/IWeaver, read(ILjava/util/ArrayList;Landroid/hardware/weaver/V1_0/IWeaver$readCallback;)V > 24,2,26,27 @36 exception:29,
30 = getCaughtException ,
31 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
arraystore 23[11] = 31,
32 = new <Application,Ljava/lang/StringBuilder>@45,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 32 @47 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 32,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 32,2 @56 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 32 @59 exception:39,
43 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 41,40,30 @65 exception:42,
50 = arrayload 23[11],
return 50,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mGatekeeperHAT, <Primordial,[B> > 1,
return 2,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
4 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_PASSWORD, <Primordial,[B> >,
6 = new <Primordial,[[B>@35 ,
arraystore 6[7] = 3,
9 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, personalisedHash([B[[B)[B > 4,6 @8 exception:8,
10 = arraylength 2,
11 = arraylength 9,
12 = binaryop(add) 10 , 11,
13 = new <Primordial,[B>@1512 ,
14 = arraylength 2,
invokestatic < Application, Ljava/lang/System, arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V > 2,7,13,7,14 @18 exception:15,
16 = arraylength 2,
17 = arraylength 9,
invokestatic < Application, Ljava/lang/System, arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V > 9,7,13,16,17 @23 exception:18,
return 13,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 6 @279 exception:117,
118 = getCaughtException ,
121 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 19,119,118 @288 exception:120,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
9 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,7,2,6 @11 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
12 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob; > 9 @19 exception:11,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 13,15,
conditional branch(ne, to iindex=-1) 13,16,
goto (from iindex= 20 to iindex = 9),
20 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 20,3,
conditional branch(ne, to iindex=-1) 13,16,
30 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getKeyName(J)Ljava/lang/String; > 1,2 @49 exception:29,
31 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mContent, <Primordial,[B> > 12,
33 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, decryptBlobV1(Ljava/lang/String;[B[B)[B > 30,31,4 @55 exception:32,
goto (from iindex= 33 to iindex = 11),
34 = phi  33,28,
conditional branch(ne, to iindex=-1) 34,10,
39 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken>@95,
40 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, <init>(B)V > 39,40 @99 exception:41,
conditional branch(eq, to iindex=-1) 3,16,
conditional branch(ne, to iindex=-1) 3,15,
goto (from iindex= 55 to iindex = 5),
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadEscrowData(Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 1,39,6 @111 exception:43,
conditional branch(ne, to iindex=-1) 44,10,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, recreateFromEscrow([B)V > 39,34 @138 exception:45,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 49,16,
50 = new <Application,Ljava/lang/StringBuilder>@145,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 50 @147 exception:51,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 50,52 @152 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 50,6 @155 exception:55,
59 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 50,57 @160 exception:58,
61 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 50,3 @163 exception:60,
63 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 50 @166 exception:62,
65 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 38,63 @170 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createSyntheticPasswordBlob(JBLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;[BJI)V > 1,2,3,39,4,5,6 @184 exception:66,
return 39,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 3 @0 exception:6,
9 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,7,4,5 @8 exception:8,
return 9,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,4,2,3 @3 exception:5,
return 6,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveMetricsKey()[B > 3 @0 exception:6,
9 = new <Primordial,[B>@58 ,
10 = new <Application,Lcom/android/server/locksettings/VersionedPasswordMetrics>@7,
invokespecial < Application, Lcom/android/server/locksettings/VersionedPasswordMetrics, <init>(Lcom/android/internal/widget/LockscreenCredential;)V > 10,2 @9 exception:11,
13 = invokevirtual < Application, Lcom/android/server/locksettings/VersionedPasswordMetrics, serialize()[B > 10 @12 exception:12,
15 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, encrypt([B[B[B)[B > 7,9,13 @16 exception:14,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveState(Ljava/lang/String;[BJI)V > 1,16,15,4,5 @26 exception:17,
return,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePasswordHashFactor()[B > 29 @81 exception:30,
3 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH()[B > @0 exception:2,
1 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALIZATION_PASSWORD_HASH, <Primordial,[B> >,
return 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePassword([B)[B > 1,3 @4 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mVersion, <Primordial,B> > 1,
conditional branch(ne, to iindex=-1) 3,4,
11 = new <Application,Lcom/android/server/locksettings/SP800Derive>@5,
12 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mSyntheticPassword, <Primordial,[B> > 1,
invokespecial < Application, Lcom/android/server/locksettings/SP800Derive, <init>([B)V > 11,12 @9 exception:13,
15 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALISATION_CONTEXT()[B > @12 exception:14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SP800Derive, withContext([B[B)[B > 11,2,15 @16 exception:16,
return 17,
return 5,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @86 exception:32,
return 31,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance(""AES/GCM/NoPadding"");
	int v18 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot encrypt"", caughtException);
	return;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$PersistentData readPersistentDataBlock(){
	PersistentDataBlockManagerInternal v1 = p0.getPersistentDataBlockManager();
	byte[] v2 = v1.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v3 = LockSettingsStorage$PersistentData.fromBytes(v2);
	int v4 = Slog.e(""LockSettingsStorage"", ""Error reading persistent data block"", caughtException);
	return LockSettingsStorage$PersistentData.NONE;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public byte[] loadState(String p1, long p2, int p3){
	byte[] v1 = this.mStorage.readSyntheticPasswordState(p3, p2, p1);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$PasswordData fromBytes(byte[] p1){
	SyntheticPasswordManager$PasswordData v0 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v2 = ByteBuffer.allocate(p1.length);
	ByteBuffer v3 = v2.put(p1, 0, p1.length);
	Buffer v4 = v2.flip();
	int v5 = v2.getInt();
	this.credentialType = v5;
	byte v6 = v2.get();
	this.scryptN = v6;
	byte v7 = v2.get();
	this.scryptR = v7;
	byte v8 = v2.get();
	this.scryptP = v8;
	int v9 = v2.getInt();
	[B v9 = new [B(v9);
	this.salt = v9;
	ByteBuffer v10 = v2.get(v9);
	int v11 = v2.getInt();
	[B v11 = new [B(v11);
	this.passwordHandle = v11;
	ByteBuffer v12 = v2.get(v11);
	return v0;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public byte[] computePasswordToken(LockscreenCredential p1, SyntheticPasswordManager$PasswordData p2){
	boolean v1 = p1.isNone();
	byte[] v2 = p0.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	return v2;
}
-----
depth : 2
public int loadWeaverSlot(long p1, int p2){
	byte[] v1 = p0.loadState(""weaver"", p1, p2);
	ByteBuffer v2 = ByteBuffer.allocate(5);
	ByteBuffer v3 = v2.put(v1, 0, v1.length);
	Buffer v4 = v2.flip();
	byte v5 = v2.get();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Invalid weaver slot version of handle "");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	int v10 = Slog.e(""SyntheticPasswordManager"", v9);
	return -1;
}
-----
depth : 2
public VerifyCredentialResponse weaverVerify(int p1, byte[] p2){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(1);
	ArrayList v1 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v0,p1);
	this.mWeaver.read(p1, v1, v1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""weaver read failed, slot: "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.e(""SyntheticPasswordManager"", v7, caughtException);
	return v0[0];
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getGatekeeperHAT(){
	return this.mGatekeeperHAT;
}
-----
depth : 2
public byte[] transformUnderWeaverSecret(byte[] p1, byte[] p2){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v0);
	[B v1 = new [B((p1.length + v1.length));
	System.arraycopy(p1, 0, v1, 0, p1.length);
	System.arraycopy(v1, 0, v1, p1.length, v1.length);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken unwrapSyntheticPasswordBlob(long p1, byte p2, byte[] p3, long p4, int p5){
	byte[] v1 = p0.loadState(""spblob"", p1, p5);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	String v3 = p0.getKeyName(p1);
	byte[] v4 = SyntheticPasswordCrypto.decryptBlobV1(v3, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, p3);
	SyntheticPasswordManager$AuthenticationToken v4 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v6 = p0.loadEscrowData(v4, p5);
	v4.recreateFromEscrow(phiInstruction);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Upgrade v1 SP blob for user "");
	StringBuilder v10 = v7.append(p5);
	StringBuilder v11 = v7.append("", type = "");
	StringBuilder v12 = v7.append(p2);
	String v13 = v7.toString();
	int v14 = Slog.i(""SyntheticPasswordManager"", v13);
	p0.createSyntheticPasswordBlob(p1, p2, v4, p3, p4, p5);
	return v4;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallenge(IGateKeeperService p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveGkPassword();
	VerifyCredentialResponse v2 = p0.verifyChallengeInternal(p1, v1, p3, p4);
	return v2;
}
-----
depth : 2
public boolean hasPasswordMetrics(long p1, int p2){
	boolean v1 = p0.hasState(""metrics"", p1, p2);
	return v1;
}
-----
depth : 2
public void savePasswordMetrics(LockscreenCredential p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveMetricsKey();
	[B v1 = new [B(0);
	VersionedPasswordMetrics v1 = new VersionedPasswordMetrics(p1);
	byte[] v3 = v1.serialize();
	byte[] v4 = SyntheticPasswordCrypto.encrypt(v1, v1, v3);
	p0.saveState(""metrics"", v4, p3, p4);
	return;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 2
public byte[] -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH(){
	return this.PERSONALIZATION_PASSWORD_HASH;
}
-----
depth : 2
public byte[] derivePassword(byte[] p1){
	SP800Derive v0 = new SP800Derive(this.mSyntheticPassword);
	byte[] v2 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
	byte[] v3 = v0.withContext(p1, v2);
	return v3;
}
-----
","public byte[] getHashFactor(LockscreenCredential p1, int p2){
	UserManager v5 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v6 = v5.isCredentialSharableWithParent();
	boolean v4 = v6;
	boolean v8 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v7 = v8;
	boolean v3 = phiInstruction;
	String v11 = LockSettingsStorage.getChildProfileLockFile(p1);
	byte[] v12 = LockSettingsStorage.readFile(v11);
	byte[] v10 = v12;
	byte[] v13 = Arrays.copyOfRange(v10, 0, 12);
	byte[] v14 = Arrays.copyOfRange(v10, 12, v10.length);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""profile_key_name_decrypt_"");
	StringBuilder v18 = v15.append(p2);
	String v19 = v15.toString();
	Key v20 = this.mJavaKeyStore.getKey(v19, 0);
	Cipher v21 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v22 = new GCMParameterSpec(128,v13);
	v21.init(2, v20, v22);
	byte[] v25 = v21.doFinal(v14);
	LockscreenCredential v27 = new LockscreenCredential(4,v28);
	byte[] v28 = Arrays.copyOf(v25, v25.length);
	LockscreenCredential v26 = v27;
	Arrays.fill(v25, 0);
	boolean v32 = this.mEncryptedPasswords.contains(p1);
	UserInfo v33 = this.mUserManager.getProfileParent(p1);
	String v34 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v35 = this.mKeyStore.getProvider();
	KeyGenerator v36 = KeyGenerator.getInstance(""AES"", v35);
	KeyGenParameterSpec$Builder v37 = new KeyGenParameterSpec$Builder(v34,3);
	KeyGenParameterSpec$Builder v39 = v37.setKeySize(256);
	String v40 = new String(1);
	KeyGenParameterSpec$Builder v41 = v39.setBlockModes(v40);
	int v42 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v43 = v41.setNamespace(v42);
	String v44 = new String(1);
	KeyGenParameterSpec$Builder v45 = v43.setEncryptionPaddings(v44);
	KeyGenParameterSpec$Builder v46 = v45.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v47 = v46.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v48 = v47.build();
	v36.init(v48);
	SecretKey v50 = v36.generateKey();
	Cipher v51 = Cipher.getInstance(""AES/GCM/NoPadding"");
	LockscreenCredential v9 = v26;
	PersistentDataBlockManagerInternal v55 = LockSettingsStorage.getPersistentDataBlockManager();
	byte[] v56 = v55.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v57 = LockSettingsStorage$PersistentData.fromBytes(v56);
	LockSettingsStorage$PersistentData v54 = LockSettingsStorage$PersistentData.NONE;
	boolean v53 = phiInstruction;
	LockSettingsService.checkReadPermission(""sp-handle"", p1);
	long v62 = this.mStorage.getLong(""sp-handle"", 0, p1);
	long v60 = v62;
	long v59 = v60;
	IBinder v64 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v65 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v64.linkToDeath(v65, 0);
	IInterface v70 = v64.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v71 = new IGateKeeperService$Stub$Proxy(v64);
	IGateKeeperService v69 = v71;
	this.mGateKeeperService = v69;
	IGateKeeperService v63 = v69;
	SyntheticPasswordManager$AuthenticationResult v74 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v77 = this.mStorage.readSyntheticPasswordState(p4, p2, ""pwd"");
	byte[] v76 = v77;
	SyntheticPasswordManager$PasswordData v79 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v81 = ByteBuffer.allocate(v76.length);
	ByteBuffer v82 = v81.put(v76, 0, v76.length);
	Buffer v83 = v81.flip();
	int v84 = v81.getInt();
	this.credentialType = v84;
	byte v85 = v81.get();
	this.scryptN = v85;
	byte v86 = v81.get();
	this.scryptR = v86;
	byte v87 = v81.get();
	this.scryptP = v87;
	int v88 = v81.getInt();
	[B v89 = new [B(v88);
	this.salt = v89;
	ByteBuffer v90 = v81.get(v89);
	int v91 = v81.getInt();
	[B v92 = new [B(v91);
	this.passwordHandle = v92;
	ByteBuffer v93 = v81.get(v92);
	SyntheticPasswordManager$PasswordData v78 = v79;
	int v95 = LockscreenCredential.getType();
	int v96 = LockscreenCredential.getType();
	boolean v94 = phiInstruction;
	boolean v98 = p3.isNone();
	byte[] v99 = SyntheticPasswordManager.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	byte[] v97 = v99;
	byte[] v101 = SyntheticPasswordManager.loadState(""weaver"", p2, p4);
	ByteBuffer v102 = ByteBuffer.allocate(5);
	ByteBuffer v103 = v102.put(v101, 0, v101.length);
	Buffer v104 = v102.flip();
	byte v105 = v102.get();
	int v100 = -1;
	boolean v112 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v113 = SyntheticPasswordManager.passwordTokenToWeaverKey(v97);
	VerifyCredentialResponse v115 = new VerifyCredentialResponse(1);
	ArrayList v116 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v117 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v115,v100);
	this.mWeaver.read(v100, v116, v117);
	VerifyCredentialResponse v114 = v115[0];
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v114;
	int v126 = this.mResponseCode;
	byte[] v127 = this.mGatekeeperHAT;
	[[B v129 = new [[B(1);
	byte[] v130 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v129);
	[B v131 = new [B((v97.length + v130.length));
	System.arraycopy(v97, 0, v131, 0, v97.length);
	System.arraycopy(v130, 0, v131, v97.length, v130.length);
	byte[] v128 = v131;
	0.onCredentialVerified();
	byte[] v137 = SyntheticPasswordManager.loadState(""spblob"", p2, p4);
	SyntheticPasswordManager$SyntheticPasswordBlob v138 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v137);
	String v139 = SyntheticPasswordManager.getKeyName(p2);
	byte[] v140 = SyntheticPasswordCrypto.decryptBlobV1(v139, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v141 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v143 = SyntheticPasswordManager.loadEscrowData(v141, p4);
	v141.recreateFromEscrow(phiInstruction);
	SyntheticPasswordManager.createSyntheticPasswordBlob(p2, 0, v141, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationToken v136 = v141;
	SyntheticPasswordManager$AuthenticationResult.authToken = v136;
	byte[] v155 = v136.deriveGkPassword();
	VerifyCredentialResponse v156 = SyntheticPasswordManager.verifyChallengeInternal(p1, v155, 0, p4);
	VerifyCredentialResponse v154 = v156;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v154;
	boolean v158 = SyntheticPasswordManager.hasState(""metrics"", p2, p4);
	boolean v157 = v158;
	byte[] v160 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveMetricsKey();
	[B v161 = new [B(0);
	VersionedPasswordMetrics v162 = new VersionedPasswordMetrics(p3);
	byte[] v164 = v162.serialize();
	byte[] v165 = SyntheticPasswordCrypto.encrypt(v160, v161, v164);
	SyntheticPasswordManager.saveState(""metrics"", v165, p2, p4);
	SyntheticPasswordManager$AuthenticationResult v73 = v74;
	byte[] v168 = this.PERSONALIZATION_PASSWORD_HASH;
	SP800Derive v170 = new SP800Derive(this.mSyntheticPassword);
	byte[] v172 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
	byte[] v173 = v170.withContext(v168, v172);
	byte[] v169 = v173;
	byte[] v167 = v169;
	p0.scheduleGc();
	return v167;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:5,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @10 exception:8,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readFile(Ljava/lang/String;)[B > 1,4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
5 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 1,3 @3 exception:4,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 2,6,5 @8 exception:7,
return 2,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = invokevirtual < Application, Landroid/util/SparseArray, contains(I)Z > 5,2 @5 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
11 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 9,2 @15 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
14 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @27 exception:13,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
18 = invokevirtual < Application, Ljava/security/KeyStore, getProvider()Ljava/security/Provider; > 16 @35 exception:17,
20 = invokestatic < Application, Ljavax/crypto/KeyGenerator, getInstance(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/KeyGenerator; > 15,18 @39 exception:19,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
invokespecial < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, <init>(Ljava/lang/String;I)V > 21,14,22 @46 exception:23,
26 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setKeySize(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 21,24 @51 exception:25,
28 = new <Application,[Ljava/lang/String>@5729 ,
31 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 26,28 @61 exception:30,
33 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, keyNamespace()I > @65 exception:32,
35 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setNamespace(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 31,33 @69 exception:34,
37 = new <Application,[Ljava/lang/String>@7529 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 35,37 @79 exception:38,
41 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationRequired(Z)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 39,29 @84 exception:40,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
44 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationValidityDurationSeconds(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 41,42 @90 exception:43,
46 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, build()Landroid/security/keystore/KeyGenParameterSpec; > 44 @94 exception:45,
invokevirtual < Application, Ljavax/crypto/KeyGenerator, init(Ljava/security/spec/AlgorithmParameterSpec;)V > 20,46 @98 exception:47,
49 = invokevirtual < Application, Ljavax/crypto/KeyGenerator, generateKey()Ljavax/crypto/SecretKey; > 20 @101 exception:48,
62 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 60 @107 exception:61,
74 = getCaughtException ,
77 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 56,75,74 @150 exception:76,
monitorexit 4,
return,
return 40,
goto (from iindex= 7 to iindex = 13),
16 = phi  2,9,
19 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 19,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @31 exception:20,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
3 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getPersistentDataBlockManager()Lcom/android/server/PersistentDataBlockManagerInternal; > 1 @0 exception:2,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokeinterface < Application, Lcom/android/server/PersistentDataBlockManagerInternal, getFrpCredentialHandle()[B > 3 @9 exception:5,
8 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, fromBytes([B)Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 6 @13 exception:7,
12 = getCaughtException ,
16 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 13,14,12 @23 exception:15,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, NONE, <Application,Lcom/android/server/locksettings/LockSettingsStorage$PersistentData> >,
return 17,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(ne, to iindex=-1) 21,7,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @49 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 6,2,3,4 @5 exception:7,
return 8,
return 6,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @55 exception:25,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
invokespecial < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy, <init>(Landroid/os/IBinder;)V > 7,1 @22 exception:8,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
28 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 24,26,23,16,3,7 @61 exception:27,
7 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult>@8,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, <init>()V > 7 @10 exception:8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,9,3,5 @16 exception:10,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readSyntheticPasswordState(IJLjava/lang/String;)[B > 5,4,3,2 @2 exception:6,
return 7,
13 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData; > 11 @20 exception:12,
2 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData>@0,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, <init>()V > 2 @2 exception:3,
4 = arraylength 1,
6 = invokestatic < Application, Ljava/nio/ByteBuffer, allocate(I)Ljava/nio/ByteBuffer; > 4 @6 exception:5,
7 = arraylength 1,
10 = invokevirtual < Application, Ljava/nio/ByteBuffer, put([BII)Ljava/nio/ByteBuffer; > 6,1,8,7 @12 exception:9,
12 = invokevirtual < Application, Ljava/nio/ByteBuffer, flip()Ljava/nio/Buffer; > 6 @15 exception:11,
14 = invokevirtual < Application, Ljava/nio/ByteBuffer, getInt()I > 6 @18 exception:13,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > = 14,
16 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 6 @24 exception:15,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > = 16,
18 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 6 @30 exception:17,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > = 18,
20 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 6 @36 exception:19,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > = 20,
22 = invokevirtual < Application, Ljava/nio/ByteBuffer, getInt()I > 6 @42 exception:21,
23 = new <Primordial,[B>@4622 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > = 23,
25 = invokevirtual < Application, Ljava/nio/ByteBuffer, get([B)Ljava/nio/ByteBuffer; > 6,23 @50 exception:24,
27 = invokevirtual < Application, Ljava/nio/ByteBuffer, getInt()I > 6 @53 exception:26,
conditional branch(le, to iindex=-1) 27,8,
28 = new <Primordial,[B>@5927 ,
putfield 2.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, passwordHandle, <Primordial,[B> > = 28,
30 = invokevirtual < Application, Ljava/nio/ByteBuffer, get([B)Ljava/nio/ByteBuffer; > 6,28 @63 exception:29,
goto (from iindex= 32 to iindex = 4),
return 2,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, credentialType, <Primordial,I> > 13,
16 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 4,14 @26 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 16,18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, computePasswordToken(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData;)[B > 1,4,13 @71 exception:20,
5 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
9 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, DEFAULT_PASSWORD, <Primordial,[B> >,
goto (from iindex= 4 to iindex = 5),
10 = phi  9,8,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, salt, <Primordial,[B> > 3,
14 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptN, <Primordial,B> > 3,
16 = binaryop(SHL) 15 , 14,
17 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptR, <Primordial,B> > 3,
18 = binaryop(SHL) 15 , 17,
19 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$PasswordData, scryptP, <Primordial,B> > 3,
20 = binaryop(SHL) 15 , 19,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, scrypt([B[BIIII)[B > 1,10,13,16,18,20,21 @32 exception:22,
return 23,
23 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadWeaverSlot(JI)I > 1,3,5 @75 exception:22,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = arraylength 6,
conditional branch(eq, to iindex=-1) 9,10,
12 = invokestatic < Application, Ljava/nio/ByteBuffer, allocate(I)Ljava/nio/ByteBuffer; > 10 @15 exception:11,
13 = arraylength 6,
15 = invokevirtual < Application, Ljava/nio/ByteBuffer, put([BII)Ljava/nio/ByteBuffer; > 12,6,8,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/nio/ByteBuffer, flip()Ljava/nio/Buffer; > 12 @24 exception:16,
19 = invokevirtual < Application, Ljava/nio/ByteBuffer, get()B > 12 @27 exception:18,
conditional branch(eq, to iindex=-1) 19,20,
23 = new <Application,Ljava/lang/StringBuilder>@34,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 23 @36 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(J)Ljava/lang/StringBuilder; > 23,2 @44 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 23 @47 exception:30,
34 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;)I > 32,31 @53 exception:33,
return 7,
conditional branch(eq, to iindex=-1) 23,24,
99 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, isWeaverAvailable()Z > 1 @82 exception:98,
conditional branch(ne, to iindex=-1) 99,18,
101 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, passwordTokenToWeaverKey([B)[B > 1,21 @98 exception:100,
103 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, weaverVerify(I[B)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,23,101 @102 exception:102,
conditional branch(eq, to iindex=-1) 2,4,
5 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > 1,
6 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, slots, <Primordial,I> > 5,
conditional branch(ge, to iindex=-1) 2,6,
conditional branch(ne, to iindex=-1) 3,11,
17 = getfield < Application, Landroid/hardware/weaver/V1_0/WeaverConfig, keySize, <Primordial,I> > 5,
18 = new <Primordial,[B>@1317 ,
goto (from iindex= 8 to iindex = 6),
21 = phi  18,3,
23 = new <Application,[Lcom/android/internal/widget/VerifyCredentialResponse>@2222 ,
24 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
26 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, toByteArrayList([B)Ljava/util/ArrayList; > 21 @27 exception:25,
27 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda1>@31,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda1, <init>([Lcom/android/internal/widget/VerifyCredentialResponse;I)V > 27,23,2 @33 exception:28,
invokeinterface < Application, Landroid/hardware/weaver/V1_0/IWeaver, read(ILjava/util/ArrayList;Landroid/hardware/weaver/V1_0/IWeaver$readCallback;)V > 24,2,26,27 @36 exception:29,
30 = getCaughtException ,
31 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
arraystore 23[11] = 31,
32 = new <Application,Ljava/lang/StringBuilder>@45,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 32 @47 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 32,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 32,2 @56 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 32 @59 exception:39,
43 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 41,40,30 @65 exception:42,
50 = arrayload 23[11],
return 50,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 103,
105 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 103 @108 exception:104,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 105,18,
106 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 7,
108 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getGatekeeperHAT()[B > 106 @119 exception:107,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mGatekeeperHAT, <Primordial,[B> > 1,
return 2,
110 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, transformUnderWeaverSecret([B[B)[B > 1,21,108 @123 exception:109,
4 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALISATION_WEAVER_PASSWORD, <Primordial,[B> >,
6 = new <Primordial,[[B>@35 ,
arraystore 6[7] = 3,
9 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, personalisedHash([B[[B)[B > 4,6 @8 exception:8,
10 = arraylength 2,
11 = arraylength 9,
12 = binaryop(add) 10 , 11,
13 = new <Primordial,[B>@1512 ,
14 = arraylength 2,
invokestatic < Application, Ljava/lang/System, arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V > 2,7,13,7,14 @18 exception:15,
16 = arraylength 2,
17 = arraylength 9,
invokestatic < Application, Ljava/lang/System, arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V > 9,7,13,16,17 @23 exception:18,
return 13,
111 = phi  93,29,
113 = phi  97,110,
goto (from iindex= 67 to iindex = 148),
conditional branch(eq, to iindex=-1) 6,18,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 6 @279 exception:117,
118 = getCaughtException ,
121 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 19,119,118 @288 exception:120,
127 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapSyntheticPasswordBlob(JB[BJI)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken; > 1,3,18,113,111,5 @298 exception:126,
9 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,7,2,6 @11 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
12 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob; > 9 @19 exception:11,
13 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 13,15,
conditional branch(ne, to iindex=-1) 13,16,
goto (from iindex= 20 to iindex = 9),
20 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 20,3,
conditional branch(ne, to iindex=-1) 13,16,
30 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getKeyName(J)Ljava/lang/String; > 1,2 @49 exception:29,
31 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mContent, <Primordial,[B> > 12,
33 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, decryptBlobV1(Ljava/lang/String;[B[B)[B > 30,31,4 @55 exception:32,
goto (from iindex= 33 to iindex = 11),
34 = phi  33,28,
conditional branch(ne, to iindex=-1) 34,10,
39 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken>@95,
40 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, <init>(B)V > 39,40 @99 exception:41,
conditional branch(eq, to iindex=-1) 3,16,
conditional branch(ne, to iindex=-1) 3,15,
goto (from iindex= 55 to iindex = 5),
44 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadEscrowData(Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;I)Z > 1,39,6 @111 exception:43,
conditional branch(ne, to iindex=-1) 44,10,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, recreateFromEscrow([B)V > 39,34 @138 exception:45,
49 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mVersion, <Primordial,B> > 12,
conditional branch(ne, to iindex=-1) 49,16,
50 = new <Application,Ljava/lang/StringBuilder>@145,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 50 @147 exception:51,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 50,52 @152 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 50,6 @155 exception:55,
59 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 50,57 @160 exception:58,
61 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 50,3 @163 exception:60,
63 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 50 @166 exception:62,
65 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 38,63 @170 exception:64,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, createSyntheticPasswordBlob(JBLcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;[BJI)V > 1,2,3,39,4,5,6 @184 exception:66,
return 39,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > = 127,
129 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,127,29,5 @310 exception:128,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 3 @0 exception:6,
9 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,7,4,5 @8 exception:8,
return 9,
putfield 7.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > = 129,
130 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
conditional branch(eq, to iindex=-1) 130,18,
132 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasPasswordMetrics(JI)Z > 1,3,5 @320 exception:131,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,4,2,3 @3 exception:5,
return 6,
conditional branch(ne, to iindex=-1) 132,18,
133 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, savePasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)V > 1,4,133,3,5 @336 exception:134,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveMetricsKey()[B > 3 @0 exception:6,
9 = new <Primordial,[B>@58 ,
10 = new <Application,Lcom/android/server/locksettings/VersionedPasswordMetrics>@7,
invokespecial < Application, Lcom/android/server/locksettings/VersionedPasswordMetrics, <init>(Lcom/android/internal/widget/LockscreenCredential;)V > 10,2 @9 exception:11,
13 = invokevirtual < Application, Lcom/android/server/locksettings/VersionedPasswordMetrics, serialize()[B > 10 @12 exception:12,
15 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, encrypt([B[B[B)[B > 7,9,13 @16 exception:14,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveState(Ljava/lang/String;[BJI)V > 1,16,15,4,5 @26 exception:17,
return,
return 7,
29 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 28,
conditional branch(ne, to iindex=-1) 29,7,
31 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePasswordHashFactor()[B > 29 @81 exception:30,
3 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH()[B > @0 exception:2,
1 = getstatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, PERSONALIZATION_PASSWORD_HASH, <Primordial,[B> >,
return 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, derivePassword([B)[B > 1,3 @4 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mVersion, <Primordial,B> > 1,
conditional branch(ne, to iindex=-1) 3,4,
11 = new <Application,Lcom/android/server/locksettings/SP800Derive>@5,
12 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, mSyntheticPassword, <Primordial,[B> > 1,
invokespecial < Application, Lcom/android/server/locksettings/SP800Derive, <init>([B)V > 11,12 @9 exception:13,
15 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, -$$Nest$sfgetPERSONALISATION_CONTEXT()[B > @12 exception:14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/SP800Derive, withContext([B[B)[B > 11,2,15 @16 exception:16,
return 17,
return 5,
monitorexit 19,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @86 exception:32,
return 31,","depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance(""AES/GCM/NoPadding"");
	int v18 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot encrypt"", caughtException);
	return;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$PersistentData readPersistentDataBlock(){
	PersistentDataBlockManagerInternal v1 = p0.getPersistentDataBlockManager();
	byte[] v2 = v1.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v3 = LockSettingsStorage$PersistentData.fromBytes(v2);
	int v4 = Slog.e(""LockSettingsStorage"", ""Error reading persistent data block"", caughtException);
	return LockSettingsStorage$PersistentData.NONE;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState(""pwd"", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w(""SyntheticPasswordManager"", ""progressCallback throws exception"", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public byte[] loadState(String p1, long p2, int p3){
	byte[] v1 = this.mStorage.readSyntheticPasswordState(p3, p2, p1);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$PasswordData fromBytes(byte[] p1){
	SyntheticPasswordManager$PasswordData v0 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v2 = ByteBuffer.allocate(p1.length);
	ByteBuffer v3 = v2.put(p1, 0, p1.length);
	Buffer v4 = v2.flip();
	int v5 = v2.getInt();
	this.credentialType = v5;
	byte v6 = v2.get();
	this.scryptN = v6;
	byte v7 = v2.get();
	this.scryptR = v7;
	byte v8 = v2.get();
	this.scryptP = v8;
	int v9 = v2.getInt();
	[B v9 = new [B(v9);
	this.salt = v9;
	ByteBuffer v10 = v2.get(v9);
	int v11 = v2.getInt();
	[B v11 = new [B(v11);
	this.passwordHandle = v11;
	ByteBuffer v12 = v2.get(v11);
	return v0;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public byte[] computePasswordToken(LockscreenCredential p1, SyntheticPasswordManager$PasswordData p2){
	boolean v1 = p1.isNone();
	byte[] v2 = p0.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	return v2;
}
-----
depth : 2
public int loadWeaverSlot(long p1, int p2){
	byte[] v1 = p0.loadState(""weaver"", p1, p2);
	ByteBuffer v2 = ByteBuffer.allocate(5);
	ByteBuffer v3 = v2.put(v1, 0, v1.length);
	Buffer v4 = v2.flip();
	byte v5 = v2.get();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Invalid weaver slot version of handle "");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	int v10 = Slog.e(""SyntheticPasswordManager"", v9);
	return -1;
}
-----
depth : 2
public VerifyCredentialResponse weaverVerify(int p1, byte[] p2){
	[B v0 = new [B(WeaverConfig.keySize);
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(1);
	ArrayList v1 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v0,p1);
	this.mWeaver.read(p1, v1, v1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""weaver read failed, slot: "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.e(""SyntheticPasswordManager"", v7, caughtException);
	return v0[0];
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getGatekeeperHAT(){
	return this.mGatekeeperHAT;
}
-----
depth : 2
public byte[] transformUnderWeaverSecret(byte[] p1, byte[] p2){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v0);
	[B v1 = new [B((p1.length + v1.length));
	System.arraycopy(p1, 0, v1, 0, p1.length);
	System.arraycopy(v1, 0, v1, p1.length, v1.length);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken unwrapSyntheticPasswordBlob(long p1, byte p2, byte[] p3, long p4, int p5){
	byte[] v1 = p0.loadState(""spblob"", p1, p5);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	String v3 = p0.getKeyName(p1);
	byte[] v4 = SyntheticPasswordCrypto.decryptBlobV1(v3, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, p3);
	SyntheticPasswordManager$AuthenticationToken v4 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v6 = p0.loadEscrowData(v4, p5);
	v4.recreateFromEscrow(phiInstruction);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Upgrade v1 SP blob for user "");
	StringBuilder v10 = v7.append(p5);
	StringBuilder v11 = v7.append("", type = "");
	StringBuilder v12 = v7.append(p2);
	String v13 = v7.toString();
	int v14 = Slog.i(""SyntheticPasswordManager"", v13);
	p0.createSyntheticPasswordBlob(p1, p2, v4, p3, p4, p5);
	return v4;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallenge(IGateKeeperService p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveGkPassword();
	VerifyCredentialResponse v2 = p0.verifyChallengeInternal(p1, v1, p3, p4);
	return v2;
}
-----
depth : 2
public boolean hasPasswordMetrics(long p1, int p2){
	boolean v1 = p0.hasState(""metrics"", p1, p2);
	return v1;
}
-----
depth : 2
public void savePasswordMetrics(LockscreenCredential p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveMetricsKey();
	[B v1 = new [B(0);
	VersionedPasswordMetrics v1 = new VersionedPasswordMetrics(p1);
	byte[] v3 = v1.serialize();
	byte[] v4 = SyntheticPasswordCrypto.encrypt(v1, v1, v3);
	p0.saveState(""metrics"", v4, p3, p4);
	return;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 2
public byte[] -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH(){
	return this.PERSONALIZATION_PASSWORD_HASH;
}
-----
depth : 2
public byte[] derivePassword(byte[] p1){
	SP800Derive v0 = new SP800Derive(this.mSyntheticPassword);
	byte[] v2 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
	byte[] v3 = v0.withContext(p1, v2);
	return v3;
}
-----
","public byte[] getHashFactor(LockscreenCredential p1, int p2){
	UserManager v5 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v6 = v5.isCredentialSharableWithParent();
	boolean v4 = v6;
	boolean v8 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v7 = v8;
	boolean v3 = phiInstruction;
	String v11 = LockSettingsStorage.getChildProfileLockFile(p1);
	byte[] v12 = LockSettingsStorage.readFile(v11);
	byte[] v10 = v12;
	byte[] v13 = Arrays.copyOfRange(v10, 0, 12);
	byte[] v14 = Arrays.copyOfRange(v10, 12, v10.length);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""profile_key_name_decrypt_"");
	StringBuilder v18 = v15.append(p2);
	String v19 = v15.toString();
	Key v20 = this.mJavaKeyStore.getKey(v19, 0);
	Cipher v21 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v22 = new GCMParameterSpec(128,v13);
	v21.init(2, v20, v22);
	byte[] v25 = v21.doFinal(v14);
	LockscreenCredential v27 = new LockscreenCredential(4,v28);
	byte[] v28 = Arrays.copyOf(v25, v25.length);
	LockscreenCredential v26 = v27;
	Arrays.fill(v25, 0);
	boolean v32 = this.mEncryptedPasswords.contains(p1);
	UserInfo v33 = this.mUserManager.getProfileParent(p1);
	String v34 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v35 = this.mKeyStore.getProvider();
	KeyGenerator v36 = KeyGenerator.getInstance(""AES"", v35);
	KeyGenParameterSpec$Builder v37 = new KeyGenParameterSpec$Builder(v34,3);
	KeyGenParameterSpec$Builder v39 = v37.setKeySize(256);
	String v40 = new String(1);
	KeyGenParameterSpec$Builder v41 = v39.setBlockModes(v40);
	int v42 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v43 = v41.setNamespace(v42);
	String v44 = new String(1);
	KeyGenParameterSpec$Builder v45 = v43.setEncryptionPaddings(v44);
	KeyGenParameterSpec$Builder v46 = v45.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v47 = v46.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v48 = v47.build();
	v36.init(v48);
	SecretKey v50 = v36.generateKey();
	Cipher v51 = Cipher.getInstance(""AES/GCM/NoPadding"");
	LockscreenCredential v9 = v26;
	PersistentDataBlockManagerInternal v55 = LockSettingsStorage.getPersistentDataBlockManager();
	byte[] v56 = v55.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v57 = LockSettingsStorage$PersistentData.fromBytes(v56);
	LockSettingsStorage$PersistentData v54 = LockSettingsStorage$PersistentData.NONE;
	boolean v53 = phiInstruction;
	LockSettingsService.checkReadPermission(""sp-handle"", p1);
	long v62 = this.mStorage.getLong(""sp-handle"", 0, p1);
	long v60 = v62;
	long v59 = v60;
	IBinder v64 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v65 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v64.linkToDeath(v65, 0);
	IInterface v70 = v64.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v71 = new IGateKeeperService$Stub$Proxy(v64);
	IGateKeeperService v69 = v71;
	this.mGateKeeperService = v69;
	IGateKeeperService v63 = v69;
	SyntheticPasswordManager$AuthenticationResult v74 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v77 = this.mStorage.readSyntheticPasswordState(p4, p2, ""pwd"");
	byte[] v76 = v77;
	SyntheticPasswordManager$PasswordData v79 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v81 = ByteBuffer.allocate(v76.length);
	ByteBuffer v82 = v81.put(v76, 0, v76.length);
	Buffer v83 = v81.flip();
	int v84 = v81.getInt();
	this.credentialType = v84;
	byte v85 = v81.get();
	this.scryptN = v85;
	byte v86 = v81.get();
	this.scryptR = v86;
	byte v87 = v81.get();
	this.scryptP = v87;
	int v88 = v81.getInt();
	[B v89 = new [B(v88);
	this.salt = v89;
	ByteBuffer v90 = v81.get(v89);
	int v91 = v81.getInt();
	[B v92 = new [B(v91);
	this.passwordHandle = v92;
	ByteBuffer v93 = v81.get(v92);
	SyntheticPasswordManager$PasswordData v78 = v79;
	int v95 = LockscreenCredential.getType();
	int v96 = LockscreenCredential.getType();
	boolean v94 = phiInstruction;
	boolean v98 = p3.isNone();
	byte[] v99 = SyntheticPasswordManager.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	byte[] v97 = v99;
	byte[] v101 = SyntheticPasswordManager.loadState(""weaver"", p2, p4);
	ByteBuffer v102 = ByteBuffer.allocate(5);
	ByteBuffer v103 = v102.put(v101, 0, v101.length);
	Buffer v104 = v102.flip();
	byte v105 = v102.get();
	int v100 = -1;
	boolean v112 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v113 = SyntheticPasswordManager.passwordTokenToWeaverKey(v97);
	[B v115 = new [B(WeaverConfig.keySize);
	VerifyCredentialResponse v116 = new VerifyCredentialResponse(1);
	ArrayList v117 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v118 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v116,v100);
	this.mWeaver.read(v100, v117, v118);
	VerifyCredentialResponse v114 = v116[0];
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v114;
	int v127 = this.mResponseCode;
	byte[] v128 = this.mGatekeeperHAT;
	[[B v130 = new [[B(1);
	byte[] v131 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v130);
	[B v132 = new [B((v97.length + v131.length));
	System.arraycopy(v97, 0, v132, 0, v97.length);
	System.arraycopy(v131, 0, v132, v97.length, v131.length);
	byte[] v129 = v132;
	0.onCredentialVerified();
	byte[] v138 = SyntheticPasswordManager.loadState(""spblob"", p2, p4);
	SyntheticPasswordManager$SyntheticPasswordBlob v139 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v138);
	String v140 = SyntheticPasswordManager.getKeyName(p2);
	byte[] v141 = SyntheticPasswordCrypto.decryptBlobV1(v140, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v142 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v144 = SyntheticPasswordManager.loadEscrowData(v142, p4);
	v142.recreateFromEscrow(phiInstruction);
	SyntheticPasswordManager.createSyntheticPasswordBlob(p2, 0, v142, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationToken v137 = v142;
	SyntheticPasswordManager$AuthenticationResult.authToken = v137;
	byte[] v156 = v137.deriveGkPassword();
	VerifyCredentialResponse v157 = SyntheticPasswordManager.verifyChallengeInternal(p1, v156, 0, p4);
	VerifyCredentialResponse v155 = v157;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v155;
	boolean v159 = SyntheticPasswordManager.hasState(""metrics"", p2, p4);
	boolean v158 = v159;
	byte[] v161 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveMetricsKey();
	[B v162 = new [B(0);
	VersionedPasswordMetrics v163 = new VersionedPasswordMetrics(p3);
	byte[] v165 = v163.serialize();
	byte[] v166 = SyntheticPasswordCrypto.encrypt(v161, v162, v165);
	SyntheticPasswordManager.saveState(""metrics"", v166, p2, p4);
	SyntheticPasswordManager$AuthenticationResult v73 = v74;
	byte[] v169 = this.PERSONALIZATION_PASSWORD_HASH;
	SP800Derive v171 = new SP800Derive(this.mSyntheticPassword);
	byte[] v173 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
	byte[] v174 = v171.withContext(v169, v173);
	byte[] v170 = v174;
	byte[] v168 = v170;
	p0.scheduleGc();
	return v168;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","requireStrongAuth(II)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,3 @0 exception:4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, requireStrongAuth(II)V > 5,2,3 @5 exception:6,
return,","depth : 0
public void requireStrongAuth(int p1, int p2){
	p0.checkWritePermission(p2);
	this.mStrongAuth.requireStrongAuth(p1, p2);
	return;
}
-----
","public void requireStrongAuth(int p1, int p2){
	p0.checkWritePermission(p2);
	this.mStrongAuth.requireStrongAuth(p1, p2);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","requireStrongAuth(II)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,3 @0 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, requireStrongAuth(II)V > 5,2,3 @5 exception:6,
conditional branch(eq, to iindex=-1) 3,4,
conditional branch(lt, to iindex=-1) 3,5,
goto (from iindex= 3 to iindex = 10),
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
12 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 9,10,2,3 @18 exception:11,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 12 @22 exception:13,
return,
return,","depth : 0
public void requireStrongAuth(int p1, int p2){
	p0.checkWritePermission(p2);
	this.mStrongAuth.requireStrongAuth(p1, p2);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void requireStrongAuth(int p1, int p2){
	Message v1 = this.mHandler.obtainMessage(1, p1, p2);
	v1.sendToTarget();
	return;
}
-----
","public void requireStrongAuth(int p1, int p2){
	Message v4 = this.mHandler.obtainMessage(1, p1, p2);
	v4.sendToTarget();
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
4 = new <Application,Ljava/util/ArrayList>@3,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 4 @5 exception:5,
6 = new <Application,Ljava/util/ArrayList>@8,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 6 @10 exception:7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
10 = invokevirtual < Application, Landroid/os/UserManager, getProfiles(I)Ljava/util/List; > 8,2 @15 exception:9,
12 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 10 @19 exception:11,
14 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @23 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
56 = invokevirtual < Application, Landroid/os/UserManager, getProfileIdsWithDisabled(I)[I > 54,2 @93 exception:55,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
79 = invokevirtual < Application, Landroid/os/UserManager, getUserInfo(I)Landroid/content/pm/UserInfo; > 77,2 @127 exception:78,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
105 = phi  15,104,15,
91 = invokeinterface < Application, Ljava/util/List, size()I > 4 @143 exception:90,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
","public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v2 = new ArrayList();
	ArrayList v4 = new ArrayList();
	List v6 = this.mUserManager.getProfiles(p1);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	[I v9 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v10 = this.mUserManager.getUserInfo(p1);
	boolean v11 = v10.isPrimary();
	int v12 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v13 = v2.size();
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 4 @5 exception:5,
6 = new <Application,Ljava/util/ArrayList>@8,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 6 @10 exception:7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
10 = invokevirtual < Application, Landroid/os/UserManager, getProfiles(I)Ljava/util/List; > 8,2 @15 exception:9,
12 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 10 @19 exception:11,
14 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @23 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
56 = invokevirtual < Application, Landroid/os/UserManager, getProfileIdsWithDisabled(I)[I > 54,2 @93 exception:55,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
79 = invokevirtual < Application, Landroid/os/UserManager, getUserInfo(I)Landroid/content/pm/UserInfo; > 77,2 @127 exception:78,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
goto (from iindex= 4 to iindex = 2),
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
invokeinterface < Application, Landroid/security/maintenance/IKeystoreMaintenance, clearNamespace(IJ)V > 5,1,2 @6 exception:6,
8 = getCaughtException ,
11 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 3,9,8 @22 exception:10,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
91 = invokeinterface < Application, Ljava/util/List, size()I > 4 @143 exception:90,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	v1.clearNamespace(p1, p2);
	int v3 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
","public void resetKeyStore(int p1){
	ArrayList v3 = new ArrayList();
	ArrayList v5 = new ArrayList();
	List v7 = this.mUserManager.getProfiles(p1);
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	[I v10 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v11 = this.mUserManager.getUserInfo(p1);
	boolean v12 = phiInstruction;
	IKeystoreMaintenance v14 = AndroidKeyStoreMaintenance.getService();
	v14.clearNamespace(2, 102);
	int v16 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	int v13 = ServiceSpecificException.errorCode;
	int v17 = v3.size();
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 4 @5 exception:5,
6 = new <Application,Ljava/util/ArrayList>@8,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 6 @10 exception:7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
10 = invokevirtual < Application, Landroid/os/UserManager, getProfiles(I)Ljava/util/List; > 8,2 @15 exception:9,
12 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 10 @19 exception:11,
14 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @23 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
56 = invokevirtual < Application, Landroid/os/UserManager, getProfileIdsWithDisabled(I)[I > 54,2 @93 exception:55,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
79 = invokevirtual < Application, Landroid/os/UserManager, getUserInfo(I)Landroid/content/pm/UserInfo; > 77,2 @127 exception:78,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
invokeinterface < Application, Landroid/security/maintenance/IKeystoreMaintenance, clearNamespace(IJ)V > 5,1,2 @6 exception:6,
8 = getCaughtException ,
11 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 3,9,8 @22 exception:10,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
91 = invokeinterface < Application, Ljava/util/List, size()I > 4 @143 exception:90,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	v1.clearNamespace(p1, p2);
	int v3 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
","public void resetKeyStore(int p1){
	ArrayList v3 = new ArrayList();
	ArrayList v5 = new ArrayList();
	List v7 = this.mUserManager.getProfiles(p1);
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	[I v10 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v11 = this.mUserManager.getUserInfo(p1);
	boolean v12 = phiInstruction;
	IKeystoreMaintenance v14 = AndroidKeyStoreMaintenance.getService();
	v14.clearNamespace(2, 102);
	int v16 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	int v13 = ServiceSpecificException.errorCode;
	int v17 = v3.size();
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 4 @5 exception:5,
6 = new <Application,Ljava/util/ArrayList>@8,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 6 @10 exception:7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
10 = invokevirtual < Application, Landroid/os/UserManager, getProfiles(I)Ljava/util/List; > 8,2 @15 exception:9,
12 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 10 @19 exception:11,
14 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @23 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
56 = invokevirtual < Application, Landroid/os/UserManager, getProfileIdsWithDisabled(I)[I > 54,2 @93 exception:55,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
79 = invokevirtual < Application, Landroid/os/UserManager, getUserInfo(I)Landroid/content/pm/UserInfo; > 77,2 @127 exception:78,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
goto (from iindex= 4 to iindex = 2),
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
3 = invokestatic < Application, Landroid/os/ServiceManager, checkService(Ljava/lang/String;)Landroid/os/IBinder; > 1 @3 exception:2,
5 = invokestatic < Application, Landroid/security/maintenance/IKeystoreMaintenance$Stub, asInterface(Landroid/os/IBinder;)Landroid/security/maintenance/IKeystoreMaintenance; > 3 @7 exception:4,
return 5,
invokeinterface < Application, Landroid/security/maintenance/IKeystoreMaintenance, clearNamespace(IJ)V > 5,1,2 @6 exception:6,
8 = getCaughtException ,
11 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 3,9,8 @22 exception:10,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
91 = invokeinterface < Application, Ljava/util/List, size()I > 4 @143 exception:90,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	v1.clearNamespace(p1, p2);
	int v3 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
depth : 2
public IKeystoreMaintenance getService(){
	IBinder v1 = ServiceManager.checkService(""android.security.maintenance"");
	IKeystoreMaintenance v2 = IKeystoreMaintenance$Stub.asInterface(v1);
	return v2;
}
-----
","public void resetKeyStore(int p1){
	ArrayList v3 = new ArrayList();
	ArrayList v5 = new ArrayList();
	List v7 = this.mUserManager.getProfiles(p1);
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	[I v10 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v11 = this.mUserManager.getUserInfo(p1);
	boolean v12 = phiInstruction;
	IBinder v15 = ServiceManager.checkService(""android.security.maintenance"");
	IKeystoreMaintenance v16 = IKeystoreMaintenance$Stub.asInterface(v15);
	IKeystoreMaintenance v14 = v16;
	v14.clearNamespace(2, 102);
	int v18 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	int v13 = ServiceSpecificException.errorCode;
	int v19 = v3.size();
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 4 @5 exception:5,
6 = new <Application,Ljava/util/ArrayList>@8,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 6 @10 exception:7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
10 = invokevirtual < Application, Landroid/os/UserManager, getProfiles(I)Ljava/util/List; > 8,2 @15 exception:9,
12 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 10 @19 exception:11,
14 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @23 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
56 = invokevirtual < Application, Landroid/os/UserManager, getProfileIdsWithDisabled(I)[I > 54,2 @93 exception:55,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
79 = invokevirtual < Application, Landroid/os/UserManager, getUserInfo(I)Landroid/content/pm/UserInfo; > 77,2 @127 exception:78,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
3 = invokestatic < Application, Landroid/os/ServiceManager, checkService(Ljava/lang/String;)Landroid/os/IBinder; > 1 @3 exception:2,
5 = invokestatic < Application, Landroid/security/maintenance/IKeystoreMaintenance$Stub, asInterface(Landroid/os/IBinder;)Landroid/security/maintenance/IKeystoreMaintenance; > 3 @7 exception:4,
return 5,
invokeinterface < Application, Landroid/security/maintenance/IKeystoreMaintenance, clearNamespace(IJ)V > 5,1,2 @6 exception:6,
8 = getCaughtException ,
11 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 3,9,8 @22 exception:10,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
91 = invokeinterface < Application, Ljava/util/List, size()I > 4 @143 exception:90,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	v1.clearNamespace(p1, p2);
	int v3 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
depth : 2
public IKeystoreMaintenance getService(){
	IBinder v1 = ServiceManager.checkService(""android.security.maintenance"");
	IKeystoreMaintenance v2 = IKeystoreMaintenance$Stub.asInterface(v1);
	return v2;
}
-----
","public void resetKeyStore(int p1){
	ArrayList v3 = new ArrayList();
	ArrayList v5 = new ArrayList();
	List v7 = this.mUserManager.getProfiles(p1);
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	[I v10 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v11 = this.mUserManager.getUserInfo(p1);
	boolean v12 = phiInstruction;
	IBinder v15 = ServiceManager.checkService(""android.security.maintenance"");
	IKeystoreMaintenance v16 = IKeystoreMaintenance$Stub.asInterface(v15);
	IKeystoreMaintenance v14 = v16;
	v14.clearNamespace(2, 102);
	int v18 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	int v13 = ServiceSpecificException.errorCode;
	int v19 = v3.size();
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","resetKeyStore(I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
4 = new <Application,Ljava/util/ArrayList>@3,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 4 @5 exception:5,
6 = new <Application,Ljava/util/ArrayList>@8,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 6 @10 exception:7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
10 = invokevirtual < Application, Landroid/os/UserManager, getProfiles(I)Ljava/util/List; > 8,2 @15 exception:9,
12 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 10 @19 exception:11,
14 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @23 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
54 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
56 = invokevirtual < Application, Landroid/os/UserManager, getProfileIdsWithDisabled(I)[I > 54,2 @93 exception:55,
57 = arraylength 56,
73 = phi  72,15,
conditional branch(ge, to iindex=-1) 73,57,
77 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
79 = invokevirtual < Application, Landroid/os/UserManager, getUserInfo(I)Landroid/content/pm/UserInfo; > 77,2 @127 exception:78,
81 = invokevirtual < Application, Landroid/content/pm/UserInfo, isPrimary()Z > 79 @131 exception:80,
2 = getfield < Application, Landroid/content/pm/UserInfo, flags, <Primordial,I> > 1,
4 = binaryop(and) 2 , 3,
conditional branch(ne, to iindex=-1) 4,3,
goto (from iindex= 4 to iindex = 2),
6 = phi  3,5,
return 6,
conditional branch(eq, to iindex=-1) 81,15,
85 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, clearNamespace(IJ)I > 82,83 @140 exception:84,
5 = invokestatic < Application, Landroid/security/AndroidKeyStoreMaintenance, getService()Landroid/security/maintenance/IKeystoreMaintenance; > @2 exception:4,
3 = invokestatic < Application, Landroid/os/ServiceManager, checkService(Ljava/lang/String;)Landroid/os/IBinder; > 1 @3 exception:2,
5 = invokestatic < Application, Landroid/security/maintenance/IKeystoreMaintenance$Stub, asInterface(Landroid/os/IBinder;)Landroid/security/maintenance/IKeystoreMaintenance; > 3 @7 exception:4,
return 5,
8 = getCaughtException ,
11 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 3,9,8 @22 exception:10,
12 = getfield < Application, Landroid/os/ServiceSpecificException, errorCode, <Primordial,I> > 8,
return 12,
105 = phi  15,104,15,
91 = invokeinterface < Application, Ljava/util/List, size()I > 4 @143 exception:90,
conditional branch(ge, to iindex=-1) 105,91,
return,","depth : 0
public void resetKeyStore(int p1){
	p0.checkWritePermission(p1);
	ArrayList v1 = new ArrayList();
	ArrayList v2 = new ArrayList();
	List v4 = this.mUserManager.getProfiles(p1);
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	[I v7 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v8 = this.mUserManager.getUserInfo(p1);
	boolean v9 = v8.isPrimary();
	int v10 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
	int v11 = v1.size();
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public boolean isPrimary(){
	return phiInstruction;
}
-----
depth : 1
public int clearNamespace(int p1, long p2){
	IKeystoreMaintenance v1 = AndroidKeyStoreMaintenance.getService();
	int v2 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	return ServiceSpecificException.errorCode;
}
-----
depth : 2
public IKeystoreMaintenance getService(){
	IBinder v1 = ServiceManager.checkService(""android.security.maintenance"");
	IKeystoreMaintenance v2 = IKeystoreMaintenance$Stub.asInterface(v1);
	return v2;
}
-----
","public void resetKeyStore(int p1){
	ArrayList v3 = new ArrayList();
	ArrayList v5 = new ArrayList();
	List v7 = this.mUserManager.getProfiles(p1);
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	[I v10 = this.mUserManager.getProfileIdsWithDisabled(p1);
	UserInfo v11 = this.mUserManager.getUserInfo(p1);
	boolean v12 = phiInstruction;
	IBinder v15 = ServiceManager.checkService(""android.security.maintenance"");
	IKeystoreMaintenance v16 = IKeystoreMaintenance$Stub.asInterface(v15);
	IKeystoreMaintenance v14 = v16;
	int v17 = Log.e(""AndroidKeyStoreMaintenance"", ""clearNamespace failed"", caughtException);
	int v13 = ServiceSpecificException.errorCode;
	int v18 = v3.size();
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","removeCachedUnifiedChallenge(I)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, removePassword(I)V > 3,2 @2 exception:4,
return,","depth : 0
public void removeCachedUnifiedChallenge(int p1){
	this.mManagedProfilePasswordCache.removePassword(p1);
	return;
}
-----
","public void removeCachedUnifiedChallenge(int p1){
	this.mManagedProfilePasswordCache.removePassword(p1);
	return;
}
","NONE"
"Lcom/android/server/locksettings/LockSettingsService","removeCachedUnifiedChallenge(I)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, removePassword(I)V > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
5 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @3 exception:4,
7 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getLegacyEncryptionKeyName(I)Ljava/lang/String; > 2 @7 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
10 = invokevirtual < Application, Ljava/security/KeyStore, containsAlias(Ljava/lang/String;)Z > 8,5 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 12,5 @21 exception:13,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
18 = invokevirtual < Application, Ljava/security/KeyStore, containsAlias(Ljava/lang/String;)Z > 16,7 @26 exception:17,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @43 exception:28,
35 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
37 = invokevirtual < Application, Landroid/util/SparseArray, contains(I)Z > 35,2 @48 exception:36,
conditional branch(eq, to iindex=-1) 37,11,
38 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
40 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 38,2 @56 exception:39,
41 = checkcast <Primordial,[B>40 <Primordial,[B>,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 41,11 @63 exception:42,
43 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
invokevirtual < Application, Landroid/util/SparseArray, remove(I)V > 43,2 @68 exception:44,
monitorexit 3,
return,
return,","depth : 0
public void removeCachedUnifiedChallenge(int p1){
	this.mManagedProfilePasswordCache.removePassword(p1);
	return;
}
-----
depth : 1
public void removePassword(int p1){
	String v1 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	String v2 = ManagedProfilePasswordCache.getLegacyEncryptionKeyName(p1);
	boolean v3 = this.mKeyStore.containsAlias(v1);
	this.mKeyStore.deleteEntry(v1);
	boolean v5 = this.mKeyStore.containsAlias(v2);
	int v6 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot delete key"", caughtException);
	boolean v7 = this.mEncryptedPasswords.contains(p1);
	Object v8 = this.mEncryptedPasswords.get(p1);
	Arrays.fill(v8, 0);
	this.mEncryptedPasswords.remove(p1);
	return;
}
-----
","public void removeCachedUnifiedChallenge(int p1){
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	String v3 = ManagedProfilePasswordCache.getLegacyEncryptionKeyName(p1);
	boolean v4 = this.mKeyStore.containsAlias(v2);
	this.mKeyStore.deleteEntry(v2);
	boolean v6 = this.mKeyStore.containsAlias(v3);
	boolean v8 = this.mEncryptedPasswords.contains(p1);
	Object v9 = this.mEncryptedPasswords.get(p1);
	Arrays.fill(v9, 0);
	this.mEncryptedPasswords.remove(p1);
	return;
}
","NONE"
"Lcom/android/server/locksettings/LockSettingsService","removeCachedUnifiedChallenge(I)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, removePassword(I)V > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
5 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @3 exception:4,
2 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 2 @2 exception:3,
6 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 2,4 @7 exception:5,
8 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 2,1 @10 exception:7,
10 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 2 @13 exception:9,
return 10,
7 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getLegacyEncryptionKeyName(I)Ljava/lang/String; > 2 @7 exception:6,
2 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 2 @2 exception:3,
6 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 2,4 @7 exception:5,
8 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 2,1 @10 exception:7,
10 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 2 @13 exception:9,
return 10,
8 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
10 = invokevirtual < Application, Ljava/security/KeyStore, containsAlias(Ljava/lang/String;)Z > 8,5 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 12,5 @21 exception:13,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
18 = invokevirtual < Application, Ljava/security/KeyStore, containsAlias(Ljava/lang/String;)Z > 16,7 @26 exception:17,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @43 exception:28,
35 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
37 = invokevirtual < Application, Landroid/util/SparseArray, contains(I)Z > 35,2 @48 exception:36,
conditional branch(eq, to iindex=-1) 37,11,
38 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
40 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 38,2 @56 exception:39,
41 = checkcast <Primordial,[B>40 <Primordial,[B>,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 41,11 @63 exception:42,
43 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
invokevirtual < Application, Landroid/util/SparseArray, remove(I)V > 43,2 @68 exception:44,
monitorexit 3,
return,
return,","depth : 0
public void removeCachedUnifiedChallenge(int p1){
	this.mManagedProfilePasswordCache.removePassword(p1);
	return;
}
-----
depth : 1
public void removePassword(int p1){
	String v1 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	String v2 = ManagedProfilePasswordCache.getLegacyEncryptionKeyName(p1);
	boolean v3 = this.mKeyStore.containsAlias(v1);
	this.mKeyStore.deleteEntry(v1);
	boolean v5 = this.mKeyStore.containsAlias(v2);
	int v6 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot delete key"", caughtException);
	boolean v7 = this.mEncryptedPasswords.contains(p1);
	Object v8 = this.mEncryptedPasswords.get(p1);
	Arrays.fill(v8, 0);
	this.mEncryptedPasswords.remove(p1);
	return;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 2
public String getLegacyEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
","public void removeCachedUnifiedChallenge(int p1){
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	String v2 = v7;
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""com.android.server.locksettings.unified_profile_cache_"");
	StringBuilder v12 = v9.append(p1);
	String v13 = v9.toString();
	String v8 = v13;
	boolean v14 = this.mKeyStore.containsAlias(v2);
	this.mKeyStore.deleteEntry(v2);
	boolean v16 = this.mKeyStore.containsAlias(v8);
	boolean v18 = this.mEncryptedPasswords.contains(p1);
	Object v19 = this.mEncryptedPasswords.get(p1);
	Arrays.fill(v19, 0);
	this.mEncryptedPasswords.remove(p1);
	return;
}
","NONE"
"Lcom/android/server/locksettings/LockSettingsService","removeCachedUnifiedChallenge(I)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, removePassword(I)V > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
5 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @3 exception:4,
2 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 2 @2 exception:3,
6 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 2,4 @7 exception:5,
8 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 2,1 @10 exception:7,
10 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 2 @13 exception:9,
return 10,
7 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getLegacyEncryptionKeyName(I)Ljava/lang/String; > 2 @7 exception:6,
2 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 2 @2 exception:3,
6 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 2,4 @7 exception:5,
8 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 2,1 @10 exception:7,
10 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 2 @13 exception:9,
return 10,
8 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
10 = invokevirtual < Application, Ljava/security/KeyStore, containsAlias(Ljava/lang/String;)Z > 8,5 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 12,5 @21 exception:13,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @43 exception:28,
35 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
37 = invokevirtual < Application, Landroid/util/SparseArray, contains(I)Z > 35,2 @48 exception:36,
conditional branch(eq, to iindex=-1) 37,11,
38 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
40 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 38,2 @56 exception:39,
41 = checkcast <Primordial,[B>40 <Primordial,[B>,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 41,11 @63 exception:42,
43 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
invokevirtual < Application, Landroid/util/SparseArray, remove(I)V > 43,2 @68 exception:44,
monitorexit 3,
return,
return,","depth : 0
public void removeCachedUnifiedChallenge(int p1){
	this.mManagedProfilePasswordCache.removePassword(p1);
	return;
}
-----
depth : 1
public void removePassword(int p1){
	String v1 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	String v2 = ManagedProfilePasswordCache.getLegacyEncryptionKeyName(p1);
	boolean v3 = this.mKeyStore.containsAlias(v1);
	this.mKeyStore.deleteEntry(v1);
	int v5 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot delete key"", caughtException);
	boolean v6 = this.mEncryptedPasswords.contains(p1);
	Object v7 = this.mEncryptedPasswords.get(p1);
	Arrays.fill(v7, 0);
	this.mEncryptedPasswords.remove(p1);
	return;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 2
public String getLegacyEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
","public void removeCachedUnifiedChallenge(int p1){
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	String v2 = v7;
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""com.android.server.locksettings.unified_profile_cache_"");
	StringBuilder v12 = v9.append(p1);
	String v13 = v9.toString();
	String v8 = v13;
	boolean v14 = this.mKeyStore.containsAlias(v2);
	this.mKeyStore.deleteEntry(v2);
	boolean v17 = this.mEncryptedPasswords.contains(p1);
	Object v18 = this.mEncryptedPasswords.get(p1);
	Arrays.fill(v18, 0);
	this.mEncryptedPasswords.remove(p1);
	return;
}
","NONE"

"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","0","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 2,3 @4 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 13 @26 exception:14,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
19 = invokestatic < Application, Landroid/util/EventLog, writeEvent(I[Ljava/lang/Object;)I > 7,9 @37 exception:18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
26 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 24 @45 exception:25,
29 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 26,27 @51 exception:28,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, systemReady(Landroid/hardware/fingerprint/FingerprintManager;Landroid/hardware/face/FaceManager;)V > 40,43,46 @95 exception:47,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
","public void systemReady(){
	Object v2 = new Object(3);
	int v3 = ILockSettings$Stub.getCallingUid();
	Integer v4 = Integer.valueOf(v3);
	int v5 = EventLog.writeEvent(1397638484, v2);
	p0.checkWritePermission(0);
	PackageManager v7 = this.mContext.getPackageManager();
	boolean v8 = v7.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v8;
	p0.migrateOldData();
	IGateKeeperService v10 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v15 = this.mInjector.getFingerprintManager();
	FaceManager v16 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v15, v16);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","1","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 2,3 @4 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 13 @26 exception:14,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
19 = invokestatic < Application, Landroid/util/EventLog, writeEvent(I[Ljava/lang/Object;)I > 7,9 @37 exception:18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
26 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 24 @45 exception:25,
29 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 26,27 @51 exception:28,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0, <init>(Lcom/android/server/locksettings/SyntheticPasswordManager;)V > 6,1 @20 exception:7,
invokeinterface < Application, Landroid/hardware/weaver/V1_0/IWeaver, getConfig(Landroid/hardware/weaver/V1_0/IWeaver$getConfigCallback;)V > 5,6 @23 exception:8,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
5 = invokestatic < Application, Landroid/hardware/authsecret/V1_0/IAuthSecret, getService(Z)Landroid/hardware/authsecret/V1_0/IAuthSecret; > 3 @3 exception:4,
9 = getCaughtException ,
12 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 2,10,9 @13 exception:11,
goto (from iindex= 9 to iindex = 6),
return,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, frpCredentialEnabled(Landroid/content/Context;)Z > 4 @6 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, isProvisioned()Z > 1 @16 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
13 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @26 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, reportDeviceSetupComplete()V > 1 @29 exception:14,
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
15 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 13 @27 exception:14,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
22 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @41 exception:21,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
26 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 24 @57 exception:25,
conditional branch(eq, to iindex=-1) 26,7,
invokeinterface < Application, Landroid/database/Cursor, close()V > 24 @77 exception:38,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
4 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 2 @2 exception:3,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 4,5 @8 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @18 exception:11,
13 = checkcast <Application,Landroid/hardware/fingerprint/FingerprintManager>12 <Application,Landroid/hardware/fingerprint/FingerprintManager>,
return 13,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
4 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 2 @2 exception:3,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 4,5 @8 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @18 exception:11,
13 = checkcast <Application,Landroid/hardware/face/FaceManager>12 <Application,Landroid/hardware/face/FaceManager>,
return 13,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, systemReady(Landroid/hardware/fingerprint/FingerprintManager;Landroid/hardware/face/FaceManager;)V > 40,43,46 @95 exception:47,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 1
public void getAuthSecretHal(){
	IAuthSecret v1 = IAuthSecret.getService(1);
	int v2 = Slog.w(""LockSettingsService"", ""Failed to get AuthSecret HAL"", caughtException);
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	boolean v3 = p0.isProvisioned();
	int v4 = Slog.i(""LockSettingsService"", ""FRP credential disabled, reporting device setup complete to Gatekeeper immediately"");
	p0.reportDeviceSetupComplete();
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 1
public FingerprintManager getFingerprintManager(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature(""android.hardware.fingerprint"");
	Object v3 = this.mContext.getSystemService(""fingerprint"");
	return v3;
}
-----
depth : 1
public FaceManager getFaceManager(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature(""android.hardware.biometrics.face"");
	Object v3 = this.mContext.getSystemService(""face"");
	return v3;
}
-----
","public void systemReady(){
	Object v2 = new Object(3);
	int v3 = ILockSettings$Stub.getCallingUid();
	Integer v4 = Integer.valueOf(v3);
	int v5 = EventLog.writeEvent(1397638484, v2);
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v9;
	p0.migrateOldData();
	IBinder v12 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v13 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v12.linkToDeath(v13, 0);
	IGateKeeperService v17 = IGateKeeperService$Stub.asInterface(v12);
	this.mGateKeeperService = v17;
	IGateKeeperService v11 = v17;
	this.mWeaverConfig = 0;
	IWeaver v19 = SyntheticPasswordManager.getWeaverService();
	this.mWeaver = v19;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v20 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
	v19.getConfig(v20);
	Set v23 = SyntheticPasswordManager.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v23);
	IAuthSecret v26 = IAuthSecret.getService(1);
	Context v29 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v30 = LockPatternUtils.frpCredentialEnabled(v29);
	boolean v31 = LockSettingsService$DeviceProvisionedObserver.isProvisioned();
	LockSettingsService$DeviceProvisionedObserver.reportDeviceSetupComplete();
	boolean v35 = this.mCache.isFetched(0);
	this.mCache.setFetched(0);
	int v37 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v38 = this.mOpenHelper.getReadableDatabase();
	String v39 = new String(1);
	String v40 = Integer.toString(0);
	Cursor v41 = v38.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v39, 0, 0, 0);
	boolean v42 = v41.moveToNext();
	v41.close();
	LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readCredentialHash(0);
	PackageManager v46 = this.mContext.getPackageManager();
	boolean v47 = v46.hasSystemFeature(""android.hardware.fingerprint"");
	Object v48 = this.mContext.getSystemService(""fingerprint"");
	FingerprintManager v45 = v48;
	PackageManager v50 = this.mContext.getPackageManager();
	boolean v51 = v50.hasSystemFeature(""android.hardware.biometrics.face"");
	Object v52 = this.mContext.getSystemService(""face"");
	FaceManager v49 = v52;
	this.mBiometricDeferredQueue.systemReady(v45, v49);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","1","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 2,3 @4 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 13 @26 exception:14,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
19 = invokestatic < Application, Landroid/util/EventLog, writeEvent(I[Ljava/lang/Object;)I > 7,9 @37 exception:18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
26 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 24 @45 exception:25,
29 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 26,27 @51 exception:28,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0, <init>(Lcom/android/server/locksettings/SyntheticPasswordManager;)V > 6,1 @20 exception:7,
invokeinterface < Application, Landroid/hardware/weaver/V1_0/IWeaver, getConfig(Landroid/hardware/weaver/V1_0/IWeaver$getConfigCallback;)V > 5,6 @23 exception:8,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
5 = invokestatic < Application, Landroid/hardware/authsecret/V1_0/IAuthSecret, getService(Z)Landroid/hardware/authsecret/V1_0/IAuthSecret; > 3 @3 exception:4,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mAuthSecretService, <Application,Landroid/hardware/authsecret/V1_0/IAuthSecret> > = 5,
goto (from iindex= 5 to iindex = 13),
return,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, frpCredentialEnabled(Landroid/content/Context;)Z > 4 @6 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, isProvisioned()Z > 1 @16 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
13 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @26 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, reportDeviceSetupComplete()V > 1 @29 exception:14,
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
15 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 13 @27 exception:14,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
22 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @41 exception:21,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
26 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 24 @57 exception:25,
conditional branch(eq, to iindex=-1) 26,7,
invokeinterface < Application, Landroid/database/Cursor, close()V > 24 @77 exception:38,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
4 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 2 @2 exception:3,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 4,5 @8 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @18 exception:11,
13 = checkcast <Application,Landroid/hardware/fingerprint/FingerprintManager>12 <Application,Landroid/hardware/fingerprint/FingerprintManager>,
return 13,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
4 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 2 @2 exception:3,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 4,5 @8 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @18 exception:11,
13 = checkcast <Application,Landroid/hardware/face/FaceManager>12 <Application,Landroid/hardware/face/FaceManager>,
return 13,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, systemReady(Landroid/hardware/fingerprint/FingerprintManager;Landroid/hardware/face/FaceManager;)V > 40,43,46 @95 exception:47,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 1
public void getAuthSecretHal(){
	IAuthSecret v1 = IAuthSecret.getService(1);
	this.mAuthSecretService = v1;
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	boolean v3 = p0.isProvisioned();
	int v4 = Slog.i(""LockSettingsService"", ""FRP credential disabled, reporting device setup complete to Gatekeeper immediately"");
	p0.reportDeviceSetupComplete();
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 1
public FingerprintManager getFingerprintManager(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature(""android.hardware.fingerprint"");
	Object v3 = this.mContext.getSystemService(""fingerprint"");
	return v3;
}
-----
depth : 1
public FaceManager getFaceManager(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature(""android.hardware.biometrics.face"");
	Object v3 = this.mContext.getSystemService(""face"");
	return v3;
}
-----
","public void systemReady(){
	Object v2 = new Object(3);
	int v3 = ILockSettings$Stub.getCallingUid();
	Integer v4 = Integer.valueOf(v3);
	int v5 = EventLog.writeEvent(1397638484, v2);
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v9;
	p0.migrateOldData();
	IBinder v12 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v13 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v12.linkToDeath(v13, 0);
	IGateKeeperService v17 = IGateKeeperService$Stub.asInterface(v12);
	this.mGateKeeperService = v17;
	IGateKeeperService v11 = v17;
	this.mWeaverConfig = 0;
	IWeaver v19 = SyntheticPasswordManager.getWeaverService();
	this.mWeaver = v19;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v20 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
	v19.getConfig(v20);
	Set v23 = SyntheticPasswordManager.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v23);
	IAuthSecret v26 = IAuthSecret.getService(1);
	this.mAuthSecretService = v26;
	Context v28 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v29 = LockPatternUtils.frpCredentialEnabled(v28);
	boolean v30 = LockSettingsService$DeviceProvisionedObserver.isProvisioned();
	LockSettingsService$DeviceProvisionedObserver.reportDeviceSetupComplete();
	boolean v34 = this.mCache.isFetched(0);
	this.mCache.setFetched(0);
	int v36 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v37 = this.mOpenHelper.getReadableDatabase();
	String v38 = new String(1);
	String v39 = Integer.toString(0);
	Cursor v40 = v37.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v38, 0, 0, 0);
	boolean v41 = v40.moveToNext();
	v40.close();
	LockSettingsStorage$CredentialHash v43 = LockSettingsStorage.readCredentialHash(0);
	PackageManager v45 = this.mContext.getPackageManager();
	boolean v46 = v45.hasSystemFeature(""android.hardware.fingerprint"");
	Object v47 = this.mContext.getSystemService(""fingerprint"");
	FingerprintManager v44 = v47;
	PackageManager v49 = this.mContext.getPackageManager();
	boolean v50 = v49.hasSystemFeature(""android.hardware.biometrics.face"");
	Object v51 = this.mContext.getSystemService(""face"");
	FaceManager v48 = v51;
	this.mBiometricDeferredQueue.systemReady(v44, v48);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 2,3 @4 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 13 @26 exception:14,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
19 = invokestatic < Application, Landroid/util/EventLog, writeEvent(I[Ljava/lang/Object;)I > 7,9 @37 exception:18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
26 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 24 @45 exception:25,
29 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 26,27 @51 exception:28,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
invokespecial < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy, <init>(Landroid/os/IBinder;)V > 7,1 @22 exception:8,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
4 = invokestatic < Application, Landroid/hardware/weaver/V1_0/IWeaver, getService(Z)Landroid/hardware/weaver/V1_0/IWeaver; > 2 @1 exception:3,
8 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 5,6 @10 exception:7,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0, <init>(Lcom/android/server/locksettings/SyntheticPasswordManager;)V > 6,1 @20 exception:7,
invokeinterface < Application, Landroid/hardware/weaver/V1_0/IWeaver, getConfig(Landroid/hardware/weaver/V1_0/IWeaver$getConfigCallback;)V > 5,6 @23 exception:8,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, listSyntheticPasswordHandlesForAllUsers(Ljava/lang/String;)Ljava/util/Map; > 2,3 @5 exception:4,
6 = new <Application,Ljava/util/HashSet>@9,
invokespecial < Application, Ljava/util/HashSet, <init>()V > 6 @11 exception:7,
9 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 5 @14 exception:8,
11 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 9 @18 exception:10,
13 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 11 @22 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
return 6,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
3 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
conditional branch(ne, to iindex=-1) 3,4,
5 = new <Application,Ljava/util/HashSet>@12,
invokespecial < Application, Ljava/util/HashSet, <init>()V > 5 @14 exception:6,
7 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
9 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 7 @19 exception:8,
11 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 9 @23 exception:10,
13 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 11 @27 exception:12,
conditional branch(eq, to iindex=-1) 13,4,
33 = invokevirtual < Application, Ljava/util/HashSet, iterator()Ljava/util/Iterator; > 5 @65 exception:32,
35 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 33 @69 exception:34,
conditional branch(eq, to iindex=-1) 35,4,
47 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 2 @87 exception:46,
49 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 47 @91 exception:48,
conditional branch(eq, to iindex=-1) 49,4,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, saveSlotMap()V > 1 @113 exception:63,
return,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
return 2,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, frpCredentialEnabled(Landroid/content/Context;)Z > 4 @6 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, isProvisioned()Z > 1 @16 exception:8,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
6 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 4 @6 exception:5,
10 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 6,7,8 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,8,
12 = phi  8,11,
return 12,
conditional branch(ne, to iindex=-1) 9,7,
13 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @26 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, reportDeviceSetupComplete()V > 1 @29 exception:14,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 2 @2 exception:3,
invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, reportDeviceSetupComplete()V > 4 @6 exception:5,
6 = getCaughtException ,
10 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,8,6 @15 exception:9,
return,
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, contains(ILjava/lang/String;I)Z > 1,3,4,2 @3 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, put(ILjava/lang/String;Ljava/lang/Object;I)V > 1,3,4,5,2 @6 exception:6,
return,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
3 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, getVersion()I > 1 @0 exception:2,
return 3,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
15 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 13 @27 exception:14,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
22 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @41 exception:21,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
26 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 24 @57 exception:25,
conditional branch(eq, to iindex=-1) 26,7,
invokeinterface < Application, Landroid/database/Cursor, close()V > 24 @77 exception:38,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, systemReady(Landroid/hardware/fingerprint/FingerprintManager;Landroid/hardware/face/FaceManager;)V > 40,43,46 @95 exception:47,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 2
public IWeaver getWeaverService(){
	IWeaver v1 = IWeaver.getService(1);
	int v2 = Slog.i(""SyntheticPasswordManager"", ""Device does not support weaver"");
	return 0;
}
-----
depth : 2
public Set getUsedWeaverSlots(){
	Map v1 = this.mStorage.listSyntheticPasswordHandlesForAllUsers(""weaver"");
	HashSet v1 = new HashSet();
	Set v3 = v1.entrySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v1;
}
-----
depth : 2
public void refreshActiveSlots(Set p1){
	HashSet v0 = new HashSet();
	Set v2 = this.mSlotMap.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	Iterator v5 = v0.iterator();
	boolean v6 = v5.hasNext();
	Iterator v7 = p1.iterator();
	boolean v8 = v7.hasNext();
	p0.saveSlotMap();
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	boolean v3 = p0.isProvisioned();
	int v4 = Slog.i(""LockSettingsService"", ""FRP credential disabled, reporting device setup complete to Gatekeeper immediately"");
	p0.reportDeviceSetupComplete();
	return;
}
-----
depth : 2
public Context -$$Nest$fgetmContext(LockSettingsService p1){
	return this.mContext;
}
-----
depth : 2
public boolean isProvisioned(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v2 = v1.getContentResolver();
	int v3 = Settings$Global.getInt(v2, ""device_provisioned"", 0);
	return phiInstruction;
}
-----
depth : 2
public void reportDeviceSetupComplete(){
	IGateKeeperService v1 = this.this$0.getGateKeeperService();
	v1.reportDeviceSetupComplete();
	int v3 = Slog.e(""LockSettingsService"", ""Failure reporting to IGateKeeperService"", caughtException);
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 2
public boolean isFetched(int p1){
	boolean v1 = p0.contains(2, """", p1);
	return v1;
}
-----
depth : 2
public void setFetched(int p1){
	p0.put(2, ""isFetched"", ""true"", p1);
	return;
}
-----
depth : 2
public int -$$Nest$mgetVersion(LockSettingsStorage$Cache p1){
	int v1 = p1.getVersion();
	return v1;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
","public void systemReady(){
	Object v2 = new Object(3);
	int v3 = ILockSettings$Stub.getCallingUid();
	Integer v4 = Integer.valueOf(v3);
	int v5 = EventLog.writeEvent(1397638484, v2);
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v9;
	p0.migrateOldData();
	IBinder v12 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v13 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v12.linkToDeath(v13, 0);
	IInterface v18 = v12.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v19 = new IGateKeeperService$Stub$Proxy(v12);
	IGateKeeperService v17 = v19;
	this.mGateKeeperService = v17;
	IGateKeeperService v11 = v17;
	this.mWeaverConfig = 0;
	IWeaver v23 = IWeaver.getService(1);
	IWeaver v22 = 0;
	this.mWeaver = v22;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v25 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
	v22.getConfig(v25);
	Map v29 = this.mStorage.listSyntheticPasswordHandlesForAllUsers(""weaver"");
	HashSet v30 = new HashSet();
	Set v32 = v29.entrySet();
	Iterator v33 = v32.iterator();
	boolean v34 = v33.hasNext();
	Set v28 = v30;
	HashSet v36 = new HashSet();
	Set v38 = this.mSlotMap.entrySet();
	Iterator v39 = v38.iterator();
	boolean v40 = v39.hasNext();
	Iterator v41 = v36.iterator();
	boolean v42 = v41.hasNext();
	Iterator v43 = v28.iterator();
	boolean v44 = v43.hasNext();
	PasswordSlotManager.saveSlotMap();
	p0.getAuthSecretHal();
	Context v48 = this.mContext;
	boolean v49 = LockPatternUtils.frpCredentialEnabled(v48);
	Context v51 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v52 = v51.getContentResolver();
	int v53 = Settings$Global.getInt(v52, ""device_provisioned"", 0);
	boolean v50 = phiInstruction;
	IGateKeeperService v56 = this.this$0.getGateKeeperService();
	v56.reportDeviceSetupComplete();
	boolean v61 = LockSettingsStorage$Cache.contains(2, """", p1);
	boolean v60 = v61;
	LockSettingsStorage$Cache.put(2, ""isFetched"", ""true"", p1);
	int v65 = this.mCache.getVersion();
	int v64 = v65;
	SQLiteDatabase v66 = this.mOpenHelper.getReadableDatabase();
	String v67 = new String(1);
	String v68 = Integer.toString(0);
	Cursor v69 = v66.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v67, 0, 0, 0);
	boolean v70 = v69.moveToNext();
	v69.close();
	LockSettingsStorage$CredentialHash v73 = LockSettingsStorage.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v74 = LockSettingsStorage.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v75 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v72 = v75;
	FingerprintManager v76 = this.mInjector.getFingerprintManager();
	FaceManager v77 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v76, v77);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 2,3 @4 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 13 @26 exception:14,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
19 = invokestatic < Application, Landroid/util/EventLog, writeEvent(I[Ljava/lang/Object;)I > 7,9 @37 exception:18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
26 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 24 @45 exception:25,
29 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 26,27 @51 exception:28,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
4 = invokestatic < Application, Landroid/hardware/weaver/V1_0/IWeaver, getService(Z)Landroid/hardware/weaver/V1_0/IWeaver; > 2 @1 exception:3,
8 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 5,6 @10 exception:7,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0, <init>(Lcom/android/server/locksettings/SyntheticPasswordManager;)V > 6,1 @20 exception:7,
invokeinterface < Application, Landroid/hardware/weaver/V1_0/IWeaver, getConfig(Landroid/hardware/weaver/V1_0/IWeaver$getConfigCallback;)V > 5,6 @23 exception:8,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, listSyntheticPasswordHandlesForAllUsers(Ljava/lang/String;)Ljava/util/Map; > 2,3 @5 exception:4,
6 = new <Application,Ljava/util/HashSet>@9,
invokespecial < Application, Ljava/util/HashSet, <init>()V > 6 @11 exception:7,
9 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 5 @14 exception:8,
11 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 9 @18 exception:10,
13 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 11 @22 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
return 6,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
3 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
conditional branch(ne, to iindex=-1) 3,4,
5 = new <Application,Ljava/util/HashSet>@12,
invokespecial < Application, Ljava/util/HashSet, <init>()V > 5 @14 exception:6,
7 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
9 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 7 @19 exception:8,
11 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 9 @23 exception:10,
13 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 11 @27 exception:12,
conditional branch(eq, to iindex=-1) 13,4,
33 = invokevirtual < Application, Ljava/util/HashSet, iterator()Ljava/util/Iterator; > 5 @65 exception:32,
35 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 33 @69 exception:34,
conditional branch(eq, to iindex=-1) 35,4,
47 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 2 @87 exception:46,
49 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 47 @91 exception:48,
conditional branch(eq, to iindex=-1) 49,4,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, saveSlotMap()V > 1 @113 exception:63,
return,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
return 2,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, frpCredentialEnabled(Landroid/content/Context;)Z > 4 @6 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, isProvisioned()Z > 1 @16 exception:8,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
6 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 4 @6 exception:5,
10 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 6,7,8 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,8,
12 = phi  8,11,
return 12,
conditional branch(ne, to iindex=-1) 9,7,
13 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @26 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, reportDeviceSetupComplete()V > 1 @29 exception:14,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 2 @2 exception:3,
invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, reportDeviceSetupComplete()V > 4 @6 exception:5,
6 = getCaughtException ,
10 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,8,6 @15 exception:9,
return,
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, contains(ILjava/lang/String;I)Z > 1,3,4,2 @3 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, put(ILjava/lang/String;Ljava/lang/Object;I)V > 1,3,4,5,2 @6 exception:6,
return,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
3 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, getVersion()I > 1 @0 exception:2,
return 3,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
15 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 13 @27 exception:14,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
22 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @41 exception:21,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
26 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 24 @57 exception:25,
conditional branch(eq, to iindex=-1) 26,7,
invokeinterface < Application, Landroid/database/Cursor, close()V > 24 @77 exception:38,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, systemReady(Landroid/hardware/fingerprint/FingerprintManager;Landroid/hardware/face/FaceManager;)V > 40,43,46 @95 exception:47,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 2
public IWeaver getWeaverService(){
	IWeaver v1 = IWeaver.getService(1);
	int v2 = Slog.i(""SyntheticPasswordManager"", ""Device does not support weaver"");
	return 0;
}
-----
depth : 2
public Set getUsedWeaverSlots(){
	Map v1 = this.mStorage.listSyntheticPasswordHandlesForAllUsers(""weaver"");
	HashSet v1 = new HashSet();
	Set v3 = v1.entrySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v1;
}
-----
depth : 2
public void refreshActiveSlots(Set p1){
	HashSet v0 = new HashSet();
	Set v2 = this.mSlotMap.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	Iterator v5 = v0.iterator();
	boolean v6 = v5.hasNext();
	Iterator v7 = p1.iterator();
	boolean v8 = v7.hasNext();
	p0.saveSlotMap();
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	boolean v3 = p0.isProvisioned();
	int v4 = Slog.i(""LockSettingsService"", ""FRP credential disabled, reporting device setup complete to Gatekeeper immediately"");
	p0.reportDeviceSetupComplete();
	return;
}
-----
depth : 2
public Context -$$Nest$fgetmContext(LockSettingsService p1){
	return this.mContext;
}
-----
depth : 2
public boolean isProvisioned(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v2 = v1.getContentResolver();
	int v3 = Settings$Global.getInt(v2, ""device_provisioned"", 0);
	return phiInstruction;
}
-----
depth : 2
public void reportDeviceSetupComplete(){
	IGateKeeperService v1 = this.this$0.getGateKeeperService();
	v1.reportDeviceSetupComplete();
	int v3 = Slog.e(""LockSettingsService"", ""Failure reporting to IGateKeeperService"", caughtException);
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 2
public boolean isFetched(int p1){
	boolean v1 = p0.contains(2, """", p1);
	return v1;
}
-----
depth : 2
public void setFetched(int p1){
	p0.put(2, ""isFetched"", ""true"", p1);
	return;
}
-----
depth : 2
public int -$$Nest$mgetVersion(LockSettingsStorage$Cache p1){
	int v1 = p1.getVersion();
	return v1;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
","public void systemReady(){
	Object v2 = new Object(3);
	int v3 = ILockSettings$Stub.getCallingUid();
	Integer v4 = Integer.valueOf(v3);
	int v5 = EventLog.writeEvent(1397638484, v2);
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v9;
	p0.migrateOldData();
	IBinder v12 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v13 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v12.linkToDeath(v13, 0);
	IInterface v18 = v12.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService v17 = v18;
	this.mGateKeeperService = v17;
	IGateKeeperService v11 = v17;
	this.mWeaverConfig = 0;
	IWeaver v21 = IWeaver.getService(1);
	IWeaver v20 = 0;
	this.mWeaver = v20;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v23 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
	v20.getConfig(v23);
	Map v27 = this.mStorage.listSyntheticPasswordHandlesForAllUsers(""weaver"");
	HashSet v28 = new HashSet();
	Set v30 = v27.entrySet();
	Iterator v31 = v30.iterator();
	boolean v32 = v31.hasNext();
	Set v26 = v28;
	HashSet v34 = new HashSet();
	Set v36 = this.mSlotMap.entrySet();
	Iterator v37 = v36.iterator();
	boolean v38 = v37.hasNext();
	Iterator v39 = v34.iterator();
	boolean v40 = v39.hasNext();
	Iterator v41 = v26.iterator();
	boolean v42 = v41.hasNext();
	PasswordSlotManager.saveSlotMap();
	p0.getAuthSecretHal();
	Context v46 = this.mContext;
	boolean v47 = LockPatternUtils.frpCredentialEnabled(v46);
	Context v49 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v50 = v49.getContentResolver();
	int v51 = Settings$Global.getInt(v50, ""device_provisioned"", 0);
	boolean v48 = phiInstruction;
	IGateKeeperService v54 = this.this$0.getGateKeeperService();
	v54.reportDeviceSetupComplete();
	boolean v59 = LockSettingsStorage$Cache.contains(2, """", p1);
	boolean v58 = v59;
	LockSettingsStorage$Cache.put(2, ""isFetched"", ""true"", p1);
	int v63 = this.mCache.getVersion();
	int v62 = v63;
	SQLiteDatabase v64 = this.mOpenHelper.getReadableDatabase();
	String v65 = new String(1);
	String v66 = Integer.toString(0);
	Cursor v67 = v64.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v65, 0, 0, 0);
	boolean v68 = v67.moveToNext();
	v67.close();
	LockSettingsStorage$CredentialHash v71 = LockSettingsStorage.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v72 = LockSettingsStorage.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v73 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v70 = v73;
	FingerprintManager v74 = this.mInjector.getFingerprintManager();
	FaceManager v75 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v74, v75);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","systemReady()V","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 2,3 @4 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
9 = new <Application,[Ljava/lang/Object>@158 ,
arraystore 9[6] = 10,
13 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:12,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 13 @26 exception:14,
arraystore 9[11] = 15,
arraystore 9[16] = 17,
19 = invokestatic < Application, Landroid/util/EventLog, writeEvent(I[Ljava/lang/Object;)I > 7,9 @37 exception:18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,6 @40 exception:23,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
26 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 24 @45 exception:25,
29 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 26,27 @51 exception:28,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > = 29,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, migrateOldData()V > 1 @57 exception:30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @60 exception:31,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
invokespecial < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy, <init>(Landroid/os/IBinder;)V > 7,1 @22 exception:8,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
33 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, initWeaverService()V > 33 @65 exception:34,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > 1,
conditional branch(eq, to iindex=-1) 2,3,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaverConfig, <Application,Landroid/hardware/weaver/V1_0/WeaverConfig> > = 3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getWeaverService()Landroid/hardware/weaver/V1_0/IWeaver; > 1 @10 exception:4,
4 = invokestatic < Application, Landroid/hardware/weaver/V1_0/IWeaver, getService(Z)Landroid/hardware/weaver/V1_0/IWeaver; > 2 @1 exception:3,
return 4,
putfield 1.< Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mWeaver, <Application,Landroid/hardware/weaver/V1_0/IWeaver> > = 5,
conditional branch(eq, to iindex=-1) 5,3,
6 = new <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0>@18,
invokespecial < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$$ExternalSyntheticLambda0, <init>(Lcom/android/server/locksettings/SyntheticPasswordManager;)V > 6,1 @20 exception:7,
invokeinterface < Application, Landroid/hardware/weaver/V1_0/IWeaver, getConfig(Landroid/hardware/weaver/V1_0/IWeaver$getConfigCallback;)V > 5,6 @23 exception:8,
16 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mPasswordSlotManager, <Application,Lcom/android/server/locksettings/PasswordSlotManager> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getUsedWeaverSlots()Ljava/util/Set; > 1 @28 exception:17,
2 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, listSyntheticPasswordHandlesForAllUsers(Ljava/lang/String;)Ljava/util/Map; > 2,3 @5 exception:4,
6 = new <Application,Ljava/util/HashSet>@9,
invokespecial < Application, Ljava/util/HashSet, <init>()V > 6 @11 exception:7,
9 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 5 @14 exception:8,
11 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 9 @18 exception:10,
13 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 11 @22 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
return 6,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, refreshActiveSlots(Ljava/util/Set;)V > 16,18 @32 exception:19,
3 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
conditional branch(ne, to iindex=-1) 3,4,
5 = new <Application,Ljava/util/HashSet>@12,
invokespecial < Application, Ljava/util/HashSet, <init>()V > 5 @14 exception:6,
7 = getfield < Application, Lcom/android/server/locksettings/PasswordSlotManager, mSlotMap, <Application,Ljava/util/Map> > 1,
9 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 7 @19 exception:8,
11 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 9 @23 exception:10,
13 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 11 @27 exception:12,
conditional branch(eq, to iindex=-1) 13,4,
33 = invokevirtual < Application, Ljava/util/HashSet, iterator()Ljava/util/Iterator; > 5 @65 exception:32,
35 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 33 @69 exception:34,
conditional branch(eq, to iindex=-1) 35,4,
47 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 2 @87 exception:46,
49 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 47 @91 exception:48,
conditional branch(eq, to iindex=-1) 49,4,
invokevirtual < Application, Lcom/android/server/locksettings/PasswordSlotManager, saveSlotMap()V > 1 @113 exception:63,
return,
goto (from iindex= 18 to iindex = 9),
monitorexit 1,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getAuthSecretHal()V > 1 @68 exception:35,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mDeviceProvisionedObserver, <Application,Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, onSystemReady()V > 36 @73 exception:37,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
return 2,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, frpCredentialEnabled(Landroid/content/Context;)Z > 4 @6 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, isProvisioned()Z > 1 @16 exception:8,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, -$$Nest$fgetmContext(Lcom/android/server/locksettings/LockSettingsService;)Landroid/content/Context; > 2 @2 exception:3,
6 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 4 @6 exception:5,
10 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 6,7,8 @13 exception:9,
conditional branch(eq, to iindex=-1) 10,8,
12 = phi  8,11,
return 12,
conditional branch(ne, to iindex=-1) 9,7,
13 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @26 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, reportDeviceSetupComplete()V > 1 @29 exception:14,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService$DeviceProvisionedObserver, this$0, <Application,Lcom/android/server/locksettings/LockSettingsService> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 2 @2 exception:3,
invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, reportDeviceSetupComplete()V > 4 @6 exception:5,
6 = getCaughtException ,
10 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,8,6 @15 exception:9,
return,
return,
38 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, prefetchUser(I)V > 38,6 @78 exception:39,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, isFetched(I)Z > 4,2 @5 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, contains(ILjava/lang/String;I)Z > 1,3,4,2 @3 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, setFetched(I)V > 8,2 @15 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, put(ILjava/lang/String;Ljava/lang/Object;I)V > 1,3,4,5,2 @6 exception:6,
return,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mCache, <Application,Lcom/android/server/locksettings/LockSettingsStorage$Cache> > 1,
12 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, -$$Nest$mgetVersion(Lcom/android/server/locksettings/LockSettingsStorage$Cache;)I > 10 @20 exception:11,
3 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage$Cache, getVersion()I > 1 @0 exception:2,
return 3,
monitorexit 3,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
15 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 13 @27 exception:14,
17 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, COLUMNS_FOR_PREFETCH, <Application,[Ljava/lang/String> >,
20 = new <Application,[Ljava/lang/String>@3919 ,
22 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @41 exception:21,
arraystore 20[7] = 22,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 15,16,17,18,20,7,7,7 @51 exception:23,
conditional branch(eq, to iindex=-1) 24,7,
26 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 24 @57 exception:25,
conditional branch(eq, to iindex=-1) 26,7,
invokeinterface < Application, Landroid/database/Cursor, close()V > 24 @77 exception:38,
45 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @80 exception:44,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
return,
40 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
41 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
43 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFingerprintManager()Landroid/hardware/fingerprint/FingerprintManager; > 41 @85 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
46 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, getFaceManager()Landroid/hardware/face/FaceManager; > 44 @91 exception:45,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, systemReady(Landroid/hardware/fingerprint/FingerprintManager;Landroid/hardware/face/FaceManager;)V > 40,43,46 @95 exception:47,
return,","depth : 0
public void systemReady(){
	Object v1 = new Object(3);
	int v2 = ILockSettings$Stub.getCallingUid();
	Integer v3 = Integer.valueOf(v2);
	int v4 = EventLog.writeEvent(1397638484, v1);
	p0.checkWritePermission(0);
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v7;
	p0.migrateOldData();
	IGateKeeperService v9 = p0.getGateKeeperService();
	this.mSpManager.initWeaverService();
	p0.getAuthSecretHal();
	this.mDeviceProvisionedObserver.onSystemReady();
	this.mStorage.prefetchUser(0);
	FingerprintManager v14 = this.mInjector.getFingerprintManager();
	FaceManager v15 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v14, v15);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public void initWeaverService(){
	this.mWeaverConfig = 0;
	IWeaver v1 = p0.getWeaverService();
	this.mWeaver = v1;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(p0);
	v1.getConfig(v1);
	Set v4 = p0.getUsedWeaverSlots();
	this.mPasswordSlotManager.refreshActiveSlots(v4);
	return;
}
-----
depth : 2
public IWeaver getWeaverService(){
	IWeaver v1 = IWeaver.getService(1);
	return v1;
}
-----
depth : 2
public Set getUsedWeaverSlots(){
	Map v1 = this.mStorage.listSyntheticPasswordHandlesForAllUsers(""weaver"");
	HashSet v1 = new HashSet();
	Set v3 = v1.entrySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v1;
}
-----
depth : 2
public void refreshActiveSlots(Set p1){
	HashSet v0 = new HashSet();
	Set v2 = this.mSlotMap.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	Iterator v5 = v0.iterator();
	boolean v6 = v5.hasNext();
	Iterator v7 = p1.iterator();
	boolean v8 = v7.hasNext();
	p0.saveSlotMap();
	return;
}
-----
depth : 1
public void onSystemReady(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	boolean v2 = LockPatternUtils.frpCredentialEnabled(v1);
	boolean v3 = p0.isProvisioned();
	int v4 = Slog.i(""LockSettingsService"", ""FRP credential disabled, reporting device setup complete to Gatekeeper immediately"");
	p0.reportDeviceSetupComplete();
	return;
}
-----
depth : 2
public Context -$$Nest$fgetmContext(LockSettingsService p1){
	return this.mContext;
}
-----
depth : 2
public boolean isProvisioned(){
	Context v1 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v2 = v1.getContentResolver();
	int v3 = Settings$Global.getInt(v2, ""device_provisioned"", 0);
	return phiInstruction;
}
-----
depth : 2
public void reportDeviceSetupComplete(){
	IGateKeeperService v1 = this.this$0.getGateKeeperService();
	v1.reportDeviceSetupComplete();
	int v3 = Slog.e(""LockSettingsService"", ""Failure reporting to IGateKeeperService"", caughtException);
	return;
}
-----
depth : 1
public void prefetchUser(int p1){
	boolean v1 = this.mCache.isFetched(p1);
	this.mCache.setFetched(p1);
	int v3 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
	SQLiteDatabase v4 = this.mOpenHelper.getReadableDatabase();
	String v4 = new String(1);
	String v5 = Integer.toString(p1);
	Cursor v6 = v4.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v4, 0, 0, 0);
	boolean v7 = v6.moveToNext();
	v6.close();
	LockSettingsStorage$CredentialHash v9 = p0.readCredentialHash(p1);
	return;
}
-----
depth : 2
public boolean isFetched(int p1){
	boolean v1 = p0.contains(2, """", p1);
	return v1;
}
-----
depth : 2
public void setFetched(int p1){
	p0.put(2, ""isFetched"", ""true"", p1);
	return;
}
-----
depth : 2
public int -$$Nest$mgetVersion(LockSettingsStorage$Cache p1){
	int v1 = p1.getVersion();
	return v1;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
","public void systemReady(){
	Object v2 = new Object(3);
	int v3 = ILockSettings$Stub.getCallingUid();
	Integer v4 = Integer.valueOf(v3);
	int v5 = EventLog.writeEvent(1397638484, v2);
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature(""android.software.secure_lock_screen"");
	this.mHasSecureLockScreen = v9;
	p0.migrateOldData();
	IBinder v12 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v13 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v12.linkToDeath(v13, 0);
	IInterface v18 = v12.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v19 = new IGateKeeperService$Stub$Proxy(v12);
	IGateKeeperService v17 = v19;
	this.mGateKeeperService = v17;
	IGateKeeperService v11 = v17;
	this.mWeaverConfig = 0;
	IWeaver v23 = IWeaver.getService(1);
	IWeaver v22 = v23;
	this.mWeaver = v22;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v24 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
	v22.getConfig(v24);
	Map v28 = this.mStorage.listSyntheticPasswordHandlesForAllUsers(""weaver"");
	HashSet v29 = new HashSet();
	Set v31 = v28.entrySet();
	Iterator v32 = v31.iterator();
	boolean v33 = v32.hasNext();
	Set v27 = v29;
	HashSet v35 = new HashSet();
	Set v37 = this.mSlotMap.entrySet();
	Iterator v38 = v37.iterator();
	boolean v39 = v38.hasNext();
	Iterator v40 = v35.iterator();
	boolean v41 = v40.hasNext();
	Iterator v42 = v27.iterator();
	boolean v43 = v42.hasNext();
	PasswordSlotManager.saveSlotMap();
	p0.getAuthSecretHal();
	Context v47 = this.mContext;
	boolean v48 = LockPatternUtils.frpCredentialEnabled(v47);
	Context v50 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v51 = v50.getContentResolver();
	int v52 = Settings$Global.getInt(v51, ""device_provisioned"", 0);
	boolean v49 = phiInstruction;
	IGateKeeperService v55 = this.this$0.getGateKeeperService();
	v55.reportDeviceSetupComplete();
	boolean v60 = LockSettingsStorage$Cache.contains(2, """", p1);
	boolean v59 = v60;
	LockSettingsStorage$Cache.put(2, ""isFetched"", ""true"", p1);
	int v64 = this.mCache.getVersion();
	int v63 = v64;
	SQLiteDatabase v65 = this.mOpenHelper.getReadableDatabase();
	String v66 = new String(1);
	String v67 = Integer.toString(0);
	Cursor v68 = v65.query(""locksettings"", this.COLUMNS_FOR_PREFETCH, ""user=?"", v66, 0, 0, 0);
	boolean v69 = v68.moveToNext();
	v68.close();
	LockSettingsStorage$CredentialHash v72 = LockSettingsStorage.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v73 = LockSettingsStorage.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v74 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v71 = v74;
	FingerprintManager v75 = this.mInjector.getFingerprintManager();
	FaceManager v76 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v75, v76);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","0","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
","public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","1","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @3 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mSnapshotStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, get(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 5,4 @9 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
return 7,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
depth : 1
public KeyChainSnapshot getKeyChainSnapshot(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	KeyChainSnapshot v3 = this.mSnapshotStorage.get(v2);
	return v3;
}
-----
","public KeyChainSnapshot getKeyChainSnapshot(){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v3 = Binder.getCallingUid();
	KeyChainSnapshot v4 = this.mSnapshotStorage.get(v3);
	KeyChainSnapshot v1 = v4;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @3 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mSnapshotStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, get(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 5,4 @9 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, mSnapshotByUid, <Application,Landroid/util/SparseArray> > 1,
5 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 3,2 @3 exception:4,
6 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>5 <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 1,
return 6,
conditional branch(eq, to iindex=-1) 7,8,
return 7,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
depth : 1
public KeyChainSnapshot getKeyChainSnapshot(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	KeyChainSnapshot v3 = this.mSnapshotStorage.get(v2);
	return v3;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public KeyChainSnapshot get(int p1){
	Object v1 = this.mSnapshotByUid.get(p1);
	return v1;
}
-----
","public KeyChainSnapshot getKeyChainSnapshot(){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = Binder.getCallingUid();
	Object v16 = this.mSnapshotByUid.get(v14);
	KeyChainSnapshot v15 = v16;
	KeyChainSnapshot v1 = v15;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @3 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mSnapshotStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, get(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 5,4 @9 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, mSnapshotByUid, <Application,Landroid/util/SparseArray> > 1,
5 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 3,2 @3 exception:4,
6 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>5 <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, readFromDisk(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 1,2 @13 exception:8,
10 = getCaughtException ,
12 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
15 = new <Application,[Ljava/lang/Object>@2714 ,
17 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @30 exception:16,
arraystore 15[7] = 17,
19 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 12,13,15 @36 exception:18,
21 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 11,19,10 @40 exception:20,
monitorexit 1,
return 7,
conditional branch(eq, to iindex=-1) 7,8,
return 7,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
depth : 1
public KeyChainSnapshot getKeyChainSnapshot(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	KeyChainSnapshot v3 = this.mSnapshotStorage.get(v2);
	return v3;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public KeyChainSnapshot get(int p1){
	Object v1 = this.mSnapshotByUid.get(p1);
	KeyChainSnapshot v2 = p0.readFromDisk(p1);
	Object v2 = new Object(1);
	Integer v3 = Integer.valueOf(p1);
	String v4 = String.format(Locale.US, ""Error reading snapshot for %d from disk"", v2);
	int v5 = Log.e(""RecoverySnapshotStorage"", v4, caughtException);
	return 0;
}
-----
","public KeyChainSnapshot getKeyChainSnapshot(){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = Binder.getCallingUid();
	Object v16 = this.mSnapshotByUid.get(v14);
	KeyChainSnapshot v17 = RecoverySnapshotStorage.readFromDisk(v14);
	Object v18 = new Object(1);
	Integer v19 = Integer.valueOf(v14);
	String v20 = String.format(Locale.US, ""Error reading snapshot for %d from disk"", v18);
	int v21 = Log.e(""RecoverySnapshotStorage"", v20, caughtException);
	KeyChainSnapshot v15 = 0;
	KeyChainSnapshot v1 = v15;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @3 exception:3,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mSnapshotStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, get(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 5,4 @9 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, mSnapshotByUid, <Application,Landroid/util/SparseArray> > 1,
5 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 3,2 @3 exception:4,
6 = checkcast <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>5 <Application,Landroid/security/keystore/recovery/KeyChainSnapshot>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySnapshotStorage, readFromDisk(I)Landroid/security/keystore/recovery/KeyChainSnapshot; > 1,2 @13 exception:8,
monitorexit 1,
return 9,
conditional branch(eq, to iindex=-1) 7,8,
return 7,
return 4,","depth : 0
public KeyChainSnapshot getKeyChainSnapshot(){
	KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
	return v1;
}
-----
depth : 1
public KeyChainSnapshot getKeyChainSnapshot(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	KeyChainSnapshot v3 = this.mSnapshotStorage.get(v2);
	return v3;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public KeyChainSnapshot get(int p1){
	Object v1 = this.mSnapshotByUid.get(p1);
	KeyChainSnapshot v2 = p0.readFromDisk(p1);
	return v2;
}
-----
","public KeyChainSnapshot getKeyChainSnapshot(){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = Binder.getCallingUid();
	Object v16 = this.mSnapshotByUid.get(v14);
	KeyChainSnapshot v17 = RecoverySnapshotStorage.readFromDisk(v14);
	KeyChainSnapshot v15 = v17;
	KeyChainSnapshot v1 = v15;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","0","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
","public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @5 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @10 exception:10,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
23 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @18 exception:22,
25 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @22 exception:24,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 27,25 @30 exception:28,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, importKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B[B)V > 40,29,25,23,2,3,4 @41 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 42,25,23,2,3 @46 exception:43,
52 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,25,23,2 @49 exception:51,
return 52,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
","public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v3 = Objects.requireNonNull(p1, ""alias is null"");
	Object v4 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v5 = Binder.getCallingUid();
	int v6 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v7 = this.mPlatformKeyManager.getEncryptKey(v6);
	this.mRecoverableKeyGenerator.importKey(v7, v6, v5, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, p2);
	String v10 = RecoverableKeyStoreManager.getAlias(v6, v5, p1);
	String v1 = v10;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @5 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @10 exception:10,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
23 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @18 exception:22,
25 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @22 exception:24,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 27,25 @30 exception:28,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, init(I)V > 1,2 @0 exception:3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getDecryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformDecryptionKey; > 1,2 @3 exception:4,
10 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
12 = new <Application,[Ljava/lang/Object>@1411 ,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @17 exception:14,
arraystore 12[13] = 15,
18 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 10,16,12 @25 exception:17,
21 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 19,18 @31 exception:20,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, regenerate(I)V > 1,2 @34 exception:22,
24 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 1,2 @37 exception:23,
return 24,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, importKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B[B)V > 40,29,25,23,2,3,4 @41 exception:41,
8 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@0,
invokespecial < Application, Ljavax/crypto/spec/SecretKeySpec, <init>([BLjava/lang/String;)V > 8,6,9 @4 exception:10,
12 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/WrappedKey, fromSecretKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;Ljavax/crypto/SecretKey;[B)Lcom/android/server/locksettings/recoverablekeystore/WrappedKey; > 2,8,7 @7 exception:11,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, insertKey(IILjava/lang/String;Lcom/android/server/locksettings/recoverablekeystore/WrappedKey;)J > 13,3,4,5,12 @13 exception:14,
17 = binaryop(lt) 15 , 16,
conditional branch(eq, to iindex=-1) 17,19,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
32 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 30,3,4,18 @26 exception:31,
return,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 42,25,23,2,3 @46 exception:43,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
10 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @5 exception:9,
arraystore 8[11] = 10,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @12 exception:12,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
18 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 16 @23 exception:17,
arraystore 8[19] = 18,
22 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 6,20,8 @32 exception:21,
25 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 23,22 @38 exception:24,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getInternalAlias(IILjava/lang/String;)Ljava/lang/String; > 1,2,3,4 @43 exception:27,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
invokespecial < Application, Ljavax/crypto/spec/SecretKeySpec, <init>([BLjava/lang/String;)V > 30,5,31 @53 exception:32,
invokespecial < Application, Ljava/security/KeyStore$SecretKeyEntry, <init>(Ljavax/crypto/SecretKey;)V > 29,30 @56 exception:33,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
invokespecial < Application, Landroid/security/keystore/KeyProtection$Builder, <init>(I)V > 34,19 @61 exception:35,
37 = new <Application,[Ljava/lang/String>@6614 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 34,37 @70 exception:38,
41 = new <Application,[Ljava/lang/String>@7614 ,
43 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 39,41 @80 exception:42,
45 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, build()Landroid/security/keystore/KeyProtection; > 43 @84 exception:44,
invokeinterface < Application, Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy, setEntry(Ljava/lang/String;Ljava/security/KeyStore$Entry;Ljava/security/KeyStore$ProtectionParameter;)V > 26,28,29,45 @88 exception:46,
return,
52 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,25,23,2 @49 exception:51,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getGrantAlias(IILjava/lang/String;)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
return 7,
return 52,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	Object v2 = new Object(1);
	Integer v3 = Integer.valueOf(p1);
	String v4 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v2);
	int v5 = Log.i(""PlatformKeyManager"", v4);
	p0.regenerate(p1);
	PlatformEncryptionKey v7 = p0.getEncryptKeyInternal(p1);
	return v7;
}
-----
depth : 2
public void importKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5, byte[] p6){
	SecretKeySpec v0 = new SecretKeySpec(p5,""AES"");
	WrappedKey v2 = WrappedKey.fromSecretKey(p1, v0, p6);
	long v3 = this.mDatabase.insertKey(p2, p3, p4, v2);
	long v4 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	return;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	Object v15 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v16 = Binder.getCallingUid();
	int v17 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v17);
	PlatformDecryptionKey v20 = PlatformKeyManager.getDecryptKeyInternal(v17);
	Object v21 = new Object(1);
	Integer v22 = Integer.valueOf(v17);
	String v23 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v21);
	int v24 = Log.i(""PlatformKeyManager"", v23);
	PlatformKeyManager.regenerate(v17);
	PlatformEncryptionKey v26 = PlatformKeyManager.getEncryptKeyInternal(v17);
	PlatformEncryptionKey v18 = v26;
	SecretKeySpec v28 = new SecretKeySpec(p2,""AES"");
	WrappedKey v30 = WrappedKey.fromSecretKey(v18, v28, p3);
	long v31 = this.mDatabase.insertKey(v17, v16, p1, v30);
	long v32 = this.mDatabase.setShouldCreateSnapshot(v17, v16, 1);
	Object v34 = new Object(4);
	Integer v35 = Integer.valueOf(v17);
	Integer v36 = Integer.valueOf(v16);
	Integer v37 = Integer.valueOf(p2.length);
	String v38 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v34);
	int v39 = Log.i(""RecoverableAppKeyStore"", v38);
	String v40 = ApplicationKeyStorage.getInternalAlias(v17, v16, p1);
	KeyStore$SecretKeyEntry v41 = new KeyStore$SecretKeyEntry(v42);
	SecretKeySpec v42 = new SecretKeySpec(p2,""AES"");
	KeyProtection$Builder v45 = new KeyProtection$Builder(3);
	String v47 = new String(1);
	KeyProtection$Builder v48 = v45.setBlockModes(v47);
	String v49 = new String(1);
	KeyProtection$Builder v50 = v48.setEncryptionPaddings(v49);
	KeyProtection v51 = v50.build();
	this.mKeyStore.setEntry(v40, v41, v51);
	String v54 = this.mApplicationKeyStorage.getGrantAlias(v17, v16, p1);
	String v53 = v54;
	String v1 = v53;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @5 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @10 exception:10,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
23 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @18 exception:22,
25 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @22 exception:24,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 27,25 @30 exception:28,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, init(I)V > 1,2 @0 exception:3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getDecryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformDecryptionKey; > 1,2 @3 exception:4,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 1,2 @6 exception:6,
10 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
12 = new <Application,[Ljava/lang/Object>@1411 ,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @17 exception:14,
arraystore 12[13] = 15,
18 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 10,16,12 @25 exception:17,
21 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 19,18 @31 exception:20,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, regenerate(I)V > 1,2 @34 exception:22,
24 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 1,2 @37 exception:23,
return 24,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, importKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B[B)V > 40,29,25,23,2,3,4 @41 exception:41,
8 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@0,
invokespecial < Application, Ljavax/crypto/spec/SecretKeySpec, <init>([BLjava/lang/String;)V > 8,6,9 @4 exception:10,
12 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/WrappedKey, fromSecretKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;Ljavax/crypto/SecretKey;[B)Lcom/android/server/locksettings/recoverablekeystore/WrappedKey; > 2,8,7 @7 exception:11,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, insertKey(IILjava/lang/String;Lcom/android/server/locksettings/recoverablekeystore/WrappedKey;)J > 13,3,4,5,12 @13 exception:14,
17 = binaryop(lt) 15 , 16,
conditional branch(eq, to iindex=-1) 17,19,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
32 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 30,3,4,18 @26 exception:31,
return,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 42,25,23,2,3 @46 exception:43,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
10 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @5 exception:9,
arraystore 8[11] = 10,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @12 exception:12,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
18 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 16 @23 exception:17,
arraystore 8[19] = 18,
22 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 6,20,8 @32 exception:21,
25 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 23,22 @38 exception:24,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getInternalAlias(IILjava/lang/String;)Ljava/lang/String; > 1,2,3,4 @43 exception:27,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
invokespecial < Application, Ljavax/crypto/spec/SecretKeySpec, <init>([BLjava/lang/String;)V > 30,5,31 @53 exception:32,
invokespecial < Application, Ljava/security/KeyStore$SecretKeyEntry, <init>(Ljavax/crypto/SecretKey;)V > 29,30 @56 exception:33,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
invokespecial < Application, Landroid/security/keystore/KeyProtection$Builder, <init>(I)V > 34,19 @61 exception:35,
37 = new <Application,[Ljava/lang/String>@6614 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 34,37 @70 exception:38,
41 = new <Application,[Ljava/lang/String>@7614 ,
43 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 39,41 @80 exception:42,
45 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, build()Landroid/security/keystore/KeyProtection; > 43 @84 exception:44,
invokeinterface < Application, Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy, setEntry(Ljava/lang/String;Ljava/security/KeyStore$Entry;Ljava/security/KeyStore$ProtectionParameter;)V > 26,28,29,45 @88 exception:46,
return,
52 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,25,23,2 @49 exception:51,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getGrantAlias(IILjava/lang/String;)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
return 7,
return 52,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	PlatformEncryptionKey v3 = p0.getEncryptKeyInternal(p1);
	Object v3 = new Object(1);
	Integer v4 = Integer.valueOf(p1);
	String v5 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v3);
	int v6 = Log.i(""PlatformKeyManager"", v5);
	p0.regenerate(p1);
	PlatformEncryptionKey v8 = p0.getEncryptKeyInternal(p1);
	return v8;
}
-----
depth : 2
public void importKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5, byte[] p6){
	SecretKeySpec v0 = new SecretKeySpec(p5,""AES"");
	WrappedKey v2 = WrappedKey.fromSecretKey(p1, v0, p6);
	long v3 = this.mDatabase.insertKey(p2, p3, p4, v2);
	long v4 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	return;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	Object v15 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v16 = Binder.getCallingUid();
	int v17 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v17);
	PlatformDecryptionKey v20 = PlatformKeyManager.getDecryptKeyInternal(v17);
	PlatformEncryptionKey v21 = PlatformKeyManager.getEncryptKeyInternal(v17);
	Object v22 = new Object(1);
	Integer v23 = Integer.valueOf(v17);
	String v24 = String.format(Locale.US, ""Regenerating permanently invalid Platform key for user %d."", v22);
	int v25 = Log.i(""PlatformKeyManager"", v24);
	PlatformKeyManager.regenerate(v17);
	PlatformEncryptionKey v27 = PlatformKeyManager.getEncryptKeyInternal(v17);
	PlatformEncryptionKey v18 = v27;
	SecretKeySpec v29 = new SecretKeySpec(p2,""AES"");
	WrappedKey v31 = WrappedKey.fromSecretKey(v18, v29, p3);
	long v32 = this.mDatabase.insertKey(v17, v16, p1, v31);
	long v33 = this.mDatabase.setShouldCreateSnapshot(v17, v16, 1);
	Object v35 = new Object(4);
	Integer v36 = Integer.valueOf(v17);
	Integer v37 = Integer.valueOf(v16);
	Integer v38 = Integer.valueOf(p2.length);
	String v39 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v35);
	int v40 = Log.i(""RecoverableAppKeyStore"", v39);
	String v41 = ApplicationKeyStorage.getInternalAlias(v17, v16, p1);
	KeyStore$SecretKeyEntry v42 = new KeyStore$SecretKeyEntry(v43);
	SecretKeySpec v43 = new SecretKeySpec(p2,""AES"");
	KeyProtection$Builder v46 = new KeyProtection$Builder(3);
	String v48 = new String(1);
	KeyProtection$Builder v49 = v46.setBlockModes(v48);
	String v50 = new String(1);
	KeyProtection$Builder v51 = v49.setEncryptionPaddings(v50);
	KeyProtection v52 = v51.build();
	this.mKeyStore.setEntry(v41, v42, v52);
	String v55 = this.mApplicationKeyStorage.getGrantAlias(v17, v16, p1);
	String v54 = v55;
	String v1 = v54;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @5 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @10 exception:10,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
23 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @18 exception:22,
25 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @22 exception:24,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 27,25 @30 exception:28,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, init(I)V > 1,2 @0 exception:3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getDecryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformDecryptionKey; > 1,2 @3 exception:4,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKeyInternal(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 1,2 @6 exception:6,
return 7,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, importKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B[B)V > 40,29,25,23,2,3,4 @41 exception:41,
8 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@0,
invokespecial < Application, Ljavax/crypto/spec/SecretKeySpec, <init>([BLjava/lang/String;)V > 8,6,9 @4 exception:10,
12 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/WrappedKey, fromSecretKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;Ljavax/crypto/SecretKey;[B)Lcom/android/server/locksettings/recoverablekeystore/WrappedKey; > 2,8,7 @7 exception:11,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, insertKey(IILjava/lang/String;Lcom/android/server/locksettings/recoverablekeystore/WrappedKey;)J > 13,3,4,5,12 @13 exception:14,
17 = binaryop(lt) 15 , 16,
conditional branch(eq, to iindex=-1) 17,19,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
32 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 30,3,4,18 @26 exception:31,
return,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 42,25,23,2,3 @46 exception:43,
6 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
8 = new <Application,[Ljava/lang/Object>@37 ,
10 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @5 exception:9,
arraystore 8[11] = 10,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @12 exception:12,
arraystore 8[14] = 13,
arraystore 8[15] = 4,
16 = arraylength 5,
18 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 16 @23 exception:17,
arraystore 8[19] = 18,
22 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 6,20,8 @32 exception:21,
25 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 23,22 @38 exception:24,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getInternalAlias(IILjava/lang/String;)Ljava/lang/String; > 1,2,3,4 @43 exception:27,
29 = new <Application,Ljava/security/KeyStore$SecretKeyEntry>@47,
30 = new <Application,Ljavax/crypto/spec/SecretKeySpec>@49,
invokespecial < Application, Ljavax/crypto/spec/SecretKeySpec, <init>([BLjava/lang/String;)V > 30,5,31 @53 exception:32,
invokespecial < Application, Ljava/security/KeyStore$SecretKeyEntry, <init>(Ljavax/crypto/SecretKey;)V > 29,30 @56 exception:33,
34 = new <Application,Landroid/security/keystore/KeyProtection$Builder>@59,
invokespecial < Application, Landroid/security/keystore/KeyProtection$Builder, <init>(I)V > 34,19 @61 exception:35,
37 = new <Application,[Ljava/lang/String>@6614 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 34,37 @70 exception:38,
41 = new <Application,[Ljava/lang/String>@7614 ,
43 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyProtection$Builder; > 39,41 @80 exception:42,
45 = invokevirtual < Application, Landroid/security/keystore/KeyProtection$Builder, build()Landroid/security/keystore/KeyProtection; > 43 @84 exception:44,
invokeinterface < Application, Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy, setEntry(Ljava/lang/String;Ljava/security/KeyStore$Entry;Ljava/security/KeyStore$ProtectionParameter;)V > 26,28,29,45 @88 exception:46,
return,
52 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,25,23,2 @49 exception:51,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getGrantAlias(IILjava/lang/String;)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
return 7,
return 52,
return 7,","depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	PlatformEncryptionKey v3 = p0.getEncryptKeyInternal(p1);
	return v3;
}
-----
depth : 2
public void importKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5, byte[] p6){
	SecretKeySpec v0 = new SecretKeySpec(p5,""AES"");
	WrappedKey v2 = WrappedKey.fromSecretKey(p1, v0, p6);
	long v3 = this.mDatabase.insertKey(p2, p3, p4, v2);
	long v4 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	return;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v0);
	int v5 = Log.i(""RecoverableAppKeyStore"", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,""AES"");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	Object v15 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v16 = Binder.getCallingUid();
	int v17 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v17);
	PlatformDecryptionKey v20 = PlatformKeyManager.getDecryptKeyInternal(v17);
	PlatformEncryptionKey v21 = PlatformKeyManager.getEncryptKeyInternal(v17);
	PlatformEncryptionKey v18 = v21;
	SecretKeySpec v23 = new SecretKeySpec(p2,""AES"");
	WrappedKey v25 = WrappedKey.fromSecretKey(v18, v23, p3);
	long v26 = this.mDatabase.insertKey(v17, v16, p1, v25);
	long v27 = this.mDatabase.setShouldCreateSnapshot(v17, v16, 1);
	Object v29 = new Object(4);
	Integer v30 = Integer.valueOf(v17);
	Integer v31 = Integer.valueOf(v16);
	Integer v32 = Integer.valueOf(p2.length);
	String v33 = String.format(Locale.US, ""Set %d/%d/%s: %d bytes of key material"", v29);
	int v34 = Log.i(""RecoverableAppKeyStore"", v33);
	String v35 = ApplicationKeyStorage.getInternalAlias(v17, v16, p1);
	KeyStore$SecretKeyEntry v36 = new KeyStore$SecretKeyEntry(v37);
	SecretKeySpec v37 = new SecretKeySpec(p2,""AES"");
	KeyProtection$Builder v40 = new KeyProtection$Builder(3);
	String v42 = new String(1);
	KeyProtection$Builder v43 = v40.setBlockModes(v42);
	String v44 = new String(1);
	KeyProtection$Builder v45 = v43.setEncryptionPaddings(v44);
	KeyProtection v46 = v45.build();
	this.mKeyStore.setEntry(v35, v36, v46);
	String v49 = this.mApplicationKeyStorage.getGrantAlias(v17, v16, p1);
	String v48 = v49;
	String v1 = v48;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getRecoveryStatus()Ljava/util/Map;","0","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoveryStatus()Ljava/util/Map; > 2 @2 exception:3,
return 4,","depth : 0
public Map getRecoveryStatus(){
	Map v1 = this.mRecoverableKeyStoreManager.getRecoveryStatus();
	return v1;
}
-----
","public Map getRecoveryStatus(){
	Map v1 = this.mRecoverableKeyStoreManager.getRecoveryStatus();
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoveryStatus()Ljava/util/Map;","1","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoveryStatus()Ljava/util/Map; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:4,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getStatusForAllKeys(I)Ljava/util/Map; > 3,5 @9 exception:6,
return 7,
return 4,","depth : 0
public Map getRecoveryStatus(){
	Map v1 = this.mRecoverableKeyStoreManager.getRecoveryStatus();
	return v1;
}
-----
depth : 1
public Map getRecoveryStatus(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	Map v3 = this.mDatabase.getStatusForAllKeys(v2);
	return v3;
}
-----
","public Map getRecoveryStatus(){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v3 = Binder.getCallingUid();
	Map v4 = this.mDatabase.getStatusForAllKeys(v3);
	Map v1 = v4;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoveryStatus()Ljava/util/Map;","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoveryStatus()Ljava/util/Map; > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:4,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getStatusForAllKeys(I)Ljava/util/Map; > 3,5 @9 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
9 = new <Application,[Ljava/lang/String>@1310 ,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,16,9,17,12,15,15,15 @35 exception:18,
20 = new <Application,Ljava/util/HashMap>@39,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 20 @41 exception:21,
23 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 19 @44 exception:22,
conditional branch(eq, to iindex=-1) 23,15,
invokeinterface < Application, Landroid/database/Cursor, close()V > 19 @74 exception:40,
return 20,
return 7,
return 4,","depth : 0
public Map getRecoveryStatus(){
	Map v1 = this.mRecoverableKeyStoreManager.getRecoveryStatus();
	return v1;
}
-----
depth : 1
public Map getRecoveryStatus(){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	Map v3 = this.mDatabase.getStatusForAllKeys(v2);
	return v3;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public Map getStatusForAllKeys(int p1){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(3);
	String v1 = new String(1);
	String v2 = Integer.toString(p1);
	Cursor v3 = v1.query(""keys"", v1, ""uid = ?"", v1, 0, 0, 0);
	HashMap v3 = new HashMap();
	boolean v5 = v3.moveToNext();
	v3.close();
	return v3;
}
-----
","public Map getRecoveryStatus(){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = Binder.getCallingUid();
	SQLiteDatabase v16 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v17 = new String(3);
	String v18 = new String(1);
	String v19 = Integer.toString(v14);
	Cursor v20 = v16.query(""keys"", v17, ""uid = ?"", v18, 0, 0, 0);
	HashMap v21 = new HashMap();
	boolean v23 = v20.moveToNext();
	v20.close();
	Map v15 = v21;
	Map v1 = v15;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","importKey(Ljava/lang/String;[B)Ljava/lang/String;","0","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKey(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
return 6,","depth : 0
public String importKey(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.importKey(p1, p2);
	return v1;
}
-----
","public String importKey(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.importKey(p1, p2);
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKey(Ljava/lang/String;[B)Ljava/lang/String;","1","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKey(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 1,2,3,4 @1 exception:5,
return 6,
return 6,","depth : 0
public String importKey(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.importKey(p1, p2);
	return v1;
}
-----
depth : 1
public String importKey(String p1, byte[] p2){
	String v1 = p0.importKeyWithMetadata(p1, p2, 0);
	return v1;
}
-----
","public String importKey(String p1, byte[] p2){
	String v2 = RecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, 0);
	String v1 = v2;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","importKey(Ljava/lang/String;[B)Ljava/lang/String;","2","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKey(Ljava/lang/String;[B)Ljava/lang/String; > 4,2,3 @2 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; > 1,2,3,4 @1 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @5 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @10 exception:10,
12 = arraylength 3,
conditional branch(ne, to iindex=-1) 12,13,
23 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @18 exception:22,
25 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @22 exception:24,
27 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 27,25 @30 exception:28,
40 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, importKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B[B)V > 40,29,25,23,2,3,4 @41 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 42,25,23,2,3 @46 exception:43,
52 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,25,23,2 @49 exception:51,
return 52,
return 6,
return 6,","depth : 0
public String importKey(String p1, byte[] p2){
	String v1 = this.mRecoverableKeyStoreManager.importKey(p1, p2);
	return v1;
}
-----
depth : 1
public String importKey(String p1, byte[] p2){
	String v1 = p0.importKeyWithMetadata(p1, p2, 0);
	return v1;
}
-----
depth : 2
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	Object v3 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
","public String importKey(String p1, byte[] p2){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v4 = Objects.requireNonNull(p1, ""alias is null"");
	Object v5 = Objects.requireNonNull(p2, ""keyBytes is null"");
	int v6 = Binder.getCallingUid();
	int v7 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v8 = this.mPlatformKeyManager.getEncryptKey(v7);
	this.mRecoverableKeyGenerator.importKey(v8, v7, v6, p1, p2, 0);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v7, v6, p1, p2);
	String v11 = RecoverableKeyStoreManager.getAlias(v7, v6, p1);
	String v2 = v11;
	String v1 = v2;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
goto (from iindex= 16 to iindex = 5),
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
","public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @31 exception:17,
1 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = new <Primordial,[B>@32 ,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 1,4,3 @6 exception:5,
return 1,
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
4 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1, <init>(I)V > 4,2 @4 exception:5,
7 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 3,4 @7 exception:6,
return,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	LockscreenCredential v3 = LockscreenCredential.createNone();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 1
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 1
public void notifySeparateProfileChallengeChanged(int p1){
	LockSettingsService$$ExternalSyntheticLambda1 v0 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
","public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	LockscreenCredential.ensureNotZeroized();
	int v3 = this.mType;
	LockscreenCredential v6 = new LockscreenCredential(-1,v7);
	[B v7 = new [B(0);
	LockscreenCredential v5 = v6;
	boolean v10 = LockSettingsService.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	LockSettingsService.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	LockSettingsService.removeKeystoreProfileKey(p1);
	LockSettingsService$$ExternalSyntheticLambda1 v15 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v17 = this.mHandler.post(v15);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
goto (from iindex= 16 to iindex = 5),
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
4 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda1, <init>(I)V > 4,2 @4 exception:5,
7 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 3,4 @7 exception:6,
return,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 1
public void notifySeparateProfileChallengeChanged(int p1){
	LockSettingsService$$ExternalSyntheticLambda1 v0 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v2 = this.mHandler.post(v0);
	return;
}
-----
","public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	LockscreenCredential.ensureNotZeroized();
	int v3 = this.mType;
	boolean v6 = LockSettingsService.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	LockSettingsService.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	LockSettingsService.removeKeystoreProfileKey(p1);
	LockSettingsService$$ExternalSyntheticLambda1 v11 = new LockSettingsService$$ExternalSyntheticLambda1(p1);
	boolean v13 = this.mHandler.post(v11);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 5,6 @9 exception:7,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
goto (from iindex= 16 to iindex = 5),
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, deleteFile(Ljava/lang/String;)V > 1,4 @4 exception:5,
8 = getCaughtException ,
invokevirtual < Application, Ljava/lang/Exception, printStackTrace()V > 8 @9 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @7 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,2 @10 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @13 exception:10,
14 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 12,11 @19 exception:13,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @26 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,2 @35 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @38 exception:23,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 15,24 @42 exception:25,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 27 @49 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 27,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 27,2 @58 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 27 @61 exception:34,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 26,35 @65 exception:36,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @72 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,2 @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @83 exception:50,
53 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 12,51,42 @87 exception:52,
return,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	caughtException.printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
","public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	int v3 = this.mType;
	LockSettingsService.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v9 = ""lock_pattern_autolock"".equals(""lockscreen.profilechallenge"");
	int v10 = LockSettingsService.getCredentialTypeInternal(p1);
	boolean v7 = phiInstruction;
	LockSettingsService.checkWritePermission(p1);
	this.mStorage.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	String v15 = LockSettingsStorage.getChildProfileLockFile(p1);
	LockSettingsStorage.deleteFile(v15);
	caughtException.printStackTrace();
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""profile_key_name_encrypt_"");
	StringBuilder v28 = v25.append(p1);
	String v29 = v25.toString();
	this.mJavaKeyStore.deleteEntry(v29);
	StringBuilder v31 = new StringBuilder();
	StringBuilder v33 = v31.append(""profile_key_name_decrypt_"");
	StringBuilder v34 = v31.append(p1);
	String v35 = v31.toString();
	this.mJavaKeyStore.deleteEntry(v35);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
goto (from iindex= 3 to iindex = 2),
5 = phi  4,3,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 5,6 @9 exception:7,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
18 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createNone()Lcom/android/internal/widget/LockscreenCredential; > @31 exception:17,
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, deleteFile(Ljava/lang/String;)V > 1,4 @4 exception:5,
8 = getCaughtException ,
invokevirtual < Application, Ljava/lang/Exception, printStackTrace()V > 8 @9 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @7 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,2 @10 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @13 exception:10,
14 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 12,11 @19 exception:13,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @26 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,2 @35 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @38 exception:23,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 15,24 @42 exception:25,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 27 @49 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 27,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 27,2 @58 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 27 @61 exception:34,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 26,35 @65 exception:36,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @72 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,2 @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @83 exception:50,
53 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 12,51,42 @87 exception:52,
return,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	LockscreenCredential v3 = LockscreenCredential.createNone();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	caughtException.printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
","public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	int v3 = this.mType;
	LockscreenCredential v6 = LockscreenCredential.createNone();
	LockSettingsService.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v10 = ""lock_pattern_autolock"".equals(""lockscreen.profilechallenge"");
	int v11 = LockSettingsService.getCredentialTypeInternal(p1);
	boolean v8 = phiInstruction;
	LockSettingsService.checkWritePermission(p1);
	this.mStorage.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	String v16 = LockSettingsStorage.getChildProfileLockFile(p1);
	LockSettingsStorage.deleteFile(v16);
	caughtException.printStackTrace();
	StringBuilder v26 = new StringBuilder();
	StringBuilder v28 = v26.append(""profile_key_name_encrypt_"");
	StringBuilder v29 = v26.append(p1);
	String v30 = v26.toString();
	this.mJavaKeyStore.deleteEntry(v30);
	StringBuilder v32 = new StringBuilder();
	StringBuilder v34 = v32.append(""profile_key_name_decrypt_"");
	StringBuilder v35 = v32.append(p1);
	String v36 = v32.toString();
	this.mJavaKeyStore.deleteEntry(v36);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHasSecureLockScreen, <Primordial,Z> > 1,
conditional branch(ne, to iindex=-1) 6,7,
conditional branch(eq, to iindex=-1) 4,7,
9 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 4 @9 exception:8,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
5 = phi  4,3,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 5,6 @9 exception:7,
return,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
return 3,
conditional branch(ne, to iindex=-1) 9,10,
goto (from iindex= 8 to iindex = 9),
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 16,
conditional branch(eq, to iindex=-1) 4,7,
goto (from iindex= 16 to iindex = 5),
19 = phi  4,18,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setSeparateProfileChallengeEnabledLocked(IZLcom/android/internal/widget/LockscreenCredential;)V > 1,2,3,19 @35 exception:22,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getBoolean(Ljava/lang/String;ZI)Z > 1,5,6,2 @3 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setBoolean(Ljava/lang/String;ZI)V > 1,5,3,2 @7 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,
conditional branch(eq, to iindex=-1) 3,6,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, removeChildProfileLock(I)V > 11,2 @14 exception:12,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, deleteFile(Ljava/lang/String;)V > 1,4 @4 exception:5,
8 = getCaughtException ,
invokevirtual < Application, Ljava/lang/Exception, printStackTrace()V > 8 @9 exception:9,
return,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeKeystoreProfileKey(I)V > 1,2 @17 exception:13,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @7 exception:6,
9 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,2 @10 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @13 exception:10,
14 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 12,11 @19 exception:13,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
16 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @26 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,2 @35 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @38 exception:23,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 15,24 @42 exception:25,
26 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
27 = new <Application,Ljava/lang/StringBuilder>@47,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 27 @49 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 27,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 27,2 @58 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 27 @61 exception:34,
invokevirtual < Application, Ljava/security/KeyStore, deleteEntry(Ljava/lang/String;)V > 26,35 @65 exception:36,
42 = getCaughtException ,
43 = new <Application,Ljava/lang/StringBuilder>@70,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @72 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,2 @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @83 exception:50,
53 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 12,51,42 @87 exception:52,
return,
goto (from iindex= 9 to iindex = 4),
return,
monitorexit 16,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, notifySeparateProfileChallengeChanged(I)V > 1,2 @39 exception:28,
return,","depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	return;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	caughtException.printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Remove keystore profile key for user: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i(""LockSettingsService"", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""profile_key_name_encrypt_"");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""profile_key_name_decrypt_"");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unable to remove keystore profile key for user:"");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e(""LockSettingsService"", v19, caughtException);
	return;
}
-----
","public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	Preconditions.checkState(phiInstruction, ""Credential is already zeroized"");
	int v3 = this.mType;
	LockSettingsService.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v9 = ""lock_pattern_autolock"".equals(""lockscreen.profilechallenge"");
	int v10 = LockSettingsService.getCredentialTypeInternal(p1);
	boolean v7 = phiInstruction;
	LockSettingsService.checkWritePermission(p1);
	this.mStorage.setBoolean(""lockscreen.profilechallenge"", p2, p1);
	String v15 = LockSettingsStorage.getChildProfileLockFile(p1);
	LockSettingsStorage.deleteFile(v15);
	caughtException.printStackTrace();
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""profile_key_name_encrypt_"");
	StringBuilder v28 = v25.append(p1);
	String v29 = v25.toString();
	this.mJavaKeyStore.deleteEntry(v29);
	StringBuilder v31 = new StringBuilder();
	StringBuilder v33 = v31.append(""profile_key_name_decrypt_"");
	StringBuilder v34 = v31.append(p1);
	String v35 = v31.toString();
	this.mJavaKeyStore.deleteEntry(v35);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getKey(Ljava/lang/String;)Ljava/lang/String;","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
return 5,","depth : 0
public String getKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
	return v1;
}
-----
","public String getKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKey(Ljava/lang/String;)Ljava/lang/String;","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
8 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:7,
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,10,8,2 @16 exception:11,
return 12,
return 5,","depth : 0
public String getKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
	return v1;
}
-----
depth : 1
public String getKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	String v5 = p0.getAlias(v4, v3, p1);
	return v5;
}
-----
","public String getKey(String p1){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v3 = Objects.requireNonNull(p1, ""alias is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	String v6 = RecoverableKeyStoreManager.getAlias(v5, v4, p1);
	String v1 = v6;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getKey(Ljava/lang/String;)Ljava/lang/String;","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
8 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:7,
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,10,8,2 @16 exception:11,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getGrantAlias(IILjava/lang/String;)Ljava/lang/String; > 5,2,3,4 @2 exception:6,
return 7,
return 12,
return 5,","depth : 0
public String getKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
	return v1;
}
-----
depth : 1
public String getKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	String v5 = p0.getAlias(v4, v3, p1);
	return v5;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
","public String getKey(String p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	String v18 = this.mApplicationKeyStorage.getGrantAlias(v16, v15, p1);
	String v17 = v18;
	String v1 = v17;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V > 4,2 @5 exception:5,
return,","depth : 0
public void registerStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.registerStrongAuthTracker(p1);
	return;
}
-----
","public void registerStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.registerStrongAuthTracker(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V > 4,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
6 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(ILjava/lang/Object;)Landroid/os/Message; > 3,4,2 @3 exception:5,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 6 @7 exception:7,
return,
return,","depth : 0
public void registerStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.registerStrongAuthTracker(p1);
	return;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public void registerStrongAuthTracker(IStrongAuthTracker p1){
	Message v1 = this.mHandler.obtainMessage(2, p1);
	v1.sendToTarget();
	return;
}
-----
","public void registerStrongAuthTracker(IStrongAuthTracker p1){
	Message v4 = this.mHandler.obtainMessage(2, p1);
	v4.sendToTarget();
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenActive(JI)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
6 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:5,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isEscrowTokenActive(JI)Z > 1,2,3 @7 exception:7,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 6 @11 exception:11,
return 8,","depth : 0
public boolean isWeakEscrowTokenActive(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.isEscrowTokenActive(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
","public boolean isWeakEscrowTokenActive(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.isEscrowTokenActive(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenActive(JI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
6 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:5,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isEscrowTokenActive(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 5,2,3 @5 exception:6,
monitorexit 4,
return 7,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 6 @11 exception:11,
return 8,","depth : 0
public boolean isWeakEscrowTokenActive(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.isEscrowTokenActive(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean isEscrowTokenActive(long p1, int p2){
	boolean v1 = this.mSpManager.existsHandle(p1, p2);
	return v1;
}
-----
","public boolean isWeakEscrowTokenActive(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = this.mSpManager.existsHandle(p1, p2);
	boolean v6 = v7;
	Binder.restoreCallingIdentity(v5);
	return v6;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","isWeakEscrowTokenActive(JI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
6 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:5,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isEscrowTokenActive(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 5,2,3 @5 exception:6,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,4,2,3 @3 exception:5,
return 6,
monitorexit 4,
return 7,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 6 @11 exception:11,
return 8,","depth : 0
public boolean isWeakEscrowTokenActive(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.isEscrowTokenActive(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean isEscrowTokenActive(long p1, int p2){
	boolean v1 = this.mSpManager.existsHandle(p1, p2);
	return v1;
}
-----
depth : 2
public boolean existsHandle(long p1, int p2){
	boolean v1 = p0.hasState(""spblob"", p1, p2);
	return v1;
}
-----
","public boolean isWeakEscrowTokenActive(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	boolean v8 = SyntheticPasswordManager.hasState(""spblob"", p1, p2);
	boolean v7 = v8;
	boolean v6 = v7;
	Binder.restoreCallingIdentity(v5);
	return v6;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setBoolean(Ljava/lang/String;ZI)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
return,","depth : 0
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
","public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setBoolean(Ljava/lang/String;ZI)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 3,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,8,4 @7 exception:9,
return,
return,","depth : 0
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setBoolean(String p1, boolean p2, int p3){
	p0.setString(p1, phiInstruction, p3);
	return;
}
-----
","public void setBoolean(String p1, boolean p2, int p3){
	LockSettingsStorage.setString(p1, phiInstruction, p3);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setBoolean(Ljava/lang/String;ZI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 3,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,8,4 @7 exception:9,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 8,9 @9 exception:10,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
14 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, contains([Ljava/lang/Object;Ljava/lang/Object;)Z > 12,2 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
invokestatic < Application, Landroid/app/backup/BackupManager, dataChanged(Ljava/lang/String;)V > 15 @25 exception:16,
return,
return,
return,","depth : 0
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setBoolean(String p1, boolean p2, int p3){
	p0.setString(p1, phiInstruction, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
","public void setBoolean(String p1, boolean p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	LockSettingsStorage.writeKeyValue(p1, phiInstruction, p3);
	boolean v7 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setBoolean(Ljava/lang/String;ZI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setBoolean(Ljava/lang/String;ZI)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 3,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,8,4 @7 exception:9,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 8,9 @9 exception:10,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
14 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, contains([Ljava/lang/Object;Ljava/lang/Object;)Z > 12,2 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
return,
return,
return,","depth : 0
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setBoolean(String p1, boolean p2, int p3){
	p0.setString(p1, phiInstruction, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	return;
}
-----
","public void setBoolean(String p1, boolean p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	LockSettingsStorage.writeKeyValue(p1, phiInstruction, p3);
	boolean v7 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","0","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
","public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","1","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = phiInstruction;
	boolean v3 = phiInstruction;
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = p1.isNone();
	ContentResolver v8 = this.mContext.getContentResolver();
	int v9 = this.mInjector.settingsGlobalGetInt(v8, ""device_provisioned"", 0);
	VerifyCredentialResponse v10 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
	LockSettingsStorage$CredentialHash v11 = this.mStorage.readCredentialHash(p2);
	boolean v12 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v18 = p1.getType();
	VerifyCredentialResponse v6 = VerifyCredentialResponse.ERROR;
	Binder.restoreCallingIdentity(v5);
	LockSettingsService$$ExternalSyntheticLambda3 v24 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v26 = this.mHandler.postDelayed(v24, 2000);
	return v6;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","1","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = phiInstruction;
	boolean v3 = phiInstruction;
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = p1.isNone();
	ContentResolver v8 = this.mContext.getContentResolver();
	int v9 = this.mInjector.settingsGlobalGetInt(v8, ""device_provisioned"", 0);
	VerifyCredentialResponse v10 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
	LockSettingsStorage$CredentialHash v11 = this.mStorage.readCredentialHash(p2);
	boolean v12 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v18 = p1.getType();
	VerifyCredentialResponse v6 = VerifyCredentialResponse.ERROR;
	Binder.restoreCallingIdentity(v5);
	LockSettingsService$$ExternalSyntheticLambda3 v24 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v26 = this.mHandler.postDelayed(v24, 2000);
	return v6;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = phiInstruction;
	boolean v3 = phiInstruction;
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = p1.isNone();
	ContentResolver v8 = this.mContext.getContentResolver();
	int v10 = Settings$Global.getInt(v8, ""device_provisioned"", 0);
	int v9 = v10;
	boolean v12 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v21 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v22 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v23 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v24 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v23, v22, p1, p2, p3);
	int v25 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v26 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v26);
	IGateKeeperService v28 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v29 = this.mSpManager.verifyChallenge(v28, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v30 = v29.getResponseCode();
	VerifyCredentialResponse v11 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v33 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v34 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v35 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v32 = v35;
	int v37 = LockscreenCredential.getType();
	int v38 = LockscreenCredential.getType();
	boolean v36 = phiInstruction;
	boolean v40 = p1.isNone();
	boolean v41 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v43 = LockSettingsService.getGateKeeperService();
	byte[] v44 = p1.getCredential();
	GateKeeperResponse v45 = v43.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v44);
	VerifyCredentialResponse v47 = LockSettingsService.convertResponse(phiInstruction);
	boolean v48 = phiInstruction.getShouldReEnroll();
	int v49 = v47.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v53 = p1.getCredential();
	LockSettingsService.unlockKeystore(v53, p2);
	byte[] v61 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v61);
	boolean v63 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v65 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v39 = v47;
	int v67 = this.mResponseCode;
	Message v69 = this.mHandler.obtainMessage(5, p2, 0);
	v69.sendToTarget();
	VerifyCredentialResponse v6 = v39;
	Binder.restoreCallingIdentity(v5);
	p0.scheduleGc();
	return v6;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = phiInstruction;
	boolean v3 = phiInstruction;
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = p1.isNone();
	ContentResolver v8 = this.mContext.getContentResolver();
	int v10 = Settings$Global.getInt(v8, ""device_provisioned"", 0);
	int v9 = v10;
	boolean v12 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v21 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v22 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v23 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v24 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v23, v22, p1, p2, p3);
	int v25 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v26 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v26);
	IGateKeeperService v28 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v29 = this.mSpManager.verifyChallenge(v28, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v30 = v29.getResponseCode();
	VerifyCredentialResponse v11 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v33 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v34 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v35 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v32 = v35;
	int v37 = LockscreenCredential.getType();
	int v38 = LockscreenCredential.getType();
	boolean v36 = phiInstruction;
	boolean v40 = p1.isNone();
	boolean v41 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v43 = LockSettingsService.getGateKeeperService();
	byte[] v44 = p1.getCredential();
	GateKeeperResponse v45 = v43.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v44);
	VerifyCredentialResponse v47 = LockSettingsService.convertResponse(phiInstruction);
	boolean v48 = phiInstruction.getShouldReEnroll();
	int v49 = v47.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v53 = p1.getCredential();
	LockSettingsService.unlockKeystore(v53, p2);
	byte[] v61 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v61);
	boolean v63 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v65 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v39 = v47;
	int v67 = this.mResponseCode;
	Message v69 = this.mHandler.obtainMessage(5, p2, 0);
	v69.sendToTarget();
	VerifyCredentialResponse v6 = v39;
	Binder.restoreCallingIdentity(v5);
	p0.scheduleGc();
	return v6;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,5 @2 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
goto (from iindex= 5 to iindex = 2),
8 = phi  7,6,
return 8,
conditional branch(ne, to iindex=-1) 7,8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, hasPermission(Ljava/lang/String;)Z > 1,9 @10 exception:10,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
5 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  7,6,
return 8,
conditional branch(eq, to iindex=-1) 11,8,
goto (from iindex= 8 to iindex = 10),
19 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @26 exception:18,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,8,4 @31 exception:20,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 19 @35 exception:25,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @38 exception:26,
return 21,","depth : 0
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"");
	boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");
	long v3 = Binder.clearCallingIdentity();
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);
	Binder.restoreCallingIdentity(v3);
	p0.scheduleGc();
	return v4;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = phiInstruction;
	boolean v3 = phiInstruction;
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = p1.isNone();
	ContentResolver v8 = this.mContext.getContentResolver();
	int v10 = Settings$Global.getInt(v8, ""device_provisioned"", 0);
	int v9 = v10;
	boolean v12 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v21 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v22 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v23 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v24 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v23, v22, p1, p2, p3);
	int v25 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v26 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v26);
	IGateKeeperService v28 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v29 = this.mSpManager.verifyChallenge(v28, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v30 = v29.getResponseCode();
	VerifyCredentialResponse v11 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v33 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v34 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v35 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v32 = v35;
	int v37 = LockscreenCredential.getType();
	int v38 = LockscreenCredential.getType();
	boolean v36 = phiInstruction;
	boolean v40 = p1.isNone();
	boolean v41 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v43 = LockSettingsService.getGateKeeperService();
	byte[] v44 = p1.getCredential();
	GateKeeperResponse v45 = v43.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v44);
	VerifyCredentialResponse v47 = LockSettingsService.convertResponse(phiInstruction);
	boolean v48 = phiInstruction.getShouldReEnroll();
	int v49 = v47.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v53 = p1.getCredential();
	LockSettingsService.unlockKeystore(v53, p2);
	byte[] v61 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v61);
	boolean v63 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v65 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v39 = v47;
	int v67 = this.mResponseCode;
	Message v69 = this.mHandler.obtainMessage(5, p2, 0);
	v69.sendToTarget();
	VerifyCredentialResponse v6 = v39;
	Binder.restoreCallingIdentity(v5);
	p0.scheduleGc();
	return v6;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
","public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
","public boolean getSeparateProfileChallengeEnabled(int p1){
	int v2 = Binder.getCallingUid();
	boolean v4 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v3 = v4;
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
12 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,10 @14 exception:11,
conditional branch(ne, to iindex=-1) 12,5,
15 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,13 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,5,
goto (from iindex= 15 to iindex = 3),
23 = phi  3,5,20,
return 23,
monitorexit 3,
return 8,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	boolean v3 = v1.equals(""1"");
	boolean v4 = v1.equals(""true"");
	return phiInstruction;
}
-----
","public boolean getSeparateProfileChallengeEnabled(int p1){
	int v2 = Binder.getCallingUid();
	String v5 = LockSettingsStorage.getString(""lockscreen.profilechallenge"", 0, p1);
	boolean v6 = TextUtils.isEmpty(v5);
	boolean v7 = v5.equals(""1"");
	boolean v8 = v5.equals(""true"");
	boolean v4 = phiInstruction;
	boolean v3 = v4;
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
12 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,10 @14 exception:11,
conditional branch(ne, to iindex=-1) 12,5,
15 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,13 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,5,
goto (from iindex= 17 to iindex = 2),
23 = phi  3,5,20,
return 23,
monitorexit 3,
return 8,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	boolean v3 = v1.equals(""1"");
	boolean v4 = v1.equals(""true"");
	return phiInstruction;
}
-----
","public boolean getSeparateProfileChallengeEnabled(int p1){
	int v2 = Binder.getCallingUid();
	String v5 = LockSettingsStorage.getString(""lockscreen.profilechallenge"", 0, p1);
	boolean v6 = TextUtils.isEmpty(v5);
	boolean v7 = v5.equals(""1"");
	boolean v8 = v5.equals(""true"");
	boolean v4 = phiInstruction;
	boolean v3 = v4;
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getSeparateProfileChallengeEnabled(I)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,3,2 @2 exception:4,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; > 1,2,5,4 @1 exception:6,
9 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 7 @5 exception:8,
conditional branch(eq, to iindex=-1) 9,5,
12 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,10 @14 exception:11,
conditional branch(ne, to iindex=-1) 12,5,
23 = phi  3,5,20,
return 23,
monitorexit 3,
return 8,
return 6,","depth : 0
public boolean getSeparateProfileChallengeEnabled(int p1){
	p0.checkReadPermission(""lockscreen.profilechallenge"", p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return v2;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	String v1 = p0.getString(p1, 0, p3);
	boolean v2 = TextUtils.isEmpty(v1);
	boolean v3 = v1.equals(""1"");
	return phiInstruction;
}
-----
","public boolean getSeparateProfileChallengeEnabled(int p1){
	int v2 = Binder.getCallingUid();
	String v5 = LockSettingsStorage.getString(""lockscreen.profilechallenge"", 0, p1);
	boolean v6 = TextUtils.isEmpty(v5);
	boolean v7 = v5.equals(""1"");
	boolean v4 = phiInstruction;
	boolean v3 = v4;
	return v3;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","removeWeakEscrowToken(JI)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
6 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:5,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeEscrowToken(JI)Z > 1,2,3 @7 exception:7,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 6 @11 exception:11,
return 8,","depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
","public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeWeakEscrowToken(JI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
6 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:5,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeEscrowToken(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @3 exception:5,
7 = binaryop(lt) 2 , 6,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, removePendingToken(JI)Z > 9,2,3 @23 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 13,2,3 @34 exception:14,
conditional branch(eq, to iindex=-1) 15,8,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyTokenBasedSyntheticPassword(JI)V > 16,2,3 @42 exception:17,
monitorexit 4,
return 12,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 6 @11 exception:11,
return 8,","depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean removeEscrowToken(long p1, int p2){
	long v1 = p0.getSyntheticPasswordHandleLocked(p2);
	boolean v2 = this.mSpManager.removePendingToken(p1, p2);
	boolean v3 = this.mSpManager.existsHandle(p1, p2);
	this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
	return 1;
}
-----
","public boolean removeWeakEscrowToken(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	long v7 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	boolean v8 = this.mSpManager.removePendingToken(p1, p2);
	boolean v9 = this.mSpManager.existsHandle(p1, p2);
	this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
	boolean v6 = 1;
	Binder.restoreCallingIdentity(v5);
	return v6;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeWeakEscrowToken(JI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
6 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:5,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeEscrowToken(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @3 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
7 = binaryop(lt) 2 , 6,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, removePendingToken(JI)Z > 9,2,3 @23 exception:10,
4 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
6 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @2 exception:5,
8 = invokevirtual < Application, Landroid/util/ArrayMap, containsKey(Ljava/lang/Object;)Z > 4,6 @6 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
12 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @16 exception:11,
14 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 10,12 @20 exception:13,
15 = checkcast <Application,Landroid/util/ArrayMap>14 <Application,Landroid/util/ArrayMap>,
17 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @26 exception:16,
19 = invokevirtual < Application, Landroid/util/ArrayMap, remove(Ljava/lang/Object;)Ljava/lang/Object; > 15,17 @30 exception:18,
conditional branch(eq, to iindex=-1) 19,9,
21 = phi  9,20,
return 21,
conditional branch(eq, to iindex=-1) 11,8,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 13,2,3 @34 exception:14,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,4,2,3 @3 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 15,8,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyTokenBasedSyntheticPassword(JI)V > 16,2,3 @42 exception:17,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
8 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob; > 6 @7 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroySyntheticPassword(JI)V > 1,2,3 @11 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyState(Ljava/lang/String;JI)V > 1,10,2,3 @17 exception:11,
12 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 8,
conditional branch(ne, to iindex=-1) 12,13,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, notifyWeakEscrowTokenRemovedListeners(JI)V > 1,2,3 @25 exception:14,
return,
monitorexit 4,
return 12,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 6 @11 exception:11,
return 8,","depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean removeEscrowToken(long p1, int p2){
	long v1 = p0.getSyntheticPasswordHandleLocked(p2);
	boolean v2 = this.mSpManager.removePendingToken(p1, p2);
	boolean v3 = this.mSpManager.existsHandle(p1, p2);
	this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
	return 1;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean removePendingToken(long p1, int p2){
	Integer v1 = Integer.valueOf(p2);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p2);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.remove(v5);
	return phiInstruction;
}
-----
depth : 2
public boolean existsHandle(long p1, int p2){
	boolean v1 = p0.hasState(""spblob"", p1, p2);
	return v1;
}
-----
depth : 2
public void destroyTokenBasedSyntheticPassword(long p1, int p2){
	byte[] v1 = p0.loadState(""spblob"", p1, p2);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	p0.destroySyntheticPassword(p1, p2);
	p0.destroyState(""secdis"", p1, p2);
	p0.notifyWeakEscrowTokenRemovedListeners(p1, p2);
	return;
}
-----
","public boolean removeWeakEscrowToken(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	long v8 = LockSettingsService.getLong(""sp-handle"", 0, p2);
	long v7 = v8;
	Integer v10 = Integer.valueOf(p2);
	boolean v11 = this.tokenMap.containsKey(v10);
	Integer v12 = Integer.valueOf(p2);
	Object v13 = this.tokenMap.get(v12);
	Long v14 = Long.valueOf(p1);
	Object v15 = v13.remove(v14);
	boolean v9 = phiInstruction;
	boolean v17 = SyntheticPasswordManager.hasState(""spblob"", p1, p2);
	boolean v16 = v17;
	byte[] v19 = SyntheticPasswordManager.loadState(""spblob"", p1, p2);
	SyntheticPasswordManager$SyntheticPasswordBlob v20 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v19);
	SyntheticPasswordManager.destroySyntheticPassword(p1, p2);
	SyntheticPasswordManager.destroyState(""secdis"", p1, p2);
	SyntheticPasswordManager.notifyWeakEscrowTokenRemovedListeners(p1, p2);
	boolean v6 = 1;
	Binder.restoreCallingIdentity(v5);
	return v6;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeWeakEscrowToken(JI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
6 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:5,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, removeEscrowToken(JI)Z > 1,2,3 @7 exception:7,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @3 exception:5,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
7 = binaryop(lt) 2 , 6,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
11 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, removePendingToken(JI)Z > 9,2,3 @23 exception:10,
4 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
6 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @2 exception:5,
8 = invokevirtual < Application, Landroid/util/ArrayMap, containsKey(Ljava/lang/Object;)Z > 4,6 @6 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, tokenMap, <Application,Landroid/util/ArrayMap> > 1,
12 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @16 exception:11,
14 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 10,12 @20 exception:13,
15 = checkcast <Application,Landroid/util/ArrayMap>14 <Application,Landroid/util/ArrayMap>,
17 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @26 exception:16,
19 = invokevirtual < Application, Landroid/util/ArrayMap, remove(Ljava/lang/Object;)Ljava/lang/Object; > 15,17 @30 exception:18,
conditional branch(eq, to iindex=-1) 19,9,
21 = phi  9,20,
return 21,
conditional branch(eq, to iindex=-1) 11,8,
13 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, existsHandle(JI)Z > 13,2,3 @34 exception:14,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, hasState(Ljava/lang/String;JI)Z > 1,4,2,3 @3 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 15,8,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyTokenBasedSyntheticPassword(JI)V > 16,2,3 @42 exception:17,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
8 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, fromBytes([B)Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob; > 6 @7 exception:7,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroySyntheticPassword(JI)V > 1,2,3 @11 exception:9,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, destroyState(Ljava/lang/String;JI)V > 1,10,2,3 @17 exception:11,
12 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$SyntheticPasswordBlob, mType, <Primordial,B> > 8,
conditional branch(ne, to iindex=-1) 12,13,
return,
monitorexit 4,
return 12,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 6 @11 exception:11,
return 8,","depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean removeEscrowToken(long p1, int p2){
	long v1 = p0.getSyntheticPasswordHandleLocked(p2);
	boolean v2 = this.mSpManager.removePendingToken(p1, p2);
	boolean v3 = this.mSpManager.existsHandle(p1, p2);
	this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
	return 1;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public boolean removePendingToken(long p1, int p2){
	Integer v1 = Integer.valueOf(p2);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p2);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.remove(v5);
	return phiInstruction;
}
-----
depth : 2
public boolean existsHandle(long p1, int p2){
	boolean v1 = p0.hasState(""spblob"", p1, p2);
	return v1;
}
-----
depth : 2
public void destroyTokenBasedSyntheticPassword(long p1, int p2){
	byte[] v1 = p0.loadState(""spblob"", p1, p2);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	p0.destroySyntheticPassword(p1, p2);
	p0.destroyState(""secdis"", p1, p2);
	return;
}
-----
","public boolean removeWeakEscrowToken(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	long v8 = LockSettingsService.getLong(""sp-handle"", 0, p2);
	long v7 = v8;
	Integer v10 = Integer.valueOf(p2);
	boolean v11 = this.tokenMap.containsKey(v10);
	Integer v12 = Integer.valueOf(p2);
	Object v13 = this.tokenMap.get(v12);
	Long v14 = Long.valueOf(p1);
	Object v15 = v13.remove(v14);
	boolean v9 = phiInstruction;
	boolean v17 = SyntheticPasswordManager.hasState(""spblob"", p1, p2);
	boolean v16 = v17;
	byte[] v19 = SyntheticPasswordManager.loadState(""spblob"", p1, p2);
	SyntheticPasswordManager$SyntheticPasswordBlob v20 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v19);
	SyntheticPasswordManager.destroySyntheticPassword(p1, p2);
	SyntheticPasswordManager.destroyState(""secdis"", p1, p2);
	boolean v6 = 1;
	Binder.restoreCallingIdentity(v5);
	return v6;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
","public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
return 26,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
","public boolean getBoolean(String p1, boolean p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v3 = ""lock_pattern_autolock"".equals(p1);
	boolean v5 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
	int v6 = LockSettingsService.getKeyguardStoredQuality(p3);
	boolean v7 = this.mStorage.hasPattern(p3);
	boolean v8 = this.mStorage.hasPassword(p3);
	int v9 = LockSettingsService.pinOrPasswordQualityToCredentialType(v6);
	int v4 = v9;
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
return 26,
conditional branch(ne, to iindex=-1) 14,15,
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
","public boolean getBoolean(String p1, boolean p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v3 = ""lock_pattern_autolock"".equals(p1);
	boolean v5 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
	int v6 = LockSettingsService.getKeyguardStoredQuality(p3);
	boolean v7 = this.mStorage.hasPattern(p3);
	boolean v8 = this.mStorage.hasPassword(p3);
	int v9 = LockSettingsService.pinOrPasswordQualityToCredentialType(v6);
	int v4 = v9;
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
29 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,2 @18 exception:28,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
32 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getCredentialType(JI)I > 30,29,2 @24 exception:31,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
11 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @11 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @16 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,3 @19 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @22 exception:18,
22 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 20,19 @28 exception:21,
return 23,
conditional branch(eq, to iindex=-1) 32,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @33 exception:34,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 3,4,5,2 @6 exception:6,
8 = conversion(I) 7,
return 8,
37 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 35 @37 exception:36,
3 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityAlphabeticPassword(I)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityNumericPin(I)Z > 1 @8 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
monitorexit 4,
return 37,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	long v2 = p0.getSyntheticPasswordHandleLocked(p1);
	int v3 = this.mSpManager.getCredentialType(v2, p1);
	int v4 = p0.getKeyguardStoredQuality(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getCredentialType(long p1, int p2){
	byte[] v1 = p0.loadState(""pwd"", p1, p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getCredentialType: encountered empty password data for user "");
	StringBuilder v4 = v1.append(p2);
	String v5 = v1.toString();
	int v6 = Slog.w(""SyntheticPasswordManager"", v5);
	return -1;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","public boolean getBoolean(String p1, boolean p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v3 = ""lock_pattern_autolock"".equals(p1);
	LockSettingsStorage$PersistentData v6 = this.mStorage.readPersistentDataBlock();
	boolean v5 = phiInstruction;
	long v8 = LockSettingsService.getLong(""sp-handle"", 0, p1);
	long v7 = v8;
	byte[] v10 = SyntheticPasswordManager.loadState(""pwd"", v7, p1);
	int v9 = -1;
	long v18 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	int v17 = v18;
	boolean v20 = LockPatternUtils.isQualityAlphabeticPassword(v17);
	boolean v21 = LockPatternUtils.isQualityNumericPin(v17);
	int v19 = 3;
	int v4 = v19;
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
29 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,2 @18 exception:28,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
32 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getCredentialType(JI)I > 30,29,2 @24 exception:31,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
11 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @11 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @16 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,3 @19 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @22 exception:18,
22 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 20,19 @28 exception:21,
return 23,
conditional branch(eq, to iindex=-1) 32,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @33 exception:34,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 3,4,5,2 @6 exception:6,
8 = conversion(I) 7,
return 8,
37 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 35 @37 exception:36,
3 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityAlphabeticPassword(I)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityNumericPin(I)Z > 1 @8 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
monitorexit 4,
return 37,
conditional branch(ne, to iindex=-1) 14,15,
goto (from iindex= 9 to iindex = 2),
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	long v2 = p0.getSyntheticPasswordHandleLocked(p1);
	int v3 = this.mSpManager.getCredentialType(v2, p1);
	int v4 = p0.getKeyguardStoredQuality(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getCredentialType(long p1, int p2){
	byte[] v1 = p0.loadState(""pwd"", p1, p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getCredentialType: encountered empty password data for user "");
	StringBuilder v4 = v1.append(p2);
	String v5 = v1.toString();
	int v6 = Slog.w(""SyntheticPasswordManager"", v5);
	return -1;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","public boolean getBoolean(String p1, boolean p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v3 = ""lock_pattern_autolock"".equals(p1);
	LockSettingsStorage$PersistentData v6 = this.mStorage.readPersistentDataBlock();
	boolean v5 = phiInstruction;
	long v8 = LockSettingsService.getLong(""sp-handle"", 0, p1);
	long v7 = v8;
	byte[] v10 = SyntheticPasswordManager.loadState(""pwd"", v7, p1);
	int v9 = -1;
	long v18 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	int v17 = v18;
	boolean v20 = LockPatternUtils.isQualityAlphabeticPassword(v17);
	boolean v21 = LockPatternUtils.isQualityNumericPin(v17);
	int v19 = 3;
	int v4 = v19;
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getBoolean(Ljava/lang/String;ZI)Z","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkReadPermission(Ljava/lang/String;I)V > 1,2,4 @0 exception:5,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
26 = phi  25,6,
7 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_CONTACTS_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
8 = arraylength 7,
conditional branch(ge, to iindex=-1) 26,8,
43 = phi  6,42,
29 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsService, READ_PASSWORD_PROTECTED_SETTINGS, <Application,[Ljava/lang/String> >,
30 = arraylength 29,
conditional branch(ge, to iindex=-1) 43,30,
return,
8 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 6,2 @5 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
14 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,4 @11 exception:13,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
29 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,2 @18 exception:28,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
32 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getCredentialType(JI)I > 30,29,2 @24 exception:31,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
11 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @11 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @16 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,3 @19 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @22 exception:18,
22 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 20,19 @28 exception:21,
return 23,
conditional branch(eq, to iindex=-1) 32,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @33 exception:34,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 3,4,5,2 @6 exception:6,
8 = conversion(I) 7,
return 8,
37 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 35 @37 exception:36,
3 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityAlphabeticPassword(I)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityNumericPin(I)Z > 1 @8 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
monitorexit 4,
return 37,
conditional branch(ne, to iindex=-1) 14,15,
16 = phi  15,9,
return 16,","depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = ""lock_pattern_autolock"".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	long v2 = p0.getSyntheticPasswordHandleLocked(p1);
	int v3 = this.mSpManager.getCredentialType(v2, p1);
	int v4 = p0.getKeyguardStoredQuality(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getCredentialType(long p1, int p2){
	byte[] v1 = p0.loadState(""pwd"", p1, p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getCredentialType: encountered empty password data for user "");
	StringBuilder v4 = v1.append(p2);
	String v5 = v1.toString();
	int v6 = Slog.w(""SyntheticPasswordManager"", v5);
	return -1;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","public boolean getBoolean(String p1, boolean p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v3 = ""lock_pattern_autolock"".equals(p1);
	LockSettingsStorage$PersistentData v6 = this.mStorage.readPersistentDataBlock();
	boolean v5 = phiInstruction;
	long v8 = LockSettingsService.getLong(""sp-handle"", 0, p1);
	long v7 = v8;
	byte[] v10 = SyntheticPasswordManager.loadState(""pwd"", v7, p1);
	int v9 = -1;
	long v18 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	int v17 = v18;
	boolean v20 = LockPatternUtils.isQualityAlphabeticPassword(v17);
	boolean v21 = LockPatternUtils.isQualityNumericPin(v17);
	int v19 = 3;
	int v4 = v19;
	return phiInstruction;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getRecoverySecretTypes()[I","0","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoverySecretTypes()[I > 2 @2 exception:3,
return 4,","depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
","public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoverySecretTypes()[I","1","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoverySecretTypes()[I > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @5 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @9 exception:6,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 3,5,7 @13 exception:8,
return 9,
return 4,","depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
depth : 1
public [I getRecoverySecretTypes(){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	[I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3);
	return v4;
}
-----
","public [I getRecoverySecretTypes(){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
	[I v1 = v5;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoverySecretTypes()[I","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoverySecretTypes()[I > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @5 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @9 exception:6,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 3,5,7 @13 exception:8,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
6 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
11 = new <Application,[Ljava/lang/String>@1712 ,
14 = new <Application,[Ljava/lang/String>@2213 ,
16 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @24 exception:15,
arraystore 14[17] = 16,
19 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 3 @31 exception:18,
arraystore 14[20] = 19,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 6,21,11,22,14,17,17,17 @47 exception:23,
26 = invokeinterface < Application, Landroid/database/Cursor, getCount()I > 24 @51 exception:25,
conditional branch(ne, to iindex=-1) 26,17,
conditional branch(le, to iindex=-1) 26,20,
29 = invokeinterface < Application, Landroid/database/Cursor, moveToFirst()Z > 24 @105 exception:28,
31 = invokeinterface < Application, Landroid/database/Cursor, getColumnIndexOrThrow(Ljava/lang/String;)I > 24,10 @108 exception:30,
33 = invokeinterface < Application, Landroid/database/Cursor, isNull(I)Z > 24,31 @112 exception:32,
conditional branch(eq, to iindex=-1) 33,17,
35 = invokeinterface < Application, Landroid/database/Cursor, getString(I)Ljava/lang/String; > 24,31 @124 exception:34,
37 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 35 @128 exception:36,
conditional branch(eq, to iindex=-1) 37,17,
40 = invokevirtual < Application, Ljava/lang/String, split(Ljava/lang/String;)[Ljava/lang/String; > 35,38 @142 exception:39,
41 = arraylength 40,
42 = new <Primordial,[I>@14741 ,
68 = phi  65,17,
43 = arraylength 40,
conditional branch(ge, to iindex=-1) 68,43,
invokeinterface < Application, Landroid/database/Cursor, close()V > 24 @185 exception:72,
return 42,
return 9,
return 4,","depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
depth : 1
public [I getRecoverySecretTypes(){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	[I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3);
	return v4;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0);
	int v5 = v4.getCount();
	boolean v6 = v4.moveToFirst();
	int v7 = v4.getColumnIndexOrThrow(""secret_types"");
	boolean v8 = v4.isNull(v7);
	String v9 = v4.getString(v7);
	boolean v10 = TextUtils.isEmpty(v9);
	String v11 = v9.split("","");
	[I v11 = new [I(v11.length);
	v4.close();
	return v11;
}
-----
","public [I getRecoverySecretTypes(){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = UserHandle.getCallingUserId();
	int v15 = Binder.getCallingUid();
	SQLiteDatabase v17 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v18 = new String(4);
	String v19 = new String(2);
	String v20 = Integer.toString(v14);
	String v21 = Integer.toString(v15);
	Cursor v22 = v17.query(""recovery_service_metadata"", v18, ""user_id = ? AND uid = ?"", v19, 0, 0, 0);
	int v23 = v22.getCount();
	boolean v24 = v22.moveToFirst();
	int v25 = v22.getColumnIndexOrThrow(""secret_types"");
	boolean v26 = v22.isNull(v25);
	String v27 = v22.getString(v25);
	boolean v28 = TextUtils.isEmpty(v27);
	String v29 = v27.split("","");
	[I v30 = new [I(v29.length);
	v22.close();
	[I v16 = v30;
	[I v1 = v16;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getRecoverySecretTypes()[I","2","2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
4 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getRecoverySecretTypes()[I > 2 @2 exception:3,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @5 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @9 exception:6,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 3,5,7 @13 exception:8,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
6 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
11 = new <Application,[Ljava/lang/String>@1712 ,
14 = new <Application,[Ljava/lang/String>@2213 ,
16 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @24 exception:15,
arraystore 14[17] = 16,
19 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 3 @31 exception:18,
arraystore 14[20] = 19,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 6,21,11,22,14,17,17,17 @47 exception:23,
26 = invokeinterface < Application, Landroid/database/Cursor, getCount()I > 24 @51 exception:25,
conditional branch(ne, to iindex=-1) 26,17,
conditional branch(le, to iindex=-1) 26,20,
77 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
80 = new <Application,[Ljava/lang/Object>@7279 ,
82 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 26 @74 exception:81,
arraystore 80[17] = 82,
84 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @80 exception:83,
arraystore 80[20] = 84,
86 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @86 exception:85,
arraystore 80[13] = 86,
88 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 77,78,80 @92 exception:87,
90 = invokestatic < Application, Landroid/util/Log, wtf(Ljava/lang/String;Ljava/lang/String;)I > 27,88 @96 exception:89,
91 = new <Primordial,[I>@9917 ,
invokeinterface < Application, Landroid/database/Cursor, close()V > 24 @101 exception:92,
return 91,
return 9,
return 4,","depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
depth : 1
public [I getRecoverySecretTypes(){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	[I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3);
	return v4;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0);
	int v5 = v4.getCount();
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(v5);
	Integer v7 = Integer.valueOf(p1);
	Integer v8 = Integer.valueOf(p2);
	String v9 = String.format(Locale.US, ""%d deviceId entries found for userId=%d uid=%d. Should only ever be 0 or 1."", v5);
	int v10 = Log.wtf(""RecoverableKeyStoreDb"", v9);
	[I v10 = new [I(0);
	v4.close();
	return v10;
}
-----
","public [I getRecoverySecretTypes(){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = UserHandle.getCallingUserId();
	int v15 = Binder.getCallingUid();
	SQLiteDatabase v17 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v18 = new String(4);
	String v19 = new String(2);
	String v20 = Integer.toString(v14);
	String v21 = Integer.toString(v15);
	Cursor v22 = v17.query(""recovery_service_metadata"", v18, ""user_id = ? AND uid = ?"", v19, 0, 0, 0);
	int v23 = v22.getCount();
	Object v24 = new Object(3);
	Integer v25 = Integer.valueOf(v23);
	Integer v26 = Integer.valueOf(v14);
	Integer v27 = Integer.valueOf(v15);
	String v28 = String.format(Locale.US, ""%d deviceId entries found for userId=%d uid=%d. Should only ever be 0 or 1."", v24);
	int v29 = Log.wtf(""RecoverableKeyStoreDb"", v28);
	[I v30 = new [I(0);
	v22.close();
	[I v16 = v30;
	[I v1 = v16;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","userPresent(I)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportUnlock(I)V > 4,2 @5 exception:5,
return,","depth : 0
public void userPresent(int p1){
	p0.checkWritePermission(p1);
	this.mStrongAuth.reportUnlock(p1);
	return;
}
-----
","public void userPresent(int p1){
	p0.checkWritePermission(p1);
	this.mStrongAuth.reportUnlock(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","userPresent(I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportUnlock(I)V > 4,2 @5 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, requireStrongAuth(II)V > 1,3,2 @1 exception:4,
return,
return,","depth : 0
public void userPresent(int p1){
	p0.checkWritePermission(p1);
	this.mStrongAuth.reportUnlock(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void reportUnlock(int p1){
	p0.requireStrongAuth(0, p1);
	return;
}
-----
","public void userPresent(int p1){
	LockSettingsStrongAuth.requireStrongAuth(0, p1);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","closeSession(Ljava/lang/String;)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, closeSession(Ljava/lang/String;)V > 3,2 @2 exception:4,
return,","depth : 0
public void closeSession(String p1){
	this.mRecoverableKeyStoreManager.closeSession(p1);
	return;
}
-----
","public void closeSession(String p1){
	this.mRecoverableKeyStoreManager.closeSession(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","closeSession(Ljava/lang/String;)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, closeSession(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:8,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(ILjava/lang/String;)V > 7,9,2 @14 exception:10,
return,
return,","depth : 0
public void closeSession(String p1){
	this.mRecoverableKeyStoreManager.closeSession(p1);
	return;
}
-----
depth : 1
public void closeSession(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""invalid session"");
	int v3 = Binder.getCallingUid();
	this.mRecoverySessionStorage.remove(v3, p1);
	return;
}
-----
","public void closeSession(String p1){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v3 = Objects.requireNonNull(p1, ""invalid session"");
	int v4 = Binder.getCallingUid();
	this.mRecoverySessionStorage.remove(v4, p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","closeSession(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, closeSession(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:8,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(ILjava/lang/String;)V > 7,9,2 @14 exception:10,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 4,2 @2 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
return,
return,
return,","depth : 0
public void closeSession(String p1){
	this.mRecoverableKeyStoreManager.closeSession(p1);
	return;
}
-----
depth : 1
public void closeSession(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""invalid session"");
	int v3 = Binder.getCallingUid();
	this.mRecoverySessionStorage.remove(v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public void remove(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	return;
}
-----
","public void closeSession(String p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""invalid session"");
	int v15 = Binder.getCallingUid();
	Object v17 = this.mSessionsByUid.get(v15);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","closeSession(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, closeSession(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
7 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:8,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(ILjava/lang/String;)V > 7,9,2 @14 exception:10,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 4,2 @2 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
10 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 8,2 @11 exception:9,
11 = checkcast <Application,Ljava/util/ArrayList>10 <Application,Ljava/util/ArrayList>,
12 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$$ExternalSyntheticLambda0>@17,
invokespecial < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$$ExternalSyntheticLambda0, <init>(Ljava/lang/String;)V > 12,3 @19 exception:13,
15 = invokevirtual < Application, Ljava/util/ArrayList, removeIf(Ljava/util/function/Predicate;)Z > 11,12 @22 exception:14,
return,
return,
return,","depth : 0
public void closeSession(String p1){
	this.mRecoverableKeyStoreManager.closeSession(p1);
	return;
}
-----
depth : 1
public void closeSession(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""invalid session"");
	int v3 = Binder.getCallingUid();
	this.mRecoverySessionStorage.remove(v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public void remove(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	Object v2 = this.mSessionsByUid.get(p1);
	RecoverySessionStorage$$ExternalSyntheticLambda0 v2 = new RecoverySessionStorage$$ExternalSyntheticLambda0(p2);
	boolean v4 = v2.removeIf(v2);
	return;
}
-----
","public void closeSession(String p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""invalid session"");
	int v15 = Binder.getCallingUid();
	Object v17 = this.mSessionsByUid.get(v15);
	Object v18 = this.mSessionsByUid.get(v15);
	RecoverySessionStorage$$ExternalSyntheticLambda0 v19 = new RecoverySessionStorage$$ExternalSyntheticLambda0(p1);
	boolean v21 = v18.removeIf(v19);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","scheduleNonStrongBiometricIdleTimeout(I)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkBiometricPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, scheduleNonStrongBiometricIdleTimeout(I)V > 4,2 @5 exception:5,
return,","depth : 0
public void scheduleNonStrongBiometricIdleTimeout(int p1){
	p0.checkBiometricPermission();
	this.mStrongAuth.scheduleNonStrongBiometricIdleTimeout(p1);
	return;
}
-----
","public void scheduleNonStrongBiometricIdleTimeout(int p1){
	p0.checkBiometricPermission();
	this.mStrongAuth.scheduleNonStrongBiometricIdleTimeout(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","scheduleNonStrongBiometricIdleTimeout(I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkBiometricPermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, scheduleNonStrongBiometricIdleTimeout(I)V > 4,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @5 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @9 exception:8,
return,
return,","depth : 0
public void scheduleNonStrongBiometricIdleTimeout(int p1){
	p0.checkBiometricPermission();
	this.mStrongAuth.scheduleNonStrongBiometricIdleTimeout(p1);
	return;
}
-----
depth : 1
public void checkBiometricPermission(){
	return;
}
-----
depth : 1
public void scheduleNonStrongBiometricIdleTimeout(int p1){
	Message v1 = this.mHandler.obtainMessage(9, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","public void scheduleNonStrongBiometricIdleTimeout(int p1){
	Message v4 = this.mHandler.obtainMessage(9, p1, 0);
	v4.sendToTarget();
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","reportSuccessfulBiometricUnlock(ZI)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkBiometricPermission()V > 1 @0 exception:4,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulBiometricUnlock(ZI)V > 5,2,3 @5 exception:6,
return,","depth : 0
public void reportSuccessfulBiometricUnlock(boolean p1, int p2){
	p0.checkBiometricPermission();
	this.mStrongAuth.reportSuccessfulBiometricUnlock(p1, p2);
	return;
}
-----
","public void reportSuccessfulBiometricUnlock(boolean p1, int p2){
	p0.checkBiometricPermission();
	this.mStrongAuth.reportSuccessfulBiometricUnlock(p1, p2);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","reportSuccessfulBiometricUnlock(ZI)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkBiometricPermission()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulBiometricUnlock(ZI)V > 5,2,3 @5 exception:6,
conditional branch(eq, to iindex=-1) 2,4,
10 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
13 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 10,11,3,4 @7 exception:12,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 13 @11 exception:14,
goto (from iindex= 7 to iindex = 11),
return,
return,","depth : 0
public void reportSuccessfulBiometricUnlock(boolean p1, int p2){
	p0.checkBiometricPermission();
	this.mStrongAuth.reportSuccessfulBiometricUnlock(p1, p2);
	return;
}
-----
depth : 1
public void checkBiometricPermission(){
	return;
}
-----
depth : 1
public void reportSuccessfulBiometricUnlock(boolean p1, int p2){
	Message v1 = this.mHandler.obtainMessage(8, p2, 0);
	v1.sendToTarget();
	return;
}
-----
","public void reportSuccessfulBiometricUnlock(boolean p1, int p2){
	Message v4 = this.mHandler.obtainMessage(8, p2, 0);
	v4.sendToTarget();
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setRecoveryStatus(Ljava/lang/String;I)V","0","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoveryStatus(Ljava/lang/String;I)V > 4,2,3 @2 exception:5,
return,","depth : 0
public void setRecoveryStatus(String p1, int p2){
	this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
	return;
}
-----
","public void setRecoveryStatus(String p1, int p2){
	this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoveryStatus(Ljava/lang/String;I)V","1","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoveryStatus(Ljava/lang/String;I)V > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @5 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
10 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:9,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoveryStatus(ILjava/lang/String;I)I > 8,10,2,3 @14 exception:11,
13 = conversion(J) 12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,16,
return,
return,","depth : 0
public void setRecoveryStatus(String p1, int p2){
	this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
	return;
}
-----
depth : 1
public void setRecoveryStatus(String p1, int p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = this.mDatabase.setRecoveryStatus(v3, p1, p2);
	return;
}
-----
","public void setRecoveryStatus(String p1, int p2){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v3 = Objects.requireNonNull(p1, ""alias is null"");
	int v4 = Binder.getCallingUid();
	int v5 = this.mDatabase.setRecoveryStatus(v4, p1, p2);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoveryStatus(Ljava/lang/String;I)V","2","4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoveryStatus(Ljava/lang/String;I)V > 4,2,3 @2 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @5 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
10 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:9,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoveryStatus(ILjava/lang/String;I)I > 8,10,2,3 @14 exception:11,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
7 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
8 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 8 @8 exception:9,
11 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @11 exception:10,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/Integer;)V > 8,12,11 @18 exception:13,
15 = new <Application,[Ljava/lang/String>@2214 ,
17 = invokestatic < Application, Ljava/lang/String, valueOf(I)Ljava/lang/String; > 2 @24 exception:16,
arraystore 15[18] = 17,
arraystore 15[19] = 3,
23 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 7,20,8,21,15 @39 exception:22,
return 23,
13 = conversion(J) 12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,16,
return,
return,","depth : 0
public void setRecoveryStatus(String p1, int p2){
	this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
	return;
}
-----
depth : 1
public void setRecoveryStatus(String p1, int p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = this.mDatabase.setRecoveryStatus(v3, p1, p2);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public int setRecoveryStatus(int p1, String p2, int p3){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	Integer v3 = Integer.valueOf(p3);
	v1.put(""recovery_status"", v3);
	String v4 = new String(2);
	String v5 = String.valueOf(p1);
	int v6 = v1.update(""keys"", v1, ""uid = ? AND alias = ?"", v4);
	return v6;
}
-----
","public void setRecoveryStatus(String p1, int p2){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	int v15 = Binder.getCallingUid();
	SQLiteDatabase v17 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v18 = new ContentValues();
	Integer v20 = Integer.valueOf(p2);
	v18.put(""recovery_status"", v20);
	String v22 = new String(2);
	String v23 = String.valueOf(v15);
	int v24 = v17.update(""keys"", v18, ""uid = ? AND alias = ?"", v22);
	int v16 = v24;
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setServerParams([B)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setServerParams([B)V > 3,2 @2 exception:4,
return,","depth : 0
public void setServerParams(byte[] p1){
	this.mRecoverableKeyStoreManager.setServerParams(p1);
	return;
}
-----
","public void setServerParams(byte[] p1){
	this.mRecoverableKeyStoreManager.setServerParams(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setServerParams([B)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setServerParams([B)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @3 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getServerParams(II)[B > 8,5,7 @13 exception:9,
12 = invokestatic < Application, Ljava/util/Arrays, equals([B[B)Z > 2,10 @17 exception:11,
conditional branch(eq, to iindex=-1) 12,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setServerParams(II[B)J > 15,5,7,2 @33 exception:16,
19 = binaryop(lt) 17 , 18,
conditional branch(lt, to iindex=-1) 19,14,
conditional branch(ne, to iindex=-1) 10,14,
24 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 24,5,7 @53 exception:25,
conditional branch(eq, to iindex=-1) 26,14,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 30,5,7,31 @62 exception:32,
36 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 13,34 @67 exception:35,
goto (from iindex= 34 to iindex = 6),
return,
return,","depth : 0
public void setServerParams(byte[] p1){
	this.mRecoverableKeyStoreManager.setServerParams(p1);
	return;
}
-----
depth : 1
public void setServerParams(byte[] p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	byte[] v4 = this.mDatabase.getServerParams(v2, v3);
	boolean v5 = Arrays.equals(p1, v4);
	long v6 = this.mDatabase.setServerParams(v2, v3, p1);
	Long v7 = this.mDatabase.getSnapshotVersion(v2, v3);
	long v8 = this.mDatabase.setShouldCreateSnapshot(v2, v3, 1);
	int v9 = Log.i(""RecoverableKeyStoreMgr"", ""Updated server params. Snapshot must be updated"");
	return;
}
-----
","public void setServerParams(byte[] p1){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	byte[] v5 = this.mDatabase.getServerParams(v3, v4);
	boolean v6 = Arrays.equals(p1, v5);
	long v7 = this.mDatabase.setServerParams(v3, v4, p1);
	Long v8 = this.mDatabase.getSnapshotVersion(v3, v4);
	long v9 = this.mDatabase.setShouldCreateSnapshot(v3, v4, 1);
	int v10 = Log.i(""RecoverableKeyStoreMgr"", ""Updated server params. Snapshot must be updated"");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setServerParams([B)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setServerParams([B)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @3 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getServerParams(II)[B > 8,5,7 @13 exception:9,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getBytes(IILjava/lang/String;)[B > 1,2,3,4 @3 exception:5,
return 6,
12 = invokestatic < Application, Ljava/util/Arrays, equals([B[B)Z > 2,10 @17 exception:11,
conditional branch(eq, to iindex=-1) 12,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setServerParams(II[B)J > 15,5,7,2 @33 exception:16,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setBytes(IILjava/lang/String;[B)J > 1,2,3,5,4 @3 exception:6,
return 7,
19 = binaryop(lt) 17 , 18,
conditional branch(lt, to iindex=-1) 19,14,
conditional branch(ne, to iindex=-1) 10,14,
24 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 24,5,7 @53 exception:25,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getLong(IILjava/lang/String;)Ljava/lang/Long; > 1,2,3,4 @3 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 26,14,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 30,5,7,31 @62 exception:32,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setLong(IILjava/lang/String;J)J > 1,2,3,9,8 @14 exception:10,
return 11,
36 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 13,34 @67 exception:35,
goto (from iindex= 34 to iindex = 6),
return,
return,","depth : 0
public void setServerParams(byte[] p1){
	this.mRecoverableKeyStoreManager.setServerParams(p1);
	return;
}
-----
depth : 1
public void setServerParams(byte[] p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	byte[] v4 = this.mDatabase.getServerParams(v2, v3);
	boolean v5 = Arrays.equals(p1, v4);
	long v6 = this.mDatabase.setServerParams(v2, v3, p1);
	Long v7 = this.mDatabase.getSnapshotVersion(v2, v3);
	long v8 = this.mDatabase.setShouldCreateSnapshot(v2, v3, 1);
	int v9 = Log.i(""RecoverableKeyStoreMgr"", ""Updated server params. Snapshot must be updated"");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public byte[] getServerParams(int p1, int p2){
	byte[] v1 = p0.getBytes(p1, p2, ""server_params"");
	return v1;
}
-----
depth : 2
public long setServerParams(int p1, int p2, byte[] p3){
	long v1 = p0.setBytes(p1, p2, ""server_params"", p3);
	return v1;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, ""snapshot_version"");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
","public void setServerParams(byte[] p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = UserHandle.getCallingUserId();
	int v15 = Binder.getCallingUid();
	byte[] v17 = RecoverableKeyStoreDb.getBytes(v14, v15, ""server_params"");
	byte[] v16 = v17;
	boolean v18 = Arrays.equals(p1, v16);
	long v20 = RecoverableKeyStoreDb.setBytes(v14, v15, ""server_params"", p1);
	long v19 = v20;
	Long v22 = RecoverableKeyStoreDb.getLong(v14, v15, ""snapshot_version"");
	Long v21 = v22;
	long v24 = RecoverableKeyStoreDb.setLong(v14, v15, ""should_create_snapshot"", phiInstruction);
	long v23 = v24;
	int v25 = Log.i(""RecoverableKeyStoreMgr"", ""Updated server params. Snapshot must be updated"");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setServerParams([B)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setServerParams([B)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @3 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:6,
8 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
10 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getServerParams(II)[B > 8,5,7 @13 exception:9,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getBytes(IILjava/lang/String;)[B > 1,2,3,4 @3 exception:5,
return 6,
12 = invokestatic < Application, Ljava/util/Arrays, equals([B[B)Z > 2,10 @17 exception:11,
conditional branch(eq, to iindex=-1) 12,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
17 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setServerParams(II[B)J > 15,5,7,2 @33 exception:16,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setBytes(IILjava/lang/String;[B)J > 1,2,3,5,4 @3 exception:6,
return 7,
19 = binaryop(lt) 17 , 18,
conditional branch(lt, to iindex=-1) 19,14,
conditional branch(ne, to iindex=-1) 10,14,
24 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
26 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 24,5,7 @53 exception:25,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getLong(IILjava/lang/String;)Ljava/lang/Long; > 1,2,3,4 @3 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 26,14,
30 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 30,5,7,31 @62 exception:32,
conditional branch(eq, to iindex=-1) 4,5,
8 = phi  7,6,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setLong(IILjava/lang/String;J)J > 1,2,3,9,8 @14 exception:10,
return 11,
36 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 13,34 @67 exception:35,
goto (from iindex= 34 to iindex = 6),
return,
return,","depth : 0
public void setServerParams(byte[] p1){
	this.mRecoverableKeyStoreManager.setServerParams(p1);
	return;
}
-----
depth : 1
public void setServerParams(byte[] p1){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	byte[] v4 = this.mDatabase.getServerParams(v2, v3);
	boolean v5 = Arrays.equals(p1, v4);
	long v6 = this.mDatabase.setServerParams(v2, v3, p1);
	Long v7 = this.mDatabase.getSnapshotVersion(v2, v3);
	long v8 = this.mDatabase.setShouldCreateSnapshot(v2, v3, 1);
	int v9 = Log.i(""RecoverableKeyStoreMgr"", ""Updated server params. Snapshot must be updated"");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public byte[] getServerParams(int p1, int p2){
	byte[] v1 = p0.getBytes(p1, p2, ""server_params"");
	return v1;
}
-----
depth : 2
public long setServerParams(int p1, int p2, byte[] p3){
	long v1 = p0.setBytes(p1, p2, ""server_params"", p3);
	return v1;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, ""snapshot_version"");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
","public void setServerParams(byte[] p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = UserHandle.getCallingUserId();
	int v15 = Binder.getCallingUid();
	byte[] v17 = RecoverableKeyStoreDb.getBytes(v14, v15, ""server_params"");
	byte[] v16 = v17;
	boolean v18 = Arrays.equals(p1, v16);
	long v20 = RecoverableKeyStoreDb.setBytes(v14, v15, ""server_params"", p1);
	long v19 = v20;
	Long v22 = RecoverableKeyStoreDb.getLong(v14, v15, ""snapshot_version"");
	Long v21 = v22;
	long v24 = RecoverableKeyStoreDb.setLong(v14, v15, ""should_create_snapshot"", phiInstruction);
	long v23 = v24;
	int v25 = Log.i(""RecoverableKeyStoreMgr"", ""Updated server params. Snapshot must be updated"");
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
14 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 12,3 @11 exception:13,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
","public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
14 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 12,3 @11 exception:13,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
return 40,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mHandler, <Application,Landroid/os/Handler> > 1,
3 = new <Application,Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3>@2,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$$ExternalSyntheticLambda3, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Landroid/os/Handler, postDelayed(Ljava/lang/Runnable;J)Z > 2,3,5 @9 exception:6,
return,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 1
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 1
public void scheduleGc(){
	LockSettingsService$$ExternalSyntheticLambda3 v0 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v2 = this.mHandler.postDelayed(v0, 2000);
	return;
}
-----
","public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	boolean v4 = LockSettingsService.isCredentialSharableWithParent(p2);
	boolean v5 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p2);
	boolean v3 = phiInstruction;
	UserInfo v6 = this.mUserManager.getProfileParent(p2);
	boolean v8 = p1.isNone();
	ContentResolver v9 = this.mContext.getContentResolver();
	int v10 = this.mInjector.settingsGlobalGetInt(v9, ""device_provisioned"", 0);
	VerifyCredentialResponse v11 = LockSettingsService.spBasedDoVerifyCredential(p1, UserInfo.id, 0, p3);
	LockSettingsStorage$CredentialHash v12 = this.mStorage.readCredentialHash(UserInfo.id);
	boolean v13 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v19 = p1.getType();
	VerifyCredentialResponse v7 = VerifyCredentialResponse.ERROR;
	int v23 = this.mResponseCode;
	byte[] v25 = this.mStorage.readChildProfileLock(p2);
	byte[] v26 = Arrays.copyOfRange(v25, 0, 12);
	byte[] v27 = Arrays.copyOfRange(v25, 12, v25.length);
	StringBuilder v28 = new StringBuilder();
	StringBuilder v30 = v28.append(""profile_key_name_decrypt_"");
	StringBuilder v31 = v28.append(p2);
	String v32 = v28.toString();
	Key v33 = this.mJavaKeyStore.getKey(v32, 0);
	Cipher v34 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v35 = new GCMParameterSpec(128,v26);
	v34.init(2, v33, v35);
	byte[] v38 = v34.doFinal(v27);
	LockscreenCredential v39 = LockscreenCredential.createManagedPassword(v38);
	Arrays.fill(v38, 0);
	this.mManagedProfilePasswordCache.storePassword(p2, v39);
	LockscreenCredential v24 = v39;
	boolean v43 = v24.isNone();
	ContentResolver v44 = this.mContext.getContentResolver();
	int v45 = this.mInjector.settingsGlobalGetInt(v44, ""device_provisioned"", 0);
	VerifyCredentialResponse v46 = LockSettingsService.spBasedDoVerifyCredential(v24, p2, 0, p3);
	LockSettingsStorage$CredentialHash v47 = this.mStorage.readCredentialHash(p2);
	boolean v48 = v24.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v54 = v24.getType();
	VerifyCredentialResponse v42 = VerifyCredentialResponse.ERROR;
	LockSettingsService$$ExternalSyntheticLambda3 v59 = new LockSettingsService$$ExternalSyntheticLambda3();
	boolean v61 = this.mHandler.postDelayed(v59, 2000);
	return v42;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
14 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 12,3 @11 exception:13,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(eq, to iindex=-1) 19,8,
return 17,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	return v4;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 1
public int getResponseCode(){
	return this.mResponseCode;
}
-----
","public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	boolean v4 = LockSettingsService.isCredentialSharableWithParent(p2);
	boolean v5 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p2);
	boolean v3 = phiInstruction;
	UserInfo v6 = this.mUserManager.getProfileParent(p2);
	boolean v8 = p1.isNone();
	ContentResolver v9 = this.mContext.getContentResolver();
	int v10 = this.mInjector.settingsGlobalGetInt(v9, ""device_provisioned"", 0);
	VerifyCredentialResponse v11 = LockSettingsService.spBasedDoVerifyCredential(p1, UserInfo.id, 0, p3);
	LockSettingsStorage$CredentialHash v12 = this.mStorage.readCredentialHash(UserInfo.id);
	boolean v13 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v19 = p1.getType();
	VerifyCredentialResponse v7 = VerifyCredentialResponse.ERROR;
	int v23 = this.mResponseCode;
	return v7;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
14 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 12,3 @11 exception:13,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readFile(Ljava/lang/String;)[B > 1,4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
5 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 1,3 @3 exception:4,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 2,6,5 @8 exception:7,
return 2,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = invokevirtual < Application, Landroid/util/SparseArray, contains(I)Z > 5,2 @5 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
11 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 9,2 @15 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
14 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @27 exception:13,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
18 = invokevirtual < Application, Ljava/security/KeyStore, getProvider()Ljava/security/Provider; > 16 @35 exception:17,
20 = invokestatic < Application, Ljavax/crypto/KeyGenerator, getInstance(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/KeyGenerator; > 15,18 @39 exception:19,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
invokespecial < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, <init>(Ljava/lang/String;I)V > 21,14,22 @46 exception:23,
26 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setKeySize(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 21,24 @51 exception:25,
28 = new <Application,[Ljava/lang/String>@5729 ,
31 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 26,28 @61 exception:30,
33 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, keyNamespace()I > @65 exception:32,
35 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setNamespace(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 31,33 @69 exception:34,
37 = new <Application,[Ljava/lang/String>@7529 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 35,37 @79 exception:38,
41 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationRequired(Z)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 39,29 @84 exception:40,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
44 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationValidityDurationSeconds(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 41,42 @90 exception:43,
46 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, build()Landroid/security/keystore/KeyGenParameterSpec; > 44 @94 exception:45,
invokevirtual < Application, Ljavax/crypto/KeyGenerator, init(Ljava/security/spec/AlgorithmParameterSpec;)V > 20,46 @98 exception:47,
49 = invokevirtual < Application, Ljavax/crypto/KeyGenerator, generateKey()Ljavax/crypto/SecretKey; > 20 @101 exception:48,
62 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 60 @107 exception:61,
74 = getCaughtException ,
77 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 56,75,74 @150 exception:76,
monitorexit 4,
return,
return 40,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance(""AES/GCM/NoPadding"");
	int v18 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot encrypt"", caughtException);
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	UserManager v5 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v6 = v5.isCredentialSharableWithParent();
	boolean v4 = v6;
	boolean v8 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v7 = v8;
	boolean v3 = phiInstruction;
	UserInfo v9 = this.mUserManager.getProfileParent(p2);
	boolean v11 = p1.isNone();
	ContentResolver v12 = this.mContext.getContentResolver();
	int v14 = Settings$Global.getInt(v12, ""device_provisioned"", 0);
	int v13 = v14;
	boolean v16 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v25 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v26 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v27 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v28 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v27, v26, p1, p2, p3);
	int v29 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v30 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v30);
	IGateKeeperService v32 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v33 = this.mSpManager.verifyChallenge(v32, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v34 = v33.getResponseCode();
	VerifyCredentialResponse v15 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v37 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v38 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v39 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v36 = v39;
	int v41 = LockscreenCredential.getType();
	int v42 = LockscreenCredential.getType();
	boolean v40 = phiInstruction;
	boolean v44 = p1.isNone();
	boolean v45 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v47 = LockSettingsService.getGateKeeperService();
	byte[] v48 = p1.getCredential();
	GateKeeperResponse v49 = v47.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v48);
	VerifyCredentialResponse v51 = LockSettingsService.convertResponse(phiInstruction);
	boolean v52 = phiInstruction.getShouldReEnroll();
	int v53 = v51.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v57 = p1.getCredential();
	LockSettingsService.unlockKeystore(v57, p2);
	byte[] v65 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v65);
	boolean v67 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v69 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v43 = v51;
	int v71 = this.mResponseCode;
	Message v73 = this.mHandler.obtainMessage(5, p2, 0);
	v73.sendToTarget();
	VerifyCredentialResponse v10 = v43;
	int v75 = v10.getResponseCode();
	String v78 = LockSettingsStorage.getChildProfileLockFile(p1);
	byte[] v79 = LockSettingsStorage.readFile(v78);
	byte[] v77 = v79;
	byte[] v80 = Arrays.copyOfRange(v77, 0, 12);
	byte[] v81 = Arrays.copyOfRange(v77, 12, v77.length);
	StringBuilder v82 = new StringBuilder();
	StringBuilder v84 = v82.append(""profile_key_name_decrypt_"");
	StringBuilder v85 = v82.append(p2);
	String v86 = v82.toString();
	Key v87 = this.mJavaKeyStore.getKey(v86, 0);
	Cipher v88 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v89 = new GCMParameterSpec(128,v80);
	v88.init(2, v87, v89);
	byte[] v92 = v88.doFinal(v81);
	LockscreenCredential v94 = new LockscreenCredential(4,v95);
	byte[] v95 = Arrays.copyOf(v92, v92.length);
	LockscreenCredential v93 = v94;
	Arrays.fill(v92, 0);
	boolean v99 = this.mEncryptedPasswords.contains(p1);
	UserInfo v100 = this.mUserManager.getProfileParent(p1);
	String v101 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v102 = this.mKeyStore.getProvider();
	KeyGenerator v103 = KeyGenerator.getInstance(""AES"", v102);
	KeyGenParameterSpec$Builder v104 = new KeyGenParameterSpec$Builder(v101,3);
	KeyGenParameterSpec$Builder v106 = v104.setKeySize(256);
	String v107 = new String(1);
	KeyGenParameterSpec$Builder v108 = v106.setBlockModes(v107);
	int v109 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v110 = v108.setNamespace(v109);
	String v111 = new String(1);
	KeyGenParameterSpec$Builder v112 = v110.setEncryptionPaddings(v111);
	KeyGenParameterSpec$Builder v113 = v112.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v114 = v113.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v115 = v114.build();
	v103.init(v115);
	SecretKey v117 = v103.generateKey();
	Cipher v118 = Cipher.getInstance(""AES/GCM/NoPadding"");
	LockscreenCredential v76 = v93;
	boolean v121 = v76.isNone();
	ContentResolver v122 = this.mContext.getContentResolver();
	int v124 = Settings$Global.getInt(v122, ""device_provisioned"", 0);
	int v123 = v124;
	boolean v126 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v135 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v136 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v137 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v138 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v137, v136, p1, p2, p3);
	int v139 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v140 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v140);
	IGateKeeperService v142 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v143 = this.mSpManager.verifyChallenge(v142, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v144 = v143.getResponseCode();
	VerifyCredentialResponse v125 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v147 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v148 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v149 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v146 = v149;
	int v151 = LockscreenCredential.getType();
	int v152 = LockscreenCredential.getType();
	boolean v150 = phiInstruction;
	boolean v154 = p1.isNone();
	boolean v155 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v157 = LockSettingsService.getGateKeeperService();
	byte[] v158 = p1.getCredential();
	GateKeeperResponse v159 = v157.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v158);
	VerifyCredentialResponse v161 = LockSettingsService.convertResponse(phiInstruction);
	boolean v162 = phiInstruction.getShouldReEnroll();
	int v163 = v161.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v167 = p1.getCredential();
	LockSettingsService.unlockKeystore(v167, p2);
	byte[] v175 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v175);
	boolean v177 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v179 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v153 = v161;
	int v181 = this.mResponseCode;
	Message v183 = this.mHandler.obtainMessage(5, p2, 0);
	v183.sendToTarget();
	VerifyCredentialResponse v120 = v153;
	p0.scheduleGc();
	return v120;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
14 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 12,3 @11 exception:13,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readFile(Ljava/lang/String;)[B > 1,4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
5 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 1,3 @3 exception:4,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 2,6,5 @8 exception:7,
return 2,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = invokevirtual < Application, Landroid/util/SparseArray, contains(I)Z > 5,2 @5 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
11 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 9,2 @15 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
14 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @27 exception:13,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
18 = invokevirtual < Application, Ljava/security/KeyStore, getProvider()Ljava/security/Provider; > 16 @35 exception:17,
20 = invokestatic < Application, Ljavax/crypto/KeyGenerator, getInstance(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/KeyGenerator; > 15,18 @39 exception:19,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
invokespecial < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, <init>(Ljava/lang/String;I)V > 21,14,22 @46 exception:23,
26 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setKeySize(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 21,24 @51 exception:25,
28 = new <Application,[Ljava/lang/String>@5729 ,
31 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 26,28 @61 exception:30,
33 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, keyNamespace()I > @65 exception:32,
35 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setNamespace(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 31,33 @69 exception:34,
37 = new <Application,[Ljava/lang/String>@7529 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 35,37 @79 exception:38,
41 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationRequired(Z)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 39,29 @84 exception:40,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
44 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationValidityDurationSeconds(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 41,42 @90 exception:43,
46 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, build()Landroid/security/keystore/KeyGenParameterSpec; > 44 @94 exception:45,
invokevirtual < Application, Ljavax/crypto/KeyGenerator, init(Ljava/security/spec/AlgorithmParameterSpec;)V > 20,46 @98 exception:47,
49 = invokevirtual < Application, Ljavax/crypto/KeyGenerator, generateKey()Ljavax/crypto/SecretKey; > 20 @101 exception:48,
62 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 60 @107 exception:61,
74 = getCaughtException ,
77 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 56,75,74 @150 exception:76,
monitorexit 4,
return,
return 40,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance(""AES/GCM/NoPadding"");
	int v18 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot encrypt"", caughtException);
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	UserManager v5 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v6 = v5.isCredentialSharableWithParent();
	boolean v4 = v6;
	boolean v8 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v7 = v8;
	boolean v3 = phiInstruction;
	UserInfo v9 = this.mUserManager.getProfileParent(p2);
	boolean v11 = p1.isNone();
	ContentResolver v12 = this.mContext.getContentResolver();
	int v14 = Settings$Global.getInt(v12, ""device_provisioned"", 0);
	int v13 = v14;
	boolean v16 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v25 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v26 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v27 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v28 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v27, v26, p1, p2, p3);
	int v29 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v30 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v30);
	IGateKeeperService v32 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v33 = this.mSpManager.verifyChallenge(v32, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v34 = v33.getResponseCode();
	VerifyCredentialResponse v15 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v37 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v38 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v39 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v36 = v39;
	int v41 = LockscreenCredential.getType();
	int v42 = LockscreenCredential.getType();
	boolean v40 = phiInstruction;
	boolean v44 = p1.isNone();
	boolean v45 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v47 = LockSettingsService.getGateKeeperService();
	byte[] v48 = p1.getCredential();
	GateKeeperResponse v49 = v47.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v48);
	VerifyCredentialResponse v51 = LockSettingsService.convertResponse(phiInstruction);
	boolean v52 = phiInstruction.getShouldReEnroll();
	int v53 = v51.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v57 = p1.getCredential();
	LockSettingsService.unlockKeystore(v57, p2);
	byte[] v65 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v65);
	boolean v67 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v69 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v43 = v51;
	int v71 = this.mResponseCode;
	Message v73 = this.mHandler.obtainMessage(5, p2, 0);
	v73.sendToTarget();
	VerifyCredentialResponse v10 = v43;
	int v75 = v10.getResponseCode();
	String v78 = LockSettingsStorage.getChildProfileLockFile(p1);
	byte[] v79 = LockSettingsStorage.readFile(v78);
	byte[] v77 = v79;
	byte[] v80 = Arrays.copyOfRange(v77, 0, 12);
	byte[] v81 = Arrays.copyOfRange(v77, 12, v77.length);
	StringBuilder v82 = new StringBuilder();
	StringBuilder v84 = v82.append(""profile_key_name_decrypt_"");
	StringBuilder v85 = v82.append(p2);
	String v86 = v82.toString();
	Key v87 = this.mJavaKeyStore.getKey(v86, 0);
	Cipher v88 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v89 = new GCMParameterSpec(128,v80);
	v88.init(2, v87, v89);
	byte[] v92 = v88.doFinal(v81);
	LockscreenCredential v94 = new LockscreenCredential(4,v95);
	byte[] v95 = Arrays.copyOf(v92, v92.length);
	LockscreenCredential v93 = v94;
	Arrays.fill(v92, 0);
	boolean v99 = this.mEncryptedPasswords.contains(p1);
	UserInfo v100 = this.mUserManager.getProfileParent(p1);
	String v101 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v102 = this.mKeyStore.getProvider();
	KeyGenerator v103 = KeyGenerator.getInstance(""AES"", v102);
	KeyGenParameterSpec$Builder v104 = new KeyGenParameterSpec$Builder(v101,3);
	KeyGenParameterSpec$Builder v106 = v104.setKeySize(256);
	String v107 = new String(1);
	KeyGenParameterSpec$Builder v108 = v106.setBlockModes(v107);
	int v109 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v110 = v108.setNamespace(v109);
	String v111 = new String(1);
	KeyGenParameterSpec$Builder v112 = v110.setEncryptionPaddings(v111);
	KeyGenParameterSpec$Builder v113 = v112.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v114 = v113.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v115 = v114.build();
	v103.init(v115);
	SecretKey v117 = v103.generateKey();
	Cipher v118 = Cipher.getInstance(""AES/GCM/NoPadding"");
	LockscreenCredential v76 = v93;
	boolean v121 = v76.isNone();
	ContentResolver v122 = this.mContext.getContentResolver();
	int v124 = Settings$Global.getInt(v122, ""device_provisioned"", 0);
	int v123 = v124;
	boolean v126 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v135 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v136 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v137 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v138 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v137, v136, p1, p2, p3);
	int v139 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v140 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v140);
	IGateKeeperService v142 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v143 = this.mSpManager.verifyChallenge(v142, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v144 = v143.getResponseCode();
	VerifyCredentialResponse v125 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v147 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v148 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v149 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v146 = v149;
	int v151 = LockscreenCredential.getType();
	int v152 = LockscreenCredential.getType();
	boolean v150 = phiInstruction;
	boolean v154 = p1.isNone();
	boolean v155 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v157 = LockSettingsService.getGateKeeperService();
	byte[] v158 = p1.getCredential();
	GateKeeperResponse v159 = v157.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v158);
	VerifyCredentialResponse v161 = LockSettingsService.convertResponse(phiInstruction);
	boolean v162 = phiInstruction.getShouldReEnroll();
	int v163 = v161.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v167 = p1.getCredential();
	LockSettingsService.unlockKeystore(v167, p2);
	byte[] v175 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v175);
	boolean v177 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v179 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v153 = v161;
	int v181 = this.mResponseCode;
	Message v183 = this.mHandler.obtainMessage(5, p2, 0);
	v183.sendToTarget();
	VerifyCredentialResponse v120 = v153;
	p0.scheduleGc();
	return v120;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithUnifiedLock(I)Z > 1,3 @3 exception:6,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isCredentialSharableWithParent(I)Z > 1,2 @0 exception:3,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getUserManagerFromCache(I)Landroid/os/UserManager; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Landroid/os/UserManager, isCredentialSharableWithParent()Z > 4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSeparateProfileChallengeEnabledInternal(I)Z > 1,2 @6 exception:6,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSeparateChallengeLock, <Application,Ljava/lang/Object> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getBoolean(Ljava/lang/String;ZI)Z > 4,5,6,2 @8 exception:7,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 7 to iindex = 2),
12 = phi  11,5,
return 12,
conditional branch(eq, to iindex=-1) 7,8,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mUserManager, <Application,Landroid/os/UserManager> > 1,
14 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 12,3 @11 exception:13,
15 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 14,
17 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,15,8,4 @18 exception:16,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
19 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 17 @22 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
21 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getDecryptedPasswordForTiedProfile(I)Lcom/android/internal/widget/LockscreenCredential; > 1,3 @29 exception:20,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readChildProfileLock(I)[B > 3,2 @2 exception:4,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getChildProfileLockFile(I)Ljava/lang/String; > 1,2 @0 exception:3,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readFile(Ljava/lang/String;)[B > 1,4 @4 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 5,6,
12 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,6,10 @11 exception:11,
13 = arraylength 5,
15 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 5,10,13 @16 exception:14,
16 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mJavaKeyStore, <Application,Ljava/security/KeyStore> > 1,
17 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @30 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,2 @33 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @36 exception:24,
27 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 16,25,6 @41 exception:26,
28 = checkcast <Application,Ljavax/crypto/SecretKey>27 <Application,Ljavax/crypto/SecretKey>,
31 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 29 @49 exception:30,
33 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@54,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 33,34,12 @58 exception:35,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 31,32,28,33 @61 exception:36,
38 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 31,15 @64 exception:37,
40 = invokestatic < Application, Lcom/android/internal/widget/LockscreenCredential, createManagedPassword([B)Lcom/android/internal/widget/LockscreenCredential; > 38 @68 exception:39,
2 = new <Application,Lcom/android/internal/widget/LockscreenCredential>@0,
3 = arraylength 1,
5 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 1,3 @3 exception:4,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, <init>(I[B)V > 2,6,5 @8 exception:7,
return 2,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 38,6 @72 exception:41,
42 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, storePassword(ILcom/android/internal/widget/LockscreenCredential;)V > 42,2,40 @77 exception:43,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
7 = invokevirtual < Application, Landroid/util/SparseArray, contains(I)Z > 5,2 @5 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mUserManager, <Application,Landroid/os/UserManager> > 1,
11 = invokevirtual < Application, Landroid/os/UserManager, getProfileParent(I)Landroid/content/pm/UserInfo; > 9,2 @15 exception:10,
conditional branch(eq, to iindex=-1) 11,8,
12 = getfield < Application, Landroid/content/pm/UserInfo, id, <Primordial,I> > 11,
conditional branch(eq, to iindex=-1) 12,8,
14 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @27 exception:13,
16 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
18 = invokevirtual < Application, Ljava/security/KeyStore, getProvider()Ljava/security/Provider; > 16 @35 exception:17,
20 = invokestatic < Application, Ljavax/crypto/KeyGenerator, getInstance(Ljava/lang/String;Ljava/security/Provider;)Ljavax/crypto/KeyGenerator; > 15,18 @39 exception:19,
21 = new <Application,Landroid/security/keystore/KeyGenParameterSpec$Builder>@43,
invokespecial < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, <init>(Ljava/lang/String;I)V > 21,14,22 @46 exception:23,
26 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setKeySize(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 21,24 @51 exception:25,
28 = new <Application,[Ljava/lang/String>@5729 ,
31 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setBlockModes([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 26,28 @61 exception:30,
33 = invokestatic < Application, Lcom/android/server/locksettings/SyntheticPasswordCrypto, keyNamespace()I > @65 exception:32,
35 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setNamespace(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 31,33 @69 exception:34,
37 = new <Application,[Ljava/lang/String>@7529 ,
39 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setEncryptionPaddings([Ljava/lang/String;)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 35,37 @79 exception:38,
41 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationRequired(Z)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 39,29 @84 exception:40,
42 = getstatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, CACHE_TIMEOUT_SECONDS, <Primordial,I> >,
44 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, setUserAuthenticationValidityDurationSeconds(I)Landroid/security/keystore/KeyGenParameterSpec$Builder; > 41,42 @90 exception:43,
46 = invokevirtual < Application, Landroid/security/keystore/KeyGenParameterSpec$Builder, build()Landroid/security/keystore/KeyGenParameterSpec; > 44 @94 exception:45,
invokevirtual < Application, Ljavax/crypto/KeyGenerator, init(Ljava/security/spec/AlgorithmParameterSpec;)V > 20,46 @98 exception:47,
49 = invokevirtual < Application, Ljavax/crypto/KeyGenerator, generateKey()Ljavax/crypto/SecretKey; > 20 @101 exception:48,
62 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 60 @107 exception:61,
74 = getCaughtException ,
77 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 56,75,74 @150 exception:76,
monitorexit 4,
return,
return 40,
23 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,21,3,8,4 @33 exception:22,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, scheduleGc()V > 1 @37 exception:42,
return 23,","depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""profile_key_name_decrypt_"");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance(""AES"", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance(""AES/GCM/NoPadding"");
	int v18 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot encrypt"", caughtException);
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
","public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	UserManager v5 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v6 = v5.isCredentialSharableWithParent();
	boolean v4 = v6;
	boolean v8 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1);
	boolean v7 = v8;
	boolean v3 = phiInstruction;
	UserInfo v9 = this.mUserManager.getProfileParent(p2);
	boolean v11 = p1.isNone();
	ContentResolver v12 = this.mContext.getContentResolver();
	int v14 = Settings$Global.getInt(v12, ""device_provisioned"", 0);
	int v13 = v14;
	boolean v16 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v25 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v26 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v27 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v28 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v27, v26, p1, p2, p3);
	int v29 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v30 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v30);
	IGateKeeperService v32 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v33 = this.mSpManager.verifyChallenge(v32, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v34 = v33.getResponseCode();
	VerifyCredentialResponse v15 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v37 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v38 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v36 = v38;
	int v40 = LockscreenCredential.getType();
	int v41 = LockscreenCredential.getType();
	boolean v39 = phiInstruction;
	boolean v43 = p1.isNone();
	boolean v44 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v46 = LockSettingsService.getGateKeeperService();
	byte[] v47 = p1.getCredential();
	GateKeeperResponse v48 = v46.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v47);
	VerifyCredentialResponse v50 = LockSettingsService.convertResponse(phiInstruction);
	boolean v51 = phiInstruction.getShouldReEnroll();
	int v52 = v50.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v56 = p1.getCredential();
	LockSettingsService.unlockKeystore(v56, p2);
	byte[] v64 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v64);
	boolean v66 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v68 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v42 = v50;
	int v70 = this.mResponseCode;
	Message v72 = this.mHandler.obtainMessage(5, p2, 0);
	v72.sendToTarget();
	VerifyCredentialResponse v10 = v42;
	int v74 = v10.getResponseCode();
	String v77 = LockSettingsStorage.getChildProfileLockFile(p1);
	byte[] v78 = LockSettingsStorage.readFile(v77);
	byte[] v76 = v78;
	byte[] v79 = Arrays.copyOfRange(v76, 0, 12);
	byte[] v80 = Arrays.copyOfRange(v76, 12, v76.length);
	StringBuilder v81 = new StringBuilder();
	StringBuilder v83 = v81.append(""profile_key_name_decrypt_"");
	StringBuilder v84 = v81.append(p2);
	String v85 = v81.toString();
	Key v86 = this.mJavaKeyStore.getKey(v85, 0);
	Cipher v87 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v88 = new GCMParameterSpec(128,v79);
	v87.init(2, v86, v88);
	byte[] v91 = v87.doFinal(v80);
	LockscreenCredential v93 = new LockscreenCredential(4,v94);
	byte[] v94 = Arrays.copyOf(v91, v91.length);
	LockscreenCredential v92 = v93;
	Arrays.fill(v91, 0);
	boolean v98 = this.mEncryptedPasswords.contains(p1);
	UserInfo v99 = this.mUserManager.getProfileParent(p1);
	String v100 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v101 = this.mKeyStore.getProvider();
	KeyGenerator v102 = KeyGenerator.getInstance(""AES"", v101);
	KeyGenParameterSpec$Builder v103 = new KeyGenParameterSpec$Builder(v100,3);
	KeyGenParameterSpec$Builder v105 = v103.setKeySize(256);
	String v106 = new String(1);
	KeyGenParameterSpec$Builder v107 = v105.setBlockModes(v106);
	int v108 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v109 = v107.setNamespace(v108);
	String v110 = new String(1);
	KeyGenParameterSpec$Builder v111 = v109.setEncryptionPaddings(v110);
	KeyGenParameterSpec$Builder v112 = v111.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v113 = v112.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v114 = v113.build();
	v102.init(v114);
	SecretKey v116 = v102.generateKey();
	Cipher v117 = Cipher.getInstance(""AES/GCM/NoPadding"");
	LockscreenCredential v75 = v92;
	boolean v120 = v75.isNone();
	ContentResolver v121 = this.mContext.getContentResolver();
	int v123 = Settings$Global.getInt(v121, ""device_provisioned"", 0);
	int v122 = v123;
	boolean v125 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v134 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v135 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v136 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v137 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v136, v135, p1, p2, p3);
	int v138 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v139 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v139);
	IGateKeeperService v141 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v142 = this.mSpManager.verifyChallenge(v141, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v143 = v142.getResponseCode();
	VerifyCredentialResponse v124 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v146 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v147 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v148 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v145 = v148;
	int v150 = LockscreenCredential.getType();
	int v151 = LockscreenCredential.getType();
	boolean v149 = phiInstruction;
	boolean v153 = p1.isNone();
	boolean v154 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v156 = LockSettingsService.getGateKeeperService();
	byte[] v157 = p1.getCredential();
	GateKeeperResponse v158 = v156.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v157);
	VerifyCredentialResponse v160 = LockSettingsService.convertResponse(phiInstruction);
	boolean v161 = phiInstruction.getShouldReEnroll();
	int v162 = v160.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v166 = p1.getCredential();
	LockSettingsService.unlockKeystore(v166, p2);
	byte[] v174 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v174);
	boolean v176 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v178 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v152 = v160;
	int v180 = this.mResponseCode;
	Message v182 = this.mHandler.obtainMessage(5, p2, 0);
	v182.sendToTarget();
	VerifyCredentialResponse v119 = v152;
	p0.scheduleGc();
	return v119;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
","public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 4,2 @5 exception:5,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
13 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 9,11,8 @22 exception:12,
conditional branch(ne, to iindex=-1) 13,8,
21 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 7,19 @32 exception:20,
22 = arraylength 7,
24 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 7,19,22 @37 exception:23,
27 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 25 @43 exception:26,
29 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@48,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 29,30,21 @52 exception:31,
46 = getCaughtException ,
49 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 15,47,46 @77 exception:48,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 30,6,
39 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 39 @81 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,41 @86 exception:42,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,44 @91 exception:45,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 39,47 @96 exception:48,
51 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 2 @99 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 39,51 @103 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 39 @106 exception:54,
57 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @110 exception:56,
58 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
return 58,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
return,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v6 = new GCMParameterSpec(128,v4);
	int v8 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""doVerifyCredential type mismatch with stored credential?? stored: "");
	StringBuilder v9 = v6.append(LockSettingsStorage$CredentialHash.type);
	StringBuilder v10 = v6.append("" passed in: "");
	int v11 = p1.getType();
	StringBuilder v12 = v6.append(v11);
	String v13 = v6.toString();
	int v14 = Slog.wtf(""LockSettingsService"", v13);
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 1
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
","public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v4 = this.mKeyStore.getKey(v3, 0);
	byte[] v5 = Arrays.copyOf(v2, 12);
	byte[] v6 = Arrays.copyOfRange(v2, 12, v2.length);
	Cipher v7 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v8 = new GCMParameterSpec(128,v5);
	LockscreenCredential v1 = 0;
	boolean v12 = v1.isNone();
	ContentResolver v13 = this.mContext.getContentResolver();
	int v14 = this.mInjector.settingsGlobalGetInt(v13, ""device_provisioned"", 0);
	VerifyCredentialResponse v15 = LockSettingsService.spBasedDoVerifyCredential(v1, p1, 0, 0);
	LockSettingsStorage$CredentialHash v16 = this.mStorage.readCredentialHash(p1);
	boolean v17 = v1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	int v23 = v1.getType();
	VerifyCredentialResponse v11 = VerifyCredentialResponse.ERROR;
	int v27 = this.mResponseCode;
	LockscreenCredential.zeroize();
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 4,2 @5 exception:5,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
13 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 9,11,8 @22 exception:12,
conditional branch(ne, to iindex=-1) 13,8,
21 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 7,19 @32 exception:20,
22 = arraylength 7,
24 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 7,19,22 @37 exception:23,
27 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 25 @43 exception:26,
29 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@48,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 29,30,21 @52 exception:31,
46 = getCaughtException ,
49 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 15,47,46 @77 exception:48,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 5,6,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @11 exception:23,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
return,
return 6,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	v1.close();
	return 0;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v6 = new GCMParameterSpec(128,v4);
	int v8 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
","public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v4 = this.mKeyStore.getKey(v3, 0);
	byte[] v5 = Arrays.copyOf(v2, 12);
	byte[] v6 = Arrays.copyOfRange(v2, 12, v2.length);
	Cipher v7 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v8 = new GCMParameterSpec(128,v5);
	LockscreenCredential v1 = 0;
	LockscreenCredential.zeroize();
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 4,2 @5 exception:5,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
2 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 2 @2 exception:3,
6 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 2,4 @7 exception:5,
8 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 2,1 @10 exception:7,
10 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 2 @13 exception:9,
return 10,
13 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 9,11,8 @22 exception:12,
conditional branch(ne, to iindex=-1) 13,8,
21 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 7,19 @32 exception:20,
22 = arraylength 7,
24 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 7,19,22 @37 exception:23,
27 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 25 @43 exception:26,
29 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@48,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 29,30,21 @52 exception:31,
46 = getCaughtException ,
49 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 15,47,46 @77 exception:48,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
conditional branch(ne, to iindex=-1) 3,4,
goto (from iindex= 5 to iindex = 2),
7 = phi  6,5,
return 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 2,3 @5 exception:4,
putfield 1.< Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > = 3,
return,
return,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v6 = new GCMParameterSpec(128,v4);
	int v8 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public boolean isNone(){
	p0.ensureNotZeroized();
	return phiInstruction;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
depth : 2
public void zeroize(){
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return;
}
-----
","public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	String v3 = v8;
	Key v9 = this.mKeyStore.getKey(v3, 0);
	byte[] v10 = Arrays.copyOf(v2, 12);
	byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);
	Cipher v12 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v13 = new GCMParameterSpec(128,v10);
	LockscreenCredential v1 = 0;
	LockscreenCredential.ensureNotZeroized();
	boolean v17 = phiInstruction;
	ContentResolver v19 = this.mContext.getContentResolver();
	int v21 = Settings$Global.getInt(v19, ""device_provisioned"", 0);
	int v20 = v21;
	boolean v23 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v32 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v33 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v34 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v35 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v33, p1, p2, p3);
	int v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v37 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v37);
	IGateKeeperService v39 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v41 = v40.getResponseCode();
	VerifyCredentialResponse v22 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v45 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v46 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v43 = v46;
	int v48 = LockscreenCredential.getType();
	int v49 = LockscreenCredential.getType();
	boolean v47 = phiInstruction;
	boolean v51 = p1.isNone();
	boolean v52 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v54 = LockSettingsService.getGateKeeperService();
	byte[] v55 = p1.getCredential();
	GateKeeperResponse v56 = v54.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v55);
	VerifyCredentialResponse v58 = LockSettingsService.convertResponse(phiInstruction);
	boolean v59 = phiInstruction.getShouldReEnroll();
	int v60 = v58.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v64 = p1.getCredential();
	LockSettingsService.unlockKeystore(v64, p2);
	byte[] v72 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v72);
	boolean v74 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v76 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v50 = v58;
	int v78 = this.mResponseCode;
	Message v80 = this.mHandler.obtainMessage(5, p2, 0);
	v80.sendToTarget();
	VerifyCredentialResponse v16 = v50;
	int v82 = v16.getResponseCode();
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 4,2 @5 exception:5,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
2 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 2 @2 exception:3,
6 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 2,4 @7 exception:5,
8 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 2,1 @10 exception:7,
10 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 2 @13 exception:9,
return 10,
13 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 9,11,8 @22 exception:12,
conditional branch(ne, to iindex=-1) 13,8,
21 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 7,19 @32 exception:20,
22 = arraylength 7,
24 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 7,19,22 @37 exception:23,
27 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 25 @43 exception:26,
29 = new <Application,Ljavax/crypto/spec/GCMParameterSpec>@48,
invokespecial < Application, Ljavax/crypto/spec/GCMParameterSpec, <init>(I[B)V > 29,30,21 @52 exception:31,
46 = getCaughtException ,
49 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 15,47,46 @77 exception:48,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
conditional branch(ne, to iindex=-1) 3,4,
goto (from iindex= 5 to iindex = 2),
7 = phi  6,5,
return 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
return 7,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 2,3 @5 exception:4,
putfield 1.< Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > = 3,
return,
return,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v6 = new GCMParameterSpec(128,v4);
	int v8 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public boolean isNone(){
	p0.ensureNotZeroized();
	return phiInstruction;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
depth : 2
public void zeroize(){
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return;
}
-----
","public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	String v3 = v8;
	Key v9 = this.mKeyStore.getKey(v3, 0);
	byte[] v10 = Arrays.copyOf(v2, 12);
	byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);
	Cipher v12 = Cipher.getInstance(""AES/GCM/NoPadding"");
	GCMParameterSpec v13 = new GCMParameterSpec(128,v10);
	LockscreenCredential v1 = 0;
	LockscreenCredential.ensureNotZeroized();
	boolean v17 = phiInstruction;
	ContentResolver v19 = this.mContext.getContentResolver();
	int v21 = Settings$Global.getInt(v19, ""device_provisioned"", 0);
	int v20 = v21;
	boolean v23 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v32 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v33 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v34 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v35 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v33, p1, p2, p3);
	int v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v37 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v37);
	IGateKeeperService v39 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v41 = v40.getResponseCode();
	VerifyCredentialResponse v22 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v45 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v43 = v45;
	int v47 = LockscreenCredential.getType();
	int v48 = LockscreenCredential.getType();
	boolean v46 = phiInstruction;
	boolean v50 = p1.isNone();
	boolean v51 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v53 = LockSettingsService.getGateKeeperService();
	byte[] v54 = p1.getCredential();
	GateKeeperResponse v55 = v53.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v54);
	VerifyCredentialResponse v57 = LockSettingsService.convertResponse(phiInstruction);
	boolean v58 = phiInstruction.getShouldReEnroll();
	int v59 = v57.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v63 = p1.getCredential();
	LockSettingsService.unlockKeystore(v63, p2);
	byte[] v71 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v71);
	boolean v73 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v75 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v49 = v57;
	int v77 = this.mResponseCode;
	Message v79 = this.mHandler.obtainMessage(5, p2, 0);
	v79.sendToTarget();
	VerifyCredentialResponse v16 = v49;
	int v81 = v16.getResponseCode();
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","tryUnlockWithCachedUnifiedChallenge(I)Z","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mManagedProfilePasswordCache, <Application,Lcom/android/server/locksettings/ManagedProfilePasswordCache> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, retrievePassword(I)Lcom/android/internal/widget/LockscreenCredential; > 3,2 @2 exception:4,
3 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mEncryptedPasswords, <Application,Landroid/util/SparseArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 4,2 @5 exception:5,
7 = checkcast <Primordial,[B>6 <Primordial,[B>,
conditional branch(ne, to iindex=-1) 7,8,
9 = getfield < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, mKeyStore, <Application,Ljava/security/KeyStore> > 1,
11 = invokestatic < Application, Lcom/android/server/locksettings/ManagedProfilePasswordCache, getEncryptionKeyName(I)Ljava/lang/String; > 2 @18 exception:10,
2 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 2 @2 exception:3,
6 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 2,4 @7 exception:5,
8 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 2,1 @10 exception:7,
10 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 2 @13 exception:9,
return 10,
13 = invokevirtual < Application, Ljava/security/KeyStore, getKey(Ljava/lang/String;[C)Ljava/security/Key; > 9,11,8 @22 exception:12,
conditional branch(ne, to iindex=-1) 13,8,
21 = invokestatic < Application, Ljava/util/Arrays, copyOf([BI)[B > 7,19 @32 exception:20,
22 = arraylength 7,
24 = invokestatic < Application, Ljava/util/Arrays, copyOfRange([BII)[B > 7,19,22 @37 exception:23,
27 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 25 @43 exception:26,
46 = getCaughtException ,
49 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 15,47,46 @77 exception:48,
monitorexit 3,
return 8,
conditional branch(ne, to iindex=-1) 5,6,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, doVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,5,2,6,6 @16 exception:7,
conditional branch(eq, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 2 @2 exception:7,
invokespecial < Application, Lcom/android/internal/widget/LockscreenCredential, ensureNotZeroized()V > 1 @0 exception:2,
3 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mType, <Primordial,I> > 1,
conditional branch(ne, to iindex=-1) 3,4,
goto (from iindex= 5 to iindex = 2),
7 = phi  6,5,
return 7,
conditional branch(ne, to iindex=-1) 8,6,
conditional branch(ne, to iindex=-1) 3,12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
17 = invokevirtual < Application, Landroid/content/Context, getContentResolver()Landroid/content/ContentResolver; > 15 @18 exception:16,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, settingsGlobalGetInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 14,17,18,6 @25 exception:19,
6 = invokestatic < Application, Landroid/provider/Settings$Global, getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I > 2,3,4 @0 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 20,6,
24 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, spBasedDoVerifyCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;I)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @39 exception:23,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mInjector, <Application,Lcom/android/server/locksettings/LockSettingsService$Injector> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService$Injector, hasEnrolledBiometrics(I)Z > 6,3 @2 exception:7,
10 = new <Application,Ljava/lang/StringBuilder>@8,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @10 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @16 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,3 @19 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @24 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 10,8 @27 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @30 exception:22,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 9,23 @34 exception:24,
27 = binaryop(and) 5 , 26,
conditional branch(eq, to iindex=-1) 27,28,
goto (from iindex= 19 to iindex = 2),
29 = phi  26,28,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 30,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,3 @47 exception:31,
conditional branch(ne, to iindex=-1) 32,28,
conditional branch(ne, to iindex=-1) 3,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,3 @72 exception:34,
36 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
38 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @78 exception:37,
40 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unwrapPasswordBasedSyntheticPassword(Landroid/service/gatekeeper/IGateKeeperService;JLcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult; > 36,38,35,2,3,4 @85 exception:39,
41 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, gkResponse, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> > 40,
43 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 41 @91 exception:42,
conditional branch(ne, to iindex=-1) 43,28,
44 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mBiometricDeferredQueue, <Application,Lcom/android/server/locksettings/BiometricDeferredQueue> > 1,
45 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
47 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken, deriveGkPassword()[B > 45 @101 exception:46,
invokevirtual < Application, Lcom/android/server/locksettings/BiometricDeferredQueue, addPendingLockoutResetForUser(I[B)V > 44,3,47 @105 exception:48,
49 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
51 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @110 exception:50,
52 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult, authToken, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken> > 40,
55 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallenge(Landroid/service/gatekeeper/IGateKeeperService;Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationToken;JI)Lcom/android/internal/widget/VerifyCredentialResponse; > 49,51,52,53,3 @119 exception:54,
57 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 55 @123 exception:56,
conditional branch(eq, to iindex=-1) 57,28,
97 = invokestatic < Application, Landroid/util/Slog, wtf(Ljava/lang/String;Ljava/lang/String;)I > 9,95 @134 exception:96,
98 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
monitorexit 30,
return 98,
conditional branch(eq, to iindex=-1) 24,6,
conditional branch(ne, to iindex=-1) 3,12,
25 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
27 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readCredentialHash(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 25,3 @67 exception:26,
4 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPasswordHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @0 exception:3,
conditional branch(eq, to iindex=-1) 4,5,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPatternHashIfExists(I)Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > 1,2 @7 exception:6,
conditional branch(eq, to iindex=-1) 7,5,
9 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, createEmptyHash()Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash; > @14 exception:8,
return 9,
28 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, type, <Primordial,I> > 27,
30 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, checkAgainstStoredType(I)Z > 2,28 @73 exception:29,
conditional branch(ne, to iindex=-1) 2,5,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @5 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getType()I > 1 @12 exception:12,
conditional branch(ne, to iindex=-1) 13,14,
goto (from iindex= 12 to iindex = 2),
15 = phi  3,3,4,
return 15,
conditional branch(ne, to iindex=-1) 30,6,
32 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, verifyCredential(ILcom/android/server/locksettings/LockSettingsStorage$CredentialHash;Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,3,27,2,4 @116 exception:31,
conditional branch(eq, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
8 = arraylength 7,
conditional branch(ne, to iindex=-1) 8,6,
10 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 3,6,
12 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
13 = arraylength 12,
conditional branch(eq, to iindex=-1) 13,6,
15 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, isNone()Z > 4 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,6,
invokestatic < Application, Landroid/os/StrictMode, noteDiskRead()V > @31 exception:16,
18 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @34 exception:17,
20 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$CredentialHash, hash, <Primordial,[B> > 3,
22 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @42 exception:21,
24 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 18,2,19,20,22 @47 exception:23,
25 = getCaughtException ,
29 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,27,25 @57 exception:28,
30 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
31 = phi  24,30,
37 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, convertResponse(Landroid/service/gatekeeper/GateKeeperResponse;)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,31 @62 exception:36,
39 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 31 @66 exception:38,
41 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 37 @70 exception:40,
conditional branch(ne, to iindex=-1) 41,6,
conditional branch(eq, to iindex=-1) 5,6,
invokeinterface < Application, Lcom/android/internal/widget/ICheckCredentialProgressCallback, onCredentialVerified()V > 5 @78 exception:49,
50 = getCaughtException ,
53 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 26,51,50 @88 exception:52,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setUserPasswordMetrics(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @91 exception:59,
61 = invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, getCredential()[B > 4 @94 exception:60,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockKeystore([BI)V > 1,61,2 @98 exception:62,
63 = new <Application,Ljava/lang/StringBuilder>@103,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 63 @105 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 63,65 @110 exception:66,
69 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 63,2 @113 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 63 @116 exception:70,
73 = invokestatic < Application, Landroid/util/Slog, i(Ljava/lang/String;Ljava/lang/String;)I > 26,71 @120 exception:72,
75 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, secretFromCredential(Lcom/android/internal/widget/LockscreenCredential;)[B > 4 @123 exception:74,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, unlockUser(I[B)V > 1,2,75 @127 exception:76,
78 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isProfileWithSeparatedLock(I)Z > 1,2 @130 exception:77,
conditional branch(eq, to iindex=-1) 78,6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setDeviceUnlockedForUser(I)V > 1,2 @136 exception:79,
conditional branch(eq, to iindex=-1) 39,6,
98 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, setLockCredentialInternal(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;IZ)Z > 1,4,4,2,6 @142 exception:97,
goto (from iindex= 70 to iindex = 20),
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, sendCredentialsOnUnlockIfRequired(Lcom/android/internal/widget/LockscreenCredential;I)V > 1,4,2 @165 exception:104,
goto (from iindex= 82 to iindex = 22),
return 37,
34 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 32 @120 exception:33,
2 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 34,6,
35 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, reportSuccessfulStrongAuthUnlock(I)V > 35,3 @128 exception:36,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
7 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(III)Landroid/os/Message; > 3,4,2,5 @4 exception:6,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 7 @8 exception:8,
return,
return 32,
10 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse, getResponseCode()I > 8 @20 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
21 = phi  6,20,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, close()V > 5 @27 exception:22,
invokevirtual < Application, Lcom/android/internal/widget/LockscreenCredential, zeroize()V > 1 @0 exception:2,
2 = getfield < Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > 1,
conditional branch(eq, to iindex=-1) 2,3,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 2,3 @5 exception:4,
putfield 1.< Application, Lcom/android/internal/widget/LockscreenCredential, mCredential, <Primordial,[B> > = 3,
return,
return,
return 21,","depth : 0
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
	VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
	int v3 = v2.getResponseCode();
	v1.close();
	return phiInstruction;
}
-----
depth : 1
public LockscreenCredential retrievePassword(int p1){
	Object v1 = this.mEncryptedPasswords.get(p1);
	String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Key v3 = this.mKeyStore.getKey(v2, 0);
	byte[] v4 = Arrays.copyOf(v1, 12);
	byte[] v5 = Arrays.copyOfRange(v1, 12, v1.length);
	Cipher v6 = Cipher.getInstance(""AES/GCM/NoPadding"");
	int v7 = Slog.d(""ManagedProfilePasswordCache"", ""Cannot decrypt"", caughtException);
	return 0;
}
-----
depth : 2
public String getEncryptionKeyName(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	return v4;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, ""device_provisioned"", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public boolean isNone(){
	p0.ensureNotZeroized();
	return phiInstruction;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""spBasedDoVerifyCredential: user="");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("" hasEnrolledBiometrics="");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d(""LockSettingsService"", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf(""LockSettingsService"", ""verifyChallenge with SP failed."");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e(""LockSettingsService"", ""gatekeeper verify failed"", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w(""LockSettingsService"", ""progressCallback throws exception"", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append(""Unlocking user "");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i(""LockSettingsService"", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public void close(){
	p0.zeroize();
	return;
}
-----
depth : 2
public void zeroize(){
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return;
}
-----
","public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""com.android.server.locksettings.unified_profile_cache_v2_"");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	String v3 = v8;
	Key v9 = this.mKeyStore.getKey(v3, 0);
	byte[] v10 = Arrays.copyOf(v2, 12);
	byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);
	Cipher v12 = Cipher.getInstance(""AES/GCM/NoPadding"");
	LockscreenCredential v1 = 0;
	LockscreenCredential.ensureNotZeroized();
	boolean v15 = phiInstruction;
	ContentResolver v17 = this.mContext.getContentResolver();
	int v19 = Settings$Global.getInt(v17, ""device_provisioned"", 0);
	int v18 = v19;
	boolean v21 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v30 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v31 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v32 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v33 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v32, v31, p1, p2, p3);
	int v34 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v35 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v35);
	IGateKeeperService v37 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v38 = this.mSpManager.verifyChallenge(v37, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v39 = v38.getResponseCode();
	VerifyCredentialResponse v20 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v42 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v43 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v44 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v41 = v44;
	int v46 = LockscreenCredential.getType();
	int v47 = LockscreenCredential.getType();
	boolean v45 = phiInstruction;
	boolean v49 = p1.isNone();
	boolean v50 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v52 = LockSettingsService.getGateKeeperService();
	byte[] v53 = p1.getCredential();
	GateKeeperResponse v54 = v52.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v53);
	VerifyCredentialResponse v56 = LockSettingsService.convertResponse(phiInstruction);
	boolean v57 = phiInstruction.getShouldReEnroll();
	int v58 = v56.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v62 = p1.getCredential();
	LockSettingsService.unlockKeystore(v62, p2);
	byte[] v70 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v70);
	boolean v72 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v74 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v48 = v56;
	int v76 = this.mResponseCode;
	Message v78 = this.mHandler.obtainMessage(5, p2, 0);
	v78.sendToTarget();
	VerifyCredentialResponse v14 = v48;
	int v80 = v14.getResponseCode();
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return phiInstruction;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","generateKey(Ljava/lang/String;)Ljava/lang/String;","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
return 5,","depth : 0
public String generateKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.generateKey(p1);
	return v1;
}
-----
","public String generateKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.generateKey(p1);
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKey(Ljava/lang/String;)Ljava/lang/String;","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 1,2,3 @1 exception:4,
return 5,
return 5,","depth : 0
public String generateKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.generateKey(p1);
	return v1;
}
-----
depth : 1
public String generateKey(String p1){
	String v1 = p0.generateKeyWithMetadata(p1, 0);
	return v1;
}
-----
","public String generateKey(String p1){
	String v2 = RecoverableKeyStoreManager.generateKeyWithMetadata(p1, 0);
	String v1 = v2;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","generateKey(Ljava/lang/String;)Ljava/lang/String;","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKey(Ljava/lang/String;)Ljava/lang/String; > 3,2 @2 exception:4,
5 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; > 1,2,3 @1 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:4,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @5 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:8,
11 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:10,
13 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mPlatformKeyManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager> > 1,
15 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/PlatformKeyManager, getEncryptKey(I)Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey; > 13,11 @20 exception:14,
26 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverableKeyGenerator, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator> > 1,
28 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyGenerator, generateAndStoreKey(Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey;IILjava/lang/String;[B)[B > 26,15,11,9,2,3 @30 exception:27,
29 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, setSymmetricKeyEntry(IILjava/lang/String;[B)V > 29,11,9,2,28 @36 exception:30,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, getAlias(IILjava/lang/String;)Ljava/lang/String; > 1,11,9,2 @39 exception:39,
return 40,
return 5,
return 5,","depth : 0
public String generateKey(String p1){
	String v1 = this.mRecoverableKeyStoreManager.generateKey(p1);
	return v1;
}
-----
depth : 1
public String generateKey(String p1){
	String v1 = p0.generateKeyWithMetadata(p1, 0);
	return v1;
}
-----
depth : 2
public String generateKeyWithMetadata(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4);
	byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6);
	String v8 = p0.getAlias(v4, v3, p1);
	return v8;
}
-----
","public String generateKey(String p1){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v4 = Objects.requireNonNull(p1, ""alias is null"");
	int v5 = Binder.getCallingUid();
	int v6 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v7 = this.mPlatformKeyManager.getEncryptKey(v6);
	byte[] v8 = this.mRecoverableKeyGenerator.generateAndStoreKey(v7, v6, v5, p1, 0);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, v8);
	String v10 = RecoverableKeyStoreManager.getAlias(v6, v5, p1);
	String v2 = v10;
	String v1 = v2;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
","public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
6 = invokestatic < Application, Ljava/lang/Long, toString(J)Ljava/lang/String; > 3 @0 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,6,4 @4 exception:7,
return,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setLong(String p1, long p2, int p3){
	String v1 = Long.toString(p2);
	p0.setString(p1, v1, p3);
	return;
}
-----
","public void setLong(String p1, long p2, int p3){
	String v4 = Long.toString(p2);
	LockSettingsStorage.setString(p1, v4, p3);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
6 = invokestatic < Application, Ljava/lang/Long, toString(J)Ljava/lang/String; > 3 @0 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,6,4 @4 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 8,9 @9 exception:10,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
14 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, contains([Ljava/lang/Object;Ljava/lang/Object;)Z > 12,2 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
invokestatic < Application, Landroid/app/backup/BackupManager, dataChanged(Ljava/lang/String;)V > 15 @25 exception:16,
return,
return,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setLong(String p1, long p2, int p3){
	String v1 = Long.toString(p2);
	p0.setString(p1, v1, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
","public void setLong(String p1, long p2, int p3){
	String v4 = Long.toString(p2);
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	LockSettingsStorage.writeKeyValue(p1, v4, p3);
	boolean v8 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
6 = invokestatic < Application, Ljava/lang/Long, toString(J)Ljava/lang/String; > 3 @0 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,6,4 @4 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 8,9 @9 exception:10,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
14 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, contains([Ljava/lang/Object;Ljava/lang/Object;)Z > 12,2 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
return,
return,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setLong(String p1, long p2, int p3){
	String v1 = Long.toString(p2);
	p0.setString(p1, v1, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	return;
}
-----
","public void setLong(String p1, long p2, int p3){
	String v4 = Long.toString(p2);
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	LockSettingsStorage.writeKeyValue(p1, v4, p3);
	boolean v8 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setLong(Ljava/lang/String;JI)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setLong(Ljava/lang/String;JI)V > 6,2,3,4 @5 exception:7,
6 = invokestatic < Application, Ljava/lang/Long, toString(J)Ljava/lang/String; > 3 @0 exception:5,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,6,4 @4 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
8 = phi  7,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 8,9 @9 exception:10,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
14 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, contains([Ljava/lang/Object;Ljava/lang/Object;)Z > 12,2 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
invokestatic < Application, Landroid/app/backup/BackupManager, dataChanged(Ljava/lang/String;)V > 15 @25 exception:16,
return,
return,
return,","depth : 0
public void setLong(String p1, long p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setLong(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setLong(String p1, long p2, int p3){
	String v1 = Long.toString(p2);
	p0.setString(p1, v1, p3);
	return;
}
-----
depth : 2
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
","public void setLong(String p1, long p2, int p3){
	String v4 = Long.toString(p2);
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	LockSettingsStorage.writeKeyValue(p1, v4, p3);
	boolean v8 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
","public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
8 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:7,
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 15,10,8,16 @27 exception:17,
19 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, deleteEntry(IILjava/lang/String;)V > 19,10,8,2 @32 exception:20,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	long v6 = this.mDatabase.setShouldCreateSnapshot(v4, v3, 1);
	this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);
	return;
}
-----
","public void removeKey(String p1){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v3 = Objects.requireNonNull(p1, ""alias is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = this.mDatabase.removeKey(v4, p1);
	long v7 = this.mDatabase.setShouldCreateSnapshot(v5, v4, 1);
	this.mApplicationKeyStorage.deleteEntry(v5, v4, p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
8 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:7,
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	return;
}
-----
","public void removeKey(String p1){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v3 = Objects.requireNonNull(p1, ""alias is null"");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = this.mDatabase.removeKey(v4, p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
8 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:7,
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
6 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
10 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @9 exception:9,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
16 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 6,13,14,8 @24 exception:15,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
conditional branch(eq, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 15,10,8,16 @27 exception:17,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setLong(IILjava/lang/String;J)J > 1,2,3,9,8 @14 exception:10,
return 11,
19 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, deleteEntry(IILjava/lang/String;)V > 19,10,8,2 @32 exception:20,
5 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
7 = new <Application,[Ljava/lang/Object>@36 ,
9 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @5 exception:8,
arraystore 7[10] = 9,
12 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @12 exception:11,
arraystore 7[13] = 12,
arraystore 7[14] = 4,
17 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 5,15,7 @24 exception:16,
20 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 18,17 @30 exception:19,
21 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
23 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getInternalAlias(IILjava/lang/String;)Ljava/lang/String; > 1,2,3,4 @35 exception:22,
invokeinterface < Application, Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy, deleteEntry(Ljava/lang/String;)V > 21,23 @39 exception:24,
return,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	long v6 = this.mDatabase.setShouldCreateSnapshot(v4, v3, 1);
	this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public boolean removeKey(int p1, String p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	int v3 = v1.delete(""keys"", ""uid = ? AND alias = ?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
depth : 2
public void deleteEntry(int p1, int p2, String p3){
	Object v0 = new Object(3);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	String v3 = String.format(Locale.US, ""Del %d/%d/%s"", v0);
	int v4 = Log.i(""RecoverableAppKeyStore"", v3);
	String v5 = p0.getInternalAlias(p1, p2, p3);
	this.mKeyStore.deleteEntry(v5);
	return;
}
-----
","public void removeKey(String p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	SQLiteDatabase v18 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v19 = new String(2);
	String v20 = Integer.toString(v15);
	int v21 = v18.delete(""keys"", ""uid = ? AND alias = ?"", v19);
	boolean v17 = phiInstruction;
	long v23 = RecoverableKeyStoreDb.setLong(v16, v15, ""should_create_snapshot"", phiInstruction);
	long v22 = v23;
	Object v25 = new Object(3);
	Integer v26 = Integer.valueOf(v16);
	Integer v27 = Integer.valueOf(v15);
	String v28 = String.format(Locale.US, ""Del %d/%d/%s"", v25);
	int v29 = Log.i(""RecoverableAppKeyStore"", v28);
	String v30 = ApplicationKeyStorage.getInternalAlias(v16, v15, p1);
	this.mKeyStore.deleteEntry(v30);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
8 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:7,
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
6 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
10 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @9 exception:9,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
16 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 6,13,14,8 @24 exception:15,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
conditional branch(eq, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
18 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 15,10,8,16 @27 exception:17,
conditional branch(eq, to iindex=-1) 4,5,
8 = phi  7,6,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setLong(IILjava/lang/String;J)J > 1,2,3,9,8 @14 exception:10,
return 11,
19 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mApplicationKeyStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, deleteEntry(IILjava/lang/String;)V > 19,10,8,2 @32 exception:20,
5 = getstatic < Application, Ljava/util/Locale, US, <Application,Ljava/util/Locale> >,
7 = new <Application,[Ljava/lang/Object>@36 ,
9 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 2 @5 exception:8,
arraystore 7[10] = 9,
12 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 3 @12 exception:11,
arraystore 7[13] = 12,
arraystore 7[14] = 4,
17 = invokestatic < Application, Ljava/lang/String, format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 5,15,7 @24 exception:16,
20 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 18,17 @30 exception:19,
21 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, mKeyStore, <Application,Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy> > 1,
23 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/ApplicationKeyStorage, getInternalAlias(IILjava/lang/String;)Ljava/lang/String; > 1,2,3,4 @35 exception:22,
invokeinterface < Application, Lcom/android/server/locksettings/recoverablekeystore/KeyStoreProxy, deleteEntry(Ljava/lang/String;)V > 21,23 @39 exception:24,
return,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	long v6 = this.mDatabase.setShouldCreateSnapshot(v4, v3, 1);
	this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public boolean removeKey(int p1, String p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	int v3 = v1.delete(""keys"", ""uid = ? AND alias = ?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
depth : 2
public void deleteEntry(int p1, int p2, String p3){
	Object v0 = new Object(3);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	String v3 = String.format(Locale.US, ""Del %d/%d/%s"", v0);
	int v4 = Log.i(""RecoverableAppKeyStore"", v3);
	String v5 = p0.getInternalAlias(p1, p2, p3);
	this.mKeyStore.deleteEntry(v5);
	return;
}
-----
","public void removeKey(String p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	SQLiteDatabase v18 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v19 = new String(2);
	String v20 = Integer.toString(v15);
	int v21 = v18.delete(""keys"", ""uid = ? AND alias = ?"", v19);
	boolean v17 = phiInstruction;
	long v23 = RecoverableKeyStoreDb.setLong(v16, v15, ""should_create_snapshot"", phiInstruction);
	long v22 = v23;
	Object v25 = new Object(3);
	Integer v26 = Integer.valueOf(v16);
	Integer v27 = Integer.valueOf(v15);
	String v28 = String.format(Locale.US, ""Del %d/%d/%s"", v25);
	int v29 = Log.i(""RecoverableAppKeyStore"", v28);
	String v30 = ApplicationKeyStorage.getInternalAlias(v16, v15, p1);
	this.mKeyStore.deleteEntry(v30);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","removeKey(Ljava/lang/String;)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, removeKey(Ljava/lang/String;)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @5 exception:5,
8 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:7,
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, removeKey(ILjava/lang/String;)Z > 11,8,2 @18 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
6 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
10 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @9 exception:9,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
16 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 6,13,14,8 @24 exception:15,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
conditional branch(eq, to iindex=-1) 13,14,
return,
return,","depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""alias is null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public boolean removeKey(int p1, String p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	int v3 = v1.delete(""keys"", ""uid = ? AND alias = ?"", v1);
	return phiInstruction;
}
-----
","public void removeKey(String p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""alias is null"");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	SQLiteDatabase v18 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v19 = new String(2);
	String v20 = Integer.toString(v15);
	int v21 = v18.delete(""keys"", ""uid = ? AND alias = ?"", v19);
	boolean v17 = phiInstruction;
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:3,
5 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z > 6,2 @9 exception:7,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 5 @13 exception:13,
return 8,","depth : 0
public boolean unregisterWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.unregisterWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
","public boolean unregisterWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.unregisterWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkManageWeakEscrowTokenMethodUsage()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
8 = invokevirtual < Application, Landroid/content/Context, getPackageManager()Landroid/content/pm/PackageManager; > 6 @11 exception:7,
11 = invokevirtual < Application, Landroid/content/pm/PackageManager, hasSystemFeature(Ljava/lang/String;)Z > 8,9 @17 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
5 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @3 exception:4,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z > 6,2 @9 exception:7,
3 = getfield < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, mListeners, <Application,Landroid/os/RemoteCallbackList> > 1,
5 = invokevirtual < Application, Landroid/os/RemoteCallbackList, unregister(Landroid/os/IInterface;)Z > 3,2 @2 exception:4,
return 5,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 5 @13 exception:13,
return 8,","depth : 0
public boolean unregisterWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.unregisterWeakEscrowTokenRemovedListener(p1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature(""android.hardware.type.automotive"");
	return;
}
-----
depth : 1
public boolean unregisterWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	boolean v1 = this.mListeners.unregister(p1);
	return v1;
}
-----
","public boolean unregisterWeakEscrowTokenRemovedListener(IWeakEscrowTokenRemovedListener p1){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature(""android.hardware.type.automotive"");
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = this.mListeners.unregister(p1);
	boolean v6 = v7;
	Binder.restoreCallingIdentity(v5);
	return v6;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setString(Ljava/lang/String;Ljava/lang/String;I)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 6,2,3,4 @5 exception:7,
return,","depth : 0
public void setString(String p1, String p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setString(p1, p2, p3);
	return;
}
-----
","public void setString(String p1, String p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setString(p1, p2, p3);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setString(Ljava/lang/String;Ljava/lang/String;I)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 8,9 @9 exception:10,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
14 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, contains([Ljava/lang/Object;Ljava/lang/Object;)Z > 12,2 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
invokestatic < Application, Landroid/app/backup/BackupManager, dataChanged(Ljava/lang/String;)V > 15 @25 exception:16,
return,
return,","depth : 0
public void setString(String p1, String p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setString(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
","public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	LockSettingsStorage.writeKeyValue(p1, p2, p3);
	boolean v6 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setString(Ljava/lang/String;Ljava/lang/String;I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 8,9 @9 exception:10,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
7 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;Ljava/lang/String;I)V > 1,7,2,3,4 @6 exception:8,
return,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
14 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, contains([Ljava/lang/Object;Ljava/lang/Object;)Z > 12,2 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
invokestatic < Application, Landroid/app/backup/BackupManager, dataChanged(Ljava/lang/String;)V > 15 @25 exception:16,
return,
return,","depth : 0
public void setString(String p1, String p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setString(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
-----
depth : 2
public void writeKeyValue(String p1, String p2, int p3){
	SQLiteDatabase v1 = this.mOpenHelper.getWritableDatabase();
	p0.writeKeyValue(v1, p1, p2, p3);
	return;
}
-----
","public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	SQLiteDatabase v6 = this.mOpenHelper.getWritableDatabase();
	LockSettingsStorage.writeKeyValue(v6, p1, p2, p3);
	boolean v8 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	BackupManager.dataChanged(""com.android.providers.settings"");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setString(Ljava/lang/String;Ljava/lang/String;I)V","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkWritePermission(I)V > 1,4 @0 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 3,4,5 @6 exception:6,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, setString(Ljava/lang/String;Ljava/lang/String;I)V > 6,2,3,4 @5 exception:7,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 3 to iindex = 2),
8 = phi  7,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 8,9 @9 exception:10,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Ljava/lang/String;Ljava/lang/String;I)V > 1,2,3,4 @12 exception:11,
5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage, mOpenHelper, <Application,Lcom/android/server/locksettings/LockSettingsStorage$DatabaseHelper> > 1,
7 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, writeKeyValue(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;Ljava/lang/String;I)V > 1,7,2,3,4 @6 exception:8,
return,
12 = getstatic < Application, Lcom/android/server/locksettings/LockSettingsStorage, SETTINGS_TO_BACKUP, <Application,[Ljava/lang/String> >,
14 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, contains([Ljava/lang/Object;Ljava/lang/Object;)Z > 12,2 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
return,
return,","depth : 0
public void setString(String p1, String p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setString(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	p0.writeKeyValue(p1, p2, p3);
	boolean v3 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	return;
}
-----
depth : 2
public void writeKeyValue(String p1, String p2, int p3){
	SQLiteDatabase v1 = this.mOpenHelper.getWritableDatabase();
	p0.writeKeyValue(v1, p1, p2, p3);
	return;
}
-----
","public void setString(String p1, String p2, int p3){
	Preconditions.checkArgument(phiInstruction, ""cannot store lock settings for FRP user"");
	SQLiteDatabase v6 = this.mOpenHelper.getWritableDatabase();
	LockSettingsStorage.writeKeyValue(v6, p1, p2, p3);
	boolean v8 = ArrayUtils.contains(this.SETTINGS_TO_BACKUP, p1);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","setRecoverySecretTypes([I)V","0","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoverySecretTypes([I)V > 3,2 @2 exception:4,
return,","depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
","public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoverySecretTypes([I)V","1","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoverySecretTypes([I)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @6 exception:5,
8 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:7,
10 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @13 exception:9,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 11,8,10 @19 exception:12,
15 = invokestatic < Application, Ljava/util/Arrays, equals([I[I)Z > 2,13 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,17,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoverySecretTypes(II[I)J > 18,8,10,2 @39 exception:19,
22 = binaryop(lt) 20 , 21,
conditional branch(lt, to iindex=-1) 22,17,
27 = arraylength 13,
conditional branch(ne, to iindex=-1) 27,17,
30 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 16,28 @60 exception:29,
31 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 31,8,10 @65 exception:32,
conditional branch(eq, to iindex=-1) 33,17,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 37,8,10,38 @74 exception:39,
43 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 16,41 @79 exception:42,
goto (from iindex= 39 to iindex = 6),
return,
return,","depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
depth : 1
public void setRecoverySecretTypes([I p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""secretTypes is null"");
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
	boolean v6 = Arrays.equals(p1, v5);
	long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);
	int v8 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot pending."");
	Long v9 = this.mDatabase.getSnapshotVersion(v3, v4);
	long v10 = this.mDatabase.setShouldCreateSnapshot(v3, v4, 1);
	int v11 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot must be updated"");
	return;
}
-----
","public void setRecoverySecretTypes([I p1){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	Object v3 = Objects.requireNonNull(p1, ""secretTypes is null"");
	int v4 = UserHandle.getCallingUserId();
	int v5 = Binder.getCallingUid();
	[I v6 = this.mDatabase.getRecoverySecretTypes(v4, v5);
	boolean v7 = Arrays.equals(p1, v6);
	long v8 = this.mDatabase.setRecoverySecretTypes(v4, v5, p1);
	int v9 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot pending."");
	Long v10 = this.mDatabase.getSnapshotVersion(v4, v5);
	long v11 = this.mDatabase.setShouldCreateSnapshot(v4, v5, 1);
	int v12 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot must be updated"");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoverySecretTypes([I)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoverySecretTypes([I)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @6 exception:5,
8 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:7,
10 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @13 exception:9,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 11,8,10 @19 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
6 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
11 = new <Application,[Ljava/lang/String>@1712 ,
14 = new <Application,[Ljava/lang/String>@2213 ,
16 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @24 exception:15,
arraystore 14[17] = 16,
19 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 3 @31 exception:18,
arraystore 14[20] = 19,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 6,21,11,22,14,17,17,17 @47 exception:23,
26 = invokeinterface < Application, Landroid/database/Cursor, getCount()I > 24 @51 exception:25,
conditional branch(ne, to iindex=-1) 26,17,
conditional branch(le, to iindex=-1) 26,20,
29 = invokeinterface < Application, Landroid/database/Cursor, moveToFirst()Z > 24 @105 exception:28,
31 = invokeinterface < Application, Landroid/database/Cursor, getColumnIndexOrThrow(Ljava/lang/String;)I > 24,10 @108 exception:30,
33 = invokeinterface < Application, Landroid/database/Cursor, isNull(I)Z > 24,31 @112 exception:32,
conditional branch(eq, to iindex=-1) 33,17,
35 = invokeinterface < Application, Landroid/database/Cursor, getString(I)Ljava/lang/String; > 24,31 @124 exception:34,
37 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 35 @128 exception:36,
conditional branch(eq, to iindex=-1) 37,17,
40 = invokevirtual < Application, Ljava/lang/String, split(Ljava/lang/String;)[Ljava/lang/String; > 35,38 @142 exception:39,
41 = arraylength 40,
42 = new <Primordial,[I>@14741 ,
68 = phi  65,17,
43 = arraylength 40,
conditional branch(ge, to iindex=-1) 68,43,
invokeinterface < Application, Landroid/database/Cursor, close()V > 24 @185 exception:72,
return 42,
15 = invokestatic < Application, Ljava/util/Arrays, equals([I[I)Z > 2,13 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,17,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoverySecretTypes(II[I)J > 18,8,10,2 @39 exception:19,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
7 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
8 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 8 @8 exception:9,
10 = new <Application,Ljava/util/StringJoiner>@11,
invokespecial < Application, Ljava/util/StringJoiner, <init>(Ljava/lang/CharSequence;)V > 10,11 @15 exception:12,
14 = invokestatic < Application, Ljava/util/Arrays, stream([I)Ljava/util/stream/IntStream; > 4 @18 exception:13,
15 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb$$ExternalSyntheticLambda0>@22,
invokespecial < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb$$ExternalSyntheticLambda0, <init>(Ljava/util/StringJoiner;)V > 15,10 @24 exception:16,
invokeinterface < Application, Ljava/util/stream/IntStream, forEach(Ljava/util/function/IntConsumer;)V > 14,15 @27 exception:17,
19 = invokevirtual < Application, Ljava/util/StringJoiner, toString()Ljava/lang/String; > 10 @30 exception:18,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 8,20,19 @37 exception:21,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, ensureRecoveryServiceMetadataEntryExists(II)V > 1,2,3 @40 exception:22,
24 = new <Application,[Ljava/lang/String>@4423 ,
26 = invokestatic < Application, Ljava/lang/String, valueOf(I)Ljava/lang/String; > 2 @46 exception:25,
arraystore 24[27] = 26,
29 = invokestatic < Application, Ljava/lang/String, valueOf(I)Ljava/lang/String; > 3 @53 exception:28,
arraystore 24[30] = 29,
34 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 7,31,8,32,24 @66 exception:33,
35 = conversion(J) 34,
return 35,
22 = binaryop(lt) 20 , 21,
conditional branch(lt, to iindex=-1) 22,17,
27 = arraylength 13,
conditional branch(ne, to iindex=-1) 27,17,
30 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 16,28 @60 exception:29,
31 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 31,8,10 @65 exception:32,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getLong(IILjava/lang/String;)Ljava/lang/Long; > 1,2,3,4 @3 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 33,17,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 37,8,10,38 @74 exception:39,
conditional branch(eq, to iindex=-1) 4,5,
goto (from iindex= 2 to iindex = 3),
8 = phi  7,6,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setLong(IILjava/lang/String;J)J > 1,2,3,9,8 @14 exception:10,
return 11,
43 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 16,41 @79 exception:42,
goto (from iindex= 39 to iindex = 6),
return,
return,","depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
depth : 1
public void setRecoverySecretTypes([I p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""secretTypes is null"");
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
	boolean v6 = Arrays.equals(p1, v5);
	long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);
	int v8 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot pending."");
	Long v9 = this.mDatabase.getSnapshotVersion(v3, v4);
	long v10 = this.mDatabase.setShouldCreateSnapshot(v3, v4, 1);
	int v11 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot must be updated"");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0);
	int v5 = v4.getCount();
	boolean v6 = v4.moveToFirst();
	int v7 = v4.getColumnIndexOrThrow(""secret_types"");
	boolean v8 = v4.isNull(v7);
	String v9 = v4.getString(v7);
	boolean v10 = TextUtils.isEmpty(v9);
	String v11 = v9.split("","");
	[I v11 = new [I(v11.length);
	v4.close();
	return v11;
}
-----
depth : 2
public long setRecoverySecretTypes(int p1, int p2, [I p3){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	StringJoiner v2 = new StringJoiner("","");
	IntStream v4 = Arrays.stream(p3);
	RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v4 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v2);
	v4.forEach(v4);
	String v7 = v2.toString();
	v1.put(""secret_types"", v7);
	p0.ensureRecoveryServiceMetadataEntryExists(p1, p2);
	String v9 = new String(2);
	String v10 = String.valueOf(p1);
	String v11 = String.valueOf(p2);
	int v12 = v1.update(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v9);
	return v12;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, ""snapshot_version"");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
","public void setRecoverySecretTypes([I p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""secretTypes is null"");
	int v15 = UserHandle.getCallingUserId();
	int v16 = Binder.getCallingUid();
	SQLiteDatabase v18 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v19 = new String(4);
	String v20 = new String(2);
	String v21 = Integer.toString(v15);
	String v22 = Integer.toString(v16);
	Cursor v23 = v18.query(""recovery_service_metadata"", v19, ""user_id = ? AND uid = ?"", v20, 0, 0, 0);
	int v24 = v23.getCount();
	boolean v25 = v23.moveToFirst();
	int v26 = v23.getColumnIndexOrThrow(""secret_types"");
	boolean v27 = v23.isNull(v26);
	String v28 = v23.getString(v26);
	boolean v29 = TextUtils.isEmpty(v28);
	String v30 = v28.split("","");
	[I v31 = new [I(v30.length);
	v23.close();
	[I v17 = v31;
	boolean v33 = Arrays.equals(p1, v17);
	SQLiteDatabase v35 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v36 = new ContentValues();
	StringJoiner v38 = new StringJoiner("","");
	IntStream v40 = Arrays.stream(p1);
	RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v41 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v38);
	v40.forEach(v41);
	String v44 = v38.toString();
	v36.put(""secret_types"", v44);
	RecoverableKeyStoreDb.ensureRecoveryServiceMetadataEntryExists(v15, v16);
	String v47 = new String(2);
	String v48 = String.valueOf(v15);
	String v49 = String.valueOf(v16);
	int v50 = v35.update(""recovery_service_metadata"", v36, ""user_id = ? AND uid = ?"", v47);
	long v34 = v50;
	int v51 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot pending."");
	Long v53 = RecoverableKeyStoreDb.getLong(v15, v16, ""snapshot_version"");
	Long v52 = v53;
	long v55 = RecoverableKeyStoreDb.setLong(v15, v16, ""should_create_snapshot"", phiInstruction);
	long v54 = v55;
	int v56 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot must be updated"");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","setRecoverySecretTypes([I)V","2","3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, setRecoverySecretTypes([I)V > 3,2 @2 exception:4,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @6 exception:5,
8 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:7,
10 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @13 exception:9,
11 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getRecoverySecretTypes(II)[I > 11,8,10 @19 exception:12,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
6 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
11 = new <Application,[Ljava/lang/String>@1712 ,
14 = new <Application,[Ljava/lang/String>@2213 ,
16 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 2 @24 exception:15,
arraystore 14[17] = 16,
19 = invokestatic < Application, Ljava/lang/Integer, toString(I)Ljava/lang/String; > 3 @31 exception:18,
arraystore 14[20] = 19,
24 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 6,21,11,22,14,17,17,17 @47 exception:23,
26 = invokeinterface < Application, Landroid/database/Cursor, getCount()I > 24 @51 exception:25,
conditional branch(ne, to iindex=-1) 26,17,
conditional branch(le, to iindex=-1) 26,20,
29 = invokeinterface < Application, Landroid/database/Cursor, moveToFirst()Z > 24 @105 exception:28,
31 = invokeinterface < Application, Landroid/database/Cursor, getColumnIndexOrThrow(Ljava/lang/String;)I > 24,10 @108 exception:30,
33 = invokeinterface < Application, Landroid/database/Cursor, isNull(I)Z > 24,31 @112 exception:32,
conditional branch(eq, to iindex=-1) 33,17,
35 = invokeinterface < Application, Landroid/database/Cursor, getString(I)Ljava/lang/String; > 24,31 @124 exception:34,
37 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 35 @128 exception:36,
conditional branch(eq, to iindex=-1) 37,17,
40 = invokevirtual < Application, Ljava/lang/String, split(Ljava/lang/String;)[Ljava/lang/String; > 35,38 @142 exception:39,
41 = arraylength 40,
42 = new <Primordial,[I>@14741 ,
68 = phi  65,17,
43 = arraylength 40,
conditional branch(ge, to iindex=-1) 68,43,
invokeinterface < Application, Landroid/database/Cursor, close()V > 24 @185 exception:72,
return 42,
15 = invokestatic < Application, Ljava/util/Arrays, equals([I[I)Z > 2,13 @23 exception:14,
conditional branch(eq, to iindex=-1) 15,17,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setRecoverySecretTypes(II[I)J > 18,8,10,2 @39 exception:19,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, mKeyStoreDbHelper, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDbHelper> > 1,
7 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
8 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 8 @8 exception:9,
10 = new <Application,Ljava/util/StringJoiner>@11,
invokespecial < Application, Ljava/util/StringJoiner, <init>(Ljava/lang/CharSequence;)V > 10,11 @15 exception:12,
14 = invokestatic < Application, Ljava/util/Arrays, stream([I)Ljava/util/stream/IntStream; > 4 @18 exception:13,
15 = new <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb$$ExternalSyntheticLambda0>@22,
invokespecial < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb$$ExternalSyntheticLambda0, <init>(Ljava/util/StringJoiner;)V > 15,10 @24 exception:16,
invokeinterface < Application, Ljava/util/stream/IntStream, forEach(Ljava/util/function/IntConsumer;)V > 14,15 @27 exception:17,
19 = invokevirtual < Application, Ljava/util/StringJoiner, toString()Ljava/lang/String; > 10 @30 exception:18,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 8,20,19 @37 exception:21,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, ensureRecoveryServiceMetadataEntryExists(II)V > 1,2,3 @40 exception:22,
24 = new <Application,[Ljava/lang/String>@4423 ,
26 = invokestatic < Application, Ljava/lang/String, valueOf(I)Ljava/lang/String; > 2 @46 exception:25,
arraystore 24[27] = 26,
29 = invokestatic < Application, Ljava/lang/String, valueOf(I)Ljava/lang/String; > 3 @53 exception:28,
arraystore 24[30] = 29,
34 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 7,31,8,32,24 @66 exception:33,
35 = conversion(J) 34,
return 35,
22 = binaryop(lt) 20 , 21,
conditional branch(lt, to iindex=-1) 22,17,
27 = arraylength 13,
conditional branch(ne, to iindex=-1) 27,17,
30 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 16,28 @60 exception:29,
31 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
33 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getSnapshotVersion(II)Ljava/lang/Long; > 31,8,10 @65 exception:32,
6 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, getLong(IILjava/lang/String;)Ljava/lang/Long; > 1,2,3,4 @3 exception:5,
return 6,
conditional branch(eq, to iindex=-1) 33,17,
37 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mDatabase, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb> > 1,
40 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setShouldCreateSnapshot(IIZ)J > 37,8,10,38 @74 exception:39,
conditional branch(eq, to iindex=-1) 4,5,
8 = phi  7,6,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverableKeyStoreDb, setLong(IILjava/lang/String;J)J > 1,2,3,9,8 @14 exception:10,
return 11,
43 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 16,41 @79 exception:42,
goto (from iindex= 39 to iindex = 6),
return,
return,","depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
depth : 1
public void setRecoverySecretTypes([I p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, ""secretTypes is null"");
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
	boolean v6 = Arrays.equals(p1, v5);
	long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);
	int v8 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot pending."");
	Long v9 = this.mDatabase.getSnapshotVersion(v3, v4);
	long v10 = this.mDatabase.setShouldCreateSnapshot(v3, v4, 1);
	int v11 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot must be updated"");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0);
	int v5 = v4.getCount();
	boolean v6 = v4.moveToFirst();
	int v7 = v4.getColumnIndexOrThrow(""secret_types"");
	boolean v8 = v4.isNull(v7);
	String v9 = v4.getString(v7);
	boolean v10 = TextUtils.isEmpty(v9);
	String v11 = v9.split("","");
	[I v11 = new [I(v11.length);
	v4.close();
	return v11;
}
-----
depth : 2
public long setRecoverySecretTypes(int p1, int p2, [I p3){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	StringJoiner v2 = new StringJoiner("","");
	IntStream v4 = Arrays.stream(p3);
	RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v4 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v2);
	v4.forEach(v4);
	String v7 = v2.toString();
	v1.put(""secret_types"", v7);
	p0.ensureRecoveryServiceMetadataEntryExists(p1, p2);
	String v9 = new String(2);
	String v10 = String.valueOf(p1);
	String v11 = String.valueOf(p2);
	int v12 = v1.update(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v9);
	return v12;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, ""snapshot_version"");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, ""should_create_snapshot"", phiInstruction);
	return v1;
}
-----
","public void setRecoverySecretTypes([I p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, ""secretTypes is null"");
	int v15 = UserHandle.getCallingUserId();
	int v16 = Binder.getCallingUid();
	SQLiteDatabase v18 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v19 = new String(4);
	String v20 = new String(2);
	String v21 = Integer.toString(v15);
	String v22 = Integer.toString(v16);
	Cursor v23 = v18.query(""recovery_service_metadata"", v19, ""user_id = ? AND uid = ?"", v20, 0, 0, 0);
	int v24 = v23.getCount();
	boolean v25 = v23.moveToFirst();
	int v26 = v23.getColumnIndexOrThrow(""secret_types"");
	boolean v27 = v23.isNull(v26);
	String v28 = v23.getString(v26);
	boolean v29 = TextUtils.isEmpty(v28);
	String v30 = v28.split("","");
	[I v31 = new [I(v30.length);
	v23.close();
	[I v17 = v31;
	boolean v33 = Arrays.equals(p1, v17);
	SQLiteDatabase v35 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v36 = new ContentValues();
	StringJoiner v38 = new StringJoiner("","");
	IntStream v40 = Arrays.stream(p1);
	RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v41 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v38);
	v40.forEach(v41);
	String v44 = v38.toString();
	v36.put(""secret_types"", v44);
	RecoverableKeyStoreDb.ensureRecoveryServiceMetadataEntryExists(v15, v16);
	String v47 = new String(2);
	String v48 = String.valueOf(v15);
	String v49 = String.valueOf(v16);
	int v50 = v35.update(""recovery_service_metadata"", v36, ""user_id = ? AND uid = ?"", v47);
	long v34 = v50;
	int v51 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot pending."");
	Long v53 = RecoverableKeyStoreDb.getLong(v15, v16, ""snapshot_version"");
	Long v52 = v53;
	long v55 = RecoverableKeyStoreDb.setLong(v15, v16, ""should_create_snapshot"", phiInstruction);
	long v54 = v55;
	int v56 = Log.i(""RecoverableKeyStoreMgr"", ""Updated secret types. Snapshot must be updated"");
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
","public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,4 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
10 = new <Application,[Ljava/lang/Object>@149 ,
arraystore 10[7] = 11,
14 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:13,
16 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 14 @26 exception:15,
arraystore 10[12] = 16,
arraystore 10[17] = 18,
20 = invokestatic < Application, Landroid/util/EventLog, writeEvent(I[Ljava/lang/Object;)I > 8,10 @37 exception:19,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 24,4,25 @44 exception:26,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
return 26,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
","public int getCredentialType(int p1){
	boolean v9 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p1);
	int v10 = LockSettingsService.getKeyguardStoredQuality(p1);
	boolean v11 = this.mStorage.hasPattern(p1);
	boolean v12 = this.mStorage.hasPassword(p1);
	int v13 = LockSettingsService.pinOrPasswordQualityToCredentialType(v10);
	int v8 = v13;
	return v8;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,4 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 24,4,25 @44 exception:26,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
monitorexit 4,
9 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @44 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPattern(I)Z > 11,2 @54 exception:12,
conditional branch(eq, to iindex=-1) 13,7,
conditional branch(lt, to iindex=-1) 9,17,
18 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
20 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, hasPassword(I)Z > 18,2 @68 exception:19,
conditional branch(eq, to iindex=-1) 20,7,
26 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 9 @74 exception:25,
return 26,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	int v2 = p0.getKeyguardStoredQuality(p1);
	boolean v3 = this.mStorage.hasPattern(p1);
	boolean v4 = this.mStorage.hasPassword(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v2);
	return v5;
}
-----
","public int getCredentialType(int p1){
	boolean v5 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p1);
	int v6 = LockSettingsService.getKeyguardStoredQuality(p1);
	boolean v7 = this.mStorage.hasPattern(p1);
	boolean v8 = this.mStorage.hasPassword(p1);
	int v9 = LockSettingsService.pinOrPasswordQualityToCredentialType(v6);
	int v4 = v9;
	return v4;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,4 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
10 = new <Application,[Ljava/lang/Object>@149 ,
arraystore 10[7] = 11,
14 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:13,
16 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 14 @26 exception:15,
arraystore 10[12] = 16,
arraystore 10[17] = 18,
20 = invokestatic < Application, Landroid/util/EventLog, writeEvent(I[Ljava/lang/Object;)I > 8,10 @37 exception:19,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 24,4,25 @44 exception:26,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
29 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,2 @18 exception:28,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
32 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getCredentialType(JI)I > 30,29,2 @24 exception:31,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
11 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @11 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @16 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,3 @19 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @22 exception:18,
22 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 20,19 @28 exception:21,
return 23,
conditional branch(eq, to iindex=-1) 32,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @33 exception:34,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 3,4,5,2 @6 exception:6,
8 = conversion(I) 7,
return 8,
37 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 35 @37 exception:36,
3 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityAlphabeticPassword(I)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityNumericPin(I)Z > 1 @8 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
monitorexit 4,
return 37,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	long v2 = p0.getSyntheticPasswordHandleLocked(p1);
	int v3 = this.mSpManager.getCredentialType(v2, p1);
	int v4 = p0.getKeyguardStoredQuality(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getCredentialType(long p1, int p2){
	byte[] v1 = p0.loadState(""pwd"", p1, p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getCredentialType: encountered empty password data for user "");
	StringBuilder v4 = v1.append(p2);
	String v5 = v1.toString();
	int v6 = Slog.w(""SyntheticPasswordManager"", v5);
	return -1;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","public int getCredentialType(int p1){
	LockSettingsStorage$PersistentData v10 = this.mStorage.readPersistentDataBlock();
	boolean v9 = phiInstruction;
	long v12 = LockSettingsService.getLong(""sp-handle"", 0, p1);
	long v11 = v12;
	byte[] v14 = SyntheticPasswordManager.loadState(""pwd"", v11, p1);
	int v13 = -1;
	long v22 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	int v21 = v22;
	boolean v24 = LockPatternUtils.isQualityAlphabeticPassword(v21);
	boolean v25 = LockPatternUtils.isQualityNumericPin(v21);
	int v23 = 3;
	int v8 = v23;
	return v8;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,4 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
10 = new <Application,[Ljava/lang/Object>@149 ,
arraystore 10[7] = 11,
14 = invokestatic < Application, Lcom/android/internal/widget/ILockSettings$Stub, getCallingUid()I > @22 exception:13,
16 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 14 @26 exception:15,
arraystore 10[12] = 16,
arraystore 10[17] = 18,
20 = invokestatic < Application, Landroid/util/EventLog, writeEvent(I[Ljava/lang/Object;)I > 8,10 @37 exception:19,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 24,4,25 @44 exception:26,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
29 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,2 @18 exception:28,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
32 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getCredentialType(JI)I > 30,29,2 @24 exception:31,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
11 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @11 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @16 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,3 @19 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @22 exception:18,
22 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 20,19 @28 exception:21,
return 23,
conditional branch(eq, to iindex=-1) 32,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @33 exception:34,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 3,4,5,2 @6 exception:6,
8 = conversion(I) 7,
return 8,
37 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 35 @37 exception:36,
3 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityAlphabeticPassword(I)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityNumericPin(I)Z > 1 @8 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
monitorexit 4,
return 37,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	long v2 = p0.getSyntheticPasswordHandleLocked(p1);
	int v3 = this.mSpManager.getCredentialType(v2, p1);
	int v4 = p0.getKeyguardStoredQuality(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getCredentialType(long p1, int p2){
	byte[] v1 = p0.loadState(""pwd"", p1, p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getCredentialType: encountered empty password data for user "");
	StringBuilder v4 = v1.append(p2);
	String v5 = v1.toString();
	int v6 = Slog.w(""SyntheticPasswordManager"", v5);
	return -1;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","public int getCredentialType(int p1){
	LockSettingsStorage$PersistentData v10 = this.mStorage.readPersistentDataBlock();
	boolean v9 = phiInstruction;
	long v12 = LockSettingsService.getLong(""sp-handle"", 0, p1);
	long v11 = v12;
	byte[] v14 = SyntheticPasswordManager.loadState(""pwd"", v11, p1);
	int v13 = -1;
	long v22 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	int v21 = v22;
	boolean v24 = LockPatternUtils.isQualityAlphabeticPassword(v21);
	boolean v25 = LockPatternUtils.isQualityNumericPin(v21);
	int v23 = 3;
	int v8 = v23;
	return v8;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","getCredentialType(I)I","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordHavePermission(I)V > 1,2 @0 exception:3,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 3,4 @4 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
24 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 24,4,25 @44 exception:26,
return,
5 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getCredentialTypeInternal(I)I > 1,2 @3 exception:4,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 4,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, isSyntheticPasswordBasedCredentialLocked(I)Z > 1,2 @12 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
11 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
13 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, readPersistentDataBlock()Lcom/android/server/locksettings/LockSettingsStorage$PersistentData; > 11 @8 exception:12,
14 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStorage$PersistentData, type, <Primordial,I> > 13,
conditional branch(eq, to iindex=-1) 14,4,
conditional branch(ne, to iindex=-1) 14,15,
17 = phi  3,4,
return 17,
conditional branch(eq, to iindex=-1) 6,7,
29 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getSyntheticPasswordHandleLocked(I)J > 1,2 @18 exception:28,
6 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getLong(Ljava/lang/String;JI)J > 1,3,4,2 @5 exception:5,
return 6,
30 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
32 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, getCredentialType(JI)I > 30,29,2 @24 exception:31,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,4,2,3 @3 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
11 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @11 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @16 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,3 @19 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @22 exception:18,
22 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 20,19 @28 exception:21,
return 23,
conditional branch(eq, to iindex=-1) 32,33,
35 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getKeyguardStoredQuality(I)I > 1,2 @33 exception:34,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStorage, <Application,Lcom/android/server/locksettings/LockSettingsStorage> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStorage, getLong(Ljava/lang/String;JI)J > 3,4,5,2 @6 exception:6,
8 = conversion(I) 7,
return 8,
37 = invokestatic < Application, Lcom/android/server/locksettings/LockSettingsService, pinOrPasswordQualityToCredentialType(I)I > 35 @37 exception:36,
3 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityAlphabeticPassword(I)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/internal/widget/LockPatternUtils, isQualityNumericPin(I)Z > 1 @8 exception:5,
conditional branch(eq, to iindex=-1) 6,4,
return 18,
monitorexit 4,
return 37,
return 5,","depth : 0
public int getCredentialType(int p1){
	p0.checkPasswordHavePermission(p1);
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
-----
depth : 1
public void checkPasswordHavePermission(int p1){
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	long v2 = p0.getSyntheticPasswordHandleLocked(p1);
	int v3 = this.mSpManager.getCredentialType(v2, p1);
	int v4 = p0.getKeyguardStoredQuality(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong(""sp-handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getCredentialType(long p1, int p2){
	byte[] v1 = p0.loadState(""pwd"", p1, p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getCredentialType: encountered empty password data for user "");
	StringBuilder v4 = v1.append(p2);
	String v5 = v1.toString();
	int v6 = Slog.w(""SyntheticPasswordManager"", v5);
	return -1;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	return v1;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
","public int getCredentialType(int p1){
	LockSettingsStorage$PersistentData v6 = this.mStorage.readPersistentDataBlock();
	boolean v5 = phiInstruction;
	long v8 = LockSettingsService.getLong(""sp-handle"", 0, p1);
	long v7 = v8;
	byte[] v10 = SyntheticPasswordManager.loadState(""pwd"", v7, p1);
	int v9 = -1;
	long v18 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1);
	int v17 = v18;
	boolean v20 = LockPatternUtils.isQualityAlphabeticPassword(v17);
	boolean v21 = LockPatternUtils.isQualityNumericPin(v17);
	int v19 = 3;
	int v4 = v19;
	return v4;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;","0","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map; > 5,2,3,4 @2 exception:6,
return 7,","depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
","public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;","1","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
7 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @3 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:8,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, get(ILjava/lang/String;)Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry; > 10,9,2 @13 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
27 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, decryptRecoveryKey(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;[B)[B > 1,12,3 @19 exception:26,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverApplicationKeys([BLjava/util/List;)Ljava/util/Map; > 1,27,4 @23 exception:28,
31 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyMaterials(IILjava/util/Map;)Ljava/util/Map; > 1,7,9,29 @27 exception:30,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, destroy()V > 12 @31 exception:47,
48 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(I)V > 48,9 @36 exception:49,
return 31,
return 7,","depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
depth : 1
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v4 = this.mRecoverySessionStorage.get(v3, p1);
	byte[] v5 = p0.decryptRecoveryKey(v4, p2);
	Map v6 = p0.recoverApplicationKeys(v5, p3);
	Map v7 = p0.importKeyMaterials(v2, v3, v6);
	v4.destroy();
	this.mRecoverySessionStorage.remove(v3);
	return v7;
}
-----
","public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v5 = this.mRecoverySessionStorage.get(v4, p1);
	byte[] v6 = RecoverableKeyStoreManager.decryptRecoveryKey(v5, p2);
	Map v7 = RecoverableKeyStoreManager.recoverApplicationKeys(v6, p3);
	Map v8 = RecoverableKeyStoreManager.importKeyMaterials(v3, v4, v7);
	v5.destroy();
	this.mRecoverySessionStorage.remove(v4);
	Map v1 = v8;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
7 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @3 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:8,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, get(ILjava/lang/String;)Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry; > 10,9,2 @13 exception:11,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 4,2 @2 exception:5,
7 = checkcast <Application,Ljava/util/ArrayList>6 <Application,Ljava/util/ArrayList>,
conditional branch(ne, to iindex=-1) 7,8,
10 = invokevirtual < Application, Ljava/util/ArrayList, iterator()Ljava/util/Iterator; > 7 @12 exception:9,
12 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 10 @16 exception:11,
conditional branch(eq, to iindex=-1) 12,8,
14 = invokeinterface < Application, Ljava/util/Iterator, next()Ljava/lang/Object; > 10 @22 exception:13,
15 = checkcast <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>14 <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>,
17 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, -$$Nest$fgetmSessionId(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;)Ljava/lang/String; > 15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 3,17 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 15,
conditional branch(eq, to iindex=-1) 12,13,
27 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, decryptRecoveryKey(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;[B)[B > 1,12,3 @19 exception:26,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, getKeyClaimant()[B > 2 @8 exception:8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, getVaultParams()[B > 2 @12 exception:10,
13 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, decryptRecoveryClaimResponse([B[B[B)[B > 9,11,3 @16 exception:12,
54 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, getLskfHash()[B > 2 @20 exception:53,
56 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, decryptRecoveryKey([B[B)[B > 54,13 @24 exception:55,
return 56,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverApplicationKeys([BLjava/util/List;)Ljava/util/Map; > 1,27,4 @23 exception:28,
4 = new <Application,Ljava/util/HashMap>@0,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 4 @2 exception:5,
7 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 3 @5 exception:6,
9 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 7 @9 exception:8,
conditional branch(eq, to iindex=-1) 9,12,
47 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 3 @141 exception:46,
conditional branch(ne, to iindex=-1) 47,12,
49 = invokevirtual < Application, Ljava/util/HashMap, isEmpty()Z > 4 @147 exception:48,
conditional branch(ne, to iindex=-1) 49,12,
goto (from iindex= 71 to iindex = 12),
return 4,
31 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyMaterials(IILjava/util/Map;)Ljava/util/Map; > 1,7,9,29 @27 exception:30,
5 = new <Application,Landroid/util/ArrayMap>@0,
7 = invokeinterface < Application, Ljava/util/Map, size()I > 4 @2 exception:6,
invokespecial < Application, Landroid/util/ArrayMap, <init>(I)V > 5,7 @6 exception:8,
10 = invokeinterface < Application, Ljava/util/Map, keySet()Ljava/util/Set; > 4 @9 exception:9,
12 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 10 @13 exception:11,
14 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
return 5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, destroy()V > 12 @31 exception:47,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, mLskfHash, <Primordial,[B> > 1,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 2,3 @3 exception:4,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, mKeyClaimant, <Primordial,[B> > 1,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 5,3 @8 exception:6,
return,
48 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(I)V > 48,9 @36 exception:49,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
5 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 3,2 @2 exception:4,
6 = checkcast <Application,Ljava/util/ArrayList>5 <Application,Ljava/util/ArrayList>,
conditional branch(ne, to iindex=-1) 6,7,
9 = invokevirtual < Application, Ljava/util/ArrayList, iterator()Ljava/util/Iterator; > 6 @11 exception:8,
11 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 9 @15 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
invokevirtual < Application, Landroid/util/SparseArray, remove(I)V > 18,2 @33 exception:19,
return,
return 31,
return 7,","depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
depth : 1
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v4 = this.mRecoverySessionStorage.get(v3, p1);
	byte[] v5 = p0.decryptRecoveryKey(v4, p2);
	Map v6 = p0.recoverApplicationKeys(v5, p3);
	Map v7 = p0.importKeyMaterials(v2, v3, v6);
	v4.destroy();
	this.mRecoverySessionStorage.remove(v3);
	return v7;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public RecoverySessionStorage$Entry get(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	Object v4 = v2.next();
	String v5 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v4);
	boolean v6 = p2.equals(v5);
	return v4;
}
-----
depth : 2
public byte[] decryptRecoveryKey(RecoverySessionStorage$Entry p1, byte[] p2){
	byte[] v1 = p1.getKeyClaimant();
	byte[] v2 = p1.getVaultParams();
	byte[] v3 = KeySyncUtils.decryptRecoveryClaimResponse(v1, v2, p2);
	byte[] v4 = p1.getLskfHash();
	byte[] v5 = KeySyncUtils.decryptRecoveryKey(v4, v3);
	return v5;
}
-----
depth : 2
public Map recoverApplicationKeys(byte[] p1, List p2){
	HashMap v0 = new HashMap();
	Iterator v2 = p2.iterator();
	boolean v3 = v2.hasNext();
	boolean v4 = p2.isEmpty();
	boolean v5 = v0.isEmpty();
	return v0;
}
-----
depth : 2
public Map importKeyMaterials(int p1, int p2, Map p3){
	ArrayMap v0 = new ArrayMap(v1);
	int v1 = p3.size();
	Set v3 = p3.keySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v0;
}
-----
depth : 2
public void destroy(){
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	return;
}
-----
depth : 2
public void remove(int p1){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	this.mSessionsByUid.remove(p1);
	return;
}
-----
","public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = UserHandle.getCallingUserId();
	int v15 = Binder.getCallingUid();
	Object v17 = this.mSessionsByUid.get(v15);
	Iterator v18 = v17.iterator();
	boolean v19 = v18.hasNext();
	Object v20 = v18.next();
	String v21 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v20);
	boolean v22 = p1.equals(v21);
	RecoverySessionStorage$Entry v16 = v20;
	byte[] v24 = v16.getKeyClaimant();
	byte[] v25 = v16.getVaultParams();
	byte[] v26 = KeySyncUtils.decryptRecoveryClaimResponse(v24, v25, p2);
	byte[] v27 = v16.getLskfHash();
	byte[] v28 = KeySyncUtils.decryptRecoveryKey(v27, v26);
	byte[] v23 = v28;
	HashMap v30 = new HashMap();
	Iterator v32 = p3.iterator();
	boolean v33 = v32.hasNext();
	boolean v34 = p3.isEmpty();
	boolean v35 = v30.isEmpty();
	Map v29 = v30;
	ArrayMap v37 = new ArrayMap(v38);
	int v38 = v29.size();
	Set v40 = v29.keySet();
	Iterator v41 = v40.iterator();
	boolean v42 = v41.hasNext();
	Map v36 = v37;
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	Object v47 = this.mSessionsByUid.get(v15);
	Iterator v48 = v47.iterator();
	boolean v49 = v48.hasNext();
	this.mSessionsByUid.remove(v15);
	Map v1 = v36;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;","2","5 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mRecoverableKeyStoreManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager> > 1,
7 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map; > 5,2,3,4 @2 exception:6,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, checkRecoverKeyStorePermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mContext, <Application,Landroid/content/Context> > 1,
3 = new <Application,Ljava/lang/StringBuilder>@2,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @4 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @9 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @12 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 3,9 @16 exception:10,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @24 exception:15,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,17,16 @30 exception:18,
20 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @33 exception:19,
22 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @37 exception:21,
23 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mCleanupManager, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/CleanupManager, registerRecoveryAgent(II)V > 23,20,22 @43 exception:24,
return,
7 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @3 exception:6,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:8,
10 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
12 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, get(ILjava/lang/String;)Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry; > 10,9,2 @13 exception:11,
4 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 4,2 @2 exception:5,
7 = checkcast <Application,Ljava/util/ArrayList>6 <Application,Ljava/util/ArrayList>,
conditional branch(ne, to iindex=-1) 7,8,
10 = invokevirtual < Application, Ljava/util/ArrayList, iterator()Ljava/util/Iterator; > 7 @12 exception:9,
12 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 10 @16 exception:11,
conditional branch(eq, to iindex=-1) 12,8,
14 = invokeinterface < Application, Ljava/util/Iterator, next()Ljava/lang/Object; > 10 @22 exception:13,
15 = checkcast <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>14 <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry>,
17 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, -$$Nest$fgetmSessionId(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;)Ljava/lang/String; > 15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 3,17 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 15,
conditional branch(eq, to iindex=-1) 12,13,
27 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, decryptRecoveryKey(Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry;[B)[B > 1,12,3 @19 exception:26,
9 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, getKeyClaimant()[B > 2 @8 exception:8,
11 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, getVaultParams()[B > 2 @12 exception:10,
13 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, decryptRecoveryClaimResponse([B[B[B)[B > 9,11,3 @16 exception:12,
54 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, getLskfHash()[B > 2 @20 exception:53,
56 = invokestatic < Application, Lcom/android/server/locksettings/recoverablekeystore/KeySyncUtils, decryptRecoveryKey([B[B)[B > 54,13 @24 exception:55,
return 56,
29 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, recoverApplicationKeys([BLjava/util/List;)Ljava/util/Map; > 1,27,4 @23 exception:28,
4 = new <Application,Ljava/util/HashMap>@0,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 4 @2 exception:5,
7 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 3 @5 exception:6,
9 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 7 @9 exception:8,
conditional branch(eq, to iindex=-1) 9,12,
47 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 3 @141 exception:46,
conditional branch(ne, to iindex=-1) 47,12,
return 4,
31 = invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, importKeyMaterials(IILjava/util/Map;)Ljava/util/Map; > 1,7,9,29 @27 exception:30,
5 = new <Application,Landroid/util/ArrayMap>@0,
7 = invokeinterface < Application, Ljava/util/Map, size()I > 4 @2 exception:6,
invokespecial < Application, Landroid/util/ArrayMap, <init>(I)V > 5,7 @6 exception:8,
10 = invokeinterface < Application, Ljava/util/Map, keySet()Ljava/util/Set; > 4 @9 exception:9,
12 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 10 @13 exception:11,
14 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @17 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
return 5,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, destroy()V > 12 @31 exception:47,
2 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, mLskfHash, <Primordial,[B> > 1,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 2,3 @3 exception:4,
5 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage$Entry, mKeyClaimant, <Primordial,[B> > 1,
invokestatic < Application, Ljava/util/Arrays, fill([BB)V > 5,3 @8 exception:6,
return,
48 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager, mRecoverySessionStorage, <Application,Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, remove(I)V > 48,9 @36 exception:49,
3 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
5 = invokevirtual < Application, Landroid/util/SparseArray, get(I)Ljava/lang/Object; > 3,2 @2 exception:4,
6 = checkcast <Application,Ljava/util/ArrayList>5 <Application,Ljava/util/ArrayList>,
conditional branch(ne, to iindex=-1) 6,7,
9 = invokevirtual < Application, Ljava/util/ArrayList, iterator()Ljava/util/Iterator; > 6 @11 exception:8,
11 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 9 @15 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
18 = getfield < Application, Lcom/android/server/locksettings/recoverablekeystore/storage/RecoverySessionStorage, mSessionsByUid, <Application,Landroid/util/SparseArray> > 1,
invokevirtual < Application, Landroid/util/SparseArray, remove(I)V > 18,2 @33 exception:19,
return,
return 31,
return 7,","depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
depth : 1
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v4 = this.mRecoverySessionStorage.get(v3, p1);
	byte[] v5 = p0.decryptRecoveryKey(v4, p2);
	Map v6 = p0.recoverApplicationKeys(v5, p3);
	Map v7 = p0.importKeyMaterials(v2, v3, v6);
	v4.destroy();
	this.mRecoverySessionStorage.remove(v3);
	return v7;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public RecoverySessionStorage$Entry get(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	Object v4 = v2.next();
	String v5 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v4);
	boolean v6 = p2.equals(v5);
	return v4;
}
-----
depth : 2
public byte[] decryptRecoveryKey(RecoverySessionStorage$Entry p1, byte[] p2){
	byte[] v1 = p1.getKeyClaimant();
	byte[] v2 = p1.getVaultParams();
	byte[] v3 = KeySyncUtils.decryptRecoveryClaimResponse(v1, v2, p2);
	byte[] v4 = p1.getLskfHash();
	byte[] v5 = KeySyncUtils.decryptRecoveryKey(v4, v3);
	return v5;
}
-----
depth : 2
public Map recoverApplicationKeys(byte[] p1, List p2){
	HashMap v0 = new HashMap();
	Iterator v2 = p2.iterator();
	boolean v3 = v2.hasNext();
	boolean v4 = p2.isEmpty();
	return v0;
}
-----
depth : 2
public Map importKeyMaterials(int p1, int p2, Map p3){
	ArrayMap v0 = new ArrayMap(v1);
	int v1 = p3.size();
	Set v3 = p3.keySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v0;
}
-----
depth : 2
public void destroy(){
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	return;
}
-----
depth : 2
public void remove(int p1){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	this.mSessionsByUid.remove(p1);
	return;
}
-----
","public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = UserHandle.getCallingUserId();
	int v15 = Binder.getCallingUid();
	Object v17 = this.mSessionsByUid.get(v15);
	Iterator v18 = v17.iterator();
	boolean v19 = v18.hasNext();
	Object v20 = v18.next();
	String v21 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v20);
	boolean v22 = p1.equals(v21);
	RecoverySessionStorage$Entry v16 = v20;
	byte[] v24 = v16.getKeyClaimant();
	byte[] v25 = v16.getVaultParams();
	byte[] v26 = KeySyncUtils.decryptRecoveryClaimResponse(v24, v25, p2);
	byte[] v27 = v16.getLskfHash();
	byte[] v28 = KeySyncUtils.decryptRecoveryKey(v27, v26);
	byte[] v23 = v28;
	HashMap v30 = new HashMap();
	Iterator v32 = p3.iterator();
	boolean v33 = v32.hasNext();
	boolean v34 = p3.isEmpty();
	Map v29 = v30;
	ArrayMap v36 = new ArrayMap(v37);
	int v37 = v29.size();
	Set v39 = v29.keySet();
	Iterator v40 = v39.iterator();
	boolean v41 = v40.hasNext();
	Map v35 = v36;
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	Object v46 = this.mSessionsByUid.get(v15);
	Iterator v47 = v46.iterator();
	boolean v48 = v47.hasNext();
	this.mSessionsByUid.remove(v15);
	Map v1 = v35;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V > 4,2 @5 exception:5,
return,","depth : 0
public void unregisterStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.unregisterStrongAuthTracker(p1);
	return;
}
-----
","public void unregisterStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.unregisterStrongAuthTracker(p1);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:3,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
4 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mStrongAuth, <Application,Lcom/android/server/locksettings/LockSettingsStrongAuth> > 1,
invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V > 4,2 @5 exception:5,
3 = getfield < Application, Lcom/android/server/locksettings/LockSettingsStrongAuth, mHandler, <Application,Landroid/os/Handler> > 1,
6 = invokevirtual < Application, Landroid/os/Handler, obtainMessage(ILjava/lang/Object;)Landroid/os/Message; > 3,4,2 @3 exception:5,
invokevirtual < Application, Landroid/os/Message, sendToTarget()V > 6 @7 exception:7,
return,
return,","depth : 0
public void unregisterStrongAuthTracker(IStrongAuthTracker p1){
	p0.checkPasswordReadPermission();
	this.mStrongAuth.unregisterStrongAuthTracker(p1);
	return;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public void unregisterStrongAuthTracker(IStrongAuthTracker p1){
	Message v1 = this.mHandler.obtainMessage(3, p1);
	v1.sendToTarget();
	return;
}
-----
","public void unregisterStrongAuthTracker(IStrongAuthTracker p1){
	Message v4 = this.mHandler.obtainMessage(3, p1);
	v4.sendToTarget();
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","0","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
9 = invokevirtual < Application, Landroid/util/LongSparseArray, get(J)Ljava/lang/Object; > 7,2 @8 exception:8,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 22,23 @25 exception:24,
26 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
goto (from iindex= 16 to iindex = 13),
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	int v3 = Slog.d(""LockSettingsService"", ""No gatekeeper password for handle"");
	return phiInstruction;
}
-----
","public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
9 = invokevirtual < Application, Landroid/util/LongSparseArray, get(J)Ljava/lang/Object; > 7,2 @8 exception:8,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:18,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 17,19,10,3,4 @39 exception:20,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,4,8,3 @15 exception:10,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, <init>()V > 33 @27 exception:34,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
conditional branch(eq, to iindex=-1) 42,9,
44 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, enroll(I[B[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,8,8,3 @48 exception:43,
45 = getCaughtException ,
48 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 6,46,45 @56 exception:47,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
conditional branch(ne, to iindex=-1) 55,9,
56 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 56 @81 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 56,58 @86 exception:59,
62 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 56,5 @89 exception:61,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 56 @92 exception:63,
66 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 6,64 @96 exception:65,
return 40,
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = phiInstruction.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""Fail to re-enroll SP handle for user "");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w(""SyntheticPasswordManager"", v15);
	return v7;
}
-----
","public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v3 = this.mGatekeeperPasswords.get(p1);
	IBinder v5 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v6 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v5.linkToDeath(v6, 0);
	IGateKeeperService v10 = IGateKeeperService$Stub.asInterface(v5);
	this.mGateKeeperService = v10;
	IGateKeeperService v4 = v10;
	byte[] v12 = SyntheticPasswordManager.loadSyntheticPasswordHandle(p3);
	GateKeeperResponse v13 = v4.verifyChallenge(p3, p2, v12, v3);
	int v14 = v13.getResponseCode();
	VerifyCredentialResponse$Builder v15 = new VerifyCredentialResponse$Builder();
	byte[] v17 = v13.getPayload();
	VerifyCredentialResponse$Builder v18 = v15.setGatekeeperHAT(v17);
	VerifyCredentialResponse v19 = v18.build();
	boolean v20 = v13.getShouldReEnroll();
	GateKeeperResponse v21 = v4.enroll(p3, v12, v12, v3);
	int v23 = phiInstruction.getResponseCode();
	VerifyCredentialResponse v11 = v19;
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","1","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
9 = invokevirtual < Application, Landroid/util/LongSparseArray, get(J)Ljava/lang/Object; > 7,2 @8 exception:8,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
25 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 22,23 @25 exception:24,
26 = getstatic < Application, Lcom/android/internal/widget/VerifyCredentialResponse, ERROR, <Application,Lcom/android/internal/widget/VerifyCredentialResponse> >,
goto (from iindex= 16 to iindex = 13),
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	int v3 = Slog.d(""LockSettingsService"", ""No gatekeeper password for handle"");
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
","public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v3 = this.mGatekeeperPasswords.get(p1);
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
9 = invokevirtual < Application, Landroid/util/LongSparseArray, get(J)Ljava/lang/Object; > 7,2 @8 exception:8,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:18,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
invokespecial < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy, <init>(Landroid/os/IBinder;)V > 7,1 @22 exception:8,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 17,19,10,3,4 @39 exception:20,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,3,4,2 @4 exception:5,
return 6,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,4,8,3 @15 exception:10,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, <init>()V > 33 @27 exception:34,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
putfield 1.< Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > = 2,
return 1,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
2 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse>@0,
3 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > 1,
4 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperPasswordHandle, <Primordial,J> > 1,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse, <init>(II[BJLcom/android/internal/widget/VerifyCredentialResponse-IA;)V > 2,5,5,3,4,5 @10 exception:6,
return 2,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mShouldReEnroll, <Primordial,Z> > 1,
return 2,
conditional branch(eq, to iindex=-1) 42,9,
44 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, enroll(I[B[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,8,8,3 @48 exception:43,
45 = getCaughtException ,
48 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 6,46,45 @56 exception:47,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 55,9,
74 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 50 @67 exception:73,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveSyntheticPasswordHandle([BI)V > 1,74,5 @71 exception:75,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveState(Ljava/lang/String;[BJI)V > 1,4,2,5,3 @7 exception:6,
return,
77 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @74 exception:76,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,4,8,3 @15 exception:10,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, <init>()V > 33 @27 exception:34,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
conditional branch(eq, to iindex=-1) 42,9,
44 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, enroll(I[B[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,8,8,3 @48 exception:43,
45 = getCaughtException ,
48 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 6,46,45 @56 exception:47,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
conditional branch(ne, to iindex=-1) 55,9,
56 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 56 @81 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 56,58 @86 exception:59,
62 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 56,5 @89 exception:61,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 56 @92 exception:63,
66 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 6,64 @96 exception:65,
return 40,
return 77,
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = phiInstruction.getResponseCode();
	byte[] v12 = phiInstruction.getPayload();
	p0.saveSyntheticPasswordHandle(v12, p4);
	VerifyCredentialResponse v14 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v14;
}
-----
depth : 2
public byte[] loadSyntheticPasswordHandle(int p1){
	byte[] v1 = p0.loadState(""handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public VerifyCredentialResponse$Builder setGatekeeperHAT(byte[] p1){
	this.mGatekeeperHAT = p1;
	return p0;
}
-----
depth : 2
public VerifyCredentialResponse build(){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	return v0;
}
-----
depth : 2
public boolean getShouldReEnroll(){
	return this.mShouldReEnroll;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public void saveSyntheticPasswordHandle(byte[] p1, int p2){
	p0.saveState(""handle"", p1, 0, p2);
	return;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = phiInstruction.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""Fail to re-enroll SP handle for user "");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w(""SyntheticPasswordManager"", v15);
	return v7;
}
-----
","public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v3 = this.mGatekeeperPasswords.get(p1);
	IBinder v5 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v6 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v5.linkToDeath(v6, 0);
	IInterface v11 = v5.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v12 = new IGateKeeperService$Stub$Proxy(v5);
	IGateKeeperService v10 = v12;
	this.mGateKeeperService = v10;
	IGateKeeperService v4 = v10;
	byte[] v16 = SyntheticPasswordManager.loadState(""handle"", 0, p4);
	byte[] v15 = v16;
	GateKeeperResponse v17 = v4.verifyChallenge(p3, p2, v15, v3);
	int v18 = this.mResponseCode;
	VerifyCredentialResponse$Builder v19 = new VerifyCredentialResponse$Builder();
	byte[] v21 = this.mPayload;
	this.mGatekeeperHAT = v21;
	VerifyCredentialResponse$Builder v22 = VerifyCredentialResponse$Builder;
	VerifyCredentialResponse v24 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	VerifyCredentialResponse v23 = v24;
	boolean v26 = this.mShouldReEnroll;
	GateKeeperResponse v27 = v4.enroll(p3, v15, v15, v3);
	int v29 = this.mResponseCode;
	byte[] v30 = this.mPayload;
	SyntheticPasswordManager.saveState(""handle"", v30, 0, p4);
	VerifyCredentialResponse v33 = SyntheticPasswordManager.verifyChallengeInternal(v4, v3, p2, p3);
	byte[] v34 = SyntheticPasswordManager.loadSyntheticPasswordHandle(p3);
	GateKeeperResponse v35 = v4.verifyChallenge(p3, p2, v34, v3);
	int v36 = v35.getResponseCode();
	VerifyCredentialResponse$Builder v37 = new VerifyCredentialResponse$Builder();
	byte[] v39 = v35.getPayload();
	VerifyCredentialResponse$Builder v40 = v37.setGatekeeperHAT(v39);
	VerifyCredentialResponse v41 = v40.build();
	boolean v42 = v35.getShouldReEnroll();
	GateKeeperResponse v43 = v4.enroll(p3, v34, v34, v3);
	int v45 = phiInstruction.getResponseCode();
	VerifyCredentialResponse v14 = v41;
	return v33;
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
9 = invokevirtual < Application, Landroid/util/LongSparseArray, get(J)Ljava/lang/Object; > 7,2 @8 exception:8,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:18,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
9 = checkcast <Application,Landroid/service/gatekeeper/IGateKeeperService>5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
return 9,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 17,19,10,3,4 @39 exception:20,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,3,4,2 @4 exception:5,
return 6,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,4,8,3 @15 exception:10,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, <init>()V > 33 @27 exception:34,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
putfield 1.< Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > = 2,
return 1,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
2 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse>@0,
3 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > 1,
4 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperPasswordHandle, <Primordial,J> > 1,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse, <init>(II[BJLcom/android/internal/widget/VerifyCredentialResponse-IA;)V > 2,5,5,3,4,5 @10 exception:6,
return 2,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mShouldReEnroll, <Primordial,Z> > 1,
return 2,
conditional branch(eq, to iindex=-1) 42,9,
44 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, enroll(I[B[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,8,8,3 @48 exception:43,
45 = getCaughtException ,
48 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 6,46,45 @56 exception:47,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 55,9,
74 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 50 @67 exception:73,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveSyntheticPasswordHandle([BI)V > 1,74,5 @71 exception:75,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveState(Ljava/lang/String;[BJI)V > 1,4,2,5,3 @7 exception:6,
return,
77 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @74 exception:76,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,4,8,3 @15 exception:10,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, <init>()V > 33 @27 exception:34,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
conditional branch(eq, to iindex=-1) 42,9,
44 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, enroll(I[B[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,8,8,3 @48 exception:43,
45 = getCaughtException ,
48 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 6,46,45 @56 exception:47,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
conditional branch(ne, to iindex=-1) 55,9,
56 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 56 @81 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 56,58 @86 exception:59,
62 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 56,5 @89 exception:61,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 56 @92 exception:63,
66 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 6,64 @96 exception:65,
return 40,
return 77,
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = phiInstruction.getResponseCode();
	byte[] v12 = phiInstruction.getPayload();
	p0.saveSyntheticPasswordHandle(v12, p4);
	VerifyCredentialResponse v14 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v14;
}
-----
depth : 2
public byte[] loadSyntheticPasswordHandle(int p1){
	byte[] v1 = p0.loadState(""handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public VerifyCredentialResponse$Builder setGatekeeperHAT(byte[] p1){
	this.mGatekeeperHAT = p1;
	return p0;
}
-----
depth : 2
public VerifyCredentialResponse build(){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	return v0;
}
-----
depth : 2
public boolean getShouldReEnroll(){
	return this.mShouldReEnroll;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public void saveSyntheticPasswordHandle(byte[] p1, int p2){
	p0.saveState(""handle"", p1, 0, p2);
	return;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = phiInstruction.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""Fail to re-enroll SP handle for user "");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w(""SyntheticPasswordManager"", v15);
	return v7;
}
-----
","public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v3 = this.mGatekeeperPasswords.get(p1);
	IBinder v5 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v6 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v5.linkToDeath(v6, 0);
	IInterface v11 = v5.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService v10 = v11;
	this.mGateKeeperService = v10;
	IGateKeeperService v4 = v10;
	byte[] v14 = SyntheticPasswordManager.loadState(""handle"", 0, p4);
	byte[] v13 = v14;
	GateKeeperResponse v15 = v4.verifyChallenge(p3, p2, v13, v3);
	int v16 = this.mResponseCode;
	VerifyCredentialResponse$Builder v17 = new VerifyCredentialResponse$Builder();
	byte[] v19 = this.mPayload;
	this.mGatekeeperHAT = v19;
	VerifyCredentialResponse$Builder v20 = VerifyCredentialResponse$Builder;
	VerifyCredentialResponse v22 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	VerifyCredentialResponse v21 = v22;
	boolean v24 = this.mShouldReEnroll;
	GateKeeperResponse v25 = v4.enroll(p3, v13, v13, v3);
	int v27 = this.mResponseCode;
	byte[] v28 = this.mPayload;
	SyntheticPasswordManager.saveState(""handle"", v28, 0, p4);
	VerifyCredentialResponse v31 = SyntheticPasswordManager.verifyChallengeInternal(v4, v3, p2, p3);
	byte[] v32 = SyntheticPasswordManager.loadSyntheticPasswordHandle(p3);
	GateKeeperResponse v33 = v4.verifyChallenge(p3, p2, v32, v3);
	int v34 = v33.getResponseCode();
	VerifyCredentialResponse$Builder v35 = new VerifyCredentialResponse$Builder();
	byte[] v37 = v33.getPayload();
	VerifyCredentialResponse$Builder v38 = v35.setGatekeeperHAT(v37);
	VerifyCredentialResponse v39 = v38.build();
	boolean v40 = v33.getShouldReEnroll();
	GateKeeperResponse v41 = v4.enroll(p3, v32, v32, v3);
	int v43 = phiInstruction.getResponseCode();
	VerifyCredentialResponse v12 = v39;
	return v31;
	return phiInstruction;
}
","SYS_OR_SIG"
"Lcom/android/server/locksettings/LockSettingsService","verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;","2","invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, checkPasswordReadPermission()V > 1 @0 exception:5,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mContext, <Application,Landroid/content/Context> > 1,
invokevirtual < Application, Landroid/content/Context, enforceCallingOrSelfPermission(Ljava/lang/String;Ljava/lang/String;)V > 2,3,4 @6 exception:5,
return,
6 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGatekeeperPasswords, <Application,Landroid/util/LongSparseArray> > 1,
9 = invokevirtual < Application, Landroid/util/LongSparseArray, get(J)Ljava/lang/Object; > 7,2 @8 exception:8,
10 = checkcast <Primordial,[B>9 <Primordial,[B>,
monitorexit 6,
15 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
monitorenter 15,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mSpManager, <Application,Lcom/android/server/locksettings/SyntheticPasswordManager> > 1,
19 = invokevirtual < Application, Lcom/android/server/locksettings/LockSettingsService, getGateKeeperService()Landroid/service/gatekeeper/IGateKeeperService; > 1 @33 exception:18,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > 1,
conditional branch(eq, to iindex=-1) 2,3,
6 = invokestatic < Application, Landroid/os/ServiceManager, getService(Ljava/lang/String;)Landroid/os/IBinder; > 4 @9 exception:5,
conditional branch(eq, to iindex=-1) 6,3,
11 = new <Application,Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient>@16,
invokespecial < Application, Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient, <init>(Lcom/android/server/locksettings/LockSettingsService;Lcom/android/server/locksettings/LockSettingsService$GateKeeperDiedRecipient-IA;)V > 11,1,3 @18 exception:12,
invokeinterface < Application, Landroid/os/IBinder, linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V > 6,11,3 @22 exception:13,
14 = getCaughtException ,
17 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 7,15,14 @31 exception:16,
23 = invokestatic < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub, asInterface(Landroid/os/IBinder;)Landroid/service/gatekeeper/IGateKeeperService; > 6 @34 exception:22,
conditional branch(ne, to iindex=-1) 1,2,
5 = invokeinterface < Application, Landroid/os/IBinder, queryLocalInterface(Ljava/lang/String;)Landroid/os/IInterface; > 1,3 @6 exception:4,
conditional branch(eq, to iindex=-1) 5,2,
6 = instanceof 5 <Application,Landroid/service/gatekeeper/IGateKeeperService>,
conditional branch(eq, to iindex=-1) 6,2,
7 = new <Application,Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy>@20,
invokespecial < Application, Landroid/service/gatekeeper/IGateKeeperService$Stub$Proxy, <init>(Landroid/os/IBinder;)V > 7,1 @22 exception:8,
return 7,
putfield 1.< Application, Lcom/android/server/locksettings/LockSettingsService, mGateKeeperService, <Application,Landroid/service/gatekeeper/IGateKeeperService> > = 23,
monitorexit 1,
return 23,
21 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 17,19,10,3,4 @39 exception:20,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
6 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadState(Ljava/lang/String;JI)[B > 1,3,4,2 @4 exception:5,
return 6,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,4,8,3 @15 exception:10,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, <init>()V > 33 @27 exception:34,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
putfield 1.< Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > = 2,
return 1,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
2 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse>@0,
3 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperHAT, <Primordial,[B> > 1,
4 = getfield < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, mGatekeeperPasswordHandle, <Primordial,J> > 1,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse, <init>(II[BJLcom/android/internal/widget/VerifyCredentialResponse-IA;)V > 2,5,5,3,4,5 @10 exception:6,
return 2,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mShouldReEnroll, <Primordial,Z> > 1,
return 2,
conditional branch(eq, to iindex=-1) 42,9,
44 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, enroll(I[B[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,8,8,3 @48 exception:43,
goto (from iindex= 29 to iindex = 9),
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mResponseCode, <Primordial,I> > 1,
return 2,
conditional branch(ne, to iindex=-1) 55,9,
74 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 50 @67 exception:73,
2 = getfield < Application, Landroid/service/gatekeeper/GateKeeperResponse, mPayload, <Primordial,[B> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveSyntheticPasswordHandle([BI)V > 1,74,5 @71 exception:75,
invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, saveState(Ljava/lang/String;[BJI)V > 1,4,2,5,3 @7 exception:6,
return,
77 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, verifyChallengeInternal(Landroid/service/gatekeeper/IGateKeeperService;[BJI)Lcom/android/internal/widget/VerifyCredentialResponse; > 1,2,3,4,5 @74 exception:76,
8 = invokevirtual < Application, Lcom/android/server/locksettings/SyntheticPasswordManager, loadSyntheticPasswordHandle(I)[B > 1,5 @2 exception:7,
conditional branch(ne, to iindex=-1) 8,9,
11 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, verifyChallenge(IJ[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,4,8,3 @15 exception:10,
26 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 11 @19 exception:25,
conditional branch(ne, to iindex=-1) 26,9,
33 = new <Application,Lcom/android/internal/widget/VerifyCredentialResponse$Builder>@25,
invokespecial < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, <init>()V > 33 @27 exception:34,
36 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getPayload()[B > 11 @30 exception:35,
38 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, setGatekeeperHAT([B)Lcom/android/internal/widget/VerifyCredentialResponse$Builder; > 33,36 @34 exception:37,
40 = invokevirtual < Application, Lcom/android/internal/widget/VerifyCredentialResponse$Builder, build()Lcom/android/internal/widget/VerifyCredentialResponse; > 38 @38 exception:39,
42 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getShouldReEnroll()Z > 11 @42 exception:41,
conditional branch(eq, to iindex=-1) 42,9,
44 = invokeinterface < Application, Landroid/service/gatekeeper/IGateKeeperService, enroll(I[B[B[B)Landroid/service/gatekeeper/GateKeeperResponse; > 2,5,8,8,3 @48 exception:43,
45 = getCaughtException ,
48 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 6,46,45 @56 exception:47,
49 = getstatic < Application, Landroid/service/gatekeeper/GateKeeperResponse, ERROR, <Application,Landroid/service/gatekeeper/GateKeeperResponse> >,
50 = phi  44,49,
55 = invokevirtual < Application, Landroid/service/gatekeeper/GateKeeperResponse, getResponseCode()I > 50 @61 exception:54,
conditional branch(ne, to iindex=-1) 55,9,
56 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 56 @81 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 56,58 @86 exception:59,
62 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 56,5 @89 exception:61,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 56 @92 exception:63,
66 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 6,64 @96 exception:65,
return 40,
return 77,
28 = phi  26,21,
monitorexit 15,
return 28,","depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w(""LockSettingsService"", "" Unable to register death recipient"", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = phiInstruction.getResponseCode();
	byte[] v11 = phiInstruction.getPayload();
	p0.saveSyntheticPasswordHandle(v11, p4);
	VerifyCredentialResponse v13 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v13;
}
-----
depth : 2
public byte[] loadSyntheticPasswordHandle(int p1){
	byte[] v1 = p0.loadState(""handle"", 0, p1);
	return v1;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public VerifyCredentialResponse$Builder setGatekeeperHAT(byte[] p1){
	this.mGatekeeperHAT = p1;
	return p0;
}
-----
depth : 2
public VerifyCredentialResponse build(){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	return v0;
}
-----
depth : 2
public boolean getShouldReEnroll(){
	return this.mShouldReEnroll;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public void saveSyntheticPasswordHandle(byte[] p1, int p2){
	p0.saveState(""handle"", p1, 0, p2);
	return;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e(""SyntheticPasswordManager"", ""Failed to invoke gatekeeper.enroll"", caughtException);
	int v11 = phiInstruction.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""Fail to re-enroll SP handle for user "");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w(""SyntheticPasswordManager"", v15);
	return v7;
}
-----
","public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v3 = this.mGatekeeperPasswords.get(p1);
	IBinder v5 = ServiceManager.getService(""android.service.gatekeeper.IGateKeeperService"");
	LockSettingsService$GateKeeperDiedRecipient v6 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v5.linkToDeath(v6, 0);
	IInterface v11 = v5.queryLocalInterface(""android.service.gatekeeper.IGateKeeperService"");
	IGateKeeperService$Stub$Proxy v12 = new IGateKeeperService$Stub$Proxy(v5);
	IGateKeeperService v10 = v12;
	this.mGateKeeperService = v10;
	IGateKeeperService v4 = v10;
	byte[] v16 = SyntheticPasswordManager.loadState(""handle"", 0, p4);
	byte[] v15 = v16;
	GateKeeperResponse v17 = v4.verifyChallenge(p3, p2, v15, v3);
	int v18 = this.mResponseCode;
	VerifyCredentialResponse$Builder v19 = new VerifyCredentialResponse$Builder();
	byte[] v21 = this.mPayload;
	this.mGatekeeperHAT = v21;
	VerifyCredentialResponse$Builder v22 = VerifyCredentialResponse$Builder;
	VerifyCredentialResponse v24 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	VerifyCredentialResponse v23 = v24;
	boolean v26 = this.mShouldReEnroll;
	GateKeeperResponse v27 = v4.enroll(p3, v15, v15, v3);
	int v28 = this.mResponseCode;
	byte[] v29 = this.mPayload;
	SyntheticPasswordManager.saveState(""handle"", v29, 0, p4);
	VerifyCredentialResponse v32 = SyntheticPasswordManager.verifyChallengeInternal(v4, v3, p2, p3);
	byte[] v33 = SyntheticPasswordManager.loadSyntheticPasswordHandle(p3);
	GateKeeperResponse v34 = v4.verifyChallenge(p3, p2, v33, v3);
	int v35 = v34.getResponseCode();
	VerifyCredentialResponse$Builder v36 = new VerifyCredentialResponse$Builder();
	byte[] v38 = v34.getPayload();
	VerifyCredentialResponse$Builder v39 = v36.setGatekeeperHAT(v38);
	VerifyCredentialResponse v40 = v39.build();
	boolean v41 = v34.getShouldReEnroll();
	GateKeeperResponse v42 = v4.enroll(p3, v33, v33, v3);
	int v44 = phiInstruction.getResponseCode();
	VerifyCredentialResponse v14 = v40;
	return v32;
	return phiInstruction;
}
","SYS_OR_SIG"

