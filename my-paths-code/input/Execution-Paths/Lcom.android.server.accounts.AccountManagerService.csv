"Class","Method","Depth","Trace Instruction(s) ...","Java Code Representation","Code Merged","Access Control Level"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","0","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @19 exception:12,
arraystore 11[9] = 13,
16 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 14,11 @27 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,16 @31 exception:17,
24 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @39 exception:25,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
conditional branch(ne, to iindex=-1) 43,10,
45 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @66 exception:44,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 45 @77 exception:54,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
","public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(2);
	Integer v4 = Integer.valueOf(v1);
	String v5 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v3);
	int v6 = Log.v(""AccountManagerService"", v5);
	Object v7 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v8 = UserHandle.getCallingUserId();
	boolean v9 = p0.isAccountManagedByCaller(Account.type, v1, v8);
	boolean v10 = p0.canUserModifyAccounts(v8, v1);
	boolean v11 = p0.canUserModifyAccountsForType(v8, Account.type, v1);
	long v12 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v13 = p0.getUserAccounts(v8);
	boolean v14 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v12);
	return v14;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @19 exception:12,
arraystore 11[9] = 13,
16 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 14,11 @27 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,16 @31 exception:17,
24 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @39 exception:25,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
45 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @66 exception:44,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
monitorexit 6,
monitorexit 5,
return 9,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 45 @77 exception:54,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
","public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(2);
	Integer v4 = Integer.valueOf(v1);
	String v5 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v3);
	int v6 = Log.v(""AccountManagerService"", v5);
	Object v7 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v8 = UserHandle.getCallingUserId();
	List v10 = AccountManagerService.getTypesManagedByCaller(v1, v8);
	boolean v11 = v10.contains(Account.type);
	boolean v9 = v11;
	boolean v13 = AccountManagerService.isProfileOwner(v1);
	UserManager v14 = AccountManagerService.getUserManager();
	UserHandle v15 = new UserHandle(v8);
	Bundle v17 = v14.getUserRestrictions(v15);
	boolean v18 = v17.getBoolean(""no_modify_accounts"");
	boolean v12 = 0;
	boolean v20 = AccountManagerService.isProfileOwner(v1);
	Object v21 = this.mContext.getSystemService(""device_policy"");
	String v22 = v21.getAccountTypesWithManagementDisabledAsUser(v8);
	boolean v23 = v22[phiInstruction].equals(Account.type);
	boolean v19 = 0;
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v26 = AccountManagerService.getUserAccountsNotChecked(v8);
	AccountManagerService$UserAccounts v25 = v26;
	AccountManagerService$UserAccounts v28 = AccountManagerService.getUserAccountsForCaller();
	boolean v29 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	boolean v27 = v29;
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return v27;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,10,
24 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @39 exception:25,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
45 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @66 exception:44,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
monitorexit 6,
monitorexit 5,
return 9,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 45 @77 exception:54,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	boolean v6 = p0.canUserModifyAccounts(v4, v1);
	boolean v7 = p0.canUserModifyAccountsForType(v4, Account.type, v1);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v4);
	boolean v10 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v10;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
","public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesManagedByCaller(v1, v4);
	boolean v7 = v6.contains(Account.type);
	boolean v5 = v7;
	boolean v9 = AccountManagerService.isProfileOwner(v1);
	UserManager v10 = AccountManagerService.getUserManager();
	UserHandle v11 = new UserHandle(v4);
	Bundle v13 = v10.getUserRestrictions(v11);
	boolean v14 = v13.getBoolean(""no_modify_accounts"");
	boolean v8 = 0;
	boolean v16 = AccountManagerService.isProfileOwner(v1);
	Object v17 = this.mContext.getSystemService(""device_policy"");
	String v18 = v17.getAccountTypesWithManagementDisabledAsUser(v4);
	boolean v19 = v18[phiInstruction].equals(Account.type);
	boolean v15 = 0;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v21 = v22;
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsForCaller();
	boolean v25 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	boolean v23 = v25;
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v23;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @19 exception:12,
arraystore 11[9] = 13,
16 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 14,11 @27 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,16 @31 exception:17,
24 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @39 exception:25,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
45 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @66 exception:44,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
3 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 5,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
6 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 6 @8 exception:7,
9 = invokestatic < Application, Ljava/lang/System, currentTimeMillis()J > @11 exception:8,
11 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 9 @15 exception:10,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/Long;)V > 6,12,11 @21 exception:13,
15 = new <Application,[Ljava/lang/String>@2514 ,
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 15[17] = 16,
18 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 15[19] = 18,
23 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 5,20,6,21,15 @42 exception:22,
conditional branch(le, to iindex=-1) 23,17,
24 = phi  17,19,
return 24,
monitorexit 6,
monitorexit 5,
return 9,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 45 @77 exception:54,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public boolean updateAccountLastAuthenticatedTime(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	long v3 = System.currentTimeMillis();
	Long v4 = Long.valueOf(v3);
	v1.put(""last_password_entry_time_millis_epoch"", v4);
	String v5 = new String(2);
	int v6 = v1.update(""accounts"", v1, ""name=? AND type=?"", v5);
	return phiInstruction;
}
-----
","public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(2);
	Integer v4 = Integer.valueOf(v1);
	String v5 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v3);
	int v6 = Log.v(""AccountManagerService"", v5);
	Object v7 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v8 = UserHandle.getCallingUserId();
	List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v10 = v11;
	boolean v12 = v10.contains(Account.type);
	boolean v9 = v12;
	Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v16 = v15.isActiveProfileOwner(p2);
	boolean v17 = v15.isActiveDeviceOwner(p2);
	boolean v14 = phiInstruction;
	UserManager v18 = AccountManagerService.getUserManager();
	UserHandle v19 = new UserHandle(v8);
	Bundle v21 = v18.getUserRestrictions(v19);
	boolean v22 = v21.getBoolean(""no_modify_accounts"");
	boolean v13 = 0;
	Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v26 = v25.isActiveProfileOwner(p3);
	boolean v27 = v25.isActiveDeviceOwner(p3);
	boolean v24 = phiInstruction;
	Object v28 = this.mContext.getSystemService(""device_policy"");
	String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
	boolean v30 = v29[phiInstruction].equals(Account.type);
	boolean v23 = 0;
	long v31 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v32 = p0.getUserAccounts(v8);
	int v35 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccounts(v35);
	AccountManagerService$UserAccounts v34 = v36;
	SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase();
	ContentValues v39 = new ContentValues();
	long v41 = System.currentTimeMillis();
	Long v42 = Long.valueOf(v41);
	v39.put(""last_password_entry_time_millis_epoch"", v42);
	String v44 = new String(2);
	int v45 = v38.update(""accounts"", v39, ""name=? AND type=?"", v44);
	boolean v37 = phiInstruction;
	boolean v33 = v37;
	IAccountManager$Stub.restoreCallingIdentity(v31);
	return v33;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @19 exception:12,
arraystore 11[9] = 13,
16 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 14,11 @27 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,16 @31 exception:17,
24 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @39 exception:25,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
45 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @66 exception:44,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
3 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 5,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
6 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 6 @8 exception:7,
9 = invokestatic < Application, Ljava/lang/System, currentTimeMillis()J > @11 exception:8,
11 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 9 @15 exception:10,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/Long;)V > 6,12,11 @21 exception:13,
15 = new <Application,[Ljava/lang/String>@2514 ,
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 15[17] = 16,
18 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 15[19] = 18,
23 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 5,20,6,21,15 @42 exception:22,
conditional branch(le, to iindex=-1) 23,17,
24 = phi  17,19,
return 24,
monitorexit 6,
monitorexit 5,
return 9,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 45 @77 exception:54,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public boolean updateAccountLastAuthenticatedTime(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	long v3 = System.currentTimeMillis();
	Long v4 = Long.valueOf(v3);
	v1.put(""last_password_entry_time_millis_epoch"", v4);
	String v5 = new String(2);
	int v6 = v1.update(""accounts"", v1, ""name=? AND type=?"", v5);
	return phiInstruction;
}
-----
","public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(2);
	Integer v4 = Integer.valueOf(v1);
	String v5 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v3);
	int v6 = Log.v(""AccountManagerService"", v5);
	Object v7 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v8 = UserHandle.getCallingUserId();
	List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v10 = v11;
	boolean v12 = v10.contains(Account.type);
	boolean v9 = v12;
	Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v16 = v15.isActiveProfileOwner(p2);
	boolean v17 = v15.isActiveDeviceOwner(p2);
	boolean v14 = phiInstruction;
	UserManager v18 = AccountManagerService.getUserManager();
	UserHandle v19 = new UserHandle(v8);
	Bundle v21 = v18.getUserRestrictions(v19);
	boolean v22 = v21.getBoolean(""no_modify_accounts"");
	boolean v13 = 1;
	Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v26 = v25.isActiveProfileOwner(p3);
	boolean v27 = v25.isActiveDeviceOwner(p3);
	boolean v24 = phiInstruction;
	Object v28 = this.mContext.getSystemService(""device_policy"");
	String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
	boolean v30 = v29[phiInstruction].equals(Account.type);
	boolean v23 = 0;
	long v31 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v32 = p0.getUserAccounts(v8);
	int v35 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccounts(v35);
	AccountManagerService$UserAccounts v34 = v36;
	SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase();
	ContentValues v39 = new ContentValues();
	long v41 = System.currentTimeMillis();
	Long v42 = Long.valueOf(v41);
	v39.put(""last_password_entry_time_millis_epoch"", v42);
	String v44 = new String(2);
	int v45 = v38.update(""accounts"", v39, ""name=? AND type=?"", v44);
	boolean v37 = phiInstruction;
	boolean v33 = v37;
	IAccountManager$Stub.restoreCallingIdentity(v31);
	return v33;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
13 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @19 exception:12,
arraystore 11[9] = 13,
16 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 14,11 @27 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,16 @31 exception:17,
24 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @39 exception:25,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
45 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @66 exception:44,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
3 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 5,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
6 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 6 @8 exception:7,
9 = invokestatic < Application, Ljava/lang/System, currentTimeMillis()J > @11 exception:8,
11 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 9 @15 exception:10,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/Long;)V > 6,12,11 @21 exception:13,
15 = new <Application,[Ljava/lang/String>@2514 ,
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 15[17] = 16,
18 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 15[19] = 18,
23 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 5,20,6,21,15 @42 exception:22,
conditional branch(le, to iindex=-1) 23,17,
24 = phi  17,19,
return 24,
monitorexit 6,
monitorexit 5,
return 9,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 45 @77 exception:54,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public boolean updateAccountLastAuthenticatedTime(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	long v3 = System.currentTimeMillis();
	Long v4 = Long.valueOf(v3);
	v1.put(""last_password_entry_time_millis_epoch"", v4);
	String v5 = new String(2);
	int v6 = v1.update(""accounts"", v1, ""name=? AND type=?"", v5);
	return phiInstruction;
}
-----
","public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(2);
	Integer v4 = Integer.valueOf(v1);
	String v5 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v3);
	int v6 = Log.v(""AccountManagerService"", v5);
	Object v7 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v8 = UserHandle.getCallingUserId();
	List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v10 = v11;
	boolean v12 = v10.contains(Account.type);
	boolean v9 = v12;
	Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v16 = v15.isActiveProfileOwner(p2);
	boolean v17 = v15.isActiveDeviceOwner(p2);
	boolean v14 = phiInstruction;
	UserManager v18 = AccountManagerService.getUserManager();
	UserHandle v19 = new UserHandle(v8);
	Bundle v21 = v18.getUserRestrictions(v19);
	boolean v22 = v21.getBoolean(""no_modify_accounts"");
	boolean v13 = 0;
	Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v26 = v25.isActiveProfileOwner(p3);
	boolean v27 = v25.isActiveDeviceOwner(p3);
	boolean v24 = phiInstruction;
	Object v28 = this.mContext.getSystemService(""device_policy"");
	String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
	boolean v30 = v29[phiInstruction].equals(Account.type);
	boolean v23 = 0;
	long v31 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v32 = p0.getUserAccounts(v8);
	int v35 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccounts(v35);
	AccountManagerService$UserAccounts v34 = v36;
	SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase();
	ContentValues v39 = new ContentValues();
	long v41 = System.currentTimeMillis();
	Long v42 = Long.valueOf(v41);
	v39.put(""last_password_entry_time_millis_epoch"", v42);
	String v44 = new String(2);
	int v45 = v38.update(""accounts"", v39, ""name=? AND type=?"", v44);
	boolean v37 = phiInstruction;
	boolean v33 = v37;
	IAccountManager$Stub.restoreCallingIdentity(v31);
	return v33;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","0","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:59,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @86 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
66 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([Ljava/lang/Object;)Z > 4 @94 exception:65,
conditional branch(eq, to iindex=-1) 66,14,
67 = new <Application,Lcom/android/server/accounts/AccountManagerService$18>@117,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$18, <init>(Lcom/android/server/accounts/AccountManagerService;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;)V > 67,1,2,5 @119 exception:68,
69 = new <Application,Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession>@122,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;ILjava/lang/String;Z)V > 69,1,64,67,3,4,7,5,70 @130 exception:71,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 69 @133 exception:72,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @136 exception:73,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	AccountManagerService$18 v22 = new AccountManagerService$18(p0,p1,p4);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v23 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v21,v22,p2,p3,v1,p4,1);
	v23.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
","public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
	boolean v23 = ArrayUtils.isEmpty(p3);
	AccountManagerService$18 v24 = new AccountManagerService$18(p0,p1,p4);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v26 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v22,v24,p2,p3,v1,p4,1);
	v26.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:59,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @86 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
66 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([Ljava/lang/Object;)Z > 4 @94 exception:65,
conditional branch(eq, to iindex=-1) 66,14,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,64,3,7,5,70 @106 exception:74,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
9 = invokestatic < Application, Ljava/lang/Thread, holdsLock(Ljava/lang/Object;)Z > 7 @2 exception:8,
11 = binaryop(xor) 9 , 10,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 11,12 @10 exception:13,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
18 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 16 @58 exception:17,
20 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 18 @62 exception:19,
28 = phi  27,14,
22 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 20 @68 exception:21,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
34 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 32 @93 exception:33,
36 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 34 @97 exception:35,
46 = phi  45,14,
38 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 36 @102 exception:37,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
return 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, handleGetAccountsResult(Landroid/accounts/IAccountManagerResponse;[Landroid/accounts/Account;Ljava/lang/String;)V > 1,2,75,5 @110 exception:76,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, needToStartChooseAccountActivity([Landroid/accounts/Account;Ljava/lang/String;)Z > 1,3,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = arraylength 3,
conditional branch(ne, to iindex=-1) 8,9,
13 = new <Application,Landroid/os/Bundle>@14,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 13 @16 exception:14,
15 = arrayload 3[7],
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 15,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 13,17,16 @26 exception:18,
19 = arrayload 3[7],
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 19,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 13,21,20 @35 exception:22,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,13 @38 exception:23,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @113 exception:89,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	Account v23 = p0.getAccountsFromCache(v21, p2, v1, p4, 1);
	p0.handleGetAccountsResult(p1, v23, p4);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 1
public void handleGetAccountsResult(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = p0.needToStartChooseAccountActivity(p2, p3);
	Bundle v1 = new Bundle();
	v1.putString(""authAccount"", Account.name);
	v1.putString(""accountType"", Account.type);
	p0.onResult(p1, v1);
	return;
}
-----
","public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
	AccountManagerService$UserAccounts v22 = v23;
	boolean v24 = ArrayUtils.isEmpty(p3);
	boolean v26 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v26 ^ 1), ""Method should not be called with cacheLock"");
	Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v29 = v28.iterator();
	boolean v30 = v29.hasNext();
	Account v31 = new Account(phiInstruction);
	Collection v32 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v33 = v32.iterator();
	boolean v34 = v33.hasNext();
	Account v35 = AccountManagerService.filterAccounts(v22, v31, v1, p4, 1);
	Account v25 = v35;
	boolean v37 = AccountManagerService.needToStartChooseAccountActivity(v25, p4);
	Bundle v38 = new Bundle();
	v38.putString(""authAccount"", Account.name);
	v38.putString(""accountType"", Account.type);
	AccountManagerService.onResult(p1, v38);
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:59,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @86 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
66 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([Ljava/lang/Object;)Z > 4 @94 exception:65,
conditional branch(eq, to iindex=-1) 66,14,
67 = new <Application,Lcom/android/server/accounts/AccountManagerService$18>@117,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$18, <init>(Lcom/android/server/accounts/AccountManagerService;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;)V > 67,1,2,5 @119 exception:68,
69 = new <Application,Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession>@122,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;ILjava/lang/String;Z)V > 69,1,64,67,3,4,7,5,70 @130 exception:71,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 69 @133 exception:72,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @136 exception:73,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	AccountManagerService$18 v22 = new AccountManagerService$18(p0,p1,p4);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v23 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v21,v22,p2,p3,v1,p4,1);
	v23.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
	AccountManagerService$UserAccounts v22 = v23;
	boolean v24 = ArrayUtils.isEmpty(p3);
	AccountManagerService$18 v25 = new AccountManagerService$18(p0,p1,p4);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v27 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v22,v25,p2,p3,v1,p4,1);
	boolean v30 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v31 = new StringBuilder();
	StringBuilder v33 = v31.append(""initiating bind to authenticator type "");
	StringBuilder v34 = v31.append(this.mAccountType);
	String v35 = v31.toString();
	int v36 = Log.v(""AccountManagerService"", v35);
	boolean v37 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v38 = new StringBuilder();
	StringBuilder v40 = v38.append(""bind attempt failed for "");
	String v41 = AccountManagerService$Session.toDebugString();
	StringBuilder v42 = v38.append(v41);
	String v43 = v38.toString();
	int v44 = Log.d(""AccountManagerService"", v43);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:59,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @86 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
66 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([Ljava/lang/Object;)Z > 4 @94 exception:65,
conditional branch(eq, to iindex=-1) 66,14,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,64,3,7,5,70 @106 exception:74,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
9 = invokestatic < Application, Ljava/lang/Thread, holdsLock(Ljava/lang/Object;)Z > 7 @2 exception:8,
11 = binaryop(xor) 9 , 10,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 11,12 @10 exception:13,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
18 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 16 @58 exception:17,
20 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 18 @62 exception:19,
28 = phi  27,14,
22 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 20 @68 exception:21,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
34 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 32 @93 exception:33,
36 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 34 @97 exception:35,
46 = phi  45,14,
38 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 36 @102 exception:37,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
conditional branch(ne, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackageNameForUid(I)Ljava/lang/String; > 1,4 @2 exception:8,
goto (from iindex= 3 to iindex = 2),
10 = phi  9,5,
11 = new <Application,Ljava/util/LinkedHashMap>@8,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 11 @10 exception:12,
13 = arraylength 3,
33 = phi  32,7,
conditional branch(ge, to iindex=-1) 33,13,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,2,11,4,5 @48 exception:36,
39 = invokeinterface < Application, Ljava/util/Map, size()I > 37 @52 exception:38,
40 = new <Application,[Landroid/accounts/Account>@5639 ,
42 = invokeinterface < Application, Ljava/util/Map, keySet()Ljava/util/Set; > 37 @58 exception:41,
44 = invokeinterface < Application, Ljava/util/Set, toArray([Ljava/lang/Object;)[Ljava/lang/Object; > 42,40 @62 exception:43,
45 = checkcast <Application,[Landroid/accounts/Account>44 <Application,[Landroid/accounts/Account>,
return 45,
return 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, handleGetAccountsResult(Landroid/accounts/IAccountManagerResponse;[Landroid/accounts/Account;Ljava/lang/String;)V > 1,2,75,5 @110 exception:76,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, needToStartChooseAccountActivity([Landroid/accounts/Account;Ljava/lang/String;)Z > 1,3,4 @0 exception:5,
4 = arraylength 2,
conditional branch(ge, to iindex=-1) 4,6,
7 = arraylength 2,
conditional branch(le, to iindex=-1) 7,6,
8 = arrayload 2[5],
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,10 @16 exception:11,
14 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,8,3,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = arraylength 3,
conditional branch(ne, to iindex=-1) 8,9,
13 = new <Application,Landroid/os/Bundle>@14,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 13 @16 exception:14,
15 = arrayload 3[7],
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 15,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 13,17,16 @26 exception:18,
19 = arrayload 3[7],
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 19,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 13,21,20 @35 exception:22,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,13 @38 exception:23,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
invokespecial < Application, Ljava/lang/Exception, <init>()V > 6 @6 exception:7,
10 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,8,6 @12 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @16 exception:12,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 14 @24 exception:15,
17 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @27 exception:16,
19 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,19 @35 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,22 @40 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 14,2 @43 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 14 @46 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 4,28 @50 exception:29,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,3 @53 exception:35,
36 = getCaughtException ,
38 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @58 exception:37,
conditional branch(eq, to iindex=-1) 38,5,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,39,36 @66 exception:40,
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @113 exception:89,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	Account v23 = p0.getAccountsFromCache(v21, p2, v1, p4, 1);
	p0.handleGetAccountsResult(p1, v23, p4);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 2
public Account filterAccounts(AccountManagerService$UserAccounts p1, Account p2, int p3, String p4, boolean p5){
	String v1 = p0.getPackageNameForUid(p3);
	LinkedHashMap v1 = new LinkedHashMap();
	Map v3 = p0.filterSharedAccounts(p1, v1, p3, p4);
	int v4 = v3.size();
	Account v4 = new Account(v4);
	Set v5 = v3.keySet();
	Object v6 = v5.toArray(v4);
	return v6;
}
-----
depth : 1
public void handleGetAccountsResult(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = p0.needToStartChooseAccountActivity(p2, p3);
	Bundle v1 = new Bundle();
	v1.putString(""authAccount"", Account.name);
	v1.putString(""accountType"", Account.type);
	p0.onResult(p1, v1);
	return;
}
-----
depth : 2
public boolean needToStartChooseAccountActivity(Account p1, String p2){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	Integer v3 = p0.resolveAccountVisibility(p1[0], p2, v2);
	int v4 = v3.intValue();
	return 1;
}
-----
depth : 2
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
	AccountManagerService$UserAccounts v22 = v23;
	boolean v24 = ArrayUtils.isEmpty(p3);
	boolean v26 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v26 ^ 1), ""Method should not be called with cacheLock"");
	Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v29 = v28.iterator();
	boolean v30 = v29.hasNext();
	Account v31 = new Account(phiInstruction);
	Collection v32 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v33 = v32.iterator();
	boolean v34 = v33.hasNext();
	String v36 = AccountManagerService.getPackageNameForUid(p3);
	LinkedHashMap v37 = new LinkedHashMap();
	Map v39 = AccountManagerService.filterSharedAccounts(p1, v37, p3, p4);
	int v40 = v39.size();
	Account v41 = new Account(v40);
	Set v42 = v39.keySet();
	Object v43 = v42.toArray(v41);
	Account v35 = v43;
	Account v25 = v35;
	int v46 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v47 = AccountManagerService.getUserAccounts(v46);
	Integer v48 = AccountManagerService.resolveAccountVisibility(p2[0], p3, v47);
	int v49 = v48.intValue();
	boolean v45 = 1;
	Bundle v50 = new Bundle();
	v50.putString(""authAccount"", Account.name);
	v50.putString(""accountType"", Account.type);
	Exception v55 = new Exception();
	int v57 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v55);
	boolean v58 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v59 = new StringBuilder();
	Class v61 = AccountManagerService.getClass();
	String v62 = v61.getSimpleName();
	StringBuilder v63 = v59.append(v62);
	StringBuilder v64 = v59.append("" calling onResult() on response "");
	StringBuilder v65 = v59.append(p1);
	String v66 = v59.toString();
	int v67 = Log.v(""AccountManagerService"", v66);
	p1.onResult(v50);
	boolean v69 = Log.isLoggable(""AccountManagerService"", 2);
	int v70 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:59,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @86 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
66 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([Ljava/lang/Object;)Z > 4 @94 exception:65,
conditional branch(eq, to iindex=-1) 66,14,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,64,3,7,5,70 @106 exception:74,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
9 = invokestatic < Application, Ljava/lang/Thread, holdsLock(Ljava/lang/Object;)Z > 7 @2 exception:8,
11 = binaryop(xor) 9 , 10,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 11,12 @10 exception:13,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
18 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 16 @58 exception:17,
20 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 18 @62 exception:19,
28 = phi  27,14,
22 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 20 @68 exception:21,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
34 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 32 @93 exception:33,
36 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 34 @97 exception:35,
46 = phi  45,14,
38 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 36 @102 exception:37,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
conditional branch(ne, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackageNameForUid(I)Ljava/lang/String; > 1,4 @2 exception:8,
goto (from iindex= 3 to iindex = 2),
10 = phi  9,5,
11 = new <Application,Ljava/util/LinkedHashMap>@8,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 11 @10 exception:12,
13 = arraylength 3,
33 = phi  32,7,
conditional branch(ge, to iindex=-1) 33,13,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,2,11,4,5 @48 exception:36,
39 = invokeinterface < Application, Ljava/util/Map, size()I > 37 @52 exception:38,
40 = new <Application,[Landroid/accounts/Account>@5639 ,
42 = invokeinterface < Application, Ljava/util/Map, keySet()Ljava/util/Set; > 37 @58 exception:41,
44 = invokeinterface < Application, Ljava/util/Set, toArray([Ljava/lang/Object;)[Ljava/lang/Object; > 42,40 @62 exception:43,
45 = checkcast <Application,[Landroid/accounts/Account>44 <Application,[Landroid/accounts/Account>,
return 45,
return 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, handleGetAccountsResult(Landroid/accounts/IAccountManagerResponse;[Landroid/accounts/Account;Ljava/lang/String;)V > 1,2,75,5 @110 exception:76,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, needToStartChooseAccountActivity([Landroid/accounts/Account;Ljava/lang/String;)Z > 1,3,4 @0 exception:5,
4 = arraylength 2,
conditional branch(ge, to iindex=-1) 4,6,
7 = arraylength 2,
conditional branch(le, to iindex=-1) 7,6,
8 = arrayload 2[5],
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,10 @16 exception:11,
14 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,8,3,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
return 5,
conditional branch(eq, to iindex=-1) 6,7,
8 = arraylength 3,
conditional branch(ne, to iindex=-1) 8,9,
13 = new <Application,Landroid/os/Bundle>@14,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 13 @16 exception:14,
15 = arrayload 3[7],
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 15,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 13,17,16 @26 exception:18,
19 = arrayload 3[7],
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 19,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 13,21,20 @35 exception:22,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,13 @38 exception:23,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
invokespecial < Application, Ljava/lang/Exception, <init>()V > 6 @6 exception:7,
10 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,8,6 @12 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @16 exception:12,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 14 @24 exception:15,
17 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @27 exception:16,
19 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,19 @35 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,22 @40 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 14,2 @43 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 14 @46 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 4,28 @50 exception:29,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,3 @53 exception:35,
36 = getCaughtException ,
38 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @58 exception:37,
conditional branch(eq, to iindex=-1) 38,5,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,39,36 @66 exception:40,
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @113 exception:89,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	Account v23 = p0.getAccountsFromCache(v21, p2, v1, p4, 1);
	p0.handleGetAccountsResult(p1, v23, p4);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 2
public Account filterAccounts(AccountManagerService$UserAccounts p1, Account p2, int p3, String p4, boolean p5){
	String v1 = p0.getPackageNameForUid(p3);
	LinkedHashMap v1 = new LinkedHashMap();
	Map v3 = p0.filterSharedAccounts(p1, v1, p3, p4);
	int v4 = v3.size();
	Account v4 = new Account(v4);
	Set v5 = v3.keySet();
	Object v6 = v5.toArray(v4);
	return v6;
}
-----
depth : 1
public void handleGetAccountsResult(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = p0.needToStartChooseAccountActivity(p2, p3);
	Bundle v1 = new Bundle();
	v1.putString(""authAccount"", Account.name);
	v1.putString(""accountType"", Account.type);
	p0.onResult(p1, v1);
	return;
}
-----
depth : 2
public boolean needToStartChooseAccountActivity(Account p1, String p2){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	Integer v3 = p0.resolveAccountVisibility(p1[0], p2, v2);
	int v4 = v3.intValue();
	return 0;
}
-----
depth : 2
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
	AccountManagerService$UserAccounts v22 = v23;
	boolean v24 = ArrayUtils.isEmpty(p3);
	boolean v26 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v26 ^ 1), ""Method should not be called with cacheLock"");
	Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v29 = v28.iterator();
	boolean v30 = v29.hasNext();
	Account v31 = new Account(phiInstruction);
	Collection v32 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v33 = v32.iterator();
	boolean v34 = v33.hasNext();
	String v36 = AccountManagerService.getPackageNameForUid(p3);
	LinkedHashMap v37 = new LinkedHashMap();
	Map v39 = AccountManagerService.filterSharedAccounts(p1, v37, p3, p4);
	int v40 = v39.size();
	Account v41 = new Account(v40);
	Set v42 = v39.keySet();
	Object v43 = v42.toArray(v41);
	Account v35 = v43;
	Account v25 = v35;
	int v46 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v47 = AccountManagerService.getUserAccounts(v46);
	Integer v48 = AccountManagerService.resolveAccountVisibility(p2[0], p3, v47);
	int v49 = v48.intValue();
	boolean v45 = 0;
	Bundle v50 = new Bundle();
	v50.putString(""authAccount"", Account.name);
	v50.putString(""accountType"", Account.type);
	Exception v55 = new Exception();
	int v57 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v55);
	boolean v58 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v59 = new StringBuilder();
	Class v61 = AccountManagerService.getClass();
	String v62 = v61.getSimpleName();
	StringBuilder v63 = v59.append(v62);
	StringBuilder v64 = v59.append("" calling onResult() on response "");
	StringBuilder v65 = v59.append(p1);
	String v66 = v59.toString();
	int v67 = Log.v(""AccountManagerService"", v66);
	p1.onResult(v50);
	boolean v69 = Log.isLoggable(""AccountManagerService"", 2);
	int v70 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:59,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @86 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
66 = invokestatic < Application, Lcom/android/internal/util/ArrayUtils, isEmpty([Ljava/lang/Object;)Z > 4 @94 exception:65,
conditional branch(eq, to iindex=-1) 66,14,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,64,3,7,5,70 @106 exception:74,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
9 = invokestatic < Application, Ljava/lang/Thread, holdsLock(Ljava/lang/Object;)Z > 7 @2 exception:8,
11 = binaryop(xor) 9 , 10,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 11,12 @10 exception:13,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
18 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 16 @58 exception:17,
20 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 18 @62 exception:19,
28 = phi  27,14,
22 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 20 @68 exception:21,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
34 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 32 @93 exception:33,
36 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 34 @97 exception:35,
46 = phi  45,14,
38 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 36 @102 exception:37,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
conditional branch(ne, to iindex=-1) 5,7,
10 = phi  9,5,
11 = new <Application,Ljava/util/LinkedHashMap>@8,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 11 @10 exception:12,
13 = arraylength 3,
33 = phi  32,7,
conditional branch(ge, to iindex=-1) 33,13,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,2,11,4,5 @48 exception:36,
39 = invokeinterface < Application, Ljava/util/Map, size()I > 37 @52 exception:38,
40 = new <Application,[Landroid/accounts/Account>@5639 ,
42 = invokeinterface < Application, Ljava/util/Map, keySet()Ljava/util/Set; > 37 @58 exception:41,
44 = invokeinterface < Application, Ljava/util/Set, toArray([Ljava/lang/Object;)[Ljava/lang/Object; > 42,40 @62 exception:43,
45 = checkcast <Application,[Landroid/accounts/Account>44 <Application,[Landroid/accounts/Account>,
return 45,
return 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, handleGetAccountsResult(Landroid/accounts/IAccountManagerResponse;[Landroid/accounts/Account;Ljava/lang/String;)V > 1,2,75,5 @110 exception:76,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, needToStartChooseAccountActivity([Landroid/accounts/Account;Ljava/lang/String;)Z > 1,3,4 @0 exception:5,
4 = arraylength 2,
conditional branch(ge, to iindex=-1) 4,6,
7 = arraylength 2,
conditional branch(le, to iindex=-1) 7,6,
8 = arrayload 2[5],
10 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @12 exception:9,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,10 @16 exception:11,
14 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,8,3,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = arraylength 3,
conditional branch(ne, to iindex=-1) 8,9,
13 = new <Application,Landroid/os/Bundle>@14,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 13 @16 exception:14,
15 = arrayload 3[7],
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 15,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 13,17,16 @26 exception:18,
19 = arrayload 3[7],
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 19,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 13,21,20 @35 exception:22,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,13 @38 exception:23,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
invokespecial < Application, Ljava/lang/Exception, <init>()V > 6 @6 exception:7,
10 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,8,6 @12 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @16 exception:12,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 14 @24 exception:15,
17 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @27 exception:16,
19 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,19 @35 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,22 @40 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 14,2 @43 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 14 @46 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 4,28 @50 exception:29,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,3 @53 exception:35,
36 = getCaughtException ,
38 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @58 exception:37,
conditional branch(eq, to iindex=-1) 38,5,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,39,36 @66 exception:40,
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @113 exception:89,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	Account v23 = p0.getAccountsFromCache(v21, p2, v1, p4, 1);
	p0.handleGetAccountsResult(p1, v23, p4);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 2
public Account filterAccounts(AccountManagerService$UserAccounts p1, Account p2, int p3, String p4, boolean p5){
	LinkedHashMap v0 = new LinkedHashMap();
	Map v2 = p0.filterSharedAccounts(p1, v0, p3, p4);
	int v3 = v2.size();
	Account v3 = new Account(v3);
	Set v4 = v2.keySet();
	Object v5 = v4.toArray(v3);
	return v5;
}
-----
depth : 1
public void handleGetAccountsResult(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = p0.needToStartChooseAccountActivity(p2, p3);
	Bundle v1 = new Bundle();
	v1.putString(""authAccount"", Account.name);
	v1.putString(""accountType"", Account.type);
	p0.onResult(p1, v1);
	return;
}
-----
depth : 2
public boolean needToStartChooseAccountActivity(Account p1, String p2){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	Integer v3 = p0.resolveAccountVisibility(p1[0], p2, v2);
	int v4 = v3.intValue();
	return 1;
}
-----
depth : 2
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
	AccountManagerService$UserAccounts v22 = v23;
	boolean v24 = ArrayUtils.isEmpty(p3);
	boolean v26 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v26 ^ 1), ""Method should not be called with cacheLock"");
	Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v29 = v28.iterator();
	boolean v30 = v29.hasNext();
	Account v31 = new Account(phiInstruction);
	Collection v32 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v33 = v32.iterator();
	boolean v34 = v33.hasNext();
	LinkedHashMap v36 = new LinkedHashMap();
	Map v38 = AccountManagerService.filterSharedAccounts(p1, v36, p3, p4);
	int v39 = v38.size();
	Account v40 = new Account(v39);
	Set v41 = v38.keySet();
	Object v42 = v41.toArray(v40);
	Account v35 = v42;
	Account v25 = v35;
	int v45 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v46 = AccountManagerService.getUserAccounts(v45);
	Integer v47 = AccountManagerService.resolveAccountVisibility(p2[0], p3, v46);
	int v48 = v47.intValue();
	boolean v44 = 1;
	Bundle v49 = new Bundle();
	v49.putString(""authAccount"", Account.name);
	v49.putString(""accountType"", Account.type);
	Exception v54 = new Exception();
	int v56 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v54);
	boolean v57 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v58 = new StringBuilder();
	Class v60 = AccountManagerService.getClass();
	String v61 = v60.getSimpleName();
	StringBuilder v62 = v58.append(v61);
	StringBuilder v63 = v58.append("" calling onResult() on response "");
	StringBuilder v64 = v58.append(p1);
	String v65 = v58.toString();
	int v66 = Log.v(""AccountManagerService"", v65);
	p1.onResult(v49);
	boolean v68 = Log.isLoggable(""AccountManagerService"", 2);
	int v69 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","0","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @15 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 11,2 @24 exception:16,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,5 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,28 @45 exception:29,
32 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,32 @52 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @55 exception:35,
38 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,36 @59 exception:37,
44 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,42 @64 exception:43,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,45 @69 exception:46,
49 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:48,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
conditional branch(ne, to iindex=-1) 64,10,
77 = new <Application,Ljava/lang/StringBuilder>@90,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 77 @92 exception:78,
81 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 77,79 @97 exception:80,
83 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 77,49 @100 exception:82,
86 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 77,84 @105 exception:85,
88 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 77,5 @108 exception:87,
90 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 77 @111 exception:89,
92 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 6,90 @115 exception:91,
return 10,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""peekAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	boolean v19 = p0.isLocalUnlockedUser(v17);
	StringBuilder v19 = new StringBuilder();
	StringBuilder v21 = v19.append(""Authtoken not available - user "");
	StringBuilder v22 = v19.append(v17);
	StringBuilder v23 = v19.append("" data is locked. callingUid "");
	StringBuilder v24 = v19.append(v1);
	String v25 = v19.toString();
	int v26 = Log.w(""AccountManagerService"", v25);
	return 0;
}
-----
","public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""peekAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", authTokenType "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v17 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v18 = UserHandle.getCallingUserId();
	boolean v19 = p0.isAccountManagedByCaller(Account.type, v1, v18);
	boolean v20 = p0.isLocalUnlockedUser(v18);
	StringBuilder v21 = new StringBuilder();
	StringBuilder v23 = v21.append(""Authtoken not available - user "");
	StringBuilder v24 = v21.append(v18);
	StringBuilder v25 = v21.append("" data is locked. callingUid "");
	StringBuilder v26 = v21.append(v1);
	String v27 = v21.toString();
	int v28 = Log.w(""AccountManagerService"", v27);
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @15 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 11,2 @24 exception:16,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,5 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,28 @45 exception:29,
32 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,32 @52 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @55 exception:35,
38 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,36 @59 exception:37,
44 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,42 @64 exception:43,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,45 @69 exception:46,
49 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:48,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 64,10,
66 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @120 exception:65,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
17 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 15,3 @34 exception:16,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthTokensByAccount(Landroid/accounts/Account;)Ljava/util/Map; > 19,3 @44 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @48 exception:22,
25 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 23,3,21 @52 exception:24,
26 = phi  18,21,
31 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 26,4 @55 exception:30,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 66 @132 exception:76,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""peekAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	boolean v19 = p0.isLocalUnlockedUser(v17);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	String v22 = p0.readAuthTokenInternal(v21, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = phiInstruction.get(p3);
	return v8;
}
-----
","public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""peekAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", authTokenType "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v17 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v18 = UserHandle.getCallingUserId();
	List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
	boolean v21 = v20.contains(Account.type);
	boolean v19 = v21;
	boolean v23 = this.mLocalUnlockedUsers.get(v18);
	boolean v22 = v23;
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v26 = AccountManagerService.getUserAccountsNotChecked(v18);
	AccountManagerService$UserAccounts v25 = v26;
	Map v28 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);
	Object v29 = v28.get(p1);
	Map v30 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);
	Object v31 = v30.get(p1);
	Map v32 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p1);
	Map v33 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);
	Object v34 = v33.put(p1, v32);
	Object v35 = phiInstruction.get(p2);
	String v27 = v35;
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return v27;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
44 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,42 @64 exception:43,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,45 @69 exception:46,
49 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:48,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 64,10,
66 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @120 exception:65,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
17 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 15,3 @34 exception:16,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthTokensByAccount(Landroid/accounts/Account;)Ljava/util/Map; > 19,3 @44 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @48 exception:22,
25 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 23,3,21 @52 exception:24,
26 = phi  18,21,
31 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 26,4 @55 exception:30,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 66 @132 exception:76,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	boolean v7 = p0.isLocalUnlockedUser(v5);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v5);
	String v10 = p0.readAuthTokenInternal(v9, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v10;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = phiInstruction.get(p3);
	return v8;
}
-----
","public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesManagedByCaller(v1, v5);
	boolean v8 = v7.contains(Account.type);
	boolean v6 = v8;
	boolean v10 = this.mLocalUnlockedUsers.get(v5);
	boolean v9 = v10;
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v13 = AccountManagerService.getUserAccountsNotChecked(v5);
	AccountManagerService$UserAccounts v12 = v13;
	Map v15 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v12);
	Object v16 = v15.get(p1);
	Map v17 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v12);
	Object v18 = v17.get(p1);
	Map v19 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p1);
	Map v20 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v12);
	Object v21 = v20.put(p1, v19);
	Object v22 = phiInstruction.get(p2);
	String v14 = v22;
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v14;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @15 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 11,2 @24 exception:16,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,5 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,28 @45 exception:29,
32 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,32 @52 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @55 exception:35,
38 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,36 @59 exception:37,
44 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,42 @64 exception:43,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,45 @69 exception:46,
49 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:48,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
conditional branch(ne, to iindex=-1) 64,10,
66 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @120 exception:65,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
17 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 15,3 @34 exception:16,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthTokensByAccount(Landroid/accounts/Account;)Ljava/util/Map; > 19,3 @44 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
6 = new <Application,Ljava/util/HashMap>@6,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 6 @8 exception:7,
8 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, <Application,[Ljava/lang/String> >,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[14] = 13,
18 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,15,8,16,10,12,12,12 @33 exception:17,
20 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 18 @37 exception:19,
conditional branch(eq, to iindex=-1) 20,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 18 @55 exception:31,
return 6,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @48 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
25 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 23,3,21 @52 exception:24,
26 = phi  18,21,
31 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 26,4 @55 exception:30,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 66 @132 exception:76,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""peekAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	boolean v19 = p0.isLocalUnlockedUser(v17);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	String v22 = p0.readAuthTokenInternal(v21, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = phiInstruction.get(p3);
	return v8;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map findAuthTokensByAccount(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v1 = new HashMap();
	String v2 = new String(2);
	Cursor v3 = v1.query(""ceDb.authtokens"", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v2, 0, 0, 0);
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
","public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""peekAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", authTokenType "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v17 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v18 = UserHandle.getCallingUserId();
	List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v20 = v21;
	boolean v22 = v20.contains(Account.type);
	boolean v19 = v22;
	boolean v23 = p0.isLocalUnlockedUser(v18);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);
	Map v27 = this.authTokenCache;
	Object v28 = v27.get(p1);
	Map v29 = this.authTokenCache;
	Object v30 = v29.get(p1);
	SQLiteDatabase v32 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v33 = new HashMap();
	String v35 = new String(2);
	Cursor v36 = v32.query(""ceDb.authtokens"", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v35, 0, 0, 0);
	boolean v37 = v36.moveToNext();
	v36.close();
	Map v31 = v33;
	Map v39 = this.authTokenCache;
	Object v40 = v39.put(p1, v31);
	Object v41 = phiInstruction.get(p2);
	String v26 = v41;
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return v26;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
44 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,42 @64 exception:43,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,45 @69 exception:46,
49 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:48,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
conditional branch(ne, to iindex=-1) 64,10,
66 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @120 exception:65,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
17 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 15,3 @34 exception:16,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthTokensByAccount(Landroid/accounts/Account;)Ljava/util/Map; > 19,3 @44 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
6 = new <Application,Ljava/util/HashMap>@6,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 6 @8 exception:7,
8 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, <Application,[Ljava/lang/String> >,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[14] = 13,
18 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,15,8,16,10,12,12,12 @33 exception:17,
20 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 18 @37 exception:19,
conditional branch(eq, to iindex=-1) 20,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 18 @55 exception:31,
return 6,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @48 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
25 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 23,3,21 @52 exception:24,
26 = phi  18,21,
31 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 26,4 @55 exception:30,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 66 @132 exception:76,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	boolean v7 = p0.isLocalUnlockedUser(v5);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v5);
	String v10 = p0.readAuthTokenInternal(v9, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v10;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = phiInstruction.get(p3);
	return v8;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map findAuthTokensByAccount(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v1 = new HashMap();
	String v2 = new String(2);
	Cursor v3 = v1.query(""ceDb.authtokens"", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v2, 0, 0, 0);
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
","public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v7 = v8;
	boolean v9 = v7.contains(Account.type);
	boolean v6 = v9;
	boolean v10 = p0.isLocalUnlockedUser(v5);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v5);
	Map v14 = this.authTokenCache;
	Object v15 = v14.get(p1);
	Map v16 = this.authTokenCache;
	Object v17 = v16.get(p1);
	SQLiteDatabase v19 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v20 = new HashMap();
	String v22 = new String(2);
	Cursor v23 = v19.query(""ceDb.authtokens"", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v22, 0, 0, 0);
	boolean v24 = v23.moveToNext();
	v23.close();
	Map v18 = v20;
	Map v26 = this.authTokenCache;
	Object v27 = v26.put(p1, v18);
	Object v28 = phiInstruction.get(p2);
	String v13 = v28;
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @15 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 11,2 @24 exception:16,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,5 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,28 @45 exception:29,
32 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,32 @52 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @55 exception:35,
38 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,36 @59 exception:37,
44 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,42 @64 exception:43,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,45 @69 exception:46,
49 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:48,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
conditional branch(ne, to iindex=-1) 64,10,
66 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @120 exception:65,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
17 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 15,3 @34 exception:16,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
26 = phi  18,21,
31 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 26,4 @55 exception:30,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 66 @132 exception:76,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""peekAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	boolean v19 = p0.isLocalUnlockedUser(v17);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	String v22 = p0.readAuthTokenInternal(v21, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Object v5 = phiInstruction.get(p3);
	return v5;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
","public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""peekAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", authTokenType "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v17 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v18 = UserHandle.getCallingUserId();
	List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v20 = v21;
	boolean v22 = v20.contains(Account.type);
	boolean v19 = v22;
	boolean v23 = p0.isLocalUnlockedUser(v18);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);
	Map v27 = this.authTokenCache;
	Object v28 = v27.get(p1);
	Map v29 = this.authTokenCache;
	Object v30 = v29.get(p1);
	Object v31 = phiInstruction.get(p2);
	String v26 = v31;
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return v26;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","0","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @14 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @20 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @33 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @36 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @41 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @44 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @49 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @52 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @56 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @61 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @64 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @69 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @72 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @76 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @79 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @83 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @90 exception:59,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
64 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 62,3 @98 exception:63,
conditional branch(ne, to iindex=-1) 64,14,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @128 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
goto (from iindex= 66 to iindex = 25),
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,69,3,7,5,14 @174 exception:76,
78 = new <Application,Landroid/os/Bundle>@178,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 78 @180 exception:79,
invokevirtual < Application, Landroid/os/Bundle, putParcelableArray(Ljava/lang/String;[Landroid/os/Parcelable;)V > 78,65,77 @183 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,78 @186 exception:81,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @189 exception:95,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	Account v24 = p0.getAccountsFromCache(v23, p2, v1, p4, 0);
	Bundle v24 = new Bundle();
	v24.putParcelableArray(""accounts"", v24);
	p0.onResult(p1, v24);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
","public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccounts: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	List v21 = p0.getTypesVisibleToCaller(v1, v20, p4);
	boolean v22 = v21.contains(p2);
	long v23 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = p0.getUserAccounts(v20);
	Account v25 = p0.getAccountsFromCache(v24, p2, v1, p4, 0);
	Bundle v26 = new Bundle();
	v26.putParcelableArray(""accounts"", v25);
	p0.onResult(p1, v26);
	IAccountManager$Stub.restoreCallingIdentity(v23);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @14 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @20 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @33 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @36 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @41 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @44 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @49 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @52 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @56 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @61 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @64 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @69 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @72 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @76 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @79 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @83 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @90 exception:59,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
return 7,
64 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 62,3 @98 exception:63,
conditional branch(ne, to iindex=-1) 64,14,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @128 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
goto (from iindex= 66 to iindex = 25),
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,69,3,7,5,14 @174 exception:76,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
9 = invokestatic < Application, Ljava/lang/Thread, holdsLock(Ljava/lang/Object;)Z > 7 @2 exception:8,
11 = binaryop(xor) 9 , 10,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 11,12 @10 exception:13,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
18 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 16 @58 exception:17,
20 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 18 @62 exception:19,
28 = phi  27,14,
22 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 20 @68 exception:21,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
34 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 32 @93 exception:33,
36 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 34 @97 exception:35,
46 = phi  45,14,
38 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 36 @102 exception:37,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
return 50,
78 = new <Application,Landroid/os/Bundle>@178,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 78 @180 exception:79,
invokevirtual < Application, Landroid/os/Bundle, putParcelableArray(Ljava/lang/String;[Landroid/os/Parcelable;)V > 78,65,77 @183 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,78 @186 exception:81,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
invokespecial < Application, Ljava/lang/Exception, <init>()V > 6 @6 exception:7,
10 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,8,6 @12 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @16 exception:12,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 14 @24 exception:15,
17 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @27 exception:16,
19 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,19 @35 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,22 @40 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 14,2 @43 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 14 @46 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 4,28 @50 exception:29,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,3 @53 exception:35,
36 = getCaughtException ,
38 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @58 exception:37,
conditional branch(eq, to iindex=-1) 38,5,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,39,36 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @189 exception:95,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	Account v24 = p0.getAccountsFromCache(v23, p2, v1, p4, 0);
	Bundle v24 = new Bundle();
	v24.putParcelableArray(""accounts"", v24);
	p0.onResult(p1, v24);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 1
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccounts: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	List v22 = AccountManagerService.getTypesForCaller(v1, v20, 1);
	List v21 = v22;
	boolean v23 = v21.contains(p2);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v26 = AccountManagerService.getUserAccountsNotChecked(v20);
	AccountManagerService$UserAccounts v25 = v26;
	boolean v28 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v28 ^ 1), ""Method should not be called with cacheLock"");
	Collection v30 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v31 = v30.iterator();
	boolean v32 = v31.hasNext();
	Account v33 = new Account(phiInstruction);
	Collection v34 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v35 = v34.iterator();
	boolean v36 = v35.hasNext();
	Account v37 = AccountManagerService.filterAccounts(v25, v33, v1, p4, 0);
	Account v27 = v37;
	Bundle v38 = new Bundle();
	v38.putParcelableArray(""accounts"", v27);
	Exception v42 = new Exception();
	int v44 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v42);
	boolean v45 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v46 = new StringBuilder();
	Class v48 = AccountManagerService.getClass();
	String v49 = v48.getSimpleName();
	StringBuilder v50 = v46.append(v49);
	StringBuilder v51 = v46.append("" calling onResult() on response "");
	StringBuilder v52 = v46.append(p1);
	String v53 = v46.toString();
	int v54 = Log.v(""AccountManagerService"", v53);
	p1.onResult(v38);
	boolean v56 = Log.isLoggable(""AccountManagerService"", 2);
	int v57 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @14 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @20 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @33 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @36 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @41 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @44 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @49 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @52 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @56 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @61 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @64 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @69 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @72 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @76 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @79 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @83 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @90 exception:59,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
return 7,
64 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 62,3 @98 exception:63,
conditional branch(ne, to iindex=-1) 64,14,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @128 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 4,14,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,69,3,7,5,14 @174 exception:76,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
9 = invokestatic < Application, Ljava/lang/Thread, holdsLock(Ljava/lang/Object;)Z > 7 @2 exception:8,
11 = binaryop(xor) 9 , 10,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 11,12 @10 exception:13,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
18 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 16 @58 exception:17,
20 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 18 @62 exception:19,
28 = phi  27,14,
22 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 20 @68 exception:21,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
34 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 32 @93 exception:33,
36 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 34 @97 exception:35,
46 = phi  45,14,
38 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 36 @102 exception:37,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
return 50,
78 = new <Application,Landroid/os/Bundle>@178,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 78 @180 exception:79,
invokevirtual < Application, Landroid/os/Bundle, putParcelableArray(Ljava/lang/String;[Landroid/os/Parcelable;)V > 78,65,77 @183 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,78 @186 exception:81,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
invokespecial < Application, Ljava/lang/Exception, <init>()V > 6 @6 exception:7,
10 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,8,6 @12 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @16 exception:12,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 14 @24 exception:15,
17 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @27 exception:16,
19 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,19 @35 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 14,22 @40 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 14,2 @43 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 14 @46 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 4,28 @50 exception:29,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,3 @53 exception:35,
36 = getCaughtException ,
38 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 4,11 @58 exception:37,
conditional branch(eq, to iindex=-1) 38,5,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 4,39,36 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @189 exception:95,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	Account v24 = p0.getAccountsFromCache(v23, p2, v1, p4, 0);
	Bundle v24 = new Bundle();
	v24.putParcelableArray(""accounts"", v24);
	p0.onResult(p1, v24);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 1
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccounts: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	List v22 = AccountManagerService.getTypesForCaller(v1, v20, 1);
	List v21 = v22;
	boolean v23 = v21.contains(p2);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v26 = AccountManagerService.getUserAccountsNotChecked(v20);
	AccountManagerService$UserAccounts v25 = v26;
	boolean v28 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v28 ^ 1), ""Method should not be called with cacheLock"");
	Collection v30 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v31 = v30.iterator();
	boolean v32 = v31.hasNext();
	Account v33 = new Account(phiInstruction);
	Collection v34 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v35 = v34.iterator();
	boolean v36 = v35.hasNext();
	Account v37 = AccountManagerService.filterAccounts(v25, v33, v1, p4, 0);
	Account v27 = v37;
	Bundle v38 = new Bundle();
	v38.putParcelableArray(""accounts"", v27);
	Exception v42 = new Exception();
	int v44 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v42);
	boolean v45 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v46 = new StringBuilder();
	Class v48 = AccountManagerService.getClass();
	String v49 = v48.getSimpleName();
	StringBuilder v50 = v46.append(v49);
	StringBuilder v51 = v46.append("" calling onResult() on response "");
	StringBuilder v52 = v46.append(p1);
	String v53 = v46.toString();
	int v54 = Log.v(""AccountManagerService"", v53);
	p1.onResult(v38);
	boolean v56 = Log.isLoggable(""AccountManagerService"", 2);
	int v57 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @14 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @20 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @33 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @36 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @41 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @44 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @49 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @52 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @56 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @61 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @64 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @69 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @72 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @76 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @79 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @83 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @90 exception:59,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
8 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @5 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
11 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 9,3 @11 exception:10,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 8 @15 exception:16,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
22 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 11 @26 exception:21,
24 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 22 @30 exception:23,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
return 7,
64 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 62,3 @98 exception:63,
conditional branch(ne, to iindex=-1) 64,14,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @128 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession>@142,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;ILjava/lang/String;Z)V > 71,1,69,2,3,4,7,5,14 @156 exception:72,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @159 exception:73,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @162 exception:74,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v23 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v23,p1,p2,p3,v1,p4,0);
	v23.bind();
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 2
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccounts: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	ArrayList v23 = new ArrayList();
	long v25 = Binder.clearCallingIdentity();
	Collection v26 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v25);
	Object v28 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v29 = v26.iterator();
	boolean v30 = v29.hasNext();
	List v22 = v23;
	List v21 = v22;
	boolean v31 = v21.contains(p2);
	long v32 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v33 = p0.getUserAccounts(v20);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v34 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v33,p1,p2,p3,v1,p4,0);
	boolean v37 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v38 = new StringBuilder();
	StringBuilder v40 = v38.append(""initiating bind to authenticator type "");
	StringBuilder v41 = v38.append(this.mAccountType);
	String v42 = v38.toString();
	int v43 = Log.v(""AccountManagerService"", v42);
	IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType);
	int v47 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);
	int v49 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v50 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v49);
	boolean v44 = 0;
	StringBuilder v58 = new StringBuilder();
	StringBuilder v60 = v58.append(""bind attempt failed for "");
	long v62 = SystemClock.elapsedRealtime();
	String v63 = AccountManagerService$Session.toDebugString(v62);
	String v61 = v63;
	StringBuilder v64 = v58.append(v61);
	String v65 = v58.toString();
	int v66 = Log.d(""AccountManagerService"", v65);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v68 = AccountManagerService$Session.getResponseAndClose();
	boolean v69 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v70 = new StringBuilder();
	Class v72 = AccountManagerService$Session.getClass();
	String v73 = v72.getSimpleName();
	StringBuilder v74 = v70.append(v73);
	StringBuilder v75 = v70.append("" calling onError() on response "");
	StringBuilder v76 = v70.append(v68);
	String v77 = v70.toString();
	int v78 = Log.v(""AccountManagerService"", v77);
	v68.onError(1, ""bind failure"");
	boolean v80 = Log.isLoggable(""AccountManagerService"", 2);
	int v81 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v32);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @14 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @20 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @33 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @36 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @41 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @44 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @49 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @52 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @56 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @61 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @64 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @69 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @72 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @76 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @79 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @83 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @90 exception:59,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
8 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @5 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
11 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 9,3 @11 exception:10,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 8 @15 exception:16,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
22 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 11 @26 exception:21,
24 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 22 @30 exception:23,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
return 7,
64 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 62,3 @98 exception:63,
conditional branch(ne, to iindex=-1) 64,14,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @128 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession>@142,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;ILjava/lang/String;Z)V > 71,1,69,2,3,4,7,5,14 @156 exception:72,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @159 exception:73,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
107 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 15,14 @26 exception:106,
conditional branch(eq, to iindex=-1) 107,13,
108 = new <Application,Ljava/lang/StringBuilder>@32,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 108 @34 exception:109,
112 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,110 @40 exception:111,
114 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,2 @43 exception:113,
117 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,115 @48 exception:116,
119 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 108 @51 exception:118,
121 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 15,119 @55 exception:120,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @162 exception:74,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v23 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v23,p1,p2,p3,v1,p4,0);
	v23.bind();
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 2
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	boolean v5 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""there is no authenticator for "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", bailing out"");
	String v10 = v5.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccounts: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	ArrayList v23 = new ArrayList();
	long v25 = Binder.clearCallingIdentity();
	Collection v26 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v25);
	Object v28 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v29 = v26.iterator();
	boolean v30 = v29.hasNext();
	List v22 = v23;
	List v21 = v22;
	boolean v31 = v21.contains(p2);
	long v32 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v33 = p0.getUserAccounts(v20);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v34 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v33,p1,p2,p3,v1,p4,0);
	boolean v37 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v38 = new StringBuilder();
	StringBuilder v40 = v38.append(""initiating bind to authenticator type "");
	StringBuilder v41 = v38.append(this.mAccountType);
	String v42 = v38.toString();
	int v43 = Log.v(""AccountManagerService"", v42);
	IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType);
	int v47 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);
	boolean v49 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v50 = new StringBuilder();
	StringBuilder v52 = v50.append(""there is no authenticator for "");
	StringBuilder v53 = v50.append(this.mAccountType);
	StringBuilder v54 = v50.append("", bailing out"");
	String v55 = v50.toString();
	int v56 = Log.v(""AccountManagerService"", v55);
	boolean v44 = 0;
	StringBuilder v57 = new StringBuilder();
	StringBuilder v59 = v57.append(""bind attempt failed for "");
	long v61 = SystemClock.elapsedRealtime();
	String v62 = AccountManagerService$Session.toDebugString(v61);
	String v60 = v62;
	StringBuilder v63 = v57.append(v60);
	String v64 = v57.toString();
	int v65 = Log.d(""AccountManagerService"", v64);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v67 = AccountManagerService$Session.getResponseAndClose();
	boolean v68 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v69 = new StringBuilder();
	Class v71 = AccountManagerService$Session.getClass();
	String v72 = v71.getSimpleName();
	StringBuilder v73 = v69.append(v72);
	StringBuilder v74 = v69.append("" calling onError() on response "");
	StringBuilder v75 = v69.append(v67);
	String v76 = v69.toString();
	int v77 = Log.v(""AccountManagerService"", v76);
	v67.onError(1, ""bind failure"");
	boolean v79 = Log.isLoggable(""AccountManagerService"", 2);
	int v80 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v32);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @8 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @14 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @20 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @33 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @36 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @41 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @44 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @49 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @52 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @56 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @61 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @64 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @69 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @72 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @76 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @79 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @83 exception:48,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @90 exception:59,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
8 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @5 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
11 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 9,3 @11 exception:10,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 8 @15 exception:16,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
22 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 11 @26 exception:21,
24 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 22 @30 exception:23,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
return 7,
64 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 62,3 @98 exception:63,
conditional branch(ne, to iindex=-1) 64,14,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @128 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
goto (from iindex= 66 to iindex = 25),
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,69,3,7,5,14 @174 exception:76,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
9 = invokestatic < Application, Ljava/lang/Thread, holdsLock(Ljava/lang/Object;)Z > 7 @2 exception:8,
11 = binaryop(xor) 9 , 10,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkState(ZLjava/lang/String;)V > 11,12 @10 exception:13,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
18 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 16 @58 exception:17,
20 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 18 @62 exception:19,
28 = phi  27,14,
22 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 20 @68 exception:21,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
34 = invokevirtual < Application, Ljava/util/HashMap, values()Ljava/util/Collection; > 32 @93 exception:33,
36 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 34 @97 exception:35,
46 = phi  45,14,
38 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 36 @102 exception:37,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
conditional branch(ne, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackageNameForUid(I)Ljava/lang/String; > 1,4 @2 exception:8,
goto (from iindex= 3 to iindex = 2),
10 = phi  9,5,
11 = new <Application,Ljava/util/LinkedHashMap>@8,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 11 @10 exception:12,
13 = arraylength 3,
33 = phi  32,7,
conditional branch(ge, to iindex=-1) 33,13,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,2,11,4,5 @48 exception:36,
39 = invokeinterface < Application, Ljava/util/Map, size()I > 37 @52 exception:38,
40 = new <Application,[Landroid/accounts/Account>@5639 ,
42 = invokeinterface < Application, Ljava/util/Map, keySet()Ljava/util/Set; > 37 @58 exception:41,
44 = invokeinterface < Application, Ljava/util/Set, toArray([Ljava/lang/Object;)[Ljava/lang/Object; > 42,40 @62 exception:43,
45 = checkcast <Application,[Landroid/accounts/Account>44 <Application,[Landroid/accounts/Account>,
return 45,
return 50,
78 = new <Application,Landroid/os/Bundle>@178,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 78 @180 exception:79,
invokevirtual < Application, Landroid/os/Bundle, putParcelableArray(Ljava/lang/String;[Landroid/os/Parcelable;)V > 78,65,77 @183 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,78 @186 exception:81,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @189 exception:95,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	Account v24 = p0.getAccountsFromCache(v23, p2, v1, p4, 0);
	Bundle v24 = new Bundle();
	v24.putParcelableArray(""accounts"", v24);
	p0.onResult(p1, v24);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 2
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 2
public Account filterAccounts(AccountManagerService$UserAccounts p1, Account p2, int p3, String p4, boolean p5){
	String v1 = p0.getPackageNameForUid(p3);
	LinkedHashMap v1 = new LinkedHashMap();
	Map v3 = p0.filterSharedAccounts(p1, v1, p3, p4);
	int v4 = v3.size();
	Account v4 = new Account(v4);
	Set v5 = v3.keySet();
	Object v6 = v5.toArray(v4);
	return v6;
}
-----
","public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""getAccounts: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	ArrayList v23 = new ArrayList();
	long v25 = Binder.clearCallingIdentity();
	Collection v26 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v25);
	Object v28 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v29 = v26.iterator();
	boolean v30 = v29.hasNext();
	List v22 = v23;
	List v21 = v22;
	boolean v31 = v21.contains(p2);
	long v32 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v33 = p0.getUserAccounts(v20);
	boolean v35 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v35 ^ 1), ""Method should not be called with cacheLock"");
	Collection v37 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v38 = v37.iterator();
	boolean v39 = v38.hasNext();
	Account v40 = new Account(phiInstruction);
	Collection v41 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v42 = v41.iterator();
	boolean v43 = v42.hasNext();
	String v45 = AccountManagerService.getPackageNameForUid(p3);
	LinkedHashMap v46 = new LinkedHashMap();
	Map v48 = AccountManagerService.filterSharedAccounts(p1, v46, p3, p4);
	int v49 = v48.size();
	Account v50 = new Account(v49);
	Set v51 = v48.keySet();
	Object v52 = v51.toArray(v50);
	Account v44 = v52;
	Account v34 = v44;
	Bundle v53 = new Bundle();
	v53.putParcelableArray(""accounts"", v34);
	p0.onResult(p1, v53);
	IAccountManager$Stub.restoreCallingIdentity(v32);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","0","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
11 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 8,9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 13 @22 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,3 @31 exception:18,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,7 @47 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,30 @52 exception:31,
34 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,34 @59 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,37 @64 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,5 @67 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 13 @70 exception:42,
45 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 8,43 @74 exception:44,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 50,51 @86 exception:52,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 53,54 @97 exception:55,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
conditional branch(ne, to iindex=-1) 57,12,
71 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 5 @106 exception:70,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
74 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 71 @112 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
conditional branch(ne, to iindex=-1) 97,12,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,159,160 @186 exception:161,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
","public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", for user id "");
	StringBuilder v15 = v3.append(p4);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v20 = p0.isCrossUser(v1, p4);
	UserHandle v21 = UserHandle.of(p4);
	int v22 = v21.getIdentifier();
	boolean v23 = p0.isAccountManagedByCaller(Account.type, v1, v22);
	boolean v24 = p0.isSystemUid(v1);
	boolean v25 = p0.isProfileOwner(v1);
	boolean v26 = p0.canUserModifyAccounts(p4, v1);
	boolean v27 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
11 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 8,9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 13 @22 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,3 @31 exception:18,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,7 @47 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,30 @52 exception:31,
34 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,34 @59 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,37 @64 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,5 @67 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 13 @70 exception:42,
45 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 8,43 @74 exception:44,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 50,51 @86 exception:52,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 53,54 @97 exception:55,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
71 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 5 @106 exception:70,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
74 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 71 @112 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo; > 24,22,9 @24 exception:25,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @37 exception:63,
return 23,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,159,160 @186 exception:161,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
","public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", for user id "");
	StringBuilder v15 = v3.append(p4);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v20 = phiInstruction;
	UserHandle v23 = UserHandle.of(p4);
	int v24 = v23.getIdentifier();
	List v26 = AccountManagerService.getTypesManagedByCaller(v1, v24);
	boolean v27 = v26.contains(Account.type);
	boolean v25 = v27;
	long v29 = Binder.clearCallingIdentity();
	String v30 = this.mPackageManager.getPackagesForUid(v1);
	PackageInfo v31 = this.mPackageManager.getPackageInfo(v30[phiInstruction], 0);
	Binder.restoreCallingIdentity(v29);
	boolean v28 = 1;
	Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v35 = v34.isActiveProfileOwner(v1);
	boolean v36 = v34.isActiveDeviceOwner(v1);
	boolean v33 = phiInstruction;
	boolean v38 = AccountManagerService.isProfileOwner(v1);
	UserManager v39 = AccountManagerService.getUserManager();
	UserHandle v40 = new UserHandle(p4);
	Bundle v42 = v39.getUserRestrictions(v40);
	boolean v43 = v42.getBoolean(""no_modify_accounts"");
	boolean v37 = 0;
	boolean v45 = AccountManagerService.isProfileOwner(v1);
	Object v46 = this.mContext.getSystemService(""device_policy"");
	String v47 = v46.getAccountTypesWithManagementDisabledAsUser(p4);
	boolean v48 = v47[phiInstruction].equals(Account.type);
	boolean v44 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
11 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 8,9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 13 @22 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,3 @31 exception:18,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,7 @47 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,30 @52 exception:31,
34 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,34 @59 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,37 @64 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,5 @67 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 13 @70 exception:42,
45 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 8,43 @74 exception:44,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 50,51 @86 exception:52,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 53,54 @97 exception:55,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
71 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 5 @106 exception:70,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
74 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 71 @112 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo; > 24,22,9 @24 exception:25,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @37 exception:63,
return 23,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,159,160 @186 exception:161,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
","public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", for user id "");
	StringBuilder v15 = v3.append(p4);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v20 = phiInstruction;
	UserHandle v23 = UserHandle.of(p4);
	int v24 = v23.getIdentifier();
	List v26 = AccountManagerService.getTypesManagedByCaller(v1, v24);
	boolean v27 = v26.contains(Account.type);
	boolean v25 = v27;
	long v29 = Binder.clearCallingIdentity();
	String v30 = this.mPackageManager.getPackagesForUid(v1);
	PackageInfo v31 = this.mPackageManager.getPackageInfo(v30[phiInstruction], 0);
	Binder.restoreCallingIdentity(v29);
	boolean v28 = 1;
	Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v35 = v34.isActiveProfileOwner(v1);
	boolean v36 = v34.isActiveDeviceOwner(v1);
	boolean v33 = phiInstruction;
	boolean v38 = AccountManagerService.isProfileOwner(v1);
	UserManager v39 = AccountManagerService.getUserManager();
	UserHandle v40 = new UserHandle(p4);
	Bundle v42 = v39.getUserRestrictions(v40);
	boolean v43 = v42.getBoolean(""no_modify_accounts"");
	boolean v37 = 0;
	boolean v45 = AccountManagerService.isProfileOwner(v1);
	Object v46 = this.mContext.getSystemService(""device_policy"");
	String v47 = v46.getAccountTypesWithManagementDisabledAsUser(p4);
	boolean v48 = v47[phiInstruction].equals(Account.type);
	boolean v44 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
11 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 8,9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 13 @22 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,3 @31 exception:18,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,7 @47 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,30 @52 exception:31,
34 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,34 @59 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,37 @64 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,5 @67 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 13 @70 exception:42,
45 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 8,43 @74 exception:44,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 50,51 @86 exception:52,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 53,54 @97 exception:55,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
71 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 5 @106 exception:70,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
74 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 71 @112 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,159,160 @186 exception:161,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
","public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", for user id "");
	StringBuilder v15 = v3.append(p4);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v20 = phiInstruction;
	UserHandle v23 = UserHandle.of(p4);
	int v24 = v23.getIdentifier();
	List v27 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v26 = v27;
	boolean v28 = v26.contains(Account.type);
	boolean v25 = v28;
	boolean v29 = p0.isSystemUid(v1);
	Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
	Object v31 = v32;
	boolean v33 = v31.isActiveProfileOwner(v1);
	boolean v34 = v31.isActiveDeviceOwner(v1);
	boolean v30 = phiInstruction;
	Object v37 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v38 = v37.isActiveProfileOwner(p2);
	boolean v39 = v37.isActiveDeviceOwner(p2);
	boolean v36 = phiInstruction;
	UserManager v40 = AccountManagerService.getUserManager();
	UserHandle v41 = new UserHandle(p4);
	Bundle v43 = v40.getUserRestrictions(v41);
	boolean v44 = v43.getBoolean(""no_modify_accounts"");
	boolean v35 = 0;
	Object v47 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v48 = v47.isActiveProfileOwner(p3);
	boolean v49 = v47.isActiveDeviceOwner(p3);
	boolean v46 = phiInstruction;
	Object v50 = this.mContext.getSystemService(""device_policy"");
	String v51 = v50.getAccountTypesWithManagementDisabledAsUser(p4);
	boolean v52 = v51[phiInstruction].equals(Account.type);
	boolean v45 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
11 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 8,9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 13 @22 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,3 @31 exception:18,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,7 @47 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,30 @52 exception:31,
34 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,34 @59 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,37 @64 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,5 @67 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 13 @70 exception:42,
45 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 8,43 @74 exception:44,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 50,51 @86 exception:52,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 53,54 @97 exception:55,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
71 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 5 @106 exception:70,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
74 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 71 @112 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,159,160 @186 exception:161,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
","public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", for user id "");
	StringBuilder v15 = v3.append(p4);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v20 = phiInstruction;
	UserHandle v23 = UserHandle.of(p4);
	int v24 = v23.getIdentifier();
	List v27 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v26 = v27;
	boolean v28 = v26.contains(Account.type);
	boolean v25 = v28;
	boolean v29 = p0.isSystemUid(v1);
	Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
	Object v31 = v32;
	boolean v33 = v31.isActiveProfileOwner(v1);
	boolean v34 = v31.isActiveDeviceOwner(v1);
	boolean v30 = phiInstruction;
	Object v37 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v38 = v37.isActiveProfileOwner(p2);
	boolean v39 = v37.isActiveDeviceOwner(p2);
	boolean v36 = phiInstruction;
	UserManager v40 = AccountManagerService.getUserManager();
	UserHandle v41 = new UserHandle(p4);
	Bundle v43 = v40.getUserRestrictions(v41);
	boolean v44 = v43.getBoolean(""no_modify_accounts"");
	boolean v35 = 1;
	Object v47 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v48 = v47.isActiveProfileOwner(p3);
	boolean v49 = v47.isActiveDeviceOwner(p3);
	boolean v46 = phiInstruction;
	Object v50 = this.mContext.getSystemService(""device_policy"");
	String v51 = v50.getAccountTypesWithManagementDisabledAsUser(p4);
	boolean v52 = v51[phiInstruction].equals(Account.type);
	boolean v45 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
11 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 8,9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 13 @22 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,15 @28 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,3 @31 exception:18,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 13,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,7 @47 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,30 @52 exception:31,
34 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,34 @59 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 13,37 @64 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 13,5 @67 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 13 @70 exception:42,
45 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 8,43 @74 exception:44,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 50,51 @86 exception:52,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 53,54 @97 exception:55,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
71 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 5 @106 exception:70,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
74 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 71 @112 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,159,160 @186 exception:161,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
","public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", for user id "");
	StringBuilder v15 = v3.append(p4);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v20 = phiInstruction;
	UserHandle v23 = UserHandle.of(p4);
	int v24 = v23.getIdentifier();
	List v27 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v26 = v27;
	boolean v28 = v26.contains(Account.type);
	boolean v25 = v28;
	boolean v29 = p0.isSystemUid(v1);
	Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
	Object v31 = v32;
	boolean v33 = v31.isActiveProfileOwner(v1);
	boolean v34 = v31.isActiveDeviceOwner(v1);
	boolean v30 = phiInstruction;
	Object v37 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v38 = v37.isActiveProfileOwner(p2);
	boolean v39 = v37.isActiveDeviceOwner(p2);
	boolean v36 = phiInstruction;
	UserManager v40 = AccountManagerService.getUserManager();
	UserHandle v41 = new UserHandle(p4);
	Bundle v43 = v40.getUserRestrictions(v41);
	boolean v44 = v43.getBoolean(""no_modify_accounts"");
	boolean v35 = 0;
	Object v47 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v48 = v47.isActiveProfileOwner(p3);
	boolean v49 = v47.isActiveDeviceOwner(p3);
	boolean v46 = phiInstruction;
	Object v50 = this.mContext.getSystemService(""device_policy"");
	String v51 = v50.getAccountTypesWithManagementDisabledAsUser(p4);
	boolean v52 = v51[phiInstruction].equals(Account.type);
	boolean v45 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","0","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @15 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 11,2 @24 exception:16,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,5 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,23 @37 exception:24,
27 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @40 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,27 @44 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @47 exception:30,
33 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,31 @51 exception:32,
39 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,37 @56 exception:38,
41 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:40,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(eq, to iindex=-1) 44,10,
56 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:55,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 56 @82 exception:64,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
","public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	p0.setPasswordInternal(v18, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @15 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 11,2 @24 exception:16,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,5 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,23 @37 exception:24,
27 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @40 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,27 @44 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @47 exception:30,
33 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,31 @51 exception:32,
39 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,37 @56 exception:38,
41 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:40,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
56 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:55,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 56 @82 exception:64,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
","public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
	boolean v18 = v17.contains(Account.type);
	boolean v16 = v18;
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
	AccountManagerService$UserAccounts v20 = v21;
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, p2);
	boolean v26 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v24);
	Map v27 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v20);
	Object v28 = v27.remove(p1);
	TokenCache v29 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v20);
	v29.remove(p1);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v32 = p2.length();
	AccountManagerService.logRecord(phiInstruction, ""accounts"", v24, v20, v1);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService.sendNotificationAccountUpdated(p1, v20);
	int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v20);
	AccountManagerService.sendAccountsChangedBroadcast(v36);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
39 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,37 @56 exception:38,
41 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:40,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
56 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:55,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 56 @82 exception:64,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	p0.setPasswordInternal(v7, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
","public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesManagedByCaller(v1, v4);
	boolean v7 = v6.contains(Account.type);
	boolean v5 = v7;
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v10 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v9 = v10;
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v13 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	int v14 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v13, p2);
	boolean v15 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v13);
	Map v16 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v9);
	Object v17 = v16.remove(p1);
	TokenCache v18 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v9);
	v18.remove(p1);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v21 = p2.length();
	AccountManagerService.logRecord(phiInstruction, ""accounts"", v13, v9, v1);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService.sendNotificationAccountUpdated(p1, v9);
	int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v9);
	AccountManagerService.sendAccountsChangedBroadcast(v25);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @15 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 11,2 @24 exception:16,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,5 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,23 @37 exception:24,
27 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @40 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,27 @44 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @47 exception:30,
33 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,31 @51 exception:32,
39 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,37 @56 exception:38,
41 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:40,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
56 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:55,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
7 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 7 @8 exception:8,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 7,9,3 @14 exception:10,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 6,16,7,17,12 @31 exception:18,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@76 ,
9 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:8,
arraystore 7[10] = 9,
14 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 5,11,12,7 @20 exception:13,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Landroid/accounts/Account;)V > 3,2 @2 exception:4,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getRequestingPackages(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,3 @0 exception:4,
7 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 5 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 7 @8 exception:8,
11 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @8 exception:6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
10 = invokevirtual < Application, Landroid/content/Intent, getAction()Ljava/lang/String; > 8 @13 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,10 @17 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @20 exception:13,
17 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 15,14 @26 exception:16,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 19,2 @33 exception:20,
invokevirtual < Application, Landroid/content/Context, sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 18,8,19 @36 exception:21,
return,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 56 @82 exception:64,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v17 = v18;
	boolean v19 = v17.contains(Account.type);
	boolean v16 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v15);
	SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase();
	v24.beginTransaction();
	SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabase();
	String v28 = new String(1);
	String v29 = new String(2);
	Cursor v30 = v27.query(""accounts"", v28, ""name=? AND type=?"", v29, 0, 0, 0);
	boolean v31 = v30.moveToNext();
	long v32 = v30.getLong(0);
	v30.close();
	long v26 = v32;
	SQLiteDatabase v35 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v36 = new ContentValues();
	v36.put(""password"", p3);
	String v39 = new String(1);
	String v40 = String.valueOf(v26);
	int v41 = v35.update(""ceDb.accounts"", v36, ""_id=?"", v39);
	int v34 = v41;
	SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v44 = new String(1);
	String v45 = String.valueOf(v26);
	int v46 = v43.delete(""ceDb.authtokens"", ""accounts_id=?"", v44);
	boolean v42 = phiInstruction;
	Map v47 = this.authTokenCache;
	Object v48 = v47.remove(p1);
	TokenCache v49 = this.accountTokenCaches;
	this.mCachedTokens.evict(p2);
	SQLiteDatabase v53 = this.mDeDatabase.getWritableDatabase();
	v53.setTransactionSuccessful();
	int v55 = p2.length();
	long v57 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v58 = new AccountManagerService$1LogRecordTask(AccountManagerService,phiInstruction,""accounts"",v26,p1,p4,v57);
	boolean v60 = this.mHandler.post(v58);
	SQLiteDatabase v62 = this.mDeDatabase.getWritableDatabase();
	v62.endTransaction();
	Map v65 = AccountManagerService.getRequestingPackages(p2, p1);
	Set v66 = v65.entrySet();
	Iterator v67 = v66.iterator();
	boolean v68 = v67.hasNext();
	int v69 = this.userId;
	StringBuilder v71 = new StringBuilder();
	StringBuilder v73 = v71.append(""the accounts changed, sending broadcast of "");
	String v74 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v75 = v71.append(v74);
	String v76 = v71.toString();
	int v77 = Log.i(""AccountManagerService"", v76);
	UserHandle v78 = new UserHandle(v69);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v78);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 11 @15 exception:12,
15 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,13 @21 exception:14,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 11,2 @24 exception:16,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,5 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 11,23 @37 exception:24,
27 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @40 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 11,27 @44 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 11 @47 exception:30,
33 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,31 @51 exception:32,
39 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,37 @56 exception:38,
41 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:40,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
56 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:55,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
7 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 7 @8 exception:8,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 7,9,3 @14 exception:10,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 6,16,7,17,12 @31 exception:18,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@76 ,
9 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:8,
arraystore 7[10] = 9,
14 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 5,11,12,7 @20 exception:13,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Landroid/accounts/Account;)V > 3,2 @2 exception:4,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
34 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_SET_PASSWORD, <Application,Ljava/lang/String> >,
goto (from iindex= 34 to iindex = 3),
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getRequestingPackages(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,3 @0 exception:4,
7 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 5 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 7 @8 exception:8,
11 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @8 exception:6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
10 = invokevirtual < Application, Landroid/content/Intent, getAction()Ljava/lang/String; > 8 @13 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,10 @17 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @20 exception:13,
17 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 15,14 @26 exception:16,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 19,2 @33 exception:20,
invokevirtual < Application, Landroid/content/Context, sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 18,8,19 @36 exception:21,
return,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 56 @82 exception:64,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v17 = v18;
	boolean v19 = v17.contains(Account.type);
	boolean v16 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v15);
	SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase();
	v24.beginTransaction();
	SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabase();
	String v28 = new String(1);
	String v29 = new String(2);
	Cursor v30 = v27.query(""accounts"", v28, ""name=? AND type=?"", v29, 0, 0, 0);
	boolean v31 = v30.moveToNext();
	long v32 = v30.getLong(0);
	v30.close();
	long v26 = v32;
	SQLiteDatabase v35 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v36 = new ContentValues();
	v36.put(""password"", p3);
	String v39 = new String(1);
	String v40 = String.valueOf(v26);
	int v41 = v35.update(""ceDb.accounts"", v36, ""_id=?"", v39);
	int v34 = v41;
	SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v44 = new String(1);
	String v45 = String.valueOf(v26);
	int v46 = v43.delete(""ceDb.authtokens"", ""accounts_id=?"", v44);
	boolean v42 = phiInstruction;
	Map v47 = this.authTokenCache;
	Object v48 = v47.remove(p1);
	TokenCache v49 = this.accountTokenCaches;
	this.mCachedTokens.evict(p2);
	SQLiteDatabase v53 = this.mDeDatabase.getWritableDatabase();
	v53.setTransactionSuccessful();
	int v55 = p2.length();
	long v57 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v58 = new AccountManagerService$1LogRecordTask(AccountManagerService,phiInstruction,""accounts"",v26,p1,p4,v57);
	boolean v60 = this.mHandler.post(v58);
	SQLiteDatabase v62 = this.mDeDatabase.getWritableDatabase();
	v62.endTransaction();
	Map v65 = AccountManagerService.getRequestingPackages(p2, p1);
	Set v66 = v65.entrySet();
	Iterator v67 = v66.iterator();
	boolean v68 = v67.hasNext();
	int v69 = this.userId;
	StringBuilder v71 = new StringBuilder();
	StringBuilder v73 = v71.append(""the accounts changed, sending broadcast of "");
	String v74 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v75 = v71.append(v74);
	String v76 = v71.toString();
	int v77 = Log.i(""AccountManagerService"", v76);
	UserHandle v78 = new UserHandle(v69);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v78);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
39 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,37 @56 exception:38,
41 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:40,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
56 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:55,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
7 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 7 @8 exception:8,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 7,9,3 @14 exception:10,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 6,16,7,17,12 @31 exception:18,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@76 ,
9 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:8,
arraystore 7[10] = 9,
14 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 5,11,12,7 @20 exception:13,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Landroid/accounts/Account;)V > 3,2 @2 exception:4,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getRequestingPackages(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,3 @0 exception:4,
7 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 5 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 7 @8 exception:8,
11 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @8 exception:6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
10 = invokevirtual < Application, Landroid/content/Intent, getAction()Ljava/lang/String; > 8 @13 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,10 @17 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @20 exception:13,
17 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 15,14 @26 exception:16,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 19,2 @33 exception:20,
invokevirtual < Application, Landroid/content/Context, sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 18,8,19 @36 exception:21,
return,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 56 @82 exception:64,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	p0.setPasswordInternal(v7, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v6 = v7;
	boolean v8 = v6.contains(Account.type);
	boolean v5 = v8;
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v4);
	SQLiteDatabase v13 = this.mDeDatabase.getWritableDatabase();
	v13.beginTransaction();
	SQLiteDatabase v16 = this.mDeDatabase.getReadableDatabase();
	String v17 = new String(1);
	String v18 = new String(2);
	Cursor v19 = v16.query(""accounts"", v17, ""name=? AND type=?"", v18, 0, 0, 0);
	boolean v20 = v19.moveToNext();
	long v21 = v19.getLong(0);
	v19.close();
	long v15 = v21;
	SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v25 = new ContentValues();
	v25.put(""password"", p3);
	String v28 = new String(1);
	String v29 = String.valueOf(v15);
	int v30 = v24.update(""ceDb.accounts"", v25, ""_id=?"", v28);
	int v23 = v30;
	SQLiteDatabase v32 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v33 = new String(1);
	String v34 = String.valueOf(v15);
	int v35 = v32.delete(""ceDb.authtokens"", ""accounts_id=?"", v33);
	boolean v31 = phiInstruction;
	Map v36 = this.authTokenCache;
	Object v37 = v36.remove(p1);
	TokenCache v38 = this.accountTokenCaches;
	this.mCachedTokens.evict(p2);
	SQLiteDatabase v42 = this.mDeDatabase.getWritableDatabase();
	v42.setTransactionSuccessful();
	int v44 = p2.length();
	long v46 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v47 = new AccountManagerService$1LogRecordTask(AccountManagerService,phiInstruction,""accounts"",v15,p1,p4,v46);
	boolean v49 = this.mHandler.post(v47);
	SQLiteDatabase v51 = this.mDeDatabase.getWritableDatabase();
	v51.endTransaction();
	Map v54 = AccountManagerService.getRequestingPackages(p2, p1);
	Set v55 = v54.entrySet();
	Iterator v56 = v55.iterator();
	boolean v57 = v56.hasNext();
	int v58 = this.userId;
	StringBuilder v60 = new StringBuilder();
	StringBuilder v62 = v60.append(""the accounts changed, sending broadcast of "");
	String v63 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v64 = v60.append(v63);
	String v65 = v60.toString();
	int v66 = Log.i(""AccountManagerService"", v65);
	UserHandle v67 = new UserHandle(v58);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v67);
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","0","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
45 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,43 @64 exception:44,
48 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,46 @69 exception:47,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @84 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @95 exception:75,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	boolean v21 = p0.saveAuthTokenToDatabase(v20, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
","public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", authTokenType "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v17 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v18 = UserHandle.getCallingUserId();
	boolean v19 = p0.isAccountManagedByCaller(Account.type, v1, v18);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v18);
	boolean v22 = p0.saveAuthTokenToDatabase(v21, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
45 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,43 @64 exception:44,
48 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,46 @69 exception:47,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @84 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
12 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 10 @14 exception:11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @95 exception:75,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	boolean v21 = p0.saveAuthTokenToDatabase(v20, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
","public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", authTokenType "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v17 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v18 = UserHandle.getCallingUserId();
	List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
	boolean v21 = v20.contains(Account.type);
	boolean v19 = v21;
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v18);
	AccountManagerService$UserAccounts v23 = v24;
	AccountManagerService$NotificationId v26 = AccountManagerService.getSigninRequiredNotificationId(v23, p1);
	int v27 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v23);
	UserHandle v28 = UserHandle.of(v27);
	AccountManagerService.cancelNotification(v26, v28);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v31 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	boolean v32 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v31, p2);
	long v33 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v31, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService.writeAuthTokenIntoCacheLocked(v23, p1, p2, p3);
	boolean v25 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
45 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,43 @64 exception:44,
48 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,46 @69 exception:47,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @84 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
12 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 10 @14 exception:11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @95 exception:75,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v5);
	boolean v9 = p0.saveAuthTokenToDatabase(v8, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
","public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesManagedByCaller(v1, v5);
	boolean v8 = v7.contains(Account.type);
	boolean v6 = v8;
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v11 = AccountManagerService.getUserAccountsNotChecked(v5);
	AccountManagerService$UserAccounts v10 = v11;
	AccountManagerService$NotificationId v13 = AccountManagerService.getSigninRequiredNotificationId(v10, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v10);
	UserHandle v15 = UserHandle.of(v14);
	AccountManagerService.cancelNotification(v13, v15);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v18 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	boolean v19 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v18, p2);
	long v20 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v18, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService.writeAuthTokenIntoCacheLocked(v10, p1, p2, p3);
	boolean v12 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
45 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,43 @64 exception:44,
48 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,46 @69 exception:47,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @84 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @0 exception:4,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @5 exception:6,
9 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @9 exception:8,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Landroid/accounts/Account, hashCode()I > 3 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @34 exception:21,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$NotificationId, <init>(Ljava/lang/String;I)V > 24,22,23 @42 exception:25,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @45 exception:26,
29 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 27,3,24 @49 exception:28,
30 = phi  10,24,
monitorexit 5,
return 30,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
12 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 10 @14 exception:11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, getPackageName()Ljava/lang/String; > 4 @2 exception:5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V > 1,2,6,3 @6 exception:7,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
10 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:9,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
16 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 6,13,14,8 @23 exception:15,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
8 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 8 @8 exception:9,
11 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @11 exception:10,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/Long;)V > 8,12,11 @17 exception:13,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 8,14,3 @23 exception:15,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 8,16,4 @28 exception:17,
20 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, insert(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J > 7,18,16,8 @33 exception:19,
return 20,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @95 exception:75,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	boolean v21 = p0.saveAuthTokenToDatabase(v20, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public boolean deleteAuthtokensByAccountIdAndType(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=? AND type=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long insertAuthToken(long p1, String p2, String p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	Long v3 = Long.valueOf(p1);
	v1.put(""accounts_id"", v3);
	v1.put(""type"", p2);
	v1.put(""authtoken"", p3);
	long v7 = v1.insert(""ceDb.authtokens"", ""authtoken"", v1);
	return v7;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", authTokenType "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v17 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v18 = UserHandle.getCallingUserId();
	List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v20 = v21;
	boolean v22 = v20.contains(Account.type);
	boolean v19 = v22;
	long v23 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = p0.getUserAccounts(v18);
	HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v28 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v29 = v28.get(p2);
	StringBuilder v30 = new StringBuilder();
	StringBuilder v32 = v30.append(""AccountManagerService:37:"");
	int v33 = p2.hashCode();
	StringBuilder v34 = v30.append(v33);
	String v35 = v30.toString();
	AccountManagerService$NotificationId v36 = new AccountManagerService$NotificationId(v35,37);
	HashMap v38 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v39 = v38.put(p2, v36);
	AccountManagerService$NotificationId v26 = phiInstruction;
	int v40 = this.userId;
	UserHandle v41 = UserHandle.of(v40);
	String v43 = this.mContext.getPackageName();
	AccountManagerService.cancelNotification(v26, v43, v41);
	SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();
	v46.beginTransaction();
	SQLiteDatabase v49 = this.mDeDatabase.getReadableDatabase();
	String v50 = new String(1);
	String v51 = new String(2);
	Cursor v52 = v49.query(""accounts"", v50, ""name=? AND type=?"", v51, 0, 0, 0);
	boolean v53 = v52.moveToNext();
	long v54 = v52.getLong(0);
	v52.close();
	long v48 = v54;
	SQLiteDatabase v57 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v58 = new String(2);
	String v59 = String.valueOf(v48);
	int v60 = v57.delete(""ceDb.authtokens"", ""accounts_id=? AND type=?"", v58);
	boolean v56 = phiInstruction;
	SQLiteDatabase v62 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v63 = new ContentValues();
	Long v65 = Long.valueOf(v48);
	v63.put(""accounts_id"", v65);
	v63.put(""type"", p3);
	v63.put(""authtoken"", p4);
	long v69 = v62.insert(""ceDb.authtokens"", ""authtoken"", v63);
	long v61 = v69;
	SQLiteDatabase v71 = this.mDeDatabase.getWritableDatabase();
	v71.setTransactionSuccessful();
	SQLiteDatabase v74 = this.mDeDatabase.getWritableDatabase();
	v74.endTransaction();
	AccountManagerService.writeAuthTokenIntoCacheLocked(v24, p1, p2, p3);
	boolean v25 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v23);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
45 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,43 @64 exception:44,
48 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,46 @69 exception:47,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @84 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @0 exception:4,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @5 exception:6,
9 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @9 exception:8,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Landroid/accounts/Account, hashCode()I > 3 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @34 exception:21,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$NotificationId, <init>(Ljava/lang/String;I)V > 24,22,23 @42 exception:25,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @45 exception:26,
29 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 27,3,24 @49 exception:28,
30 = phi  10,24,
monitorexit 5,
return 30,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
12 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 10 @14 exception:11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, getPackageName()Ljava/lang/String; > 4 @2 exception:5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V > 1,2,6,3 @6 exception:7,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @53 exception:21,
return 20,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
10 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:9,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
16 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 6,13,14,8 @23 exception:15,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
8 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 8 @8 exception:9,
11 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @11 exception:10,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/Long;)V > 8,12,11 @17 exception:13,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 8,14,3 @23 exception:15,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 8,16,4 @28 exception:17,
20 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, insert(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J > 7,18,16,8 @33 exception:19,
return 20,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @95 exception:75,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	boolean v21 = p0.saveAuthTokenToDatabase(v20, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public boolean deleteAuthtokensByAccountIdAndType(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=? AND type=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long insertAuthToken(long p1, String p2, String p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	Long v3 = Long.valueOf(p1);
	v1.put(""accounts_id"", v3);
	v1.put(""type"", p2);
	v1.put(""authtoken"", p3);
	long v7 = v1.insert(""ceDb.authtokens"", ""authtoken"", v1);
	return v7;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setAuthToken: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", authTokenType "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v17 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v18 = UserHandle.getCallingUserId();
	List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v20 = v21;
	boolean v22 = v20.contains(Account.type);
	boolean v19 = v22;
	long v23 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = p0.getUserAccounts(v18);
	HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v28 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v29 = v28.get(p2);
	StringBuilder v30 = new StringBuilder();
	StringBuilder v32 = v30.append(""AccountManagerService:37:"");
	int v33 = p2.hashCode();
	StringBuilder v34 = v30.append(v33);
	String v35 = v30.toString();
	AccountManagerService$NotificationId v36 = new AccountManagerService$NotificationId(v35,37);
	HashMap v38 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v39 = v38.put(p2, v36);
	AccountManagerService$NotificationId v26 = phiInstruction;
	int v40 = this.userId;
	UserHandle v41 = UserHandle.of(v40);
	String v43 = this.mContext.getPackageName();
	AccountManagerService.cancelNotification(v26, v43, v41);
	SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();
	v46.beginTransaction();
	SQLiteDatabase v49 = this.mDeDatabase.getReadableDatabase();
	String v50 = new String(1);
	String v51 = new String(2);
	Cursor v52 = v49.query(""accounts"", v50, ""name=? AND type=?"", v51, 0, 0, 0);
	boolean v53 = v52.moveToNext();
	v52.close();
	long v48 = -1;
	SQLiteDatabase v56 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v57 = new String(2);
	String v58 = String.valueOf(v48);
	int v59 = v56.delete(""ceDb.authtokens"", ""accounts_id=? AND type=?"", v57);
	boolean v55 = phiInstruction;
	SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v62 = new ContentValues();
	Long v64 = Long.valueOf(v48);
	v62.put(""accounts_id"", v64);
	v62.put(""type"", p3);
	v62.put(""authtoken"", p4);
	long v68 = v61.insert(""ceDb.authtokens"", ""authtoken"", v62);
	long v60 = v68;
	SQLiteDatabase v70 = this.mDeDatabase.getWritableDatabase();
	v70.setTransactionSuccessful();
	SQLiteDatabase v73 = this.mDeDatabase.getWritableDatabase();
	v73.endTransaction();
	AccountManagerService.writeAuthTokenIntoCacheLocked(v24, p1, p2, p3);
	boolean v25 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v23);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
45 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,43 @64 exception:44,
48 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,46 @69 exception:47,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @72 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @84 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @0 exception:4,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @5 exception:6,
9 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @9 exception:8,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Landroid/accounts/Account, hashCode()I > 3 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @34 exception:21,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$NotificationId, <init>(Ljava/lang/String;I)V > 24,22,23 @42 exception:25,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @45 exception:26,
29 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 27,3,24 @49 exception:28,
30 = phi  10,24,
monitorexit 5,
return 30,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
12 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 10 @14 exception:11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, getPackageName()Ljava/lang/String; > 4 @2 exception:5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V > 1,2,6,3 @6 exception:7,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
10 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:9,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
16 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 6,13,14,8 @23 exception:15,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
8 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 8 @8 exception:9,
11 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @11 exception:10,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/Long;)V > 8,12,11 @17 exception:13,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 8,14,3 @23 exception:15,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 8,16,4 @28 exception:17,
20 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, insert(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J > 7,18,16,8 @33 exception:19,
return 20,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @95 exception:75,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v5);
	boolean v9 = p0.saveAuthTokenToDatabase(v8, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public boolean deleteAuthtokensByAccountIdAndType(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=? AND type=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long insertAuthToken(long p1, String p2, String p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	Long v3 = Long.valueOf(p1);
	v1.put(""accounts_id"", v3);
	v1.put(""type"", p2);
	v1.put(""authtoken"", p3);
	long v7 = v1.insert(""ceDb.authtokens"", ""authtoken"", v1);
	return v7;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v7 = v8;
	boolean v9 = v7.contains(Account.type);
	boolean v6 = v9;
	long v10 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v5);
	HashMap v14 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v15 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v16 = v15.get(p2);
	StringBuilder v17 = new StringBuilder();
	StringBuilder v19 = v17.append(""AccountManagerService:37:"");
	int v20 = p2.hashCode();
	StringBuilder v21 = v17.append(v20);
	String v22 = v17.toString();
	AccountManagerService$NotificationId v23 = new AccountManagerService$NotificationId(v22,37);
	HashMap v25 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v26 = v25.put(p2, v23);
	AccountManagerService$NotificationId v13 = phiInstruction;
	int v27 = this.userId;
	UserHandle v28 = UserHandle.of(v27);
	String v30 = this.mContext.getPackageName();
	AccountManagerService.cancelNotification(v13, v30, v28);
	SQLiteDatabase v33 = this.mDeDatabase.getWritableDatabase();
	v33.beginTransaction();
	SQLiteDatabase v36 = this.mDeDatabase.getReadableDatabase();
	String v37 = new String(1);
	String v38 = new String(2);
	Cursor v39 = v36.query(""accounts"", v37, ""name=? AND type=?"", v38, 0, 0, 0);
	boolean v40 = v39.moveToNext();
	long v41 = v39.getLong(0);
	v39.close();
	long v35 = v41;
	SQLiteDatabase v44 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v45 = new String(2);
	String v46 = String.valueOf(v35);
	int v47 = v44.delete(""ceDb.authtokens"", ""accounts_id=? AND type=?"", v45);
	boolean v43 = phiInstruction;
	SQLiteDatabase v49 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v50 = new ContentValues();
	Long v52 = Long.valueOf(v35);
	v50.put(""accounts_id"", v52);
	v50.put(""type"", p3);
	v50.put(""authtoken"", p4);
	long v56 = v49.insert(""ceDb.authtokens"", ""authtoken"", v50);
	long v48 = v56;
	SQLiteDatabase v58 = this.mDeDatabase.getWritableDatabase();
	v58.setTransactionSuccessful();
	SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
	v61.endTransaction();
	AccountManagerService.writeAuthTokenIntoCacheLocked(v11, p1, p2, p3);
	boolean v12 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v10);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","0","7 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @0 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, grantAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @14 exception:15,
goto (from iindex= 8 to iindex = 4),
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.grantAppPermission(p1, p2, p3);
	return;
}
-----
","public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.grantAppPermission(p1, p2, p3);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","1","7 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @0 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, revokeAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @18 exception:14,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
7 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 4 @5 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 12 @21 exception:13,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 14,2 @26 exception:15,
18 = binaryop(lt) 16 , 17,
conditional branch(lt, to iindex=-1) 18,5,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
20 = conversion(J) 4,
22 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteGrantsByAccountIdAuthTokenTypeAndUid(JLjava/lang/String;J)Z > 19,16,3,20 @40 exception:21,
23 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 23 @45 exception:24,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 34 @50 exception:35,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @53 exception:36,
39 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @57 exception:38,
41 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 39 @61 exception:40,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,37,41 @65 exception:42,
monitorexit 11,
monitorexit 10,
59 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
61 = invokevirtual < Application, Ljava/util/concurrent/CopyOnWriteArrayList, iterator()Ljava/util/Iterator; > 59 @72 exception:60,
63 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 61 @76 exception:62,
conditional branch(eq, to iindex=-1) 63,5,
return,
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.revokeAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void revokeAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v4 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	boolean v5 = AccountManagerService$UserAccounts.accountsDb.deleteGrantsByAccountIdAuthTokenTypeAndUid(v4, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService$NotificationId v8 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v9 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v10 = UserHandle.of(v9);
	p0.cancelNotification(v8, v10);
	Iterator v12 = this.mAppPermissionChangeListeners.iterator();
	boolean v13 = v12.hasNext();
	return;
}
-----
","public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	int v4 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v5 = AccountManagerService.getUserAccounts(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	boolean v8 = AccountManagerService$UserAccounts.accountsDb.deleteGrantsByAccountIdAuthTokenTypeAndUid(v7, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService$NotificationId v11 = AccountManagerService.getCredentialPermissionNotificationId(p1, p2, p3);
	int v12 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v5);
	UserHandle v13 = UserHandle.of(v12);
	AccountManagerService.cancelNotification(v11, v13);
	Iterator v15 = this.mAppPermissionChangeListeners.iterator();
	boolean v16 = v15.hasNext();
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","1","7 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @0 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, grantAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @14 exception:15,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
7 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 4 @5 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
14 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 12,2 @21 exception:13,
16 = binaryop(lt) 14 , 15,
conditional branch(lt, to iindex=-1) 16,5,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertGrant(JLjava/lang/String;I)J > 17,14,3,4 @33 exception:18,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @36 exception:23,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @40 exception:25,
28 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 26 @44 exception:27,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,24,28 @48 exception:29,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelAccountAccessRequestNotificationIfNeeded(Landroid/accounts/Account;IZ)V > 1,2,4,30 @52 exception:31,
monitorexit 11,
monitorexit 10,
48 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
50 = invokevirtual < Application, Ljava/util/concurrent/CopyOnWriteArrayList, iterator()Ljava/util/Iterator; > 48 @59 exception:49,
52 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 50 @63 exception:51,
conditional branch(eq, to iindex=-1) 52,5,
return,
goto (from iindex= 8 to iindex = 4),
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.grantAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void grantAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	long v4 = AccountManagerService$UserAccounts.accountsDb.insertGrant(v3, p2, p3);
	AccountManagerService$NotificationId v5 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v7 = UserHandle.of(v6);
	p0.cancelNotification(v5, v7);
	p0.cancelAccountAccessRequestNotificationIfNeeded(p1, p3, 1);
	Iterator v10 = this.mAppPermissionChangeListeners.iterator();
	boolean v11 = v10.hasNext();
	return;
}
-----
","public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	int v4 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v5 = AccountManagerService.getUserAccounts(v4);
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	long v7 = AccountManagerService$UserAccounts.accountsDb.insertGrant(v6, p2, p3);
	AccountManagerService$NotificationId v8 = AccountManagerService.getCredentialPermissionNotificationId(p1, p2, p3);
	int v9 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v5);
	UserHandle v10 = UserHandle.of(v9);
	AccountManagerService.cancelNotification(v8, v10);
	AccountManagerService.cancelAccountAccessRequestNotificationIfNeeded(p1, p3, 1);
	Iterator v13 = this.mAppPermissionChangeListeners.iterator();
	boolean v14 = v13.hasNext();
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","2","7 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @0 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, revokeAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @18 exception:14,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
7 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 4 @5 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 12 @21 exception:13,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 14,2 @26 exception:15,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
18 = binaryop(lt) 16 , 17,
conditional branch(lt, to iindex=-1) 18,5,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
20 = conversion(J) 4,
22 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteGrantsByAccountIdAuthTokenTypeAndUid(JLjava/lang/String;J)Z > 19,16,3,20 @40 exception:21,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
9 = new <Application,[Ljava/lang/String>@78 ,
11 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:10,
arraystore 9[12] = 11,
arraystore 9[13] = 3,
15 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 4 @19 exception:14,
arraystore 9[16] = 15,
20 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 7,17,18,9 @30 exception:19,
conditional branch(le, to iindex=-1) 20,12,
21 = phi  12,13,
return 21,
23 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 23 @45 exception:24,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 34 @50 exception:35,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @53 exception:36,
6 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 4 @0 exception:5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @4 exception:7,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 8 @8 exception:9,
monitorenter 10,
11 = new <Application,Landroid/util/Pair>@13,
12 = new <Application,Landroid/util/Pair>@15,
invokespecial < Application, Landroid/util/Pair, <init>(Ljava/lang/Object;Ljava/lang/Object;)V > 12,2,3 @17 exception:13,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @20 exception:14,
invokespecial < Application, Landroid/util/Pair, <init>(Ljava/lang/Object;Ljava/lang/Object;)V > 11,12,15 @24 exception:16,
18 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 8 @27 exception:17,
20 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 18,11 @31 exception:19,
21 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>20 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 21,22,
23 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 23 @41 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,25 @46 exception:26,
29 = invokevirtual < Application, Landroid/accounts/Account, hashCode()I > 2 @49 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,29 @53 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,32 @58 exception:33,
36 = invokevirtual < Application, Ljava/lang/String, hashCode()I > 3 @61 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,36 @65 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,32 @70 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,4 @73 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 23 @76 exception:43,
46 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@82,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$NotificationId, <init>(Ljava/lang/String;I)V > 46,44,45 @84 exception:47,
49 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 8 @87 exception:48,
51 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 49,11,46 @91 exception:50,
52 = phi  21,46,
monitorexit 10,
return 52,
39 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @57 exception:38,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
41 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 39 @61 exception:40,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,37,41 @65 exception:42,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, getPackageName()Ljava/lang/String; > 4 @2 exception:5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V > 1,2,6,3 @6 exception:7,
return,
monitorexit 11,
monitorexit 10,
59 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
61 = invokevirtual < Application, Ljava/util/concurrent/CopyOnWriteArrayList, iterator()Ljava/util/Iterator; > 59 @72 exception:60,
63 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 61 @76 exception:62,
conditional branch(eq, to iindex=-1) 63,5,
return,
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.revokeAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void revokeAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v4 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	boolean v5 = AccountManagerService$UserAccounts.accountsDb.deleteGrantsByAccountIdAuthTokenTypeAndUid(v4, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService$NotificationId v8 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v9 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v10 = UserHandle.of(v9);
	p0.cancelNotification(v8, v10);
	Iterator v12 = this.mAppPermissionChangeListeners.iterator();
	boolean v13 = v12.hasNext();
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public boolean deleteGrantsByAccountIdAuthTokenTypeAndUid(long p1, String p2, long p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	String v1 = new String(3);
	String v2 = String.valueOf(p1);
	String v3 = String.valueOf(p3);
	int v4 = v1.delete(""grants"", ""accounts_id=? AND auth_token_type=? AND uid=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public AccountManagerService$NotificationId getCredentialPermissionNotificationId(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	HashMap v3 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Pair v3 = new Pair(v3,v5);
	Pair v3 = new Pair(p1,p2);
	Integer v5 = Integer.valueOf(p3);
	HashMap v7 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v8 = v7.get(v3);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append(""AccountManagerService:38:"");
	int v11 = p1.hashCode();
	StringBuilder v12 = v8.append(v11);
	StringBuilder v13 = v8.append("":"");
	int v14 = p2.hashCode();
	StringBuilder v15 = v8.append(v14);
	StringBuilder v16 = v8.append("":"");
	StringBuilder v17 = v8.append(p3);
	String v18 = v8.toString();
	AccountManagerService$NotificationId v18 = new AccountManagerService$NotificationId(v18,38);
	HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v21 = v20.put(v3, v18);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
","public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	int v4 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v5 = v6;
	SQLiteDatabase v8 = this.mDeDatabase.getWritableDatabase();
	v8.beginTransaction();
	SQLiteDatabase v11 = this.mDeDatabase.getReadableDatabase();
	String v12 = new String(1);
	String v13 = new String(2);
	Cursor v14 = v11.query(""accounts"", v12, ""name=? AND type=?"", v13, 0, 0, 0);
	boolean v15 = v14.moveToNext();
	long v16 = v14.getLong(0);
	v14.close();
	long v10 = v16;
	SQLiteDatabase v19 = this.mDeDatabase.getWritableDatabase();
	String v20 = new String(3);
	String v21 = String.valueOf(v10);
	String v22 = String.valueOf(p3);
	int v23 = v19.delete(""grants"", ""accounts_id=? AND auth_token_type=? AND uid=?"", v20);
	boolean v18 = phiInstruction;
	SQLiteDatabase v25 = this.mDeDatabase.getWritableDatabase();
	v25.setTransactionSuccessful();
	SQLiteDatabase v28 = this.mDeDatabase.getWritableDatabase();
	v28.endTransaction();
	int v31 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v32 = AccountManagerService.getUserAccounts(v31);
	HashMap v33 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v32);
	Pair v34 = new Pair(v35,v37);
	Pair v35 = new Pair(p1,p2);
	Integer v37 = Integer.valueOf(p3);
	HashMap v39 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v32);
	Object v40 = v39.get(v34);
	StringBuilder v41 = new StringBuilder();
	StringBuilder v43 = v41.append(""AccountManagerService:38:"");
	int v44 = p1.hashCode();
	StringBuilder v45 = v41.append(v44);
	StringBuilder v46 = v41.append("":"");
	int v47 = p2.hashCode();
	StringBuilder v48 = v41.append(v47);
	StringBuilder v49 = v41.append("":"");
	StringBuilder v50 = v41.append(p3);
	String v51 = v41.toString();
	AccountManagerService$NotificationId v52 = new AccountManagerService$NotificationId(v51,38);
	HashMap v54 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v32);
	Object v55 = v54.put(v34, v52);
	AccountManagerService$NotificationId v30 = phiInstruction;
	int v56 = this.userId;
	UserHandle v57 = UserHandle.of(v56);
	String v59 = this.mContext.getPackageName();
	AccountManagerService.cancelNotification(v30, v59, v57);
	Iterator v61 = this.mAppPermissionChangeListeners.iterator();
	boolean v62 = v61.hasNext();
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","2","7 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @0 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, revokeAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @18 exception:14,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
7 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 4 @5 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 12 @21 exception:13,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 14,2 @26 exception:15,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @53 exception:21,
return 20,
18 = binaryop(lt) 16 , 17,
conditional branch(lt, to iindex=-1) 18,5,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
20 = conversion(J) 4,
22 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteGrantsByAccountIdAuthTokenTypeAndUid(JLjava/lang/String;J)Z > 19,16,3,20 @40 exception:21,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
9 = new <Application,[Ljava/lang/String>@78 ,
11 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:10,
arraystore 9[12] = 11,
arraystore 9[13] = 3,
15 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 4 @19 exception:14,
arraystore 9[16] = 15,
20 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 7,17,18,9 @30 exception:19,
conditional branch(le, to iindex=-1) 20,12,
21 = phi  12,13,
return 21,
23 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 23 @45 exception:24,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 34 @50 exception:35,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @53 exception:36,
6 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 4 @0 exception:5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @4 exception:7,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 8 @8 exception:9,
monitorenter 10,
11 = new <Application,Landroid/util/Pair>@13,
12 = new <Application,Landroid/util/Pair>@15,
invokespecial < Application, Landroid/util/Pair, <init>(Ljava/lang/Object;Ljava/lang/Object;)V > 12,2,3 @17 exception:13,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @20 exception:14,
invokespecial < Application, Landroid/util/Pair, <init>(Ljava/lang/Object;Ljava/lang/Object;)V > 11,12,15 @24 exception:16,
18 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 8 @27 exception:17,
20 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 18,11 @31 exception:19,
21 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>20 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 21,22,
23 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 23 @41 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,25 @46 exception:26,
29 = invokevirtual < Application, Landroid/accounts/Account, hashCode()I > 2 @49 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,29 @53 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,32 @58 exception:33,
36 = invokevirtual < Application, Ljava/lang/String, hashCode()I > 3 @61 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,36 @65 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,32 @70 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,4 @73 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 23 @76 exception:43,
46 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@82,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$NotificationId, <init>(Ljava/lang/String;I)V > 46,44,45 @84 exception:47,
49 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 8 @87 exception:48,
51 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 49,11,46 @91 exception:50,
52 = phi  21,46,
monitorexit 10,
return 52,
39 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @57 exception:38,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
41 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 39 @61 exception:40,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,37,41 @65 exception:42,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, getPackageName()Ljava/lang/String; > 4 @2 exception:5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V > 1,2,6,3 @6 exception:7,
return,
monitorexit 11,
monitorexit 10,
59 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
61 = invokevirtual < Application, Ljava/util/concurrent/CopyOnWriteArrayList, iterator()Ljava/util/Iterator; > 59 @72 exception:60,
63 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 61 @76 exception:62,
conditional branch(eq, to iindex=-1) 63,5,
return,
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.revokeAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void revokeAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v4 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	boolean v5 = AccountManagerService$UserAccounts.accountsDb.deleteGrantsByAccountIdAuthTokenTypeAndUid(v4, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService$NotificationId v8 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v9 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v10 = UserHandle.of(v9);
	p0.cancelNotification(v8, v10);
	Iterator v12 = this.mAppPermissionChangeListeners.iterator();
	boolean v13 = v12.hasNext();
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public boolean deleteGrantsByAccountIdAuthTokenTypeAndUid(long p1, String p2, long p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	String v1 = new String(3);
	String v2 = String.valueOf(p1);
	String v3 = String.valueOf(p3);
	int v4 = v1.delete(""grants"", ""accounts_id=? AND auth_token_type=? AND uid=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public AccountManagerService$NotificationId getCredentialPermissionNotificationId(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	HashMap v3 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Pair v3 = new Pair(v3,v5);
	Pair v3 = new Pair(p1,p2);
	Integer v5 = Integer.valueOf(p3);
	HashMap v7 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v8 = v7.get(v3);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append(""AccountManagerService:38:"");
	int v11 = p1.hashCode();
	StringBuilder v12 = v8.append(v11);
	StringBuilder v13 = v8.append("":"");
	int v14 = p2.hashCode();
	StringBuilder v15 = v8.append(v14);
	StringBuilder v16 = v8.append("":"");
	StringBuilder v17 = v8.append(p3);
	String v18 = v8.toString();
	AccountManagerService$NotificationId v18 = new AccountManagerService$NotificationId(v18,38);
	HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v21 = v20.put(v3, v18);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
","public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	int v4 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v5 = v6;
	SQLiteDatabase v8 = this.mDeDatabase.getWritableDatabase();
	v8.beginTransaction();
	SQLiteDatabase v11 = this.mDeDatabase.getReadableDatabase();
	String v12 = new String(1);
	String v13 = new String(2);
	Cursor v14 = v11.query(""accounts"", v12, ""name=? AND type=?"", v13, 0, 0, 0);
	boolean v15 = v14.moveToNext();
	v14.close();
	long v10 = -1;
	SQLiteDatabase v18 = this.mDeDatabase.getWritableDatabase();
	String v19 = new String(3);
	String v20 = String.valueOf(v10);
	String v21 = String.valueOf(p3);
	int v22 = v18.delete(""grants"", ""accounts_id=? AND auth_token_type=? AND uid=?"", v19);
	boolean v17 = phiInstruction;
	SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase();
	v24.setTransactionSuccessful();
	SQLiteDatabase v27 = this.mDeDatabase.getWritableDatabase();
	v27.endTransaction();
	int v30 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v31 = AccountManagerService.getUserAccounts(v30);
	HashMap v32 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v31);
	Pair v33 = new Pair(v34,v36);
	Pair v34 = new Pair(p1,p2);
	Integer v36 = Integer.valueOf(p3);
	HashMap v38 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v31);
	Object v39 = v38.get(v33);
	StringBuilder v40 = new StringBuilder();
	StringBuilder v42 = v40.append(""AccountManagerService:38:"");
	int v43 = p1.hashCode();
	StringBuilder v44 = v40.append(v43);
	StringBuilder v45 = v40.append("":"");
	int v46 = p2.hashCode();
	StringBuilder v47 = v40.append(v46);
	StringBuilder v48 = v40.append("":"");
	StringBuilder v49 = v40.append(p3);
	String v50 = v40.toString();
	AccountManagerService$NotificationId v51 = new AccountManagerService$NotificationId(v50,38);
	HashMap v53 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v31);
	Object v54 = v53.put(v33, v51);
	AccountManagerService$NotificationId v29 = phiInstruction;
	int v55 = this.userId;
	UserHandle v56 = UserHandle.of(v55);
	String v58 = this.mContext.getPackageName();
	AccountManagerService.cancelNotification(v29, v58, v56);
	Iterator v60 = this.mAppPermissionChangeListeners.iterator();
	boolean v61 = v60.hasNext();
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","2","7 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @0 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, grantAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @14 exception:15,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
7 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 4 @5 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
14 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 12,2 @21 exception:13,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
16 = binaryop(lt) 14 , 15,
conditional branch(lt, to iindex=-1) 16,5,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertGrant(JLjava/lang/String;I)J > 17,14,3,4 @33 exception:18,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 5 @2 exception:6,
8 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 8 @8 exception:9,
11 = invokestatic < Application, Ljava/lang/Long, valueOf(J)Ljava/lang/Long; > 2 @11 exception:10,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/Long;)V > 8,12,11 @17 exception:13,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 8,14,3 @22 exception:15,
17 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @25 exception:16,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/Integer;)V > 8,18,17 @32 exception:19,
22 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, insert(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J > 7,20,12,8 @37 exception:21,
return 22,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @36 exception:23,
6 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 4 @0 exception:5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @4 exception:7,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 8 @8 exception:9,
monitorenter 10,
11 = new <Application,Landroid/util/Pair>@13,
12 = new <Application,Landroid/util/Pair>@15,
invokespecial < Application, Landroid/util/Pair, <init>(Ljava/lang/Object;Ljava/lang/Object;)V > 12,2,3 @17 exception:13,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @20 exception:14,
invokespecial < Application, Landroid/util/Pair, <init>(Ljava/lang/Object;Ljava/lang/Object;)V > 11,12,15 @24 exception:16,
18 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 8 @27 exception:17,
20 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 18,11 @31 exception:19,
21 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>20 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 21,22,
23 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 23 @41 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,25 @46 exception:26,
29 = invokevirtual < Application, Landroid/accounts/Account, hashCode()I > 2 @49 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,29 @53 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,32 @58 exception:33,
36 = invokevirtual < Application, Ljava/lang/String, hashCode()I > 3 @61 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,36 @65 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 23,32 @70 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 23,4 @73 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 23 @76 exception:43,
46 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@82,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$NotificationId, <init>(Ljava/lang/String;I)V > 46,44,45 @84 exception:47,
49 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 8 @87 exception:48,
51 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 49,11,46 @91 exception:50,
52 = phi  21,46,
monitorexit 10,
return 52,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @40 exception:25,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
28 = invokestatic < Application, Landroid/os/UserHandle, of(I)Landroid/os/UserHandle; > 26 @44 exception:27,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,24,28 @48 exception:29,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, getPackageName()Ljava/lang/String; > 4 @2 exception:5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V > 1,2,6,3 @6 exception:7,
return,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelAccountAccessRequestNotificationIfNeeded(Landroid/accounts/Account;IZ)V > 1,2,4,30 @52 exception:31,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,3 @2 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
9 = arraylength 7,
14 = phi  13,8,
conditional branch(ge, to iindex=-1) 14,9,
return,
monitorexit 11,
monitorexit 10,
48 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
50 = invokevirtual < Application, Ljava/util/concurrent/CopyOnWriteArrayList, iterator()Ljava/util/Iterator; > 48 @59 exception:49,
52 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 50 @63 exception:51,
conditional branch(eq, to iindex=-1) 52,5,
return,
goto (from iindex= 8 to iindex = 4),
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.grantAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void grantAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	long v4 = AccountManagerService$UserAccounts.accountsDb.insertGrant(v3, p2, p3);
	AccountManagerService$NotificationId v5 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v7 = UserHandle.of(v6);
	p0.cancelNotification(v5, v7);
	p0.cancelAccountAccessRequestNotificationIfNeeded(p1, p3, 1);
	Iterator v10 = this.mAppPermissionChangeListeners.iterator();
	boolean v11 = v10.hasNext();
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public long insertGrant(long p1, String p2, int p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	Long v3 = Long.valueOf(p1);
	v1.put(""accounts_id"", v3);
	v1.put(""auth_token_type"", p2);
	Integer v6 = Integer.valueOf(p3);
	v1.put(""uid"", v6);
	long v8 = v1.insert(""grants"", ""accounts_id"", v1);
	return v8;
}
-----
depth : 2
public AccountManagerService$NotificationId getCredentialPermissionNotificationId(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	HashMap v3 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Pair v3 = new Pair(v3,v5);
	Pair v3 = new Pair(p1,p2);
	Integer v5 = Integer.valueOf(p3);
	HashMap v7 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v8 = v7.get(v3);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append(""AccountManagerService:38:"");
	int v11 = p1.hashCode();
	StringBuilder v12 = v8.append(v11);
	StringBuilder v13 = v8.append("":"");
	int v14 = p2.hashCode();
	StringBuilder v15 = v8.append(v14);
	StringBuilder v16 = v8.append("":"");
	StringBuilder v17 = v8.append(p3);
	String v18 = v8.toString();
	AccountManagerService$NotificationId v18 = new AccountManagerService$NotificationId(v18,38);
	HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v21 = v20.put(v3, v18);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public void cancelAccountAccessRequestNotificationIfNeeded(Account p1, int p2, boolean p3){
	String v1 = this.mPackageManager.getPackagesForUid(p2);
	return;
}
-----
","public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	int v4 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v5 = v6;
	SQLiteDatabase v8 = this.mDeDatabase.getReadableDatabase();
	String v9 = new String(1);
	String v10 = new String(2);
	Cursor v11 = v8.query(""accounts"", v9, ""name=? AND type=?"", v10, 0, 0, 0);
	boolean v12 = v11.moveToNext();
	long v13 = v11.getLong(0);
	v11.close();
	long v7 = v13;
	SQLiteDatabase v16 = this.mDeDatabase.getWritableDatabase();
	ContentValues v17 = new ContentValues();
	Long v19 = Long.valueOf(v7);
	v17.put(""accounts_id"", v19);
	v17.put(""auth_token_type"", p2);
	Integer v22 = Integer.valueOf(p3);
	v17.put(""uid"", v22);
	long v24 = v16.insert(""grants"", ""accounts_id"", v17);
	long v15 = v24;
	int v26 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v27 = AccountManagerService.getUserAccounts(v26);
	HashMap v28 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v27);
	Pair v29 = new Pair(v30,v32);
	Pair v30 = new Pair(p1,p2);
	Integer v32 = Integer.valueOf(p3);
	HashMap v34 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v27);
	Object v35 = v34.get(v29);
	StringBuilder v36 = new StringBuilder();
	StringBuilder v38 = v36.append(""AccountManagerService:38:"");
	int v39 = p1.hashCode();
	StringBuilder v40 = v36.append(v39);
	StringBuilder v41 = v36.append("":"");
	int v42 = p2.hashCode();
	StringBuilder v43 = v36.append(v42);
	StringBuilder v44 = v36.append("":"");
	StringBuilder v45 = v36.append(p3);
	String v46 = v36.toString();
	AccountManagerService$NotificationId v47 = new AccountManagerService$NotificationId(v46,38);
	HashMap v49 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v27);
	Object v50 = v49.put(v29, v47);
	AccountManagerService$NotificationId v25 = phiInstruction;
	int v51 = this.userId;
	UserHandle v52 = UserHandle.of(v51);
	String v54 = this.mContext.getPackageName();
	AccountManagerService.cancelNotification(v25, v54, v52);
	String v57 = this.mPackageManager.getPackagesForUid(p3);
	Iterator v58 = this.mAppPermissionChangeListeners.iterator();
	boolean v59 = v58.hasNext();
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","0","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @4 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @11 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @18 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @26 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @31 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @34 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @39 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,11 @42 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @47 exception:32,
35 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @50 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,35 @54 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @57 exception:38,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,39 @61 exception:40,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,45 @66 exception:46,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(eq, to iindex=-1) 50,18,
61 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @77 exception:60,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 61 @96 exception:75,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
","public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""addAccountExplicitly: "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", caller's uid "");
	StringBuilder v10 = v5.append(v2);
	StringBuilder v11 = v5.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v5.append(v12);
	String v14 = v5.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v3);
	boolean v20 = p0.addAccountInternal(v19, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return v20;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","1","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @4 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @11 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @18 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @26 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @31 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @34 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @39 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,11 @42 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @47 exception:32,
35 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @50 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,35 @54 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @57 exception:38,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,39 @61 exception:40,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,45 @66 exception:46,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
61 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @77 exception:60,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 5,9 @11 exception:10,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
16 = invokevirtual < Application, Ljava/lang/String, length()I > 13 @24 exception:15,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
22 = invokevirtual < Application, Ljava/lang/String, length()I > 20 @42 exception:21,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
43 = invokeinterface < Application, Ljava/util/Map, size()I > 41 @185 exception:42,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 193 @197 exception:194,
196 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,142 @202 exception:195,
198 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @205 exception:197,
200 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,198 @209 exception:199,
203 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,201 @214 exception:202,
205 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 193 @217 exception:204,
207 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 139,205 @221 exception:206,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
monitorexit 31,
monitorexit 30,
return 12,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 61 @96 exception:75,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""addAccountExplicitly: "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", caller's uid "");
	StringBuilder v10 = v5.append(v2);
	StringBuilder v11 = v5.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v5.append(v12);
	String v14 = v5.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	List v18 = AccountManagerService.getTypesManagedByCaller(v2, v3);
	boolean v19 = v18.contains(Account.type);
	boolean v17 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v21 = v22;
	Bundle v24 = Bundle.setDefusable(p3, 1);
	int v25 = Account.name.length();
	int v26 = Account.type.length();
	int v27 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v21);
	boolean v28 = AccountManagerService.isLocalUnlockedUser(v27);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v30 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
	Map v31 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v32 = v31.size();
	StringBuilder v33 = new StringBuilder();
	StringBuilder v35 = v33.append(""insertAccountIntoDatabase: "");
	String v36 = p1.toSafeString();
	StringBuilder v37 = v33.append(v36);
	StringBuilder v38 = v33.append("", skipping since more than 50 accounts on device exist"");
	String v39 = v33.toString();
	int v40 = Log.w(""AccountManagerService"", v39);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	boolean v23 = 0;
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v23;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","1","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @4 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @11 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @18 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,45 @66 exception:46,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
61 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @77 exception:60,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 5,9 @11 exception:10,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
16 = invokevirtual < Application, Ljava/lang/String, length()I > 13 @24 exception:15,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
22 = invokevirtual < Application, Ljava/lang/String, length()I > 20 @42 exception:21,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
43 = invokeinterface < Application, Ljava/util/Map, size()I > 41 @185 exception:42,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 193 @197 exception:194,
196 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,142 @202 exception:195,
198 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @205 exception:197,
200 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,198 @209 exception:199,
203 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,201 @214 exception:202,
205 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 193 @217 exception:204,
207 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 139,205 @221 exception:206,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
monitorexit 31,
monitorexit 30,
return 12,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 61 @96 exception:75,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	Object v5 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v3);
	boolean v9 = p0.addAccountInternal(v8, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	Object v5 = Objects.requireNonNull(p1, ""account cannot be null"");
	List v7 = AccountManagerService.getTypesManagedByCaller(v2, v3);
	boolean v8 = v7.contains(Account.type);
	boolean v6 = v8;
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v11 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v10 = v11;
	Bundle v13 = Bundle.setDefusable(p3, 1);
	int v14 = Account.name.length();
	int v15 = Account.type.length();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v10);
	boolean v17 = AccountManagerService.isLocalUnlockedUser(v16);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v19 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
	Map v20 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v21 = v20.size();
	StringBuilder v22 = new StringBuilder();
	StringBuilder v24 = v22.append(""insertAccountIntoDatabase: "");
	String v25 = p1.toSafeString();
	StringBuilder v26 = v22.append(v25);
	StringBuilder v27 = v22.append("", skipping since more than 50 accounts on device exist"");
	String v28 = v22.toString();
	int v29 = Log.w(""AccountManagerService"", v28);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	boolean v12 = 0;
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return v12;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @4 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @11 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @18 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @26 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @31 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @34 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @39 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,11 @42 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @47 exception:32,
35 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @50 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,35 @54 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @57 exception:38,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,39 @61 exception:40,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,45 @66 exception:46,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
61 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @77 exception:60,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 5,9 @11 exception:10,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
16 = invokevirtual < Application, Ljava/lang/String, length()I > 13 @24 exception:15,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
22 = invokevirtual < Application, Ljava/lang/String, length()I > 20 @42 exception:21,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
5 = new <Application,Ljava/util/LinkedHashMap>@6,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 5 @8 exception:6,
10 = new <Application,[Ljava/lang/String>@1911 ,
15 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 4,12,10,13,13,13,13,7 @31 exception:14,
17 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 15 @35 exception:16,
conditional branch(eq, to iindex=-1) 17,13,
invokeinterface < Application, Landroid/database/Cursor, close()V > 15 @69 exception:39,
return 5,
43 = invokeinterface < Application, Ljava/util/Map, size()I > 41 @185 exception:42,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 193 @197 exception:194,
196 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,142 @202 exception:195,
198 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @205 exception:197,
200 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,198 @209 exception:199,
203 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,201 @214 exception:202,
205 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 193 @217 exception:204,
207 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 139,205 @221 exception:206,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
monitorexit 31,
monitorexit 30,
return 12,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 61 @96 exception:75,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public Map findAllDeAccounts(){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	LinkedHashMap v1 = new LinkedHashMap();
	String v2 = new String(3);
	Cursor v3 = v1.query(""accounts"", v2, 0, 0, 0, 0, ""_id"");
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""addAccountExplicitly: "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", caller's uid "");
	StringBuilder v10 = v5.append(v2);
	StringBuilder v11 = v5.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v5.append(v12);
	String v14 = v5.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v18 = v19;
	boolean v20 = v18.contains(Account.type);
	boolean v17 = v20;
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v3);
	Bundle v24 = Bundle.setDefusable(p3, 1);
	int v25 = Account.name.length();
	int v26 = Account.type.length();
	int v27 = this.userId;
	boolean v29 = this.mLocalUnlockedUsers.get(v27);
	boolean v28 = v29;
	SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase();
	v31.beginTransaction();
	SQLiteDatabase v34 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v35 = new String(1);
	String v36 = new String(2);
	Cursor v37 = v34.query(""ceDb.accounts"", v35, ""name=? AND type=?"", v36, 0, 0, 0);
	boolean v38 = v37.moveToNext();
	long v39 = v37.getLong(0);
	v37.close();
	long v33 = v39;
	SQLiteDatabase v42 = this.mDeDatabase.getReadableDatabase();
	LinkedHashMap v43 = new LinkedHashMap();
	String v45 = new String(3);
	Cursor v46 = v42.query(""accounts"", v45, 0, 0, 0, 0, ""_id"");
	boolean v47 = v46.moveToNext();
	v46.close();
	Map v41 = v43;
	int v49 = v41.size();
	StringBuilder v50 = new StringBuilder();
	StringBuilder v52 = v50.append(""insertAccountIntoDatabase: "");
	String v53 = p1.toSafeString();
	StringBuilder v54 = v50.append(v53);
	StringBuilder v55 = v50.append("", skipping since more than 50 accounts on device exist"");
	String v56 = v50.toString();
	int v57 = Log.w(""AccountManagerService"", v56);
	SQLiteDatabase v59 = this.mDeDatabase.getWritableDatabase();
	v59.endTransaction();
	boolean v23 = 0;
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return v23;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @4 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @11 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @18 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @26 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @31 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @34 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @39 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,11 @42 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @47 exception:32,
35 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @50 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,35 @54 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @57 exception:38,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,39 @61 exception:40,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,45 @66 exception:46,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
61 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @77 exception:60,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 5,9 @11 exception:10,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
16 = invokevirtual < Application, Ljava/lang/String, length()I > 13 @24 exception:15,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
22 = invokevirtual < Application, Ljava/lang/String, length()I > 20 @42 exception:21,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @53 exception:21,
return 20,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
5 = new <Application,Ljava/util/LinkedHashMap>@6,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 5 @8 exception:6,
10 = new <Application,[Ljava/lang/String>@1911 ,
15 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 4,12,10,13,13,13,13,7 @31 exception:14,
17 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 15 @35 exception:16,
conditional branch(eq, to iindex=-1) 17,13,
invokeinterface < Application, Landroid/database/Cursor, close()V > 15 @69 exception:39,
return 5,
43 = invokeinterface < Application, Ljava/util/Map, size()I > 41 @185 exception:42,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 193 @197 exception:194,
196 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,142 @202 exception:195,
198 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @205 exception:197,
200 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,198 @209 exception:199,
203 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,201 @214 exception:202,
205 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 193 @217 exception:204,
207 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 139,205 @221 exception:206,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
monitorexit 31,
monitorexit 30,
return 12,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 61 @96 exception:75,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public Map findAllDeAccounts(){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	LinkedHashMap v1 = new LinkedHashMap();
	String v2 = new String(3);
	Cursor v3 = v1.query(""accounts"", v2, 0, 0, 0, 0, ""_id"");
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""addAccountExplicitly: "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", caller's uid "");
	StringBuilder v10 = v5.append(v2);
	StringBuilder v11 = v5.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v5.append(v12);
	String v14 = v5.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	Object v16 = Objects.requireNonNull(p1, ""account cannot be null"");
	List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v18 = v19;
	boolean v20 = v18.contains(Account.type);
	boolean v17 = v20;
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v3);
	Bundle v24 = Bundle.setDefusable(p3, 1);
	int v25 = Account.name.length();
	int v26 = Account.type.length();
	int v27 = this.userId;
	boolean v29 = this.mLocalUnlockedUsers.get(v27);
	boolean v28 = v29;
	SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase();
	v31.beginTransaction();
	SQLiteDatabase v34 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v35 = new String(1);
	String v36 = new String(2);
	Cursor v37 = v34.query(""ceDb.accounts"", v35, ""name=? AND type=?"", v36, 0, 0, 0);
	boolean v38 = v37.moveToNext();
	v37.close();
	long v33 = -1;
	SQLiteDatabase v41 = this.mDeDatabase.getReadableDatabase();
	LinkedHashMap v42 = new LinkedHashMap();
	String v44 = new String(3);
	Cursor v45 = v41.query(""accounts"", v44, 0, 0, 0, 0, ""_id"");
	boolean v46 = v45.moveToNext();
	v45.close();
	Map v40 = v42;
	int v48 = v40.size();
	StringBuilder v49 = new StringBuilder();
	StringBuilder v51 = v49.append(""insertAccountIntoDatabase: "");
	String v52 = p1.toSafeString();
	StringBuilder v53 = v49.append(v52);
	StringBuilder v54 = v49.append("", skipping since more than 50 accounts on device exist"");
	String v55 = v49.toString();
	int v56 = Log.w(""AccountManagerService"", v55);
	SQLiteDatabase v58 = this.mDeDatabase.getWritableDatabase();
	v58.endTransaction();
	boolean v23 = 0;
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return v23;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @4 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @11 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @18 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,45 @66 exception:46,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
61 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @77 exception:60,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 5,9 @11 exception:10,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
16 = invokevirtual < Application, Ljava/lang/String, length()I > 13 @24 exception:15,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
22 = invokevirtual < Application, Ljava/lang/String, length()I > 20 @42 exception:21,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
5 = new <Application,Ljava/util/LinkedHashMap>@6,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 5 @8 exception:6,
10 = new <Application,[Ljava/lang/String>@1911 ,
15 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 4,12,10,13,13,13,13,7 @31 exception:14,
17 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 15 @35 exception:16,
conditional branch(eq, to iindex=-1) 17,13,
invokeinterface < Application, Landroid/database/Cursor, close()V > 15 @69 exception:39,
return 5,
43 = invokeinterface < Application, Ljava/util/Map, size()I > 41 @185 exception:42,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 193 @197 exception:194,
196 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,142 @202 exception:195,
198 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @205 exception:197,
200 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,198 @209 exception:199,
203 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,201 @214 exception:202,
205 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 193 @217 exception:204,
207 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 139,205 @221 exception:206,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
monitorexit 31,
monitorexit 30,
return 12,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 61 @96 exception:75,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	Object v5 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v3);
	boolean v9 = p0.addAccountInternal(v8, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public Map findAllDeAccounts(){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	LinkedHashMap v1 = new LinkedHashMap();
	String v2 = new String(3);
	Cursor v3 = v1.query(""accounts"", v2, 0, 0, 0, 0, ""_id"");
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	Object v5 = Objects.requireNonNull(p1, ""account cannot be null"");
	List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v7 = v8;
	boolean v9 = v7.contains(Account.type);
	boolean v6 = v9;
	long v10 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v3);
	Bundle v13 = Bundle.setDefusable(p3, 1);
	int v14 = Account.name.length();
	int v15 = Account.type.length();
	int v16 = this.userId;
	boolean v18 = this.mLocalUnlockedUsers.get(v16);
	boolean v17 = v18;
	SQLiteDatabase v20 = this.mDeDatabase.getWritableDatabase();
	v20.beginTransaction();
	SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v24 = new String(1);
	String v25 = new String(2);
	Cursor v26 = v23.query(""ceDb.accounts"", v24, ""name=? AND type=?"", v25, 0, 0, 0);
	boolean v27 = v26.moveToNext();
	long v28 = v26.getLong(0);
	v26.close();
	long v22 = v28;
	SQLiteDatabase v31 = this.mDeDatabase.getReadableDatabase();
	LinkedHashMap v32 = new LinkedHashMap();
	String v34 = new String(3);
	Cursor v35 = v31.query(""accounts"", v34, 0, 0, 0, 0, ""_id"");
	boolean v36 = v35.moveToNext();
	v35.close();
	Map v30 = v32;
	int v38 = v30.size();
	StringBuilder v39 = new StringBuilder();
	StringBuilder v41 = v39.append(""insertAccountIntoDatabase: "");
	String v42 = p1.toSafeString();
	StringBuilder v43 = v39.append(v42);
	StringBuilder v44 = v39.append("", skipping since more than 50 accounts on device exist"");
	String v45 = v39.toString();
	int v46 = Log.w(""AccountManagerService"", v45);
	SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();
	v48.endTransaction();
	boolean v12 = 0;
	IAccountManager$Stub.restoreCallingIdentity(v10);
	return v12;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","0","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @9 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @15 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @23 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @37 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @40 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @45 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @50 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @60 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @65 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @68 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @72 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @77 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @80 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @84 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @87 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @91 exception:53,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @103 exception:64,
67 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @107 exception:66,
70 = invokevirtual < Application, Landroid/os/Bundle, getString(Ljava/lang/String;)Ljava/lang/String; > 6,68 @113 exception:69,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
76 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @127 exception:75,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$14, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZLjava/lang/String;ZZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 79,1,78,2,80,5,81,14,7,74,3,4,6 @157 exception:82,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 76 @163 exception:91,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
","public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startUpdateCredentialsSession: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = Binder.getCallingUid();
	int v22 = UserHandle.getCallingUserId();
	String v23 = p5.getString(""androidPackageName"");
	String v24 = new String(1);
	boolean v25 = p0.checkPermissionAndNote(v23, v21, v24);
	long v26 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v27 = p0.getUserAccounts(v22);
	AccountManagerService$14 v28 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
	v28.bind();
	IAccountManager$Stub.restoreCallingIdentity(v26);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","1","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @9 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @15 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @23 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @37 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @40 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @45 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @50 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @60 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @65 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @68 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @72 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @77 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @80 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @84 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @87 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @91 exception:53,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @103 exception:64,
67 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @107 exception:66,
70 = invokevirtual < Application, Landroid/os/Bundle, getString(Ljava/lang/String;)Ljava/lang/String; > 6,68 @113 exception:69,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
5 = arraylength 4,
46 = phi  45,6,
conditional branch(ge, to iindex=-1) 46,5,
7 = arrayload 4[46],
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 8,7 @9 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,11 @18 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
15 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @26 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,3 @34 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @39 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,7 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @45 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,28 @49 exception:29,
35 = invokestatic < Application, Landroid/app/AppOpsManager, permissionToOpCode(Ljava/lang/String;)I > 7 @52 exception:34,
conditional branch(eq, to iindex=-1) 35,36,
37 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
39 = invokevirtual < Application, Landroid/app/AppOpsManager, noteOpNoThrow(IILjava/lang/String;)I > 37,35,3,2 @61 exception:38,
conditional branch(ne, to iindex=-1) 39,6,
return 51,
76 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @127 exception:75,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$14, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZLjava/lang/String;ZZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 79,1,78,2,80,5,81,14,7,74,3,4,6 @157 exception:82,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 76 @163 exception:91,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""  caller uid "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" has "");
	StringBuilder v7 = v2.append(p3[phiInstruction]);
	String v8 = v2.toString();
	int v9 = Log.v(""AccountManagerService"", v8);
	int v10 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	int v11 = this.mAppOpsManager.noteOpNoThrow(v10, p2, p1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startUpdateCredentialsSession: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = Binder.getCallingUid();
	int v22 = UserHandle.getCallingUserId();
	String v23 = p5.getString(""androidPackageName"");
	String v24 = new String(1);
	boolean v27 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v28 = new StringBuilder();
	StringBuilder v30 = v28.append(""  caller uid "");
	StringBuilder v31 = v28.append(v21);
	StringBuilder v32 = v28.append("" has "");
	StringBuilder v33 = v28.append(v24[phiInstruction]);
	String v34 = v28.toString();
	int v35 = Log.v(""AccountManagerService"", v34);
	int v36 = AppOpsManager.permissionToOpCode(v24[phiInstruction]);
	int v37 = this.mAppOpsManager.noteOpNoThrow(v36, v21, v23);
	boolean v25 = 1;
	long v38 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v40 = AccountManagerService.getUserAccountsNotChecked(v22);
	AccountManagerService$UserAccounts v39 = v40;
	AccountManagerService$14 v41 = new AccountManagerService$14(p0,v39,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
	boolean v44 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v45 = new StringBuilder();
	StringBuilder v47 = v45.append(""initiating bind to authenticator type "");
	StringBuilder v48 = v45.append(this.mAccountType);
	String v49 = v45.toString();
	int v50 = Log.v(""AccountManagerService"", v49);
	boolean v51 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v52 = new StringBuilder();
	StringBuilder v54 = v52.append(""bind attempt failed for "");
	String v55 = AccountManagerService$Session.toDebugString();
	StringBuilder v56 = v52.append(v55);
	String v57 = v52.toString();
	int v58 = Log.d(""AccountManagerService"", v57);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v38);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","1","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @9 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @15 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @23 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @37 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @40 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @45 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @50 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @60 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @65 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @68 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @72 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @77 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @80 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @84 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @87 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @91 exception:53,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @103 exception:64,
67 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @107 exception:66,
70 = invokevirtual < Application, Landroid/os/Bundle, getString(Ljava/lang/String;)Ljava/lang/String; > 6,68 @113 exception:69,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
5 = arraylength 4,
46 = phi  45,6,
conditional branch(ge, to iindex=-1) 46,5,
7 = arrayload 4[46],
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 8,7 @9 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,11 @18 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
15 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @26 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,3 @34 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @39 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,7 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @45 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,28 @49 exception:29,
35 = invokestatic < Application, Landroid/app/AppOpsManager, permissionToOpCode(Ljava/lang/String;)I > 7 @52 exception:34,
conditional branch(eq, to iindex=-1) 35,36,
return 51,
76 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @127 exception:75,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$14, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZLjava/lang/String;ZZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 79,1,78,2,80,5,81,14,7,74,3,4,6 @157 exception:82,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 76 @163 exception:91,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""  caller uid "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" has "");
	StringBuilder v7 = v2.append(p3[phiInstruction]);
	String v8 = v2.toString();
	int v9 = Log.v(""AccountManagerService"", v8);
	int v10 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startUpdateCredentialsSession: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = Binder.getCallingUid();
	int v22 = UserHandle.getCallingUserId();
	String v23 = p5.getString(""androidPackageName"");
	String v24 = new String(1);
	boolean v27 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v28 = new StringBuilder();
	StringBuilder v30 = v28.append(""  caller uid "");
	StringBuilder v31 = v28.append(v21);
	StringBuilder v32 = v28.append("" has "");
	StringBuilder v33 = v28.append(v24[phiInstruction]);
	String v34 = v28.toString();
	int v35 = Log.v(""AccountManagerService"", v34);
	int v36 = AppOpsManager.permissionToOpCode(v24[phiInstruction]);
	boolean v25 = 1;
	long v37 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v39 = AccountManagerService.getUserAccountsNotChecked(v22);
	AccountManagerService$UserAccounts v38 = v39;
	AccountManagerService$14 v40 = new AccountManagerService$14(p0,v38,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
	boolean v43 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v44 = new StringBuilder();
	StringBuilder v46 = v44.append(""initiating bind to authenticator type "");
	StringBuilder v47 = v44.append(this.mAccountType);
	String v48 = v44.toString();
	int v49 = Log.v(""AccountManagerService"", v48);
	boolean v50 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v51 = new StringBuilder();
	StringBuilder v53 = v51.append(""bind attempt failed for "");
	String v54 = AccountManagerService$Session.toDebugString();
	StringBuilder v55 = v51.append(v54);
	String v56 = v51.toString();
	int v57 = Log.d(""AccountManagerService"", v56);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v37);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @9 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @15 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @23 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @37 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @40 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @45 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @50 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @60 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @65 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @68 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @72 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @77 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @80 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @84 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @87 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @91 exception:53,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @103 exception:64,
67 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @107 exception:66,
70 = invokevirtual < Application, Landroid/os/Bundle, getString(Ljava/lang/String;)Ljava/lang/String; > 6,68 @113 exception:69,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
5 = arraylength 4,
46 = phi  45,6,
conditional branch(ge, to iindex=-1) 46,5,
7 = arrayload 4[46],
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 8,7 @9 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,11 @18 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
15 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @26 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,3 @34 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @39 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,7 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @45 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,28 @49 exception:29,
35 = invokestatic < Application, Landroid/app/AppOpsManager, permissionToOpCode(Ljava/lang/String;)I > 7 @52 exception:34,
conditional branch(eq, to iindex=-1) 35,36,
37 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
39 = invokevirtual < Application, Landroid/app/AppOpsManager, noteOpNoThrow(IILjava/lang/String;)I > 37,35,3,2 @61 exception:38,
conditional branch(ne, to iindex=-1) 39,6,
return 51,
76 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @127 exception:75,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$14, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZLjava/lang/String;ZZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 79,1,78,2,80,5,81,14,7,74,3,4,6 @157 exception:82,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 76 @163 exception:91,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""  caller uid "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" has "");
	StringBuilder v7 = v2.append(p3[phiInstruction]);
	String v8 = v2.toString();
	int v9 = Log.v(""AccountManagerService"", v8);
	int v10 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	int v11 = this.mAppOpsManager.noteOpNoThrow(v10, p2, p1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startUpdateCredentialsSession: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = Binder.getCallingUid();
	int v22 = UserHandle.getCallingUserId();
	String v23 = p5.getString(""androidPackageName"");
	String v24 = new String(1);
	boolean v27 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v28 = new StringBuilder();
	StringBuilder v30 = v28.append(""  caller uid "");
	StringBuilder v31 = v28.append(v21);
	StringBuilder v32 = v28.append("" has "");
	StringBuilder v33 = v28.append(v24[phiInstruction]);
	String v34 = v28.toString();
	int v35 = Log.v(""AccountManagerService"", v34);
	int v36 = AppOpsManager.permissionToOpCode(v24[phiInstruction]);
	int v37 = this.mAppOpsManager.noteOpNoThrow(v36, v21, v23);
	boolean v25 = 1;
	long v38 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v40 = AccountManagerService.getUserAccountsNotChecked(v22);
	AccountManagerService$UserAccounts v39 = v40;
	AccountManagerService$14 v41 = new AccountManagerService$14(p0,v39,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
	boolean v44 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v45 = new StringBuilder();
	StringBuilder v47 = v45.append(""initiating bind to authenticator type "");
	StringBuilder v48 = v45.append(this.mAccountType);
	String v49 = v45.toString();
	int v50 = Log.v(""AccountManagerService"", v49);
	IAccountAuthenticatorCache v52 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v53 = AuthenticatorDescription.newKey(this.mAccountType);
	int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v55 = v52.getServiceInfo(v53, v54);
	int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v57 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v56);
	boolean v51 = 0;
	StringBuilder v65 = new StringBuilder();
	StringBuilder v67 = v65.append(""bind attempt failed for "");
	long v69 = SystemClock.elapsedRealtime();
	String v70 = AccountManagerService$Session.toDebugString(v69);
	String v68 = v70;
	StringBuilder v71 = v65.append(v68);
	String v72 = v65.toString();
	int v73 = Log.d(""AccountManagerService"", v72);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v75 = AccountManagerService$Session.getResponseAndClose();
	boolean v76 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v77 = new StringBuilder();
	Class v79 = AccountManagerService$Session.getClass();
	String v80 = v79.getSimpleName();
	StringBuilder v81 = v77.append(v80);
	StringBuilder v82 = v77.append("" calling onError() on response "");
	StringBuilder v83 = v77.append(v75);
	String v84 = v77.toString();
	int v85 = Log.v(""AccountManagerService"", v84);
	v75.onError(1, ""bind failure"");
	boolean v87 = Log.isLoggable(""AccountManagerService"", 2);
	int v88 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v38);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @9 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @15 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @23 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @37 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @40 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @45 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @50 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @60 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @65 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @68 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @72 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @77 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @80 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @84 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @87 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @91 exception:53,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @103 exception:64,
67 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @107 exception:66,
70 = invokevirtual < Application, Landroid/os/Bundle, getString(Ljava/lang/String;)Ljava/lang/String; > 6,68 @113 exception:69,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
5 = arraylength 4,
46 = phi  45,6,
conditional branch(ge, to iindex=-1) 46,5,
7 = arrayload 4[46],
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 8,7 @9 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,11 @18 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
15 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @26 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,3 @34 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @39 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,7 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @45 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,28 @49 exception:29,
35 = invokestatic < Application, Landroid/app/AppOpsManager, permissionToOpCode(Ljava/lang/String;)I > 7 @52 exception:34,
conditional branch(eq, to iindex=-1) 35,36,
return 51,
76 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @127 exception:75,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$14, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZLjava/lang/String;ZZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 79,1,78,2,80,5,81,14,7,74,3,4,6 @157 exception:82,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 76 @163 exception:91,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""  caller uid "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" has "");
	StringBuilder v7 = v2.append(p3[phiInstruction]);
	String v8 = v2.toString();
	int v9 = Log.v(""AccountManagerService"", v8);
	int v10 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startUpdateCredentialsSession: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = Binder.getCallingUid();
	int v22 = UserHandle.getCallingUserId();
	String v23 = p5.getString(""androidPackageName"");
	String v24 = new String(1);
	boolean v27 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v28 = new StringBuilder();
	StringBuilder v30 = v28.append(""  caller uid "");
	StringBuilder v31 = v28.append(v21);
	StringBuilder v32 = v28.append("" has "");
	StringBuilder v33 = v28.append(v24[phiInstruction]);
	String v34 = v28.toString();
	int v35 = Log.v(""AccountManagerService"", v34);
	int v36 = AppOpsManager.permissionToOpCode(v24[phiInstruction]);
	boolean v25 = 1;
	long v37 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v39 = AccountManagerService.getUserAccountsNotChecked(v22);
	AccountManagerService$UserAccounts v38 = v39;
	AccountManagerService$14 v40 = new AccountManagerService$14(p0,v38,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
	boolean v43 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v44 = new StringBuilder();
	StringBuilder v46 = v44.append(""initiating bind to authenticator type "");
	StringBuilder v47 = v44.append(this.mAccountType);
	String v48 = v44.toString();
	int v49 = Log.v(""AccountManagerService"", v48);
	IAccountAuthenticatorCache v51 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v52 = AuthenticatorDescription.newKey(this.mAccountType);
	int v53 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v54 = v51.getServiceInfo(v52, v53);
	int v55 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v56 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v55);
	boolean v50 = 0;
	StringBuilder v64 = new StringBuilder();
	StringBuilder v66 = v64.append(""bind attempt failed for "");
	long v68 = SystemClock.elapsedRealtime();
	String v69 = AccountManagerService$Session.toDebugString(v68);
	String v67 = v69;
	StringBuilder v70 = v64.append(v67);
	String v71 = v64.toString();
	int v72 = Log.d(""AccountManagerService"", v71);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v74 = AccountManagerService$Session.getResponseAndClose();
	boolean v75 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v76 = new StringBuilder();
	Class v78 = AccountManagerService$Session.getClass();
	String v79 = v78.getSimpleName();
	StringBuilder v80 = v76.append(v79);
	StringBuilder v81 = v76.append("" calling onError() on response "");
	StringBuilder v82 = v76.append(v74);
	String v83 = v76.toString();
	int v84 = Log.v(""AccountManagerService"", v83);
	v74.onError(1, ""bind failure"");
	boolean v86 = Log.isLoggable(""AccountManagerService"", 2);
	int v87 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v37);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @9 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @15 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @23 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @37 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @40 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @45 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @50 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @55 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @60 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @65 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @68 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @72 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @77 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @80 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @84 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @87 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @91 exception:53,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @103 exception:64,
67 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @107 exception:66,
70 = invokevirtual < Application, Landroid/os/Bundle, getString(Ljava/lang/String;)Ljava/lang/String; > 6,68 @113 exception:69,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
5 = arraylength 4,
46 = phi  45,6,
conditional branch(ge, to iindex=-1) 46,5,
7 = arrayload 4[46],
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 8,7 @9 exception:9,
conditional branch(ne, to iindex=-1) 10,6,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,11 @18 exception:13,
conditional branch(eq, to iindex=-1) 14,6,
15 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @26 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @31 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,3 @34 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @39 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,7 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @45 exception:27,
30 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,28 @49 exception:29,
35 = invokestatic < Application, Landroid/app/AppOpsManager, permissionToOpCode(Ljava/lang/String;)I > 7 @52 exception:34,
conditional branch(eq, to iindex=-1) 35,36,
37 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
39 = invokevirtual < Application, Landroid/app/AppOpsManager, noteOpNoThrow(IILjava/lang/String;)I > 37,35,3,2 @61 exception:38,
conditional branch(ne, to iindex=-1) 39,6,
return 51,
76 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @127 exception:75,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$14, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZLjava/lang/String;ZZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 79,1,78,2,80,5,81,14,7,74,3,4,6 @157 exception:82,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
107 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 15,14 @26 exception:106,
conditional branch(eq, to iindex=-1) 107,13,
108 = new <Application,Ljava/lang/StringBuilder>@32,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 108 @34 exception:109,
112 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,110 @40 exception:111,
114 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,2 @43 exception:113,
117 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,115 @48 exception:116,
119 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 108 @51 exception:118,
121 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 15,119 @55 exception:120,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 76 @163 exception:91,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""  caller uid "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" has "");
	StringBuilder v7 = v2.append(p3[phiInstruction]);
	String v8 = v2.toString();
	int v9 = Log.v(""AccountManagerService"", v8);
	int v10 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	int v11 = this.mAppOpsManager.noteOpNoThrow(v10, p2, p1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	boolean v5 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""there is no authenticator for "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", bailing out"");
	String v10 = v5.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startUpdateCredentialsSession: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = Binder.getCallingUid();
	int v22 = UserHandle.getCallingUserId();
	String v23 = p5.getString(""androidPackageName"");
	String v24 = new String(1);
	boolean v27 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v28 = new StringBuilder();
	StringBuilder v30 = v28.append(""  caller uid "");
	StringBuilder v31 = v28.append(v21);
	StringBuilder v32 = v28.append("" has "");
	StringBuilder v33 = v28.append(v24[phiInstruction]);
	String v34 = v28.toString();
	int v35 = Log.v(""AccountManagerService"", v34);
	int v36 = AppOpsManager.permissionToOpCode(v24[phiInstruction]);
	int v37 = this.mAppOpsManager.noteOpNoThrow(v36, v21, v23);
	boolean v25 = 1;
	long v38 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v40 = AccountManagerService.getUserAccountsNotChecked(v22);
	AccountManagerService$UserAccounts v39 = v40;
	AccountManagerService$14 v41 = new AccountManagerService$14(p0,v39,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
	boolean v44 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v45 = new StringBuilder();
	StringBuilder v47 = v45.append(""initiating bind to authenticator type "");
	StringBuilder v48 = v45.append(this.mAccountType);
	String v49 = v45.toString();
	int v50 = Log.v(""AccountManagerService"", v49);
	IAccountAuthenticatorCache v52 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v53 = AuthenticatorDescription.newKey(this.mAccountType);
	int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v55 = v52.getServiceInfo(v53, v54);
	boolean v56 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v57 = new StringBuilder();
	StringBuilder v59 = v57.append(""there is no authenticator for "");
	StringBuilder v60 = v57.append(this.mAccountType);
	StringBuilder v61 = v57.append("", bailing out"");
	String v62 = v57.toString();
	int v63 = Log.v(""AccountManagerService"", v62);
	boolean v51 = 0;
	StringBuilder v64 = new StringBuilder();
	StringBuilder v66 = v64.append(""bind attempt failed for "");
	long v68 = SystemClock.elapsedRealtime();
	String v69 = AccountManagerService$Session.toDebugString(v68);
	String v67 = v69;
	StringBuilder v70 = v64.append(v67);
	String v71 = v64.toString();
	int v72 = Log.d(""AccountManagerService"", v71);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v74 = AccountManagerService$Session.getResponseAndClose();
	boolean v75 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v76 = new StringBuilder();
	Class v78 = AccountManagerService$Session.getClass();
	String v79 = v78.getSimpleName();
	StringBuilder v80 = v76.append(v79);
	StringBuilder v81 = v76.append("" calling onError() on response "");
	StringBuilder v82 = v76.append(v74);
	String v83 = v76.toString();
	int v84 = Log.v(""AccountManagerService"", v83);
	v74.onError(1, ""bind failure"");
	boolean v86 = Log.isLoggable(""AccountManagerService"", 2);
	int v87 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v38);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","0","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @7 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @13 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@19,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @21 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @30 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @35 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @38 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @43 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @48 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @53 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @58 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @63 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @66 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @70 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @75 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @78 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @82 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @85 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @89 exception:53,
goto (from iindex= 39 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @101 exception:64,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @105 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$13, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 70,1,69,2,71,5,7,72,14,7,3,4,6 @138 exception:73,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @144 exception:80,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""updateCredentials: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
	AccountManagerService$13 v22 = new AccountManagerService$13(p0,v22,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v22.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
-----
","public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""updateCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = UserHandle.getCallingUserId();
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v21);
	AccountManagerService$13 v24 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v24.bind();
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","1","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @7 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @13 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@19,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @21 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @30 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @35 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @38 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @43 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @48 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @53 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @58 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @63 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @66 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @70 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @75 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @78 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @82 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @85 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @89 exception:53,
goto (from iindex= 39 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @101 exception:64,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @105 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$13, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 70,1,69,2,71,5,7,72,14,7,3,4,6 @138 exception:73,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @144 exception:80,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""updateCredentials: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
	AccountManagerService$13 v22 = new AccountManagerService$13(p0,v22,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v22.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""updateCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = UserHandle.getCallingUserId();
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
	AccountManagerService$UserAccounts v23 = v24;
	AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""initiating bind to authenticator type "");
	StringBuilder v32 = v29.append(this.mAccountType);
	String v33 = v29.toString();
	int v34 = Log.v(""AccountManagerService"", v33);
	boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v36 = new StringBuilder();
	StringBuilder v38 = v36.append(""bind attempt failed for "");
	String v39 = AccountManagerService$Session.toDebugString();
	StringBuilder v40 = v36.append(v39);
	String v41 = v36.toString();
	int v42 = Log.d(""AccountManagerService"", v41);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","1","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @7 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @13 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @101 exception:64,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @105 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$13, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 70,1,69,2,71,5,7,72,14,7,3,4,6 @138 exception:73,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @144 exception:80,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	AccountManagerService$13 v5 = new AccountManagerService$13(p0,v5,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v5.bind();
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v5 = v6;
	AccountManagerService$13 v7 = new AccountManagerService$13(p0,v5,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	boolean v10 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""initiating bind to authenticator type "");
	StringBuilder v14 = v11.append(this.mAccountType);
	String v15 = v11.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	boolean v17 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v18 = new StringBuilder();
	StringBuilder v20 = v18.append(""bind attempt failed for "");
	String v21 = AccountManagerService$Session.toDebugString();
	StringBuilder v22 = v18.append(v21);
	String v23 = v18.toString();
	int v24 = Log.d(""AccountManagerService"", v23);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @7 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @13 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@19,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @21 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @30 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @35 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @38 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @43 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @48 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @53 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @58 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @63 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @66 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @70 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @75 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @78 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @82 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @85 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @89 exception:53,
goto (from iindex= 39 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @101 exception:64,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @105 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$13, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 70,1,69,2,71,5,7,72,14,7,3,4,6 @138 exception:73,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @144 exception:80,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""updateCredentials: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
	AccountManagerService$13 v22 = new AccountManagerService$13(p0,v22,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v22.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""updateCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = UserHandle.getCallingUserId();
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
	AccountManagerService$UserAccounts v23 = v24;
	AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""initiating bind to authenticator type "");
	StringBuilder v32 = v29.append(this.mAccountType);
	String v33 = v29.toString();
	int v34 = Log.v(""AccountManagerService"", v33);
	IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
	int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
	int v40 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v41 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v40);
	boolean v35 = 0;
	StringBuilder v49 = new StringBuilder();
	StringBuilder v51 = v49.append(""bind attempt failed for "");
	long v53 = SystemClock.elapsedRealtime();
	String v54 = AccountManagerService$Session.toDebugString(v53);
	String v52 = v54;
	StringBuilder v55 = v49.append(v52);
	String v56 = v49.toString();
	int v57 = Log.d(""AccountManagerService"", v56);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
	boolean v60 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v61 = new StringBuilder();
	Class v63 = AccountManagerService$Session.getClass();
	String v64 = v63.getSimpleName();
	StringBuilder v65 = v61.append(v64);
	StringBuilder v66 = v61.append("" calling onError() on response "");
	StringBuilder v67 = v61.append(v59);
	String v68 = v61.toString();
	int v69 = Log.v(""AccountManagerService"", v68);
	v59.onError(1, ""bind failure"");
	boolean v71 = Log.isLoggable(""AccountManagerService"", 2);
	int v72 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @7 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @13 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@19,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @21 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @30 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @35 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @38 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @43 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,4 @48 exception:30,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,32 @53 exception:33,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 15,5 @58 exception:35,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,37 @63 exception:38,
41 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @66 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,41 @70 exception:42,
46 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,44 @75 exception:45,
48 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @78 exception:47,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,48 @82 exception:49,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @85 exception:51,
54 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,52 @89 exception:53,
goto (from iindex= 39 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @101 exception:64,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @105 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$13, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 70,1,69,2,71,5,7,72,14,7,3,4,6 @138 exception:73,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
107 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 15,14 @26 exception:106,
conditional branch(eq, to iindex=-1) 107,13,
108 = new <Application,Ljava/lang/StringBuilder>@32,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 108 @34 exception:109,
112 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,110 @40 exception:111,
114 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,2 @43 exception:113,
117 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,115 @48 exception:116,
119 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 108 @51 exception:118,
121 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 15,119 @55 exception:120,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @144 exception:80,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""updateCredentials: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
	AccountManagerService$13 v22 = new AccountManagerService$13(p0,v22,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v22.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	boolean v5 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""there is no authenticator for "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", bailing out"");
	String v10 = v5.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""updateCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", expectActivityLaunch "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", caller's uid "");
	int v14 = Binder.getCallingUid();
	StringBuilder v15 = v3.append(v14);
	StringBuilder v16 = v3.append("", pid "");
	int v17 = Binder.getCallingPid();
	StringBuilder v18 = v3.append(v17);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	int v21 = UserHandle.getCallingUserId();
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
	AccountManagerService$UserAccounts v23 = v24;
	AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""initiating bind to authenticator type "");
	StringBuilder v32 = v29.append(this.mAccountType);
	String v33 = v29.toString();
	int v34 = Log.v(""AccountManagerService"", v33);
	IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
	int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
	boolean v40 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v41 = new StringBuilder();
	StringBuilder v43 = v41.append(""there is no authenticator for "");
	StringBuilder v44 = v41.append(this.mAccountType);
	StringBuilder v45 = v41.append("", bailing out"");
	String v46 = v41.toString();
	int v47 = Log.v(""AccountManagerService"", v46);
	boolean v35 = 0;
	StringBuilder v48 = new StringBuilder();
	StringBuilder v50 = v48.append(""bind attempt failed for "");
	long v52 = SystemClock.elapsedRealtime();
	String v53 = AccountManagerService$Session.toDebugString(v52);
	String v51 = v53;
	StringBuilder v54 = v48.append(v51);
	String v55 = v48.toString();
	int v56 = Log.d(""AccountManagerService"", v55);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v58 = AccountManagerService$Session.getResponseAndClose();
	boolean v59 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v60 = new StringBuilder();
	Class v62 = AccountManagerService$Session.getClass();
	String v63 = v62.getSimpleName();
	StringBuilder v64 = v60.append(v63);
	StringBuilder v65 = v60.append("" calling onError() on response "");
	StringBuilder v66 = v60.append(v58);
	String v67 = v60.toString();
	int v68 = Log.v(""AccountManagerService"", v67);
	v58.onError(1, ""bind failure"");
	boolean v70 = Log.isLoggable(""AccountManagerService"", 2);
	int v71 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 6,7 @7 exception:8,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @13 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
65 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @101 exception:64,
67 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @105 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$13, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V > 70,1,69,2,71,5,7,72,14,7,3,4,6 @138 exception:73,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 67 @144 exception:80,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	AccountManagerService$13 v5 = new AccountManagerService$13(p0,v5,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v5.bind();
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v5 = v6;
	AccountManagerService$13 v7 = new AccountManagerService$13(p0,v5,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	boolean v10 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""initiating bind to authenticator type "");
	StringBuilder v14 = v11.append(this.mAccountType);
	String v15 = v11.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	IAccountAuthenticatorCache v18 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v19 = AuthenticatorDescription.newKey(this.mAccountType);
	int v20 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v21 = v18.getServiceInfo(v19, v20);
	int v22 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v23 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v22);
	boolean v17 = 0;
	StringBuilder v31 = new StringBuilder();
	StringBuilder v33 = v31.append(""bind attempt failed for "");
	long v35 = SystemClock.elapsedRealtime();
	String v36 = AccountManagerService$Session.toDebugString(v35);
	String v34 = v36;
	StringBuilder v37 = v31.append(v34);
	String v38 = v31.toString();
	int v39 = Log.d(""AccountManagerService"", v38);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v41 = AccountManagerService$Session.getResponseAndClose();
	boolean v42 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v43 = new StringBuilder();
	Class v45 = AccountManagerService$Session.getClass();
	String v46 = v45.getSimpleName();
	StringBuilder v47 = v43.append(v46);
	StringBuilder v48 = v43.append("" calling onError() on response "");
	StringBuilder v49 = v43.append(v41);
	String v50 = v43.toString();
	int v51 = Log.v(""AccountManagerService"", v50);
	v41.onError(1, ""bind failure"");
	boolean v53 = Log.isLoggable(""AccountManagerService"", 2);
	int v54 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z","0","8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z > 1,2,3,4,6,5 @6 exception:7,
return 8,","depth : 0
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}
-----
","public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z","1","8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z > 1,2,3,4,6,5 @6 exception:7,
9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @4 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @11 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @18 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @26 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @31 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @34 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @39 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,11 @42 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @47 exception:32,
35 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @50 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,35 @54 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @57 exception:38,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,39 @61 exception:40,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,45 @66 exception:46,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(eq, to iindex=-1) 50,18,
61 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @77 exception:60,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 61 @96 exception:75,
return 65,
return 8,","depth : 0
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}
-----
depth : 1
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
","public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""addAccountExplicitly: "");
	StringBuilder v9 = v6.append(p1);
	StringBuilder v10 = v6.append("", caller's uid "");
	StringBuilder v11 = v6.append(v3);
	StringBuilder v12 = v6.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v6.append(v13);
	String v15 = v6.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Object v17 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v18 = AccountManagerService.isAccountManagedByCaller(Account.type, v3, v4);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccounts(v4);
	boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, p3, v3, 0, p4);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	boolean v1 = v21;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z","2","8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z > 1,2,3,4,6,5 @6 exception:7,
9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @4 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @11 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @18 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @26 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @31 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @34 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @39 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,11 @42 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @47 exception:32,
35 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @50 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,35 @54 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @57 exception:38,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,39 @61 exception:40,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,45 @66 exception:46,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
61 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @77 exception:60,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 5,9 @11 exception:10,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
16 = invokevirtual < Application, Ljava/lang/String, length()I > 13 @24 exception:15,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
22 = invokevirtual < Application, Ljava/lang/String, length()I > 20 @42 exception:21,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
43 = invokeinterface < Application, Ljava/util/Map, size()I > 41 @185 exception:42,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 193 @197 exception:194,
196 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,142 @202 exception:195,
198 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @205 exception:197,
200 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,198 @209 exception:199,
203 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 193,201 @214 exception:202,
205 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 193 @217 exception:204,
207 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 139,205 @221 exception:206,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
monitorexit 31,
monitorexit 30,
return 12,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 61 @96 exception:75,
return 65,
return 8,","depth : 0
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}
-----
depth : 1
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
depth : 2
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""addAccountExplicitly: "");
	StringBuilder v9 = v6.append(p1);
	StringBuilder v10 = v6.append("", caller's uid "");
	StringBuilder v11 = v6.append(v3);
	StringBuilder v12 = v6.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v6.append(v13);
	String v15 = v6.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Object v17 = Objects.requireNonNull(p1, ""account cannot be null"");
	List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4);
	boolean v20 = v19.contains(Account.type);
	boolean v18 = v20;
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v22 = v23;
	Bundle v25 = Bundle.setDefusable(p3, 1);
	int v26 = Account.name.length();
	int v27 = Account.type.length();
	int v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
	boolean v29 = AccountManagerService.isLocalUnlockedUser(v28);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v31 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
	Map v32 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v33 = v32.size();
	StringBuilder v34 = new StringBuilder();
	StringBuilder v36 = v34.append(""insertAccountIntoDatabase: "");
	String v37 = p1.toSafeString();
	StringBuilder v38 = v34.append(v37);
	StringBuilder v39 = v34.append("", skipping since more than 50 accounts on device exist"");
	String v40 = v34.toString();
	int v41 = Log.w(""AccountManagerService"", v40);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	boolean v24 = 0;
	IAccountManager$Stub.restoreCallingIdentity(v21);
	boolean v1 = v24;
	return v1;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z","2","8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z > 1,2,3,4,6,5 @6 exception:7,
9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @4 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @7 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @11 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @18 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @26 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @31 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @34 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @39 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,11 @42 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @47 exception:32,
35 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @50 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,35 @54 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @57 exception:38,
41 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,39 @61 exception:40,
47 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,45 @66 exception:46,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
61 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @77 exception:60,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 5,9 @11 exception:10,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
16 = invokevirtual < Application, Ljava/lang/String, length()I > 13 @24 exception:15,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
22 = invokevirtual < Application, Ljava/lang/String, length()I > 20 @42 exception:21,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
210 = new <Application,Ljava/lang/StringBuilder>@142,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 210 @144 exception:211,
213 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 210,142 @149 exception:212,
215 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @152 exception:214,
217 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 210,215 @156 exception:216,
220 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 210,218 @161 exception:219,
222 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 210 @164 exception:221,
224 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 139,222 @168 exception:223,
237 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 237 @173 exception:238,
monitorexit 31,
monitorexit 30,
return 12,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 61 @96 exception:75,
return 65,
return 8,","depth : 0
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}
-----
depth : 1
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
depth : 2
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""insertAccountIntoDatabase: "");
	String v10 = p2.toSafeString();
	StringBuilder v11 = v7.append(v10);
	StringBuilder v12 = v7.append("", skipping since the account already exists"");
	String v13 = v7.toString();
	int v14 = Log.w(""AccountManagerService"", v13);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""addAccountExplicitly: "");
	StringBuilder v9 = v6.append(p1);
	StringBuilder v10 = v6.append("", caller's uid "");
	StringBuilder v11 = v6.append(v3);
	StringBuilder v12 = v6.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v6.append(v13);
	String v15 = v6.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Object v17 = Objects.requireNonNull(p1, ""account cannot be null"");
	List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4);
	boolean v20 = v19.contains(Account.type);
	boolean v18 = v20;
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v22 = v23;
	Bundle v25 = Bundle.setDefusable(p3, 1);
	int v26 = Account.name.length();
	int v27 = Account.type.length();
	int v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
	boolean v29 = AccountManagerService.isLocalUnlockedUser(v28);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v31 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
	StringBuilder v32 = new StringBuilder();
	StringBuilder v34 = v32.append(""insertAccountIntoDatabase: "");
	String v35 = p1.toSafeString();
	StringBuilder v36 = v32.append(v35);
	StringBuilder v37 = v32.append("", skipping since the account already exists"");
	String v38 = v32.toString();
	int v39 = Log.w(""AccountManagerService"", v38);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	boolean v24 = 0;
	IAccountManager$Stub.restoreCallingIdentity(v21);
	boolean v1 = v24;
	return v1;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 3,6,
goto (from iindex= 4 to iindex = 2),
7 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 7,8 @9 exception:9,
conditional branch(eq, to iindex=-1) 4,6,
goto (from iindex= 9 to iindex = 2),
10 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 10,11 @18 exception:12,
14 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @21 exception:13,
16 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @25 exception:15,
18 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 14 @28 exception:17,
conditional branch(ne, to iindex=-1) 18,19,
24 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 14 @36 exception:23,
26 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @40 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$7, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;Ljava/lang/String;)V > 29,1,28,2,3,6,6,6,6,3,4 @65 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 26 @71 exception:38,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
","public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v9 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v9.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 3,6,
goto (from iindex= 4 to iindex = 2),
7 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 7,8 @9 exception:9,
conditional branch(eq, to iindex=-1) 4,6,
goto (from iindex= 9 to iindex = 2),
10 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 10,11 @18 exception:12,
14 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @21 exception:13,
16 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @25 exception:15,
18 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 14 @28 exception:17,
conditional branch(ne, to iindex=-1) 18,19,
24 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 14 @36 exception:23,
26 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @40 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$7, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;Ljava/lang/String;)V > 29,1,28,2,3,6,6,6,6,3,4 @65 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 26 @71 exception:38,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
	AccountManagerService$UserAccounts v8 = v9;
	AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v14 = new StringBuilder();
	StringBuilder v16 = v14.append(""initiating bind to authenticator type "");
	StringBuilder v17 = v14.append(this.mAccountType);
	String v18 = v14.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	boolean v20 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v21 = new StringBuilder();
	StringBuilder v23 = v21.append(""bind attempt failed for "");
	String v24 = AccountManagerService$Session.toDebugString();
	StringBuilder v25 = v21.append(v24);
	String v26 = v21.toString();
	int v27 = Log.d(""AccountManagerService"", v26);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 3,6,
goto (from iindex= 4 to iindex = 2),
7 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 7,8 @9 exception:9,
conditional branch(eq, to iindex=-1) 4,6,
10 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 10,11 @18 exception:12,
14 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @21 exception:13,
16 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @25 exception:15,
18 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 14 @28 exception:17,
conditional branch(ne, to iindex=-1) 18,19,
24 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 14 @36 exception:23,
26 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @40 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$7, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;Ljava/lang/String;)V > 29,1,28,2,3,6,6,6,6,3,4 @65 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 26 @71 exception:38,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
	AccountManagerService$UserAccounts v8 = v9;
	AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v14 = new StringBuilder();
	StringBuilder v16 = v14.append(""initiating bind to authenticator type "");
	StringBuilder v17 = v14.append(this.mAccountType);
	String v18 = v14.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	boolean v20 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v21 = new StringBuilder();
	StringBuilder v23 = v21.append(""bind attempt failed for "");
	String v24 = AccountManagerService$Session.toDebugString();
	StringBuilder v25 = v21.append(v24);
	String v26 = v21.toString();
	int v27 = Log.d(""AccountManagerService"", v26);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 3,6,
goto (from iindex= 4 to iindex = 2),
7 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 7,8 @9 exception:9,
conditional branch(eq, to iindex=-1) 4,6,
goto (from iindex= 9 to iindex = 2),
10 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 10,11 @18 exception:12,
14 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @21 exception:13,
16 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @25 exception:15,
18 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 14 @28 exception:17,
conditional branch(ne, to iindex=-1) 18,19,
24 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 14 @36 exception:23,
26 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @40 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$7, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;Ljava/lang/String;)V > 29,1,28,2,3,6,6,6,6,3,4 @65 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 26 @71 exception:38,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
	AccountManagerService$UserAccounts v8 = v9;
	AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v14 = new StringBuilder();
	StringBuilder v16 = v14.append(""initiating bind to authenticator type "");
	StringBuilder v17 = v14.append(this.mAccountType);
	String v18 = v14.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	IAccountAuthenticatorCache v21 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v22 = AuthenticatorDescription.newKey(this.mAccountType);
	int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v24 = v21.getServiceInfo(v22, v23);
	int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v26 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v25);
	boolean v20 = 0;
	StringBuilder v34 = new StringBuilder();
	StringBuilder v36 = v34.append(""bind attempt failed for "");
	long v38 = SystemClock.elapsedRealtime();
	String v39 = AccountManagerService$Session.toDebugString(v38);
	String v37 = v39;
	StringBuilder v40 = v34.append(v37);
	String v41 = v34.toString();
	int v42 = Log.d(""AccountManagerService"", v41);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v44 = AccountManagerService$Session.getResponseAndClose();
	boolean v45 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v46 = new StringBuilder();
	Class v48 = AccountManagerService$Session.getClass();
	String v49 = v48.getSimpleName();
	StringBuilder v50 = v46.append(v49);
	StringBuilder v51 = v46.append("" calling onError() on response "");
	StringBuilder v52 = v46.append(v44);
	String v53 = v46.toString();
	int v54 = Log.v(""AccountManagerService"", v53);
	v44.onError(1, ""bind failure"");
	boolean v56 = Log.isLoggable(""AccountManagerService"", 2);
	int v57 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 3,6,
goto (from iindex= 4 to iindex = 2),
7 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 7,8 @9 exception:9,
conditional branch(eq, to iindex=-1) 4,6,
10 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 10,11 @18 exception:12,
14 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @21 exception:13,
16 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @25 exception:15,
18 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 14 @28 exception:17,
conditional branch(ne, to iindex=-1) 18,19,
24 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 14 @36 exception:23,
26 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @40 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$7, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;Ljava/lang/String;)V > 29,1,28,2,3,6,6,6,6,3,4 @65 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 26 @71 exception:38,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
	AccountManagerService$UserAccounts v8 = v9;
	AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v14 = new StringBuilder();
	StringBuilder v16 = v14.append(""initiating bind to authenticator type "");
	StringBuilder v17 = v14.append(this.mAccountType);
	String v18 = v14.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	IAccountAuthenticatorCache v21 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v22 = AuthenticatorDescription.newKey(this.mAccountType);
	int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v24 = v21.getServiceInfo(v22, v23);
	int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v26 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v25);
	boolean v20 = 0;
	StringBuilder v34 = new StringBuilder();
	StringBuilder v36 = v34.append(""bind attempt failed for "");
	long v38 = SystemClock.elapsedRealtime();
	String v39 = AccountManagerService$Session.toDebugString(v38);
	String v37 = v39;
	StringBuilder v40 = v34.append(v37);
	String v41 = v34.toString();
	int v42 = Log.d(""AccountManagerService"", v41);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v44 = AccountManagerService$Session.getResponseAndClose();
	boolean v45 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v46 = new StringBuilder();
	Class v48 = AccountManagerService$Session.getClass();
	String v49 = v48.getSimpleName();
	StringBuilder v50 = v46.append(v49);
	StringBuilder v51 = v46.append("" calling onError() on response "");
	StringBuilder v52 = v46.append(v44);
	String v53 = v46.toString();
	int v54 = Log.v(""AccountManagerService"", v53);
	v44.onError(1, ""bind failure"");
	boolean v56 = Log.isLoggable(""AccountManagerService"", 2);
	int v57 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 3,6,
7 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 7,8 @9 exception:9,
conditional branch(eq, to iindex=-1) 4,6,
goto (from iindex= 9 to iindex = 2),
10 = phi  5,6,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 10,11 @18 exception:12,
14 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, getCallingUid()I > @21 exception:13,
16 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @25 exception:15,
18 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 14 @28 exception:17,
conditional branch(ne, to iindex=-1) 18,19,
24 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 14 @36 exception:23,
26 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @40 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$7, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;Ljava/lang/String;)V > 29,1,28,2,3,6,6,6,6,3,4 @65 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 26 @71 exception:38,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
	AccountManagerService$UserAccounts v8 = v9;
	AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v14 = new StringBuilder();
	StringBuilder v16 = v14.append(""initiating bind to authenticator type "");
	StringBuilder v17 = v14.append(this.mAccountType);
	String v18 = v14.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	IAccountAuthenticatorCache v21 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v22 = AuthenticatorDescription.newKey(this.mAccountType);
	int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v24 = v21.getServiceInfo(v22, v23);
	int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v26 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v25);
	boolean v20 = 0;
	StringBuilder v34 = new StringBuilder();
	StringBuilder v36 = v34.append(""bind attempt failed for "");
	long v38 = SystemClock.elapsedRealtime();
	String v39 = AccountManagerService$Session.toDebugString(v38);
	String v37 = v39;
	StringBuilder v40 = v34.append(v37);
	String v41 = v34.toString();
	int v42 = Log.d(""AccountManagerService"", v41);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v44 = AccountManagerService$Session.getResponseAndClose();
	boolean v45 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v46 = new StringBuilder();
	Class v48 = AccountManagerService$Session.getClass();
	String v49 = v48.getSimpleName();
	StringBuilder v50 = v46.append(v49);
	StringBuilder v51 = v46.append("" calling onError() on response "");
	StringBuilder v52 = v46.append(v44);
	String v53 = v46.toString();
	int v54 = Log.v(""AccountManagerService"", v53);
	v44.onError(1, ""bind failure"");
	boolean v56 = Log.isLoggable(""AccountManagerService"", 2);
	int v57 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
","NONE"

"Lcom/android/server/accounts/AccountManagerService","getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;","0","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
8 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 9,6,4 @10 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
13 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 11,3,8 @15 exception:12,
14 = getCaughtException ,
15 = new <Application,Ljava/lang/StringBuilder>@67,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @69 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @74 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,3 @77 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,14 @80 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @83 exception:24,
28 = invokestatic < Application, Landroid/util/Slog, e(Ljava/lang/String;Ljava/lang/String;)I > 26,25 @89 exception:27,
29 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 29,","depth : 0
public Account getAccountsByTypeForPackage(String p1, String p2, String p3){
	int v4 = this.mPackageManager.getPackageUidAsUser(p2, v2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Couldn't determine the packageUid for "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append(caughtException);
	String v9 = v4.toString();
	int v10 = Slog.e(""AccountManagerService"", v9);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","public Account getAccountsByTypeForPackage(String p1, String p2, String p3){
	int v4 = this.mPackageManager.getPackageUidAsUser(p2, v2);
	return this.EMPTY_ACCOUNT_ARRAY;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
8 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 9,6,4 @10 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
13 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 11,3,8 @15 exception:12,
32 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 6,30 @21 exception:31,
conditional branch(ne, to iindex=-1) 32,33,
conditional branch(eq, to iindex=-1) 2,33,
35 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,2,6,8 @29 exception:34,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 35,33,
46 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 46,","depth : 0
public Account getAccountsByTypeForPackage(String p1, String p2, String p3){
	boolean v6 = p0.isAccountManagedByCaller(p1, v1, v2);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
","public Account getAccountsByTypeForPackage(String p1, String p2, String p3){
	List v7 = AccountManagerService.getTypesManagedByCaller(v1, v2);
	boolean v8 = v7.contains(p1);
	boolean v6 = v8;
	return this.EMPTY_ACCOUNT_ARRAY;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
8 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 9,6,4 @10 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
13 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 11,3,8 @15 exception:12,
32 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 6,30 @21 exception:31,
conditional branch(ne, to iindex=-1) 32,33,
conditional branch(eq, to iindex=-1) 2,33,
35 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,2,6,8 @29 exception:34,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 35,33,
46 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 46,","depth : 0
public Account getAccountsByTypeForPackage(String p1, String p2, String p3){
	boolean v6 = p0.isAccountManagedByCaller(p1, v1, v2);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
","public Account getAccountsByTypeForPackage(String p1, String p2, String p3){
	List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v7 = v8;
	boolean v9 = v7.contains(p1);
	boolean v6 = v9;
	return this.EMPTY_ACCOUNT_ARRAY;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","0","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
7 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:6,
10 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,8 @10 exception:9,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
conditional branch(eq, to iindex=-1) 3,13,
15 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 12,3 @20 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 36 @66 exception:37,
39 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 36,3 @69 exception:38,
40 = phi  12,36,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @72 exception:43,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
48 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @80 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @88 exception:57,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
","public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v6 = new ArrayList();
	boolean v8 = v6.add(p2);
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v2);
	Integer v11 = Integer.valueOf(v1);
	Map v12 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v11, v10);
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return v12;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
7 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:6,
10 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,8 @10 exception:9,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
8 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @5 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
11 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 9,3 @11 exception:10,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 8 @15 exception:16,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
22 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 11 @26 exception:21,
24 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 22 @30 exception:23,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
15 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 12,3 @20 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 36 @66 exception:37,
39 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 36,3 @69 exception:38,
40 = phi  12,36,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @72 exception:43,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
48 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @80 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
59 = new <Application,Ljava/lang/StringBuilder>@12,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 59 @14 exception:60,
63 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 59,61 @19 exception:62,
65 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 59,2 @22 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 59 @25 exception:66,
69 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 58,67 @29 exception:68,
70 = new <Application,Ljava/util/LinkedHashMap>@32,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 70 @34 exception:71,
return 70,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @88 exception:57,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Package not found "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Log.d(""AccountManagerService"", v6);
	LinkedHashMap v7 = new LinkedHashMap();
	return v7;
}
-----
","public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v10 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v11 = v8.iterator();
	boolean v12 = v11.hasNext();
	List v4 = v5;
	boolean v13 = v4.contains(p2);
	ArrayList v14 = new ArrayList();
	boolean v16 = v14.add(p2);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v2);
	AccountManagerService$UserAccounts v18 = v19;
	Integer v20 = Integer.valueOf(v1);
	int v22 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v18);
	boolean v23 = AccountManagerService.packageExistsForUser(p1, v22);
	StringBuilder v24 = new StringBuilder();
	StringBuilder v26 = v24.append(""Package not found "");
	StringBuilder v27 = v24.append(p1);
	String v28 = v24.toString();
	int v29 = Log.d(""AccountManagerService"", v28);
	LinkedHashMap v30 = new LinkedHashMap();
	Map v21 = v30;
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v21;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
7 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:6,
10 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,8 @10 exception:9,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
8 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @5 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
11 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 9,3 @11 exception:10,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 8 @15 exception:16,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
22 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 11 @26 exception:21,
24 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 22 @30 exception:23,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
15 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 12,3 @20 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 36 @66 exception:37,
39 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 36,3 @69 exception:38,
40 = phi  12,36,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @72 exception:43,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
48 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @80 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
59 = new <Application,Ljava/lang/StringBuilder>@12,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 59 @14 exception:60,
63 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 59,61 @19 exception:62,
65 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 59,2 @22 exception:64,
67 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 59 @25 exception:66,
69 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 58,67 @29 exception:68,
70 = new <Application,Ljava/util/LinkedHashMap>@32,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 70 @34 exception:71,
return 70,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @88 exception:57,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Package not found "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Log.d(""AccountManagerService"", v6);
	LinkedHashMap v7 = new LinkedHashMap();
	return v7;
}
-----
","public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v10 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v11 = v8.iterator();
	boolean v12 = v11.hasNext();
	List v4 = v5;
	boolean v13 = v4.contains(p2);
	ArrayList v14 = new ArrayList();
	boolean v16 = v14.add(p2);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v2);
	AccountManagerService$UserAccounts v18 = v19;
	Integer v20 = Integer.valueOf(v1);
	int v22 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v18);
	boolean v23 = AccountManagerService.packageExistsForUser(p1, v22);
	StringBuilder v24 = new StringBuilder();
	StringBuilder v26 = v24.append(""Package not found "");
	StringBuilder v27 = v24.append(p1);
	String v28 = v24.toString();
	int v29 = Log.d(""AccountManagerService"", v28);
	LinkedHashMap v30 = new LinkedHashMap();
	Map v21 = v30;
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v21;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
7 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:6,
10 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,8 @10 exception:9,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
8 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @5 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
11 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 9,3 @11 exception:10,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 8 @15 exception:16,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
22 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 11 @26 exception:21,
24 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 22 @30 exception:23,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
15 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 12,3 @20 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 36 @66 exception:37,
39 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 36,3 @69 exception:38,
40 = phi  12,36,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @72 exception:43,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
48 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @80 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
5 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
8 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 6,2,3 @6 exception:7,
11 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 5 @15 exception:12,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 9,10,
11 = new <Application,Ljava/util/LinkedHashMap>@38,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 11 @40 exception:12,
14 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 3 @43 exception:13,
16 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 14 @47 exception:15,
conditional branch(eq, to iindex=-1) 16,10,
43 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 4 @100 exception:42,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,5,11,43,2 @104 exception:44,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
conditional branch(eq, to iindex=-1) 2,8,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @8 exception:9,
conditional branch(lt, to iindex=-1) 10,8,
conditional branch(ne, to iindex=-1) 4,11,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @20 exception:12,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @24 exception:14,
17 = invokevirtual < Application, Landroid/os/UserManager, getUserInfo(I)Landroid/content/pm/UserInfo; > 13,15 @28 exception:16,
conditional branch(eq, to iindex=-1) 17,8,
19 = invokevirtual < Application, Landroid/content/pm/UserInfo, isRestricted()Z > 17 @34 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
22 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 20,4 @42 exception:21,
conditional branch(ne, to iindex=-1) 22,8,
23 = new <Application,[Ljava/lang/String>@498 ,
24 = phi  22,23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
27 = invokevirtual < Application, Landroid/content/Context, getResources()Landroid/content/res/Resources; > 25 @53 exception:26,
30 = invokevirtual < Application, Landroid/content/res/Resources, getString(I)Ljava/lang/String; > 27,28 @60 exception:29,
31 = arraylength 24,
48 = phi  47,8,
conditional branch(ge, to iindex=-1) 48,31,
32 = arrayload 24[48],
33 = new <Application,Ljava/lang/StringBuilder>@70,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 33 @72 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 33,35 @77 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 33,32 @80 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 33,35 @83 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 33 @86 exception:42,
45 = invokevirtual < Application, Ljava/lang/String, contains(Ljava/lang/CharSequence;)Z > 30,43 @90 exception:44,
conditional branch(eq, to iindex=-1) 45,8,
return 3,
return 45,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @88 exception:57,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	LinkedHashMap v2 = new LinkedHashMap();
	Iterator v4 = p2.iterator();
	boolean v5 = v4.hasNext();
	int v6 = p3.intValue();
	Map v7 = p0.filterSharedAccounts(p4, v2, v6, p1);
	return v7;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	int v2 = this.mPackageManager.getPackageUidAsUser(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Map filterSharedAccounts(AccountManagerService$UserAccounts p1, Map p2, int p3, String p4){
	UserManager v1 = p0.getUserManager();
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserManager v3 = p0.getUserManager();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserInfo v5 = v3.getUserInfo(v4);
	boolean v6 = v5.isRestricted();
	String v7 = this.mPackageManager.getPackagesForUid(p3);
	String v7 = new String(0);
	Resources v8 = this.mContext.getResources();
	String v9 = v8.getString(17039884);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("";"");
	StringBuilder v12 = v9.append(phiInstruction[phiInstruction]);
	StringBuilder v13 = v9.append("";"");
	String v14 = v9.toString();
	boolean v15 = v9.contains(v14);
	return p2;
}
-----
","public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	List v4 = v5;
	boolean v14 = v4.contains(p2);
	ArrayList v15 = new ArrayList();
	boolean v17 = v15.add(p2);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2);
	Integer v20 = Integer.valueOf(v1);
	int v22 = this.userId;
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	int v25 = this.mPackageManager.getPackageUidAsUser(p1, v22);
	IAccountManager$Stub.restoreCallingIdentity(v24);
	boolean v23 = 0;
	LinkedHashMap v27 = new LinkedHashMap();
	Iterator v29 = phiInstruction.iterator();
	boolean v30 = v29.hasNext();
	int v31 = v20.intValue();
	UserManager v33 = AccountManagerService.getUserManager();
	int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	UserManager v35 = AccountManagerService.getUserManager();
	int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	UserInfo v37 = v35.getUserInfo(v36);
	boolean v38 = v37.isRestricted();
	String v39 = this.mPackageManager.getPackagesForUid(v31);
	String v40 = new String(0);
	Resources v41 = this.mContext.getResources();
	String v42 = v41.getString(17039884);
	StringBuilder v43 = new StringBuilder();
	StringBuilder v45 = v43.append("";"");
	StringBuilder v46 = v43.append(phiInstruction[phiInstruction]);
	StringBuilder v47 = v43.append("";"");
	String v48 = v43.toString();
	boolean v49 = v42.contains(v48);
	Map v32 = v27;
	Map v21 = v32;
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return v21;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
7 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:6,
10 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,8 @10 exception:9,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
8 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @5 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
11 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 9,3 @11 exception:10,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 8 @15 exception:16,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
22 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 11 @26 exception:21,
24 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 22 @30 exception:23,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
15 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 12,3 @20 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 36 @66 exception:37,
39 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 36,3 @69 exception:38,
40 = phi  12,36,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @72 exception:43,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
48 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @80 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
5 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
11 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 5 @15 exception:12,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 9,10,
11 = new <Application,Ljava/util/LinkedHashMap>@38,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 11 @40 exception:12,
14 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 3 @43 exception:13,
16 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 14 @47 exception:15,
conditional branch(eq, to iindex=-1) 16,10,
43 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 4 @100 exception:42,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,5,11,43,2 @104 exception:44,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
conditional branch(eq, to iindex=-1) 2,8,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @8 exception:9,
conditional branch(lt, to iindex=-1) 10,8,
conditional branch(ne, to iindex=-1) 4,11,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @20 exception:12,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @24 exception:14,
17 = invokevirtual < Application, Landroid/os/UserManager, getUserInfo(I)Landroid/content/pm/UserInfo; > 13,15 @28 exception:16,
conditional branch(eq, to iindex=-1) 17,8,
19 = invokevirtual < Application, Landroid/content/pm/UserInfo, isRestricted()Z > 17 @34 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
22 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 20,4 @42 exception:21,
conditional branch(ne, to iindex=-1) 22,8,
23 = new <Application,[Ljava/lang/String>@498 ,
24 = phi  22,23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
27 = invokevirtual < Application, Landroid/content/Context, getResources()Landroid/content/res/Resources; > 25 @53 exception:26,
30 = invokevirtual < Application, Landroid/content/res/Resources, getString(I)Ljava/lang/String; > 27,28 @60 exception:29,
31 = arraylength 24,
48 = phi  47,8,
conditional branch(ge, to iindex=-1) 48,31,
32 = arrayload 24[48],
33 = new <Application,Ljava/lang/StringBuilder>@70,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 33 @72 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 33,35 @77 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 33,32 @80 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 33,35 @83 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 33 @86 exception:42,
45 = invokevirtual < Application, Ljava/lang/String, contains(Ljava/lang/CharSequence;)Z > 30,43 @90 exception:44,
conditional branch(eq, to iindex=-1) 45,8,
return 3,
return 45,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @88 exception:57,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	LinkedHashMap v2 = new LinkedHashMap();
	Iterator v4 = p2.iterator();
	boolean v5 = v4.hasNext();
	int v6 = p3.intValue();
	Map v7 = p0.filterSharedAccounts(p4, v2, v6, p1);
	return v7;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Map filterSharedAccounts(AccountManagerService$UserAccounts p1, Map p2, int p3, String p4){
	UserManager v1 = p0.getUserManager();
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserManager v3 = p0.getUserManager();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserInfo v5 = v3.getUserInfo(v4);
	boolean v6 = v5.isRestricted();
	String v7 = this.mPackageManager.getPackagesForUid(p3);
	String v7 = new String(0);
	Resources v8 = this.mContext.getResources();
	String v9 = v8.getString(17039884);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("";"");
	StringBuilder v12 = v9.append(phiInstruction[phiInstruction]);
	StringBuilder v13 = v9.append("";"");
	String v14 = v9.toString();
	boolean v15 = v9.contains(v14);
	return p2;
}
-----
","public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	List v4 = v5;
	boolean v14 = v4.contains(p2);
	ArrayList v15 = new ArrayList();
	boolean v17 = v15.add(p2);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2);
	Integer v20 = Integer.valueOf(v1);
	int v22 = this.userId;
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	boolean v23 = 0;
	LinkedHashMap v26 = new LinkedHashMap();
	Iterator v28 = phiInstruction.iterator();
	boolean v29 = v28.hasNext();
	int v30 = v20.intValue();
	UserManager v32 = AccountManagerService.getUserManager();
	int v33 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	UserManager v34 = AccountManagerService.getUserManager();
	int v35 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	UserInfo v36 = v34.getUserInfo(v35);
	boolean v37 = v36.isRestricted();
	String v38 = this.mPackageManager.getPackagesForUid(v30);
	String v39 = new String(0);
	Resources v40 = this.mContext.getResources();
	String v41 = v40.getString(17039884);
	StringBuilder v42 = new StringBuilder();
	StringBuilder v44 = v42.append("";"");
	StringBuilder v45 = v42.append(phiInstruction[phiInstruction]);
	StringBuilder v46 = v42.append("";"");
	String v47 = v42.toString();
	boolean v48 = v41.contains(v47);
	Map v31 = v26;
	Map v21 = v31;
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return v21;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
7 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:6,
10 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,8 @10 exception:9,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
8 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @5 exception:7,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
11 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 9,3 @11 exception:10,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 8 @15 exception:16,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
22 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 11 @26 exception:21,
24 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 22 @30 exception:23,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
15 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 12,3 @20 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 36 @66 exception:37,
39 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 36,3 @69 exception:38,
40 = phi  12,36,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @72 exception:43,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
48 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @80 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
5 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
8 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 6,2,3 @6 exception:7,
11 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 5 @15 exception:12,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 9,10,
11 = new <Application,Ljava/util/LinkedHashMap>@38,
invokespecial < Application, Ljava/util/LinkedHashMap, <init>()V > 11 @40 exception:12,
14 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 3 @43 exception:13,
16 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 14 @47 exception:15,
conditional branch(eq, to iindex=-1) 16,10,
43 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 4 @100 exception:42,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,5,11,43,2 @104 exception:44,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
conditional branch(eq, to iindex=-1) 2,8,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @8 exception:9,
conditional branch(lt, to iindex=-1) 10,8,
conditional branch(ne, to iindex=-1) 4,11,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @20 exception:12,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @24 exception:14,
17 = invokevirtual < Application, Landroid/os/UserManager, getUserInfo(I)Landroid/content/pm/UserInfo; > 13,15 @28 exception:16,
conditional branch(eq, to iindex=-1) 17,8,
19 = invokevirtual < Application, Landroid/content/pm/UserInfo, isRestricted()Z > 17 @34 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
22 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 20,4 @42 exception:21,
conditional branch(ne, to iindex=-1) 22,8,
23 = new <Application,[Ljava/lang/String>@498 ,
24 = phi  22,23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
27 = invokevirtual < Application, Landroid/content/Context, getResources()Landroid/content/res/Resources; > 25 @53 exception:26,
30 = invokevirtual < Application, Landroid/content/res/Resources, getString(I)Ljava/lang/String; > 27,28 @60 exception:29,
31 = arraylength 24,
48 = phi  47,8,
conditional branch(ge, to iindex=-1) 48,31,
32 = arrayload 24[48],
33 = new <Application,Ljava/lang/StringBuilder>@70,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 33 @72 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 33,35 @77 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 33,32 @80 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 33,35 @83 exception:40,
43 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 33 @86 exception:42,
45 = invokevirtual < Application, Ljava/lang/String, contains(Ljava/lang/CharSequence;)Z > 30,43 @90 exception:44,
conditional branch(eq, to iindex=-1) 45,8,
return 3,
return 45,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @88 exception:57,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	LinkedHashMap v2 = new LinkedHashMap();
	Iterator v4 = p2.iterator();
	boolean v5 = v4.hasNext();
	int v6 = p3.intValue();
	Map v7 = p0.filterSharedAccounts(p4, v2, v6, p1);
	return v7;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	int v2 = this.mPackageManager.getPackageUidAsUser(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Map filterSharedAccounts(AccountManagerService$UserAccounts p1, Map p2, int p3, String p4){
	UserManager v1 = p0.getUserManager();
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserManager v3 = p0.getUserManager();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserInfo v5 = v3.getUserInfo(v4);
	boolean v6 = v5.isRestricted();
	String v7 = this.mPackageManager.getPackagesForUid(p3);
	String v7 = new String(0);
	Resources v8 = this.mContext.getResources();
	String v9 = v8.getString(17039884);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("";"");
	StringBuilder v12 = v9.append(phiInstruction[phiInstruction]);
	StringBuilder v13 = v9.append("";"");
	String v14 = v9.toString();
	boolean v15 = v9.contains(v14);
	return p2;
}
-----
","public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	List v4 = v5;
	boolean v14 = v4.contains(p2);
	ArrayList v15 = new ArrayList();
	boolean v17 = v15.add(p2);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2);
	Integer v20 = Integer.valueOf(v1);
	int v22 = this.userId;
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	int v25 = this.mPackageManager.getPackageUidAsUser(p1, v22);
	IAccountManager$Stub.restoreCallingIdentity(v24);
	boolean v23 = 0;
	LinkedHashMap v27 = new LinkedHashMap();
	Iterator v29 = phiInstruction.iterator();
	boolean v30 = v29.hasNext();
	int v31 = v20.intValue();
	UserManager v33 = AccountManagerService.getUserManager();
	int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	UserManager v35 = AccountManagerService.getUserManager();
	int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	UserInfo v37 = v35.getUserInfo(v36);
	boolean v38 = v37.isRestricted();
	String v39 = this.mPackageManager.getPackagesForUid(v31);
	String v40 = new String(0);
	Resources v41 = this.mContext.getResources();
	String v42 = v41.getString(17039884);
	StringBuilder v43 = new StringBuilder();
	StringBuilder v45 = v43.append("";"");
	StringBuilder v46 = v43.append(phiInstruction[phiInstruction]);
	StringBuilder v47 = v43.append("";"");
	String v48 = v43.toString();
	boolean v49 = v42.contains(v48);
	Map v32 = v27;
	Map v21 = v32;
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return v21;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;","0","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 7,6,4 @6 exception:8,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
return 12,","depth : 0
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
","public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","0","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
","public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","1","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
3 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:2,
8 = invokestatic < Application, Landroid/app/ActivityManager, checkComponentPermission(Ljava/lang/String;IIZ)I > 4,3,5,6 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @14 exception:10,
14 = invokestatic < Application, Landroid/app/ActivityManager, checkComponentPermission(Ljava/lang/String;IIZ)I > 12,11,5,6 @20 exception:13,
conditional branch(ne, to iindex=-1) 14,9,
goto (from iindex= 14 to iindex = 24),
return,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 7,6,4 @6 exception:8,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
return 12,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
depth : 1
public void checkManageOrCreateUsersPermission(String p1){
	return;
}
-----
depth : 1
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
","public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	Account v9 = AccountManagerService.getAccountsAsUserForPackage(0, p1, p3, -1, p3, 0);
	Account v6 = v9;
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","1","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
3 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:2,
8 = invokestatic < Application, Landroid/app/ActivityManager, checkComponentPermission(Ljava/lang/String;IIZ)I > 4,3,5,6 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
return,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 7,6,4 @6 exception:8,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
return 12,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
depth : 1
public void checkManageOrCreateUsersPermission(String p1){
	return;
}
-----
depth : 1
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
","public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	Account v7 = AccountManagerService.getAccountsAsUserForPackage(0, p1, p3, -1, p3, 0);
	Account v4 = v7;
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","2","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
3 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:2,
8 = invokestatic < Application, Landroid/app/ActivityManager, checkComponentPermission(Ljava/lang/String;IIZ)I > 4,3,5,6 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @14 exception:10,
14 = invokestatic < Application, Landroid/app/ActivityManager, checkComponentPermission(Ljava/lang/String;IIZ)I > 12,11,5,6 @20 exception:13,
conditional branch(ne, to iindex=-1) 14,9,
goto (from iindex= 14 to iindex = 24),
return,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 7,6,4 @6 exception:8,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:8,
11 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:10,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 9,12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
16 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 13,14 @18 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
goto (from iindex= 12 to iindex = 36),
42 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 40,39 @63 exception:41,
conditional branch(eq, to iindex=-1) 42,17,
43 = new <Application,Ljava/lang/StringBuilder>@69,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @71 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @76 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,2 @79 exception:48,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,50 @84 exception:51,
54 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @87 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,54 @91 exception:55,
59 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,57 @96 exception:58,
61 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @99 exception:60,
63 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,61 @103 exception:62,
65 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @106 exception:64,
67 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 40,65 @110 exception:66,
72 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 9 @113 exception:71,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,9,72 @117 exception:73,
conditional branch(eq, to iindex=-1) 5,75,
77 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 9,12 @124 exception:76,
conditional branch(ne, to iindex=-1) 77,17,
conditional branch(eq, to iindex=-1) 2,17,
79 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 74,2 @132 exception:78,
conditional branch(eq, to iindex=-1) 79,17,
goto (from iindex= 64 to iindex = 3),
86 = phi  4,4,6,
87 = phi  5,5,9,
91 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,87,3,86 @141 exception:90,
93 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 91 @145 exception:92,
conditional branch(ne, to iindex=-1) 93,17,
conditional branch(eq, to iindex=-1) 2,17,
95 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 91,2 @153 exception:94,
conditional branch(ne, to iindex=-1) 95,17,
goto (from iindex= 76 to iindex = 39),
126 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 126,
return 12,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
depth : 1
public void checkManageOrCreateUsersPermission(String p1){
	return;
}
-----
depth : 1
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
depth : 2
public Account getAccountsAsUserForPackage(String p1, int p2, String p3, int p4, String p5, boolean p6){
	boolean v19 = v17.contains(p1);
	List v20 = p0.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v21 = v20.isEmpty();
	boolean v22 = v20.contains(p1);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	boolean v29 = v27.contains(p1);
	List v30 = AccountManagerService.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v31 = v30.isEmpty();
	boolean v32 = v30.contains(p1);
	Account v9 = this.EMPTY_ACCOUNT_ARRAY;
	Account v6 = v9;
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","2","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
3 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:2,
8 = invokestatic < Application, Landroid/app/ActivityManager, checkComponentPermission(Ljava/lang/String;IIZ)I > 4,3,5,6 @8 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
return,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 7,6,4 @6 exception:8,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:8,
11 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:10,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 9,12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
16 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 13,14 @18 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
goto (from iindex= 12 to iindex = 36),
42 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 40,39 @63 exception:41,
conditional branch(eq, to iindex=-1) 42,17,
43 = new <Application,Ljava/lang/StringBuilder>@69,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @71 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @76 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,2 @79 exception:48,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,50 @84 exception:51,
54 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @87 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,54 @91 exception:55,
59 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,57 @96 exception:58,
61 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @99 exception:60,
63 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,61 @103 exception:62,
65 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @106 exception:64,
67 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 40,65 @110 exception:66,
72 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 9 @113 exception:71,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,9,72 @117 exception:73,
conditional branch(eq, to iindex=-1) 5,75,
77 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 9,12 @124 exception:76,
conditional branch(ne, to iindex=-1) 77,17,
conditional branch(eq, to iindex=-1) 2,17,
79 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 74,2 @132 exception:78,
conditional branch(eq, to iindex=-1) 79,17,
goto (from iindex= 64 to iindex = 3),
86 = phi  4,4,6,
87 = phi  5,5,9,
91 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,87,3,86 @141 exception:90,
93 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 91 @145 exception:92,
conditional branch(ne, to iindex=-1) 93,17,
conditional branch(eq, to iindex=-1) 2,17,
95 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 91,2 @153 exception:94,
conditional branch(ne, to iindex=-1) 95,17,
goto (from iindex= 76 to iindex = 39),
126 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 126,
return 12,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
depth : 1
public void checkManageOrCreateUsersPermission(String p1){
	return;
}
-----
depth : 1
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
depth : 2
public Account getAccountsAsUserForPackage(String p1, int p2, String p3, int p4, String p5, boolean p6){
	boolean v19 = v17.contains(p1);
	List v20 = p0.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v21 = v20.isEmpty();
	boolean v22 = v20.contains(p1);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	boolean v27 = v25.contains(p1);
	List v28 = AccountManagerService.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v29 = v28.isEmpty();
	boolean v30 = v28.contains(p1);
	Account v7 = this.EMPTY_ACCOUNT_ARRAY;
	Account v4 = v7;
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","0","5 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,3 @2 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
30 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @54 exception:29,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
monitorexit 34,
monitorexit 33,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 30 @74 exception:50,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
","public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","1","5 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,3 @2 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo; > 24,22,9 @24 exception:25,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @37 exception:63,
return 23,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
30 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @54 exception:29,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 5,2 @4 exception:6,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
13 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @16 exception:12,
14 = new <Application,Ljava/util/HashMap>@19,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 14 @21 exception:15,
17 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @24 exception:16,
19 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 17,2,14 @28 exception:18,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountsDataCaches()V > @31 exception:20,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 30 @74 exception:50,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	int v3 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v3 = new HashMap();
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v6 = v5.put(p1, v3);
	AccountManager.invalidateLocalAccountsDataCaches();
	return phiInstruction;
}
-----
","public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	List v5 = AccountManagerService.getTypesManagedByCaller(v2, v3);
	boolean v6 = v5.contains(Account.type);
	boolean v4 = v6;
	long v8 = Binder.clearCallingIdentity();
	String v9 = this.mPackageManager.getPackagesForUid(v2);
	PackageInfo v10 = this.mPackageManager.getPackageInfo(v9[phiInstruction], 0);
	Binder.restoreCallingIdentity(v8);
	boolean v7 = 1;
	long v12 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v13 = v14;
	Map v16 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v13);
	Object v17 = v16.get(p1);
	int v18 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v19 = new HashMap();
	Map v21 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v13);
	Object v22 = v21.put(p1, v19);
	AccountManager.invalidateLocalAccountsDataCaches();
	Map v15 = phiInstruction;
	IAccountManager$Stub.restoreCallingIdentity(v12);
	return v15;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","1","5 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,3 @2 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
10 = new <Application,Ljava/lang/StringBuilder>@58,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @60 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @65 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,2 @68 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @71 exception:17,
20 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 8,18 @75 exception:19,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @78 exception:52,
return 9,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
30 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @54 exception:29,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 5,2 @4 exception:6,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
13 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @16 exception:12,
14 = new <Application,Ljava/util/HashMap>@19,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 14 @21 exception:15,
17 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @24 exception:16,
19 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 17,2,14 @28 exception:18,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountsDataCaches()V > @31 exception:20,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 30 @74 exception:50,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""No known packages with uid "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Log.w(""AccountManagerService"", v6);
	Binder.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	int v3 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v3 = new HashMap();
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v6 = v5.put(p1, v3);
	AccountManager.invalidateLocalAccountsDataCaches();
	return phiInstruction;
}
-----
","public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	List v5 = AccountManagerService.getTypesManagedByCaller(v2, v3);
	boolean v6 = v5.contains(Account.type);
	boolean v4 = v6;
	long v8 = Binder.clearCallingIdentity();
	String v9 = this.mPackageManager.getPackagesForUid(v2);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""No known packages with uid "");
	StringBuilder v13 = v10.append(v2);
	String v14 = v10.toString();
	int v15 = Log.w(""AccountManagerService"", v14);
	Binder.restoreCallingIdentity(v8);
	boolean v7 = 0;
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v18 = v19;
	Map v21 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v18);
	Object v22 = v21.get(p1);
	int v23 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v24 = new HashMap();
	Map v26 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v18);
	Object v27 = v26.put(p1, v24);
	AccountManager.invalidateLocalAccountsDataCaches();
	Map v20 = phiInstruction;
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v20;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","2","5 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,3 @2 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
30 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @54 exception:29,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 5,2 @4 exception:6,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
13 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @16 exception:12,
14 = new <Application,Ljava/util/HashMap>@19,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 14 @21 exception:15,
17 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @24 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
19 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 17,2,14 @28 exception:18,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountsDataCaches()V > @31 exception:20,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 30 @74 exception:50,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	int v3 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v3 = new HashMap();
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v6 = v5.put(p1, v3);
	AccountManager.invalidateLocalAccountsDataCaches();
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
","public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v5 = v6;
	boolean v7 = v5.contains(Account.type);
	boolean v4 = v7;
	boolean v8 = p0.isSystemUid(v2);
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v3);
	Map v12 = this.visibilityCache;
	Object v13 = v12.get(p1);
	int v14 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v15 = new HashMap();
	Map v17 = this.visibilityCache;
	Object v18 = v17.put(p1, v15);
	AccountManager.invalidateLocalAccountsDataCaches();
	Map v11 = phiInstruction;
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return v11;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","2","5 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,3 @2 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
30 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @54 exception:29,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 5,2 @4 exception:6,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
13 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @16 exception:12,
14 = new <Application,Ljava/util/HashMap>@19,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 14 @21 exception:15,
17 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @24 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
19 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 17,2,14 @28 exception:18,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountsDataCaches()V > @31 exception:20,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 30 @74 exception:50,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(v3);
	Map v7 = p0.getPackagesAndVisibilityForAccountLocked(p1, v6);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return v7;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	int v3 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v3 = new HashMap();
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v6 = v5.put(p1, v3);
	AccountManager.invalidateLocalAccountsDataCaches();
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
","public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v5 = v6;
	boolean v7 = v5.contains(Account.type);
	boolean v4 = v7;
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v3);
	Map v11 = this.visibilityCache;
	Object v12 = v11.get(p1);
	int v13 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v14 = new HashMap();
	Map v16 = this.visibilityCache;
	Object v17 = v16.put(p1, v14);
	AccountManager.invalidateLocalAccountsDataCaches();
	Map v10 = phiInstruction;
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v10;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","2","5 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,3 @2 exception:4,
7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @5 exception:6,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
30 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @54 exception:29,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 5,2 @4 exception:6,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 30 @74 exception:50,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
","public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v5 = v6;
	boolean v7 = v5.contains(Account.type);
	boolean v4 = v7;
	boolean v8 = p0.isSystemUid(v2);
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v3);
	Map v12 = this.visibilityCache;
	Object v13 = v12.get(p1);
	Map v11 = phiInstruction;
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return v11;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","0","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @66 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @78 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @99 exception:77,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setUserData: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", key "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	boolean v19 = p0.accountExistsCache(v18, p1);
	p0.setUserdataInternal(v18, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
","public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setUserData: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", key "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	boolean v20 = p0.accountExistsCache(v19, p1);
	p0.setUserdataInternal(v19, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @66 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @78 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
6 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
8 = invokevirtual < Application, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
11 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
13 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 10,11 @18 exception:12,
14 = checkcast <Application,[Landroid/accounts/Account>13 <Application,[Landroid/accounts/Account>,
15 = arraylength 14,
23 = phi  22,9,
conditional branch(ge, to iindex=-1) 23,15,
16 = arrayload 14[23],
17 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 16,
18 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
20 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,18 @34 exception:19,
conditional branch(eq, to iindex=-1) 20,9,
monitorexit 4,
return 37,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertExtra(JLjava/lang/String;Ljava/lang/String;)J > 24,11,4,5 @39 exception:25,
27 = binaryop(lt) 26 , 12,
conditional branch(ge, to iindex=-1) 27,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountUserDataCaches()V > @85 exception:47,
monitorexit 45,
monitorexit 6,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @99 exception:77,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setUserData: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", key "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	boolean v19 = p0.accountExistsCache(v18, p1);
	p0.setUserdataInternal(v18, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean accountExistsCache(AccountManagerService$UserAccounts p1, Account p2){
	boolean v1 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v2 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	boolean v3 = Account.name.equals(Account.name);
	return 1;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	long v4 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v2, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
","public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setUserData: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", key "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = UserHandle.getCallingUserId();
	List v18 = AccountManagerService.getTypesManagedByCaller(v1, v16);
	boolean v19 = v18.contains(Account.type);
	boolean v17 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = AccountManagerService.getUserAccountsNotChecked(v16);
	AccountManagerService$UserAccounts v21 = v22;
	boolean v24 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v25 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	boolean v26 = Account.name.equals(Account.name);
	boolean v23 = 1;
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v29 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	long v30 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v29, p2);
	long v31 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v29, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService.writeUserDataIntoCacheLocked(v21, p1, p2, p3);
	AccountManager.invalidateLocalAccountUserDataCaches();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @66 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @78 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
6 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
8 = invokevirtual < Application, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
11 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
13 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 10,11 @18 exception:12,
14 = checkcast <Application,[Landroid/accounts/Account>13 <Application,[Landroid/accounts/Account>,
15 = arraylength 14,
23 = phi  22,9,
conditional branch(ge, to iindex=-1) 23,15,
monitorexit 4,
return 9,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertExtra(JLjava/lang/String;Ljava/lang/String;)J > 24,11,4,5 @39 exception:25,
27 = binaryop(lt) 26 , 12,
conditional branch(ge, to iindex=-1) 27,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountUserDataCaches()V > @85 exception:47,
monitorexit 45,
monitorexit 6,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @99 exception:77,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setUserData: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", key "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	boolean v19 = p0.accountExistsCache(v18, p1);
	p0.setUserdataInternal(v18, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean accountExistsCache(AccountManagerService$UserAccounts p1, Account p2){
	boolean v1 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v2 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	return 0;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	long v4 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v2, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
","public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setUserData: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", key "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = UserHandle.getCallingUserId();
	List v18 = AccountManagerService.getTypesManagedByCaller(v1, v16);
	boolean v19 = v18.contains(Account.type);
	boolean v17 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = AccountManagerService.getUserAccountsNotChecked(v16);
	AccountManagerService$UserAccounts v21 = v22;
	boolean v24 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v25 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	boolean v23 = 0;
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v28 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	long v29 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v28, p2);
	long v30 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v28, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService.writeUserDataIntoCacheLocked(v21, p1, p2, p3);
	AccountManager.invalidateLocalAccountUserDataCaches();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @66 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @78 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = new <Application,Ljava/lang/StringBuilder>@12,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @14 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(J)Ljava/lang/StringBuilder; > 10,2 @22 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @27 exception:18,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,20 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @40 exception:26,
28 = new <Application,[Ljava/lang/String>@459 ,
arraystore 28[29] = 3,
32 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 6,30,8,27,28,29,29,29 @55 exception:31,
34 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 32 @59 exception:33,
conditional branch(eq, to iindex=-1) 34,29,
38 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 32,29 @65 exception:37,
invokeinterface < Application, Landroid/database/Cursor, close()V > 32 @69 exception:44,
return 38,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateExtra(JLjava/lang/String;)Z > 19,17,5 @56 exception:20,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
7 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 7 @8 exception:8,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 7,9,3 @14 exception:10,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 6,16,7,17,12 @31 exception:18,
conditional branch(ne, to iindex=-1) 19,11,
goto (from iindex= 18 to iindex = 2),
20 = phi  11,15,
return 20,
conditional branch(ne, to iindex=-1) 21,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountUserDataCaches()V > @85 exception:47,
monitorexit 45,
monitorexit 6,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @99 exception:77,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setUserData: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", key "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	boolean v19 = p0.accountExistsCache(v18, p1);
	p0.setUserdataInternal(v18, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.updateExtra(v3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public long findExtrasIdByAccountId(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""accounts_id="");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("" AND "");
	StringBuilder v6 = v1.append(""key"");
	StringBuilder v7 = v1.append(""=?"");
	String v8 = v1.toString();
	String v8 = new String(1);
	Cursor v9 = v1.query(""ceDb.extras"", v1, v8, v8, 0, 0, 0);
	boolean v10 = v9.moveToNext();
	long v11 = v9.getLong(0);
	v9.close();
	return v11;
}
-----
depth : 2
public boolean updateExtra(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""value"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""extras"", v1, ""_id=?"", v3);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setUserData: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", key "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = UserHandle.getCallingUserId();
	List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v18 = v19;
	boolean v20 = v18.contains(Account.type);
	boolean v17 = v20;
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v16);
	boolean v23 = p0.accountExistsCache(v22, p1);
	SQLiteDatabase v26 = this.mDeDatabase.getWritableDatabase();
	v26.beginTransaction();
	SQLiteDatabase v29 = this.mDeDatabase.getReadableDatabase();
	String v30 = new String(1);
	String v31 = new String(2);
	Cursor v32 = v29.query(""accounts"", v30, ""name=? AND type=?"", v31, 0, 0, 0);
	boolean v33 = v32.moveToNext();
	long v34 = v32.getLong(0);
	v32.close();
	long v28 = v34;
	SQLiteDatabase v37 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v38 = new String(1);
	StringBuilder v39 = new StringBuilder();
	StringBuilder v41 = v39.append(""accounts_id="");
	StringBuilder v42 = v39.append(v28);
	StringBuilder v43 = v39.append("" AND "");
	StringBuilder v44 = v39.append(""key"");
	StringBuilder v45 = v39.append(""=?"");
	String v46 = v39.toString();
	String v47 = new String(1);
	Cursor v48 = v37.query(""ceDb.extras"", v38, v46, v47, 0, 0, 0);
	boolean v49 = v48.moveToNext();
	long v50 = v48.getLong(0);
	v48.close();
	long v36 = v50;
	SQLiteDatabase v53 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v54 = new ContentValues();
	v54.put(""value"", p4);
	String v57 = new String(1);
	String v58 = String.valueOf(v36);
	int v59 = v53.update(""extras"", v54, ""_id=?"", v57);
	boolean v52 = phiInstruction;
	SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
	v61.setTransactionSuccessful();
	SQLiteDatabase v64 = this.mDeDatabase.getWritableDatabase();
	v64.endTransaction();
	AccountManagerService.writeUserDataIntoCacheLocked(v22, p1, p2, p3);
	AccountManager.invalidateLocalAccountUserDataCaches();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @66 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @78 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @53 exception:21,
return 20,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = new <Application,Ljava/lang/StringBuilder>@12,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @14 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(J)Ljava/lang/StringBuilder; > 10,2 @22 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @27 exception:18,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,20 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @40 exception:26,
28 = new <Application,[Ljava/lang/String>@459 ,
arraystore 28[29] = 3,
32 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 6,30,8,27,28,29,29,29 @55 exception:31,
34 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 32 @59 exception:33,
conditional branch(eq, to iindex=-1) 34,29,
38 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 32,29 @65 exception:37,
invokeinterface < Application, Landroid/database/Cursor, close()V > 32 @69 exception:44,
return 38,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateExtra(JLjava/lang/String;)Z > 19,17,5 @56 exception:20,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
7 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 7 @8 exception:8,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 7,9,3 @14 exception:10,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 6,16,7,17,12 @31 exception:18,
conditional branch(ne, to iindex=-1) 19,11,
goto (from iindex= 18 to iindex = 2),
20 = phi  11,15,
return 20,
conditional branch(ne, to iindex=-1) 21,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountUserDataCaches()V > @85 exception:47,
monitorexit 45,
monitorexit 6,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @99 exception:77,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setUserData: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", key "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	boolean v19 = p0.accountExistsCache(v18, p1);
	p0.setUserdataInternal(v18, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.updateExtra(v3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public long findExtrasIdByAccountId(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""accounts_id="");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("" AND "");
	StringBuilder v6 = v1.append(""key"");
	StringBuilder v7 = v1.append(""=?"");
	String v8 = v1.toString();
	String v8 = new String(1);
	Cursor v9 = v1.query(""ceDb.extras"", v1, v8, v8, 0, 0, 0);
	boolean v10 = v9.moveToNext();
	long v11 = v9.getLong(0);
	v9.close();
	return v11;
}
-----
depth : 2
public boolean updateExtra(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""value"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""extras"", v1, ""_id=?"", v3);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""setUserData: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", key "");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = UserHandle.getCallingUserId();
	List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v18 = v19;
	boolean v20 = v18.contains(Account.type);
	boolean v17 = v20;
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v16);
	boolean v23 = p0.accountExistsCache(v22, p1);
	SQLiteDatabase v26 = this.mDeDatabase.getWritableDatabase();
	v26.beginTransaction();
	SQLiteDatabase v29 = this.mDeDatabase.getReadableDatabase();
	String v30 = new String(1);
	String v31 = new String(2);
	Cursor v32 = v29.query(""accounts"", v30, ""name=? AND type=?"", v31, 0, 0, 0);
	boolean v33 = v32.moveToNext();
	v32.close();
	long v28 = -1;
	SQLiteDatabase v36 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v37 = new String(1);
	StringBuilder v38 = new StringBuilder();
	StringBuilder v40 = v38.append(""accounts_id="");
	StringBuilder v41 = v38.append(v28);
	StringBuilder v42 = v38.append("" AND "");
	StringBuilder v43 = v38.append(""key"");
	StringBuilder v44 = v38.append(""=?"");
	String v45 = v38.toString();
	String v46 = new String(1);
	Cursor v47 = v36.query(""ceDb.extras"", v37, v45, v46, 0, 0, 0);
	boolean v48 = v47.moveToNext();
	long v49 = v47.getLong(0);
	v47.close();
	long v35 = v49;
	SQLiteDatabase v52 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v53 = new ContentValues();
	v53.put(""value"", p4);
	String v56 = new String(1);
	String v57 = String.valueOf(v35);
	int v58 = v52.update(""extras"", v53, ""_id=?"", v56);
	boolean v51 = phiInstruction;
	SQLiteDatabase v60 = this.mDeDatabase.getWritableDatabase();
	v60.setTransactionSuccessful();
	SQLiteDatabase v63 = this.mDeDatabase.getWritableDatabase();
	v63.endTransaction();
	AccountManagerService.writeUserDataIntoCacheLocked(v22, p1, p2, p3);
	AccountManager.invalidateLocalAccountUserDataCaches();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
50 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @66 exception:49,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
65 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @78 exception:64,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = new <Application,Ljava/lang/StringBuilder>@12,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @14 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(J)Ljava/lang/StringBuilder; > 10,2 @22 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @27 exception:18,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,20 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @40 exception:26,
28 = new <Application,[Ljava/lang/String>@459 ,
arraystore 28[29] = 3,
32 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 6,30,8,27,28,29,29,29 @55 exception:31,
34 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 32 @59 exception:33,
conditional branch(eq, to iindex=-1) 34,29,
38 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 32,29 @65 exception:37,
invokeinterface < Application, Landroid/database/Cursor, close()V > 32 @69 exception:44,
return 38,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateExtra(JLjava/lang/String;)Z > 19,17,5 @56 exception:20,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
7 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 7 @8 exception:8,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 7,9,3 @14 exception:10,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 6,16,7,17,12 @31 exception:18,
conditional branch(ne, to iindex=-1) 19,11,
goto (from iindex= 18 to iindex = 2),
20 = phi  11,15,
return 20,
conditional branch(ne, to iindex=-1) 21,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountUserDataCaches()V > @85 exception:47,
monitorexit 45,
monitorexit 6,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 65 @99 exception:77,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v1, v3);
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(v3);
	boolean v7 = p0.accountExistsCache(v6, p1);
	p0.setUserdataInternal(v6, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.updateExtra(v3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public long findExtrasIdByAccountId(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""accounts_id="");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("" AND "");
	StringBuilder v6 = v1.append(""key"");
	StringBuilder v7 = v1.append(""=?"");
	String v8 = v1.toString();
	String v8 = new String(1);
	Cursor v9 = v1.query(""ceDb.extras"", v1, v8, v8, 0, 0, 0);
	boolean v10 = v9.moveToNext();
	long v11 = v9.getLong(0);
	v9.close();
	return v11;
}
-----
depth : 2
public boolean updateExtra(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""value"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""extras"", v1, ""_id=?"", v3);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v5 = v6;
	boolean v7 = v5.contains(Account.type);
	boolean v4 = v7;
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v3);
	boolean v10 = p0.accountExistsCache(v9, p1);
	SQLiteDatabase v13 = this.mDeDatabase.getWritableDatabase();
	v13.beginTransaction();
	SQLiteDatabase v16 = this.mDeDatabase.getReadableDatabase();
	String v17 = new String(1);
	String v18 = new String(2);
	Cursor v19 = v16.query(""accounts"", v17, ""name=? AND type=?"", v18, 0, 0, 0);
	boolean v20 = v19.moveToNext();
	long v21 = v19.getLong(0);
	v19.close();
	long v15 = v21;
	SQLiteDatabase v24 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v25 = new String(1);
	StringBuilder v26 = new StringBuilder();
	StringBuilder v28 = v26.append(""accounts_id="");
	StringBuilder v29 = v26.append(v15);
	StringBuilder v30 = v26.append("" AND "");
	StringBuilder v31 = v26.append(""key"");
	StringBuilder v32 = v26.append(""=?"");
	String v33 = v26.toString();
	String v34 = new String(1);
	Cursor v35 = v24.query(""ceDb.extras"", v25, v33, v34, 0, 0, 0);
	boolean v36 = v35.moveToNext();
	long v37 = v35.getLong(0);
	v35.close();
	long v23 = v37;
	SQLiteDatabase v40 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v41 = new ContentValues();
	v41.put(""value"", p4);
	String v44 = new String(1);
	String v45 = String.valueOf(v23);
	int v46 = v40.update(""extras"", v41, ""_id=?"", v44);
	boolean v39 = phiInstruction;
	SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();
	v48.setTransactionSuccessful();
	SQLiteDatabase v51 = this.mDeDatabase.getWritableDatabase();
	v51.endTransaction();
	AccountManagerService.writeUserDataIntoCacheLocked(v9, p1, p2, p3);
	AccountManager.invalidateLocalAccountUserDataCaches();
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","0","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @1 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @7 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @15 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @20 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @23 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @28 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @31 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @36 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @39 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @44 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @47 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @51 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @56 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @59 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @64 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @67 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @71 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @76 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @79 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @83 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @86 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @90 exception:61,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @97 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
conditional branch(ne, to iindex=-1) 79,15,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,81,82 @132 exception:83,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,81,75 @135 exception:84,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v24);
	return;
}
-----
","public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	int v24 = Binder.getCallingUid();
	int v25 = UserHandle.getUserId(v24);
	boolean v26 = p0.canUserModifyAccounts(v25, v24);
	boolean v27 = p0.canUserModifyAccountsForType(v25, p2, v24);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v25);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","1","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @1 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @7 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @15 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @20 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @23 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @28 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @31 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @36 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @39 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @44 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @47 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @51 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @56 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @59 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @64 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @67 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @71 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @76 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @79 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @83 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @86 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @90 exception:61,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @97 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,81,82 @132 exception:83,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,81,75 @135 exception:84,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
12 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, createShowAdminSupportIntent(IZ)Landroid/content/Intent; > 7,3,8 @32 exception:11,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v24);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	int v24 = Binder.getCallingUid();
	int v25 = UserHandle.getUserId(v24);
	boolean v27 = AccountManagerService.isProfileOwner(v24);
	UserManager v28 = AccountManagerService.getUserManager();
	UserHandle v29 = new UserHandle(v25);
	Bundle v31 = v28.getUserRestrictions(v29);
	boolean v32 = v31.getBoolean(""no_modify_accounts"");
	boolean v26 = 0;
	boolean v34 = AccountManagerService.isProfileOwner(v24);
	Object v35 = this.mContext.getSystemService(""device_policy"");
	String v36 = v35.getAccountTypesWithManagementDisabledAsUser(v25);
	boolean v37 = v36[phiInstruction].equals(p2);
	boolean v33 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	Object v40 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v41 = v40.createShowAdminSupportIntent(v25, 0);
	Intent v42 = AccountManagerService.getDefaultCantAddAccountIntent(101);
	long v43 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v44 = new UserHandle(v25);
	this.mContext.startActivityAsUser(phiInstruction, v44);
	IAccountManager$Stub.restoreCallingIdentity(v43);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","1","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @1 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @7 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @15 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @20 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @23 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @28 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @31 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @36 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @39 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @44 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @47 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @51 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @56 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @59 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @64 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @67 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @71 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @76 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @79 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @83 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @86 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @90 exception:61,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @97 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountAndLogMetrics(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V > 1,2,3,4,5,6,7,75 @146 exception:80,
10 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @2 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @6 exception:11,
conditional branch(ne, to iindex=-1) 7,13,
14 = new <Application,Landroid/os/Bundle>@12,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 14 @14 exception:15,
goto (from iindex= 9 to iindex = 3),
16 = phi  14,7,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,18,12 @23 exception:19,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,20,10 @28 exception:21,
23 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @31 exception:22,
25 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,8 @37 exception:24,
26 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_ADD, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecordWithUid(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;I)V > 1,25,26,27,12 @45 exception:28,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$9>@48,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$9, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLjava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)V > 29,1,25,2,3,6,30,13,13,30,4,5,16,3 @70 exception:31,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @73 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 23 @76 exception:40,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p0.addAccountAndLogMetrics(p1, p2, p3, p4, p5, p6, v24);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 1
public void addAccountAndLogMetrics(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	Bundle v2 = new Bundle();
	phiInstruction.putInt(""callerUid"", v2);
	phiInstruction.putInt(""callerPid"", v1);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(p7);
	p0.logRecordWithUid(v7, AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", v2);
	AccountManagerService$9 v8 = new AccountManagerService$9(p0,v7,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
","public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	int v24 = Binder.getCallingUid();
	int v25 = UserHandle.getUserId(v24);
	boolean v27 = AccountManagerService.isProfileOwner(v24);
	UserManager v28 = AccountManagerService.getUserManager();
	UserHandle v29 = new UserHandle(v25);
	Bundle v31 = v28.getUserRestrictions(v29);
	boolean v32 = v31.getBoolean(""no_modify_accounts"");
	boolean v26 = 0;
	boolean v34 = AccountManagerService.isProfileOwner(v24);
	Object v35 = this.mContext.getSystemService(""device_policy"");
	String v36 = v35.getAccountTypesWithManagementDisabledAsUser(v25);
	boolean v37 = v36[phiInstruction].equals(p2);
	boolean v33 = 0;
	int v39 = Binder.getCallingPid();
	int v40 = Binder.getCallingUid();
	Bundle v41 = new Bundle();
	phiInstruction.putInt(""callerUid"", v40);
	phiInstruction.putInt(""callerPid"", v39);
	long v45 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v46 = AccountManagerService.getUserAccounts(v25);
	AccountManagerService.logRecordWithUid(v46, AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", v40);
	AccountManagerService$9 v48 = new AccountManagerService$9(AccountManagerService,v46,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	v48.bind();
	IAccountManager$Stub.restoreCallingIdentity(v45);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @1 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @7 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @15 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @20 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @23 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @28 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @31 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @36 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @39 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @44 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @47 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @51 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @56 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @59 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @64 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @67 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @71 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @76 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @79 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @83 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @86 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @90 exception:61,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @97 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountAndLogMetrics(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V > 1,2,3,4,5,6,7,75 @146 exception:80,
10 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @2 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @6 exception:11,
conditional branch(ne, to iindex=-1) 7,13,
14 = new <Application,Landroid/os/Bundle>@12,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 14 @14 exception:15,
goto (from iindex= 9 to iindex = 3),
16 = phi  14,7,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,18,12 @23 exception:19,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,20,10 @28 exception:21,
23 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @31 exception:22,
25 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,8 @37 exception:24,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
26 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_ADD, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecordWithUid(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;I)V > 1,25,26,27,12 @45 exception:28,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,3,4,6,2,5 @7 exception:7,
return,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$9>@48,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$9, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLjava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)V > 29,1,25,2,3,6,30,13,13,30,4,5,16,3 @70 exception:31,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @73 exception:32,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 23 @76 exception:40,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p0.addAccountAndLogMetrics(p1, p2, p3, p4, p5, p6, v24);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void addAccountAndLogMetrics(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	Bundle v2 = new Bundle();
	phiInstruction.putInt(""callerUid"", v2);
	phiInstruction.putInt(""callerPid"", v1);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(p7);
	p0.logRecordWithUid(v7, AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", v2);
	AccountManagerService$9 v8 = new AccountManagerService$9(p0,v7,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void logRecordWithUid(AccountManagerService$UserAccounts p1, String p2, String p3, int p4){
	p0.logRecord(p2, p3, -1, p1, p4);
	return;
}
-----
depth : 2
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	int v24 = Binder.getCallingUid();
	int v25 = UserHandle.getUserId(v24);
	Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v29 = v28.isActiveProfileOwner(p2);
	boolean v30 = v28.isActiveDeviceOwner(p2);
	boolean v27 = phiInstruction;
	UserManager v31 = AccountManagerService.getUserManager();
	UserHandle v32 = new UserHandle(v25);
	Bundle v34 = v31.getUserRestrictions(v32);
	boolean v35 = v34.getBoolean(""no_modify_accounts"");
	boolean v26 = 0;
	Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v39 = v38.isActiveProfileOwner(p3);
	boolean v40 = v38.isActiveDeviceOwner(p3);
	boolean v37 = phiInstruction;
	Object v41 = this.mContext.getSystemService(""device_policy"");
	String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
	boolean v43 = v42[phiInstruction].equals(p2);
	boolean v36 = 0;
	int v45 = Binder.getCallingPid();
	int v46 = Binder.getCallingUid();
	Bundle v47 = new Bundle();
	phiInstruction.putInt(""callerUid"", v46);
	phiInstruction.putInt(""callerPid"", v45);
	long v51 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v53 = AccountManagerService.getUserAccountsNotChecked(p7);
	AccountManagerService$UserAccounts v52 = v53;
	AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", -1, v52, v46);
	AccountManagerService$9 v56 = new AccountManagerService$9(AccountManagerService,v52,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	boolean v59 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v60 = new StringBuilder();
	StringBuilder v62 = v60.append(""initiating bind to authenticator type "");
	StringBuilder v63 = v60.append(this.mAccountType);
	String v64 = v60.toString();
	int v65 = Log.v(""AccountManagerService"", v64);
	boolean v66 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v67 = new StringBuilder();
	StringBuilder v69 = v67.append(""bind attempt failed for "");
	String v70 = AccountManagerService$Session.toDebugString();
	StringBuilder v71 = v67.append(v70);
	String v72 = v67.toString();
	int v73 = Log.d(""AccountManagerService"", v72);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v51);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @1 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @7 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @15 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @20 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @23 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @28 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @31 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @36 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @39 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @44 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @47 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @51 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @56 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @59 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @64 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @67 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @71 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @76 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @79 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @83 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @86 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @90 exception:61,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @97 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountAndLogMetrics(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V > 1,2,3,4,5,6,7,75 @146 exception:80,
10 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @2 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @6 exception:11,
conditional branch(ne, to iindex=-1) 7,13,
14 = new <Application,Landroid/os/Bundle>@12,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 14 @14 exception:15,
goto (from iindex= 9 to iindex = 3),
16 = phi  14,7,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,18,12 @23 exception:19,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,20,10 @28 exception:21,
23 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @31 exception:22,
25 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,8 @37 exception:24,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
26 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_ADD, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecordWithUid(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;I)V > 1,25,26,27,12 @45 exception:28,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,3,4,6,2,5 @7 exception:7,
return,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$9>@48,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$9, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLjava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)V > 29,1,25,2,3,6,30,13,13,30,4,5,16,3 @70 exception:31,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @73 exception:32,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 23 @76 exception:40,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p0.addAccountAndLogMetrics(p1, p2, p3, p4, p5, p6, v24);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void addAccountAndLogMetrics(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	Bundle v2 = new Bundle();
	phiInstruction.putInt(""callerUid"", v2);
	phiInstruction.putInt(""callerPid"", v1);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(p7);
	p0.logRecordWithUid(v7, AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", v2);
	AccountManagerService$9 v8 = new AccountManagerService$9(p0,v7,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void logRecordWithUid(AccountManagerService$UserAccounts p1, String p2, String p3, int p4){
	p0.logRecord(p2, p3, -1, p1, p4);
	return;
}
-----
depth : 2
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	int v24 = Binder.getCallingUid();
	int v25 = UserHandle.getUserId(v24);
	Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v29 = v28.isActiveProfileOwner(p2);
	boolean v30 = v28.isActiveDeviceOwner(p2);
	boolean v27 = phiInstruction;
	UserManager v31 = AccountManagerService.getUserManager();
	UserHandle v32 = new UserHandle(v25);
	Bundle v34 = v31.getUserRestrictions(v32);
	boolean v35 = v34.getBoolean(""no_modify_accounts"");
	boolean v26 = 1;
	Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v39 = v38.isActiveProfileOwner(p3);
	boolean v40 = v38.isActiveDeviceOwner(p3);
	boolean v37 = phiInstruction;
	Object v41 = this.mContext.getSystemService(""device_policy"");
	String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
	boolean v43 = v42[phiInstruction].equals(p2);
	boolean v36 = 0;
	int v45 = Binder.getCallingPid();
	int v46 = Binder.getCallingUid();
	Bundle v47 = new Bundle();
	phiInstruction.putInt(""callerUid"", v46);
	phiInstruction.putInt(""callerPid"", v45);
	long v51 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v53 = AccountManagerService.getUserAccountsNotChecked(p7);
	AccountManagerService$UserAccounts v52 = v53;
	AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", -1, v52, v46);
	AccountManagerService$9 v56 = new AccountManagerService$9(AccountManagerService,v52,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	boolean v59 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v60 = new StringBuilder();
	StringBuilder v62 = v60.append(""initiating bind to authenticator type "");
	StringBuilder v63 = v60.append(this.mAccountType);
	String v64 = v60.toString();
	int v65 = Log.v(""AccountManagerService"", v64);
	boolean v66 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v67 = new StringBuilder();
	StringBuilder v69 = v67.append(""bind attempt failed for "");
	String v70 = AccountManagerService$Session.toDebugString();
	StringBuilder v71 = v67.append(v70);
	String v72 = v67.toString();
	int v73 = Log.d(""AccountManagerService"", v72);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v51);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @1 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @7 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @15 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @20 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @23 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @28 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @31 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @36 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @39 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @44 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @47 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @51 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @56 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @59 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @64 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @67 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @71 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @76 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @79 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @83 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @86 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @90 exception:61,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @97 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountAndLogMetrics(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V > 1,2,3,4,5,6,7,75 @146 exception:80,
10 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @2 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @6 exception:11,
conditional branch(ne, to iindex=-1) 7,13,
14 = new <Application,Landroid/os/Bundle>@12,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 14 @14 exception:15,
goto (from iindex= 9 to iindex = 3),
16 = phi  14,7,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,18,12 @23 exception:19,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,20,10 @28 exception:21,
23 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @31 exception:22,
25 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,8 @37 exception:24,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
26 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_ADD, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecordWithUid(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;I)V > 1,25,26,27,12 @45 exception:28,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,3,4,6,2,5 @7 exception:7,
return,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$9>@48,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$9, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLjava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)V > 29,1,25,2,3,6,30,13,13,30,4,5,16,3 @70 exception:31,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @73 exception:32,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 23 @76 exception:40,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p0.addAccountAndLogMetrics(p1, p2, p3, p4, p5, p6, v24);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void addAccountAndLogMetrics(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	Bundle v2 = new Bundle();
	phiInstruction.putInt(""callerUid"", v2);
	phiInstruction.putInt(""callerPid"", v1);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(p7);
	p0.logRecordWithUid(v7, AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", v2);
	AccountManagerService$9 v8 = new AccountManagerService$9(p0,v7,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void logRecordWithUid(AccountManagerService$UserAccounts p1, String p2, String p3, int p4){
	p0.logRecord(p2, p3, -1, p1, p4);
	return;
}
-----
depth : 2
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	int v24 = Binder.getCallingUid();
	int v25 = UserHandle.getUserId(v24);
	Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v29 = v28.isActiveProfileOwner(p2);
	boolean v30 = v28.isActiveDeviceOwner(p2);
	boolean v27 = phiInstruction;
	UserManager v31 = AccountManagerService.getUserManager();
	UserHandle v32 = new UserHandle(v25);
	Bundle v34 = v31.getUserRestrictions(v32);
	boolean v35 = v34.getBoolean(""no_modify_accounts"");
	boolean v26 = 0;
	Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v39 = v38.isActiveProfileOwner(p3);
	boolean v40 = v38.isActiveDeviceOwner(p3);
	boolean v37 = phiInstruction;
	Object v41 = this.mContext.getSystemService(""device_policy"");
	String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
	boolean v43 = v42[phiInstruction].equals(p2);
	boolean v36 = 0;
	int v45 = Binder.getCallingPid();
	int v46 = Binder.getCallingUid();
	Bundle v47 = new Bundle();
	phiInstruction.putInt(""callerUid"", v46);
	phiInstruction.putInt(""callerPid"", v45);
	long v51 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v53 = AccountManagerService.getUserAccountsNotChecked(p7);
	AccountManagerService$UserAccounts v52 = v53;
	AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", -1, v52, v46);
	AccountManagerService$9 v56 = new AccountManagerService$9(AccountManagerService,v52,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	boolean v59 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v60 = new StringBuilder();
	StringBuilder v62 = v60.append(""initiating bind to authenticator type "");
	StringBuilder v63 = v60.append(this.mAccountType);
	String v64 = v60.toString();
	int v65 = Log.v(""AccountManagerService"", v64);
	boolean v66 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v67 = new StringBuilder();
	StringBuilder v69 = v67.append(""bind attempt failed for "");
	String v70 = AccountManagerService$Session.toDebugString();
	StringBuilder v71 = v67.append(v70);
	String v72 = v67.toString();
	int v73 = Log.d(""AccountManagerService"", v72);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v51);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","0","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
6 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 4 @4 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @13 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @17 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
14 = invokevirtual < Application, Landroid/content/Context, getOpPackageName()Ljava/lang/String; > 12 @23 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 11 @63 exception:37,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
","public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
6 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 4 @4 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @13 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @17 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
14 = invokevirtual < Application, Landroid/content/Context, getOpPackageName()Ljava/lang/String; > 12 @23 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,5,2,3 @9 exception:8,
11 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 9 @13 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
14 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @22 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @26 exception:15,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;ILjava/lang/String;Ljava/util/List;Z)[Landroid/accounts/Account; > 1,16,5,3,9,12 @33 exception:17,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 14 @37 exception:24,
return 18,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 11 @63 exception:37,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public Account getAccounts(int p1, String p2){
	List v3 = p0.getTypesVisibleToCaller(v1, p1, p2);
	boolean v4 = v3.isEmpty();
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(p1);
	Account v7 = p0.getAccountsInternal(v6, v1, p2, v3, 0);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return v7;
}
-----
","public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	List v9 = AccountManagerService.getTypesVisibleToCaller(v7, v3, v5);
	boolean v10 = v9.isEmpty();
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = AccountManagerService.getUserAccounts(v3);
	Account v13 = AccountManagerService.getAccountsInternal(v12, v7, v5, v9, 0);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	Account v6 = v13;
	Binder.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
6 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 4 @4 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @13 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @17 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
14 = invokevirtual < Application, Landroid/content/Context, getOpPackageName()Ljava/lang/String; > 12 @23 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,5,2,3 @9 exception:8,
11 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 9 @13 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
25 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 25,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 11 @63 exception:37,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public Account getAccounts(int p1, String p2){
	List v3 = p0.getTypesVisibleToCaller(v1, p1, p2);
	boolean v4 = v3.isEmpty();
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	List v9 = AccountManagerService.getTypesVisibleToCaller(v7, v3, v5);
	boolean v10 = v9.isEmpty();
	Account v6 = this.EMPTY_ACCOUNT_ARRAY;
	Binder.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
6 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 4 @4 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @13 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @17 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
14 = invokevirtual < Application, Landroid/content/Context, getOpPackageName()Ljava/lang/String; > 12 @23 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,5,2,3 @9 exception:8,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
return 7,
11 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 9 @13 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
14 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @22 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @26 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;ILjava/lang/String;Ljava/util/List;Z)[Landroid/accounts/Account; > 1,16,5,3,9,12 @33 exception:17,
7 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 7 @2 exception:8,
10 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 5 @5 exception:9,
12 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 10 @9 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
27 = invokevirtual < Application, Ljava/util/ArrayList, size()I > 7 @41 exception:26,
28 = new <Application,[Landroid/accounts/Account>@4527 ,
36 = phi  35,13,
30 = invokevirtual < Application, Ljava/util/ArrayList, size()I > 7 @48 exception:29,
conditional branch(ge, to iindex=-1) 36,30,
return 28,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 14 @37 exception:24,
return 18,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 11 @63 exception:37,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public Account getAccounts(int p1, String p2){
	List v3 = p0.getTypesVisibleToCaller(v1, p1, p2);
	boolean v4 = v3.isEmpty();
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(p1);
	Account v7 = p0.getAccountsInternal(v6, v1, p2, v3, 0);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return v7;
}
-----
depth : 2
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public Account getAccountsInternal(AccountManagerService$UserAccounts p1, int p2, String p3, List p4, boolean p5){
	ArrayList v0 = new ArrayList();
	Iterator v2 = p4.iterator();
	boolean v3 = v2.hasNext();
	int v4 = v0.size();
	Account v4 = new Account(v4);
	int v5 = v0.size();
	return v4;
}
-----
","public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1);
	List v9 = v10;
	boolean v11 = v9.isEmpty();
	long v12 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = AccountManagerService.getUserAccountsNotChecked(p1);
	AccountManagerService$UserAccounts v13 = v14;
	ArrayList v16 = new ArrayList();
	Iterator v18 = v9.iterator();
	boolean v19 = v18.hasNext();
	int v20 = v16.size();
	Account v21 = new Account(v20);
	int v22 = v16.size();
	Account v15 = v21;
	IAccountManager$Stub.restoreCallingIdentity(v12);
	Account v6 = v15;
	Binder.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
6 = invokestatic < Application, Landroid/os/UserHandle, getAppId(I)I > 4 @4 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @13 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @17 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
14 = invokevirtual < Application, Landroid/content/Context, getOpPackageName()Ljava/lang/String; > 12 @23 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,5,2,3 @9 exception:8,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
return 7,
11 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 9 @13 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
25 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 25,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 11 @63 exception:37,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public Account getAccounts(int p1, String p2){
	List v3 = p0.getTypesVisibleToCaller(v1, p1, p2);
	boolean v4 = v3.isEmpty();
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
depth : 2
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
","public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1);
	List v9 = v10;
	boolean v11 = v9.isEmpty();
	Account v6 = this.EMPTY_ACCOUNT_ARRAY;
	Binder.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V","0","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @13 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @19 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@25,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,3 @35 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @40 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @43 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @48 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @51 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @56 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,5 @59 exception:36,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,38 @64 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @69 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,43 @74 exception:44,
47 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,47 @81 exception:48,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,50 @86 exception:51,
54 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @89 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,54 @93 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @96 exception:57,
60 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,58 @100 exception:59,
goto (from iindex= 44 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 48 to iindex = 2),
64 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 64,65 @114 exception:66,
conditional branch(ne, to iindex=-1) 3,15,
234 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 11,232 @122 exception:233,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,67,235 @127 exception:236,
240 = getCaughtException ,
goto (from iindex= 60 to iindex = 14),
241 = new <Application,Ljava/lang/StringBuilder>@146,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 241 @148 exception:242,
245 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 241,243 @153 exception:244,
247 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 241,240 @156 exception:246,
249 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 241 @159 exception:248,
251 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 11,249 @163 exception:250,
return,","depth : 0
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthToken: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", notifyOnAuthFailure "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", expectActivityLaunch "");
	StringBuilder v13 = v2.append(p5);
	StringBuilder v14 = v2.append("", caller's uid "");
	int v15 = Binder.getCallingUid();
	StringBuilder v16 = v2.append(v15);
	StringBuilder v17 = v2.append("", pid "");
	int v18 = Binder.getCallingPid();
	StringBuilder v19 = v2.append(v18);
	String v20 = v2.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = Slog.w(""AccountManagerService"", ""getAuthToken called with null account"");
	p1.onError(7, ""account is null"");
	StringBuilder v24 = new StringBuilder();
	StringBuilder v26 = v24.append(""Failed to report error back to the client."");
	StringBuilder v27 = v24.append(caughtException);
	String v28 = v24.toString();
	int v29 = Slog.w(""AccountManagerService"", v28);
	return;
}
-----
","public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAuthToken: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", notifyOnAuthFailure "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", expectActivityLaunch "");
	StringBuilder v14 = v3.append(p5);
	StringBuilder v15 = v3.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v3.append(v16);
	StringBuilder v18 = v3.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v3.append(v19);
	String v21 = v3.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	p1.onError(7, ""account is null"");
	return;
}
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V","0","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @13 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @19 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@25,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,3 @35 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @40 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @43 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @48 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @51 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @56 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,5 @59 exception:36,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,38 @64 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @69 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,43 @74 exception:44,
47 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,47 @81 exception:48,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,50 @86 exception:51,
54 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @89 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,54 @93 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @96 exception:57,
60 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,58 @100 exception:59,
goto (from iindex= 44 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 48 to iindex = 2),
64 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 64,65 @114 exception:66,
conditional branch(ne, to iindex=-1) 3,15,
234 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 11,232 @122 exception:233,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,67,235 @127 exception:236,
return,","depth : 0
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthToken: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", notifyOnAuthFailure "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", expectActivityLaunch "");
	StringBuilder v13 = v2.append(p5);
	StringBuilder v14 = v2.append("", caller's uid "");
	int v15 = Binder.getCallingUid();
	StringBuilder v16 = v2.append(v15);
	StringBuilder v17 = v2.append("", pid "");
	int v18 = Binder.getCallingPid();
	StringBuilder v19 = v2.append(v18);
	String v20 = v2.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = Slog.w(""AccountManagerService"", ""getAuthToken called with null account"");
	p1.onError(7, ""account is null"");
	return;
}
-----
","public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAuthToken: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", notifyOnAuthFailure "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", expectActivityLaunch "");
	StringBuilder v14 = v3.append(p5);
	StringBuilder v15 = v3.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v3.append(v16);
	StringBuilder v18 = v3.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v3.append(v19);
	String v21 = v3.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	p1.onError(7, ""account is null"");
	return;
}
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V","0","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @13 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @19 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@25,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,3 @35 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @40 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @43 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @48 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @51 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @56 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,5 @59 exception:36,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,38 @64 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @69 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,43 @74 exception:44,
47 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,47 @81 exception:48,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,50 @86 exception:51,
54 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @89 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,54 @93 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @96 exception:57,
60 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,58 @100 exception:59,
goto (from iindex= 44 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 48 to iindex = 2),
64 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 64,65 @114 exception:66,
conditional branch(ne, to iindex=-1) 3,15,
conditional branch(ne, to iindex=-1) 4,15,
229 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 11,227 @137 exception:228,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,67,230 @142 exception:231,
240 = getCaughtException ,
goto (from iindex= 60 to iindex = 14),
241 = new <Application,Ljava/lang/StringBuilder>@146,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 241 @148 exception:242,
245 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 241,243 @153 exception:244,
247 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 241,240 @156 exception:246,
249 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 241 @159 exception:248,
251 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 11,249 @163 exception:250,
return,","depth : 0
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthToken: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", notifyOnAuthFailure "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", expectActivityLaunch "");
	StringBuilder v13 = v2.append(p5);
	StringBuilder v14 = v2.append("", caller's uid "");
	int v15 = Binder.getCallingUid();
	StringBuilder v16 = v2.append(v15);
	StringBuilder v17 = v2.append("", pid "");
	int v18 = Binder.getCallingPid();
	StringBuilder v19 = v2.append(v18);
	String v20 = v2.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = Slog.w(""AccountManagerService"", ""getAuthToken called with null authTokenType"");
	p1.onError(7, ""authTokenType is null"");
	StringBuilder v24 = new StringBuilder();
	StringBuilder v26 = v24.append(""Failed to report error back to the client."");
	StringBuilder v27 = v24.append(caughtException);
	String v28 = v24.toString();
	int v29 = Slog.w(""AccountManagerService"", v28);
	return;
}
-----
","public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAuthToken: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", notifyOnAuthFailure "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", expectActivityLaunch "");
	StringBuilder v14 = v3.append(p5);
	StringBuilder v15 = v3.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v3.append(v16);
	StringBuilder v18 = v3.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v3.append(v19);
	String v21 = v3.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	p1.onError(7, ""authTokenType is null"");
	return;
}
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V","0","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @13 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @19 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@25,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @32 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,3 @35 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @40 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @43 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @48 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @51 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @56 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,5 @59 exception:36,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,38 @64 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @69 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,43 @74 exception:44,
47 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @77 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,47 @81 exception:48,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,50 @86 exception:51,
54 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @89 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,54 @93 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @96 exception:57,
60 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,58 @100 exception:59,
goto (from iindex= 44 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 48 to iindex = 2),
64 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 64,65 @114 exception:66,
conditional branch(ne, to iindex=-1) 3,15,
conditional branch(ne, to iindex=-1) 4,15,
229 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 11,227 @137 exception:228,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,67,230 @142 exception:231,
return,","depth : 0
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthToken: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", notifyOnAuthFailure "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", expectActivityLaunch "");
	StringBuilder v13 = v2.append(p5);
	StringBuilder v14 = v2.append("", caller's uid "");
	int v15 = Binder.getCallingUid();
	StringBuilder v16 = v2.append(v15);
	StringBuilder v17 = v2.append("", pid "");
	int v18 = Binder.getCallingPid();
	StringBuilder v19 = v2.append(v18);
	String v20 = v2.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = Slog.w(""AccountManagerService"", ""getAuthToken called with null authTokenType"");
	p1.onError(7, ""authTokenType is null"");
	return;
}
-----
","public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAuthToken: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", notifyOnAuthFailure "");
	StringBuilder v12 = v3.append(p4);
	StringBuilder v13 = v3.append("", expectActivityLaunch "");
	StringBuilder v14 = v3.append(p5);
	StringBuilder v15 = v3.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v3.append(v16);
	StringBuilder v18 = v3.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v3.append(v19);
	String v21 = v3.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	p1.onError(7, ""authTokenType is null"");
	return;
}
","NONE"

"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","0","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @31 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,21 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,24 @40 exception:25,
28 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,28 @47 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @50 exception:31,
34 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,32 @54 exception:33,
conditional branch(eq, to iindex=-1) 2,9,
42 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:41,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(eq, to iindex=-1) 45,9,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @83 exception:67,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
","public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v3.append(v8);
	StringBuilder v10 = v3.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v3.append(v11);
	String v13 = v3.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	String v19 = p0.readPasswordInternal(v18, p1);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @31 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,21 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,24 @40 exception:25,
28 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,28 @47 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @50 exception:31,
34 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,32 @54 exception:33,
conditional branch(eq, to iindex=-1) 2,9,
42 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:41,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
conditional branch(ne, to iindex=-1) 8,4,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
12 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAccountPasswordByNameAndType(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 11,12,13 @58 exception:14,
monitorexit 10,
monitorexit 9,
return 15,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @83 exception:67,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
	return v3;
}
-----
","public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v3.append(v8);
	StringBuilder v10 = v3.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v3.append(v11);
	String v13 = v3.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
	boolean v18 = v17.contains(Account.type);
	boolean v16 = v18;
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
	AccountManagerService$UserAccounts v20 = v21;
	int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v20);
	boolean v24 = AccountManagerService.isLocalUnlockedUser(v23);
	String v25 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
	String v22 = v25;
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v22;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @31 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,21 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,24 @40 exception:25,
28 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,28 @47 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @50 exception:31,
34 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,32 @54 exception:33,
conditional branch(eq, to iindex=-1) 2,9,
42 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:41,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
conditional branch(ne, to iindex=-1) 8,4,
29 = new <Application,Ljava/lang/StringBuilder>@16,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 29 @18 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 29,31 @23 exception:32,
35 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @26 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 29,35 @30 exception:36,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 29,38 @35 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 29 @38 exception:41,
44 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 28,42 @42 exception:43,
return 4,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @83 exception:67,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Password is not available - user "");
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" data is locked"");
	String v8 = v2.toString();
	int v9 = Log.w(""AccountManagerService"", v8);
	return 0;
}
-----
","public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v3.append(v8);
	StringBuilder v10 = v3.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v3.append(v11);
	String v13 = v3.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
	boolean v18 = v17.contains(Account.type);
	boolean v16 = v18;
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
	AccountManagerService$UserAccounts v20 = v21;
	int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v20);
	boolean v24 = AccountManagerService.isLocalUnlockedUser(v23);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""Password is not available - user "");
	int v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v20);
	StringBuilder v29 = v25.append(v28);
	StringBuilder v30 = v25.append("" data is locked"");
	String v31 = v25.toString();
	int v32 = Log.w(""AccountManagerService"", v31);
	String v22 = 0;
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v22;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @31 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,21 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,24 @40 exception:25,
28 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,28 @47 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @50 exception:31,
34 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,32 @54 exception:33,
conditional branch(eq, to iindex=-1) 2,9,
42 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:41,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 8,4,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
12 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAccountPasswordByNameAndType(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 11,12,13 @58 exception:14,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 2,
arraystore 8[10] = 3,
12 = new <Application,[Ljava/lang/String>@1810 ,
16 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 6,13,12,14,8,9,9,9 @30 exception:15,
18 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 16 @34 exception:17,
conditional branch(eq, to iindex=-1) 18,9,
21 = invokeinterface < Application, Landroid/database/Cursor, getString(I)Ljava/lang/String; > 16,9 @40 exception:20,
invokeinterface < Application, Landroid/database/Cursor, close()V > 16 @44 exception:31,
return 21,
monitorexit 10,
monitorexit 9,
return 15,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @83 exception:67,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
	return v3;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public String findAccountPasswordByNameAndType(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v1 = new String(1);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	String v4 = v2.getString(0);
	v2.close();
	return v4;
}
-----
","public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v3.append(v8);
	StringBuilder v10 = v3.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v3.append(v11);
	String v13 = v3.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v17 = v18;
	boolean v19 = v17.contains(Account.type);
	boolean v16 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v15);
	int v23 = this.userId;
	boolean v25 = this.mLocalUnlockedUsers.get(v23);
	boolean v24 = v25;
	SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v28 = new String(2);
	String v29 = new String(1);
	Cursor v30 = v27.query(""ceDb.accounts"", v29, ""name=? AND type=?"", v28, 0, 0, 0);
	boolean v31 = v30.moveToNext();
	String v32 = v30.getString(0);
	v30.close();
	String v26 = v32;
	String v22 = v26;
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @31 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,21 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,24 @40 exception:25,
28 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,28 @47 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @50 exception:31,
34 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,32 @54 exception:33,
conditional branch(eq, to iindex=-1) 2,9,
42 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:41,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 8,4,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
12 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAccountPasswordByNameAndType(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 11,12,13 @58 exception:14,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 2,
arraystore 8[10] = 3,
12 = new <Application,[Ljava/lang/String>@1810 ,
16 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 6,13,12,14,8,9,9,9 @30 exception:15,
18 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 16 @34 exception:17,
conditional branch(eq, to iindex=-1) 18,9,
invokeinterface < Application, Landroid/database/Cursor, close()V > 16 @49 exception:19,
return 9,
monitorexit 10,
monitorexit 9,
return 15,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @83 exception:67,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
	return v3;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public String findAccountPasswordByNameAndType(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v1 = new String(1);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return 0;
}
-----
","public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v3.append(v8);
	StringBuilder v10 = v3.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v3.append(v11);
	String v13 = v3.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v17 = v18;
	boolean v19 = v17.contains(Account.type);
	boolean v16 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v15);
	int v23 = this.userId;
	boolean v25 = this.mLocalUnlockedUsers.get(v23);
	boolean v24 = v25;
	SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v28 = new String(2);
	String v29 = new String(1);
	Cursor v30 = v27.query(""ceDb.accounts"", v29, ""name=? AND type=?"", v28, 0, 0, 0);
	boolean v31 = v30.moveToNext();
	v30.close();
	String v26 = 0;
	String v22 = v26;
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @31 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,21 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,24 @40 exception:25,
28 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,28 @47 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @50 exception:31,
34 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,32 @54 exception:33,
conditional branch(eq, to iindex=-1) 2,9,
42 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @59 exception:41,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @71 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 8,4,
29 = new <Application,Ljava/lang/StringBuilder>@16,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 29 @18 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 29,31 @23 exception:32,
35 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @26 exception:34,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 29,35 @30 exception:36,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 29,38 @35 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 29 @38 exception:41,
44 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 28,42 @42 exception:43,
return 4,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @83 exception:67,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Password is not available - user "");
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" data is locked"");
	String v8 = v2.toString();
	int v9 = Log.w(""AccountManagerService"", v8);
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
","public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v3.append(v8);
	StringBuilder v10 = v3.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v3.append(v11);
	String v13 = v3.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v17 = v18;
	boolean v19 = v17.contains(Account.type);
	boolean v16 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v15);
	int v23 = this.userId;
	boolean v25 = this.mLocalUnlockedUsers.get(v23);
	boolean v24 = v25;
	StringBuilder v26 = new StringBuilder();
	StringBuilder v28 = v26.append(""Password is not available - user "");
	int v29 = this.userId;
	StringBuilder v30 = v26.append(v29);
	StringBuilder v31 = v26.append("" data is locked"");
	String v32 = v26.toString();
	int v33 = Log.w(""AccountManagerService"", v32);
	String v22 = 0;
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V","0","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
11 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @13 exception:10,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, registerAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 11 @24 exception:19,
return,","depth : 0
public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.registerAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.registerAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
11 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @13 exception:10,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, registerAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetmReceiversForType(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 4 @0 exception:5,
monitorenter 6,
conditional branch(ne, to iindex=-1) 2,7,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = phi  2,8,
12 = arraylength 10,
44 = phi  43,7,
conditional branch(ge, to iindex=-1) 44,12,
monitorexit 6,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 11 @24 exception:19,
return,","depth : 0
public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.registerAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void registerAccountListener(String p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p3);
	String v1 = new String(1);
	return;
}
-----
","public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v5 = v6;
	Map v8 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(v5);
	String v9 = new String(1);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
11 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @13 exception:10,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, registerAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetmReceiversForType(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 4 @0 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, mReceiversForType, <Application,Ljava/util/Map> > 1,
return 2,
monitorenter 6,
conditional branch(ne, to iindex=-1) 2,7,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = phi  2,8,
12 = arraylength 10,
44 = phi  43,7,
conditional branch(ge, to iindex=-1) 44,12,
monitorexit 6,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 11 @24 exception:19,
return,","depth : 0
public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.registerAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void registerAccountListener(String p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p3);
	String v1 = new String(1);
	return;
}
-----
depth : 2
public Map -$$Nest$fgetmReceiversForType(AccountManagerService$UserAccounts p1){
	return this.mReceiversForType;
}
-----
","public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v5 = v6;
	Map v8 = this.mReceiversForType;
	String v9 = new String(1);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","0","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
7 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,4 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
13 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @12 exception:12,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
19 = arrayload 15[25],
20 = getfield < Application, Landroid/accounts/AccountAndUser, account, <Application,Landroid/accounts/Account> > 19,
22 = invokevirtual < Application, Landroid/accounts/Account, equals(Ljava/lang/Object;)Z > 20,2 @29 exception:21,
conditional branch(eq, to iindex=-1) 22,8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 13 @35 exception:36,
return 17,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	boolean v5 = AccountAndUser.account.equals(p1);
	Binder.restoreCallingIdentity(v3);
	return 1;
}
-----
","public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	boolean v5 = AccountAndUser.account.equals(p1);
	Binder.restoreCallingIdentity(v3);
	return 1;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
7 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,4 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
13 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @12 exception:12,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
3 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:2,
5 = invokevirtual < Application, Landroid/os/UserManager, getAliveUsers()Ljava/util/List; > 3 @4 exception:4,
7 = invokeinterface < Application, Ljava/util/List, size()I > 5 @8 exception:6,
8 = new <Primordial,[I>@127 ,
16 = phi  15,9,
conditional branch(ge, to iindex=-1) 16,7,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts([I)[Landroid/accounts/AccountAndUser; > 1,8 @30 exception:19,
return 20,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
19 = arrayload 15[25],
20 = getfield < Application, Landroid/accounts/AccountAndUser, account, <Application,Landroid/accounts/Account> > 19,
22 = invokevirtual < Application, Landroid/accounts/Account, equals(Ljava/lang/Object;)Z > 20,2 @29 exception:21,
conditional branch(eq, to iindex=-1) 22,8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 13 @35 exception:36,
return 17,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	boolean v5 = AccountAndUser.account.equals(p1);
	Binder.restoreCallingIdentity(v3);
	return 1;
}
-----
depth : 1
public AccountAndUser getAllAccounts(){
	UserManager v1 = p0.getUserManager();
	List v2 = v1.getAliveUsers();
	int v3 = v2.size();
	[I v3 = new [I(v3);
	AccountAndUser v4 = p0.getAccounts(v3);
	return v4;
}
-----
","public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	UserManager v5 = AccountManagerService.getUserManager();
	List v6 = v5.getAliveUsers();
	int v7 = v6.size();
	[I v8 = new [I(v7);
	AccountAndUser v9 = AccountManagerService.getAccounts(v8);
	AccountAndUser v4 = v9;
	boolean v10 = AccountAndUser.account.equals(p1);
	Binder.restoreCallingIdentity(v3);
	return 1;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
7 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,4 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
13 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @12 exception:12,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
3 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:2,
5 = invokevirtual < Application, Landroid/os/UserManager, getAliveUsers()Ljava/util/List; > 3 @4 exception:4,
7 = invokeinterface < Application, Ljava/util/List, size()I > 5 @8 exception:6,
8 = new <Primordial,[I>@127 ,
16 = phi  15,9,
conditional branch(ge, to iindex=-1) 16,7,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts([I)[Landroid/accounts/AccountAndUser; > 1,8 @30 exception:19,
return 20,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 13 @43 exception:28,
return 8,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public AccountAndUser getAllAccounts(){
	UserManager v1 = p0.getUserManager();
	List v2 = v1.getAliveUsers();
	int v3 = v2.size();
	[I v3 = new [I(v3);
	AccountAndUser v4 = p0.getAccounts(v3);
	return v4;
}
-----
","public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	UserManager v5 = AccountManagerService.getUserManager();
	List v6 = v5.getAliveUsers();
	int v7 = v6.size();
	[I v8 = new [I(v7);
	AccountAndUser v9 = AccountManagerService.getAccounts(v8);
	AccountAndUser v4 = v9;
	Binder.restoreCallingIdentity(v3);
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
7 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,4 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
13 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @12 exception:12,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
3 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:2,
5 = invokevirtual < Application, Landroid/os/UserManager, getAliveUsers()Ljava/util/List; > 3 @4 exception:4,
7 = invokeinterface < Application, Ljava/util/List, size()I > 5 @8 exception:6,
8 = new <Primordial,[I>@127 ,
16 = phi  15,9,
conditional branch(ge, to iindex=-1) 16,7,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts([I)[Landroid/accounts/AccountAndUser; > 1,8 @30 exception:19,
4 = invokestatic < Application, Lcom/google/android/collect/Lists, newArrayList()Ljava/util/ArrayList; > @0 exception:3,
5 = arraylength 2,
31 = phi  30,6,
conditional branch(ge, to iindex=-1) 31,5,
37 = invokevirtual < Application, Ljava/util/ArrayList, size()I > 4 @50 exception:36,
38 = new <Application,[Landroid/accounts/AccountAndUser>@5437 ,
40 = invokevirtual < Application, Ljava/util/ArrayList, toArray([Ljava/lang/Object;)[Ljava/lang/Object; > 4,38 @56 exception:39,
41 = checkcast <Application,[Landroid/accounts/AccountAndUser>40 <Application,[Landroid/accounts/AccountAndUser>,
return 41,
return 20,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
19 = arrayload 15[25],
20 = getfield < Application, Landroid/accounts/AccountAndUser, account, <Application,Landroid/accounts/Account> > 19,
22 = invokevirtual < Application, Landroid/accounts/Account, equals(Ljava/lang/Object;)Z > 20,2 @29 exception:21,
conditional branch(eq, to iindex=-1) 22,8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 13 @35 exception:36,
return 17,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	boolean v5 = AccountAndUser.account.equals(p1);
	Binder.restoreCallingIdentity(v3);
	return 1;
}
-----
depth : 1
public AccountAndUser getAllAccounts(){
	UserManager v1 = p0.getUserManager();
	List v2 = v1.getAliveUsers();
	int v3 = v2.size();
	[I v3 = new [I(v3);
	AccountAndUser v4 = p0.getAccounts(v3);
	return v4;
}
-----
depth : 2
public AccountAndUser getAccounts([I p1){
	ArrayList v1 = Lists.newArrayList();
	int v2 = v1.size();
	AccountAndUser v2 = new AccountAndUser(v2);
	Object v3 = v1.toArray(v2);
	return v3;
}
-----
","public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	UserManager v5 = AccountManagerService.getUserManager();
	List v6 = v5.getAliveUsers();
	int v7 = v6.size();
	[I v8 = new [I(v7);
	ArrayList v10 = Lists.newArrayList();
	int v11 = v10.size();
	AccountAndUser v12 = new AccountAndUser(v11);
	Object v13 = v10.toArray(v12);
	AccountAndUser v9 = v13;
	AccountAndUser v4 = v9;
	boolean v14 = AccountAndUser.account.equals(p1);
	Binder.restoreCallingIdentity(v3);
	return 1;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
7 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 5,4 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
13 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @12 exception:12,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
3 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:2,
5 = invokevirtual < Application, Landroid/os/UserManager, getAliveUsers()Ljava/util/List; > 3 @4 exception:4,
7 = invokeinterface < Application, Ljava/util/List, size()I > 5 @8 exception:6,
8 = new <Primordial,[I>@127 ,
16 = phi  15,9,
conditional branch(ge, to iindex=-1) 16,7,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts([I)[Landroid/accounts/AccountAndUser; > 1,8 @30 exception:19,
4 = invokestatic < Application, Lcom/google/android/collect/Lists, newArrayList()Ljava/util/ArrayList; > @0 exception:3,
5 = arraylength 2,
31 = phi  30,6,
conditional branch(ge, to iindex=-1) 31,5,
37 = invokevirtual < Application, Ljava/util/ArrayList, size()I > 4 @50 exception:36,
38 = new <Application,[Landroid/accounts/AccountAndUser>@5437 ,
40 = invokevirtual < Application, Ljava/util/ArrayList, toArray([Ljava/lang/Object;)[Ljava/lang/Object; > 4,38 @56 exception:39,
41 = checkcast <Application,[Landroid/accounts/AccountAndUser>40 <Application,[Landroid/accounts/AccountAndUser>,
return 41,
return 20,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 13 @43 exception:28,
return 8,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public AccountAndUser getAllAccounts(){
	UserManager v1 = p0.getUserManager();
	List v2 = v1.getAliveUsers();
	int v3 = v2.size();
	[I v3 = new [I(v3);
	AccountAndUser v4 = p0.getAccounts(v3);
	return v4;
}
-----
depth : 2
public AccountAndUser getAccounts([I p1){
	ArrayList v1 = Lists.newArrayList();
	int v2 = v1.size();
	AccountAndUser v2 = new AccountAndUser(v2);
	Object v3 = v1.toArray(v2);
	return v3;
}
-----
","public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	UserManager v5 = AccountManagerService.getUserManager();
	List v6 = v5.getAliveUsers();
	int v7 = v6.size();
	[I v8 = new [I(v7);
	ArrayList v10 = Lists.newArrayList();
	int v11 = v10.size();
	AccountAndUser v12 = new AccountAndUser(v11);
	Object v13 = v10.toArray(v12);
	AccountAndUser v9 = v13;
	AccountAndUser v4 = v9;
	Binder.restoreCallingIdentity(v3);
	return 0;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;","0","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @50 exception:31,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,4,2 @53 exception:36,
conditional branch(ne, to iindex=-1) 37,9,
52 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @59 exception:51,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAuthenticatorTypesInternal(I)[Landroid/accounts/AuthenticatorDescription; > 1,2 @63 exception:53,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 52 @67 exception:57,
return 54,","depth : 0
public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthenticatorTypes: for user id "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("" caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	boolean v13 = p0.isCrossUser(v1, p1);
	long v14 = IAccountManager$Stub.clearCallingIdentity();
	AuthenticatorDescription v15 = p0.getAuthenticatorTypesInternal(p1);
	IAccountManager$Stub.restoreCallingIdentity(v14);
	return v15;
}
-----
","public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAuthenticatorTypes: for user id "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("" caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	boolean v14 = p0.isCrossUser(v1, p1);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AuthenticatorDescription v16 = p0.getAuthenticatorTypesInternal(p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v16;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @50 exception:31,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,4,2 @53 exception:36,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 37,9,
52 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @59 exception:51,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAuthenticatorTypesInternal(I)[Landroid/accounts/AuthenticatorDescription; > 1,2 @63 exception:53,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, updateServices(I)V > 3,2 @2 exception:4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
7 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 5,2 @7 exception:6,
9 = invokeinterface < Application, Ljava/util/Collection, size()I > 7 @11 exception:8,
10 = new <Application,[Landroid/accounts/AuthenticatorDescription>@159 ,
12 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 7 @17 exception:11,
23 = phi  22,13,
15 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
return 10,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 52 @67 exception:57,
return 54,","depth : 0
public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthenticatorTypes: for user id "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("" caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	boolean v13 = p0.isCrossUser(v1, p1);
	long v14 = IAccountManager$Stub.clearCallingIdentity();
	AuthenticatorDescription v15 = p0.getAuthenticatorTypesInternal(p1);
	IAccountManager$Stub.restoreCallingIdentity(v14);
	return v15;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AuthenticatorDescription getAuthenticatorTypesInternal(int p1){
	this.mAuthenticatorCache.updateServices(p1);
	Collection v2 = this.mAuthenticatorCache.getAllServices(p1);
	int v3 = v2.size();
	AuthenticatorDescription v3 = new AuthenticatorDescription(v3);
	Iterator v4 = v2.iterator();
	boolean v5 = v4.hasNext();
	return v3;
}
-----
","public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAuthenticatorTypes: for user id "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("" caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	boolean v14 = phiInstruction;
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	this.mAuthenticatorCache.updateServices(p1);
	Collection v20 = this.mAuthenticatorCache.getAllServices(p1);
	int v21 = v20.size();
	AuthenticatorDescription v22 = new AuthenticatorDescription(v21);
	Iterator v23 = v20.iterator();
	boolean v24 = v23.hasNext();
	AuthenticatorDescription v18 = v22;
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v18;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @50 exception:31,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,4,2 @53 exception:36,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 37,9,
52 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @59 exception:51,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAuthenticatorTypesInternal(I)[Landroid/accounts/AuthenticatorDescription; > 1,2 @63 exception:53,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, updateServices(I)V > 3,2 @2 exception:4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
7 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 5,2 @7 exception:6,
9 = invokeinterface < Application, Ljava/util/Collection, size()I > 7 @11 exception:8,
10 = new <Application,[Landroid/accounts/AuthenticatorDescription>@159 ,
12 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 7 @17 exception:11,
23 = phi  22,13,
15 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 12 @22 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
return 10,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 52 @67 exception:57,
return 54,","depth : 0
public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthenticatorTypes: for user id "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("" caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	boolean v13 = p0.isCrossUser(v1, p1);
	long v14 = IAccountManager$Stub.clearCallingIdentity();
	AuthenticatorDescription v15 = p0.getAuthenticatorTypesInternal(p1);
	IAccountManager$Stub.restoreCallingIdentity(v14);
	return v15;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AuthenticatorDescription getAuthenticatorTypesInternal(int p1){
	this.mAuthenticatorCache.updateServices(p1);
	Collection v2 = this.mAuthenticatorCache.getAllServices(p1);
	int v3 = v2.size();
	AuthenticatorDescription v3 = new AuthenticatorDescription(v3);
	Iterator v4 = v2.iterator();
	boolean v5 = v4.hasNext();
	return v3;
}
-----
","public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAuthenticatorTypes: for user id "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("" caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	boolean v14 = phiInstruction;
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	this.mAuthenticatorCache.updateServices(p1);
	Collection v20 = this.mAuthenticatorCache.getAllServices(p1);
	int v21 = v20.size();
	AuthenticatorDescription v22 = new AuthenticatorDescription(v21);
	Iterator v23 = v20.iterator();
	boolean v24 = v23.hasNext();
	AuthenticatorDescription v18 = v22;
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v18;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","0","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @50 exception:31,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(eq, to iindex=-1) 43,9,
55 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @70 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 55 @82 exception:64,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""clearPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
","public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""clearPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	p0.setPasswordInternal(v18, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @50 exception:31,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
55 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @70 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 55 @82 exception:64,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""clearPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
","public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""clearPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
	boolean v18 = v17.contains(Account.type);
	boolean v16 = v18;
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
	AccountManagerService$UserAccounts v20 = v21;
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, 0);
	boolean v26 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v24);
	Map v27 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v20);
	Object v28 = v27.remove(p1);
	TokenCache v29 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v20);
	v29.remove(p1);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v32 = 0.length();
	AccountManagerService.logRecord(phiInstruction, ""accounts"", v24, v20, v1);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService.sendNotificationAccountUpdated(p1, v20);
	int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v20);
	AccountManagerService.sendAccountsChangedBroadcast(v36);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
55 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @70 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 55 @82 exception:64,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	p0.setPasswordInternal(v7, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
","public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesManagedByCaller(v1, v4);
	boolean v7 = v6.contains(Account.type);
	boolean v5 = v7;
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v10 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v9 = v10;
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v13 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	int v14 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v13, 0);
	boolean v15 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v13);
	Map v16 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v9);
	Object v17 = v16.remove(p1);
	TokenCache v18 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v9);
	v18.remove(p1);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v21 = 0.length();
	AccountManagerService.logRecord(phiInstruction, ""accounts"", v13, v9, v1);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService.sendNotificationAccountUpdated(p1, v9);
	int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v9);
	AccountManagerService.sendAccountsChangedBroadcast(v25);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @50 exception:31,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
55 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @70 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
7 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 7 @8 exception:8,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 7,9,3 @14 exception:10,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 6,16,7,17,12 @31 exception:18,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@76 ,
9 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:8,
arraystore 7[10] = 9,
14 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 5,11,12,7 @20 exception:13,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Landroid/accounts/Account;)V > 3,2 @2 exception:4,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getRequestingPackages(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,3 @0 exception:4,
7 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 5 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 7 @8 exception:8,
11 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @8 exception:6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
10 = invokevirtual < Application, Landroid/content/Intent, getAction()Ljava/lang/String; > 8 @13 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,10 @17 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @20 exception:13,
17 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 15,14 @26 exception:16,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 19,2 @33 exception:20,
invokevirtual < Application, Landroid/content/Context, sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 18,8,19 @36 exception:21,
return,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 55 @82 exception:64,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""clearPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""clearPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v17 = v18;
	boolean v19 = v17.contains(Account.type);
	boolean v16 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v15);
	SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase();
	v24.beginTransaction();
	SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabase();
	String v28 = new String(1);
	String v29 = new String(2);
	Cursor v30 = v27.query(""accounts"", v28, ""name=? AND type=?"", v29, 0, 0, 0);
	boolean v31 = v30.moveToNext();
	long v32 = v30.getLong(0);
	v30.close();
	long v26 = v32;
	SQLiteDatabase v35 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v36 = new ContentValues();
	v36.put(""password"", p3);
	String v39 = new String(1);
	String v40 = String.valueOf(v26);
	int v41 = v35.update(""ceDb.accounts"", v36, ""_id=?"", v39);
	int v34 = v41;
	SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v44 = new String(1);
	String v45 = String.valueOf(v26);
	int v46 = v43.delete(""ceDb.authtokens"", ""accounts_id=?"", v44);
	boolean v42 = phiInstruction;
	Map v47 = this.authTokenCache;
	Object v48 = v47.remove(p1);
	TokenCache v49 = this.accountTokenCaches;
	this.mCachedTokens.evict(p2);
	SQLiteDatabase v53 = this.mDeDatabase.getWritableDatabase();
	v53.setTransactionSuccessful();
	int v55 = 0.length();
	long v57 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v58 = new AccountManagerService$1LogRecordTask(AccountManagerService,phiInstruction,""accounts"",v26,p1,p4,v57);
	boolean v60 = this.mHandler.post(v58);
	SQLiteDatabase v62 = this.mDeDatabase.getWritableDatabase();
	v62.endTransaction();
	Map v65 = AccountManagerService.getRequestingPackages(p2, p1);
	Set v66 = v65.entrySet();
	Iterator v67 = v66.iterator();
	boolean v68 = v67.hasNext();
	int v69 = this.userId;
	StringBuilder v71 = new StringBuilder();
	StringBuilder v73 = v71.append(""the accounts changed, sending broadcast of "");
	String v74 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v75 = v71.append(v74);
	String v76 = v71.toString();
	int v77 = Log.i(""AccountManagerService"", v76);
	UserHandle v78 = new UserHandle(v69);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v78);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @50 exception:31,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
55 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @70 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
7 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 7 @8 exception:8,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 7,9,3 @14 exception:10,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 6,16,7,17,12 @31 exception:18,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@76 ,
9 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:8,
arraystore 7[10] = 9,
14 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 5,11,12,7 @20 exception:13,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Landroid/accounts/Account;)V > 3,2 @2 exception:4,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
34 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_SET_PASSWORD, <Application,Ljava/lang/String> >,
goto (from iindex= 34 to iindex = 3),
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getRequestingPackages(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,3 @0 exception:4,
7 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 5 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 7 @8 exception:8,
11 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @8 exception:6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
10 = invokevirtual < Application, Landroid/content/Intent, getAction()Ljava/lang/String; > 8 @13 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,10 @17 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @20 exception:13,
17 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 15,14 @26 exception:16,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 19,2 @33 exception:20,
invokevirtual < Application, Landroid/content/Context, sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 18,8,19 @36 exception:21,
return,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 55 @82 exception:64,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""clearPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""clearPassword: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v17 = v18;
	boolean v19 = v17.contains(Account.type);
	boolean v16 = v19;
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v15);
	SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase();
	v24.beginTransaction();
	SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabase();
	String v28 = new String(1);
	String v29 = new String(2);
	Cursor v30 = v27.query(""accounts"", v28, ""name=? AND type=?"", v29, 0, 0, 0);
	boolean v31 = v30.moveToNext();
	long v32 = v30.getLong(0);
	v30.close();
	long v26 = v32;
	SQLiteDatabase v35 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v36 = new ContentValues();
	v36.put(""password"", p3);
	String v39 = new String(1);
	String v40 = String.valueOf(v26);
	int v41 = v35.update(""ceDb.accounts"", v36, ""_id=?"", v39);
	int v34 = v41;
	SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v44 = new String(1);
	String v45 = String.valueOf(v26);
	int v46 = v43.delete(""ceDb.authtokens"", ""accounts_id=?"", v44);
	boolean v42 = phiInstruction;
	Map v47 = this.authTokenCache;
	Object v48 = v47.remove(p1);
	TokenCache v49 = this.accountTokenCaches;
	this.mCachedTokens.evict(p2);
	SQLiteDatabase v53 = this.mDeDatabase.getWritableDatabase();
	v53.setTransactionSuccessful();
	int v55 = 0.length();
	long v57 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v58 = new AccountManagerService$1LogRecordTask(AccountManagerService,phiInstruction,""accounts"",v26,p1,p4,v57);
	boolean v60 = this.mHandler.post(v58);
	SQLiteDatabase v62 = this.mDeDatabase.getWritableDatabase();
	v62.endTransaction();
	Map v65 = AccountManagerService.getRequestingPackages(p2, p1);
	Set v66 = v65.entrySet();
	Iterator v67 = v66.iterator();
	boolean v68 = v67.hasNext();
	int v69 = this.userId;
	StringBuilder v71 = new StringBuilder();
	StringBuilder v73 = v71.append(""the accounts changed, sending broadcast of "");
	String v74 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v75 = v71.append(v74);
	String v76 = v71.toString();
	int v77 = Log.i(""AccountManagerService"", v76);
	UserHandle v78 = new UserHandle(v69);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v78);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
55 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @70 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
7 = new <Application,Landroid/content/ContentValues>@6,
invokespecial < Application, Landroid/content/ContentValues, <init>()V > 7 @8 exception:8,
invokevirtual < Application, Landroid/content/ContentValues, put(Ljava/lang/String;Ljava/lang/String;)V > 7,9,3 @14 exception:10,
12 = new <Application,[Ljava/lang/String>@1811 ,
14 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @20 exception:13,
arraystore 12[15] = 14,
19 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I > 6,16,7,17,12 @31 exception:18,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getWritableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@76 ,
9 = invokestatic < Application, Ljava/lang/String, valueOf(J)Ljava/lang/String; > 2 @9 exception:8,
arraystore 7[10] = 9,
14 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I > 5,11,12,7 @20 exception:13,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
25 = invokeinterface < Application, Ljava/util/Map, remove(Ljava/lang/Object;)Ljava/lang/Object; > 23,3 @41 exception:24,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Landroid/accounts/Account;)V > 3,2 @2 exception:4,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 4,6,
33 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @59 exception:32,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getRequestingPackages(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,3 @0 exception:4,
7 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 5 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 7 @8 exception:8,
11 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 9 @12 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @8 exception:6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
10 = invokevirtual < Application, Landroid/content/Intent, getAction()Ljava/lang/String; > 8 @13 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,10 @17 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @20 exception:13,
17 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 15,14 @26 exception:16,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 19,2 @33 exception:20,
invokevirtual < Application, Landroid/content/Context, sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 18,8,19 @36 exception:21,
return,
monitorexit 8,
monitorexit 7,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 55 @82 exception:64,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	p0.setPasswordInternal(v7, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v6 = v7;
	boolean v8 = v6.contains(Account.type);
	boolean v5 = v8;
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v4);
	SQLiteDatabase v13 = this.mDeDatabase.getWritableDatabase();
	v13.beginTransaction();
	SQLiteDatabase v16 = this.mDeDatabase.getReadableDatabase();
	String v17 = new String(1);
	String v18 = new String(2);
	Cursor v19 = v16.query(""accounts"", v17, ""name=? AND type=?"", v18, 0, 0, 0);
	boolean v20 = v19.moveToNext();
	long v21 = v19.getLong(0);
	v19.close();
	long v15 = v21;
	SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v25 = new ContentValues();
	v25.put(""password"", p3);
	String v28 = new String(1);
	String v29 = String.valueOf(v15);
	int v30 = v24.update(""ceDb.accounts"", v25, ""_id=?"", v28);
	int v23 = v30;
	SQLiteDatabase v32 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v33 = new String(1);
	String v34 = String.valueOf(v15);
	int v35 = v32.delete(""ceDb.authtokens"", ""accounts_id=?"", v33);
	boolean v31 = phiInstruction;
	Map v36 = this.authTokenCache;
	Object v37 = v36.remove(p1);
	TokenCache v38 = this.accountTokenCaches;
	this.mCachedTokens.evict(p2);
	SQLiteDatabase v42 = this.mDeDatabase.getWritableDatabase();
	v42.setTransactionSuccessful();
	int v44 = 0.length();
	long v46 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v47 = new AccountManagerService$1LogRecordTask(AccountManagerService,phiInstruction,""accounts"",v15,p1,p4,v46);
	boolean v49 = this.mHandler.post(v47);
	SQLiteDatabase v51 = this.mDeDatabase.getWritableDatabase();
	v51.endTransaction();
	Map v54 = AccountManagerService.getRequestingPackages(p2, p1);
	Set v55 = v54.entrySet();
	Iterator v56 = v55.iterator();
	boolean v57 = v56.hasNext();
	int v58 = this.userId;
	StringBuilder v60 = new StringBuilder();
	StringBuilder v62 = v60.append(""the accounts changed, sending broadcast of "");
	String v63 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v64 = v60.append(v63);
	String v65 = v60.toString();
	int v66 = Log.i(""AccountManagerService"", v65);
	UserHandle v67 = new UserHandle(v58);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v67);
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","0","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @22 exception:14,
arraystore 13[7] = 15,
18 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @29 exception:17,
20 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 18 @33 exception:19,
arraystore 13[16] = 20,
23 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 21,13 @41 exception:22,
25 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,23 @45 exception:24,
31 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,29 @50 exception:30,
34 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,32 @55 exception:33,
36 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:35,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
conditional branch(ne, to iindex=-1) 50,11,
67 = new <Application,Ljava/lang/StringBuilder>@77,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 67 @79 exception:68,
71 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 67,69 @84 exception:70,
73 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 67,36 @87 exception:72,
76 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 67,74 @92 exception:75,
78 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 67,5 @95 exception:77,
80 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 67 @98 exception:79,
82 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 6,80 @102 exception:81,
return 11,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	StringBuilder v12 = new StringBuilder();
	StringBuilder v14 = v12.append(""User "");
	StringBuilder v15 = v12.append(v10);
	StringBuilder v16 = v12.append("" data is locked. callingUid "");
	StringBuilder v17 = v12.append(v1);
	String v18 = v12.toString();
	int v19 = Log.w(""AccountManagerService"", v18);
	return 0;
}
-----
","public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(4);
	Integer v4 = Integer.valueOf(v1);
	int v5 = Binder.getCallingPid();
	Integer v6 = Integer.valueOf(v5);
	String v7 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v3);
	int v8 = Log.v(""AccountManagerService"", v7);
	Object v9 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v10 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v11 = UserHandle.getCallingUserId();
	boolean v12 = p0.isAccountManagedByCaller(Account.type, v1, v11);
	boolean v13 = p0.isLocalUnlockedUser(v11);
	StringBuilder v14 = new StringBuilder();
	StringBuilder v16 = v14.append(""User "");
	StringBuilder v17 = v14.append(v11);
	StringBuilder v18 = v14.append("" data is locked. callingUid "");
	StringBuilder v19 = v14.append(v1);
	String v20 = v14.toString();
	int v21 = Log.w(""AccountManagerService"", v20);
	return 0;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @22 exception:14,
arraystore 13[7] = 15,
18 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @29 exception:17,
20 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 18 @33 exception:19,
arraystore 13[16] = 20,
23 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 21,13 @41 exception:22,
25 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,23 @45 exception:24,
31 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,29 @50 exception:30,
34 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,32 @55 exception:33,
36 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:35,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 50,11,
52 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @106 exception:51,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
6 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
8 = invokevirtual < Application, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
11 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
13 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 10,11 @18 exception:12,
14 = checkcast <Application,[Landroid/accounts/Account>13 <Application,[Landroid/accounts/Account>,
15 = arraylength 14,
23 = phi  22,9,
conditional branch(ge, to iindex=-1) 23,15,
16 = arrayload 14[23],
17 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 16,
18 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
20 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,18 @34 exception:19,
conditional branch(eq, to iindex=-1) 20,9,
monitorexit 4,
return 37,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
22 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 20,3 @26 exception:21,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findUserExtrasForAccount(Landroid/accounts/Account;)Ljava/util/Map; > 24,3 @36 exception:25,
28 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @40 exception:27,
30 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 28,3,26 @44 exception:29,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
51 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 45,4 @57 exception:50,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 52 @128 exception:65,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = p0.getUserAccounts(v10);
	boolean v15 = p0.accountExistsCache(v14, p1);
	String v16 = p0.readUserDataInternal(v14, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean accountExistsCache(AccountManagerService$UserAccounts p1, Account p2){
	boolean v1 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v2 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	boolean v3 = Account.name.equals(Account.name);
	return 1;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = phiInstruction.get(p3);
	return v8;
}
-----
","public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(4);
	Integer v4 = Integer.valueOf(v1);
	int v5 = Binder.getCallingPid();
	Integer v6 = Integer.valueOf(v5);
	String v7 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v3);
	int v8 = Log.v(""AccountManagerService"", v7);
	Object v9 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v10 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v11 = UserHandle.getCallingUserId();
	List v13 = AccountManagerService.getTypesManagedByCaller(v1, v11);
	boolean v14 = v13.contains(Account.type);
	boolean v12 = v14;
	boolean v16 = this.mLocalUnlockedUsers.get(v11);
	boolean v15 = v16;
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v11);
	AccountManagerService$UserAccounts v18 = v19;
	boolean v21 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v22 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	boolean v23 = Account.name.equals(Account.name);
	boolean v20 = 1;
	Map v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
	Object v26 = v25.get(p1);
	Map v27 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
	Object v28 = v27.get(p1);
	Map v29 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p1);
	Map v30 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
	Object v31 = v30.put(p1, v29);
	Object v32 = phiInstruction.get(p2);
	String v24 = v32;
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v24;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @22 exception:14,
arraystore 13[7] = 15,
18 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @29 exception:17,
20 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 18 @33 exception:19,
arraystore 13[16] = 20,
23 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 21,13 @41 exception:22,
25 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,23 @45 exception:24,
31 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,29 @50 exception:30,
34 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,32 @55 exception:33,
36 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:35,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
6 = invokevirtual < Application, Landroid/util/SparseBooleanArray, get(I)Z > 4,2 @5 exception:5,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 50,11,
52 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @106 exception:51,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
6 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
8 = invokevirtual < Application, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
11 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
13 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 10,11 @18 exception:12,
14 = checkcast <Application,[Landroid/accounts/Account>13 <Application,[Landroid/accounts/Account>,
15 = arraylength 14,
23 = phi  22,9,
conditional branch(ge, to iindex=-1) 23,15,
monitorexit 4,
return 9,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
22 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 20,3 @26 exception:21,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findUserExtrasForAccount(Landroid/accounts/Account;)Ljava/util/Map; > 24,3 @36 exception:25,
28 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @40 exception:27,
30 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 28,3,26 @44 exception:29,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
51 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 45,4 @57 exception:50,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 52 @128 exception:65,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = p0.getUserAccounts(v10);
	boolean v15 = p0.accountExistsCache(v14, p1);
	String v16 = p0.readUserDataInternal(v14, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean accountExistsCache(AccountManagerService$UserAccounts p1, Account p2){
	boolean v1 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v2 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	return 0;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = phiInstruction.get(p3);
	return v8;
}
-----
","public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(4);
	Integer v4 = Integer.valueOf(v1);
	int v5 = Binder.getCallingPid();
	Integer v6 = Integer.valueOf(v5);
	String v7 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v3);
	int v8 = Log.v(""AccountManagerService"", v7);
	Object v9 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v10 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v11 = UserHandle.getCallingUserId();
	List v13 = AccountManagerService.getTypesManagedByCaller(v1, v11);
	boolean v14 = v13.contains(Account.type);
	boolean v12 = v14;
	boolean v16 = this.mLocalUnlockedUsers.get(v11);
	boolean v15 = v16;
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v11);
	AccountManagerService$UserAccounts v18 = v19;
	boolean v21 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v22 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	boolean v20 = 0;
	Map v24 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
	Object v25 = v24.get(p1);
	Map v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
	Object v27 = v26.get(p1);
	Map v28 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p1);
	Map v29 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
	Object v30 = v29.put(p1, v28);
	Object v31 = phiInstruction.get(p2);
	String v23 = v31;
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v23;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @22 exception:14,
arraystore 13[7] = 15,
18 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @29 exception:17,
20 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 18 @33 exception:19,
arraystore 13[16] = 20,
23 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 21,13 @41 exception:22,
25 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,23 @45 exception:24,
31 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,29 @50 exception:30,
34 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,32 @55 exception:33,
36 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:35,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
conditional branch(ne, to iindex=-1) 50,11,
52 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @106 exception:51,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
22 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 20,3 @26 exception:21,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findUserExtrasForAccount(Landroid/accounts/Account;)Ljava/util/Map; > 24,3 @36 exception:25,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
6 = new <Application,Ljava/util/HashMap>@6,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 6 @8 exception:7,
9 = new <Application,[Ljava/lang/String>@128 ,
10 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 9[11] = 10,
12 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 9[13] = 12,
14 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, COLUMNS_EXTRAS_KEY_AND_VALUE, <Application,[Ljava/lang/String> >,
18 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,15,14,16,9,11,11,11 @33 exception:17,
20 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 18 @37 exception:19,
conditional branch(eq, to iindex=-1) 20,11,
invokeinterface < Application, Landroid/database/Cursor, close()V > 18 @55 exception:31,
return 6,
28 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @40 exception:27,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
30 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 28,3,26 @44 exception:29,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
51 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 45,4 @57 exception:50,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 52 @128 exception:65,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = p0.getUserAccounts(v10);
	boolean v15 = p0.accountExistsCache(v14, p1);
	String v16 = p0.readUserDataInternal(v14, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = phiInstruction.get(p3);
	return v8;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map findUserExtrasForAccount(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v1 = new HashMap();
	String v2 = new String(2);
	Cursor v3 = v1.query(""ceDb.extras"", this.COLUMNS_EXTRAS_KEY_AND_VALUE, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v2, 0, 0, 0);
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
","public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(4);
	Integer v4 = Integer.valueOf(v1);
	int v5 = Binder.getCallingPid();
	Integer v6 = Integer.valueOf(v5);
	String v7 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v3);
	int v8 = Log.v(""AccountManagerService"", v7);
	Object v9 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v10 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v11 = UserHandle.getCallingUserId();
	List v14 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v13 = v14;
	boolean v15 = v13.contains(Account.type);
	boolean v12 = v15;
	boolean v16 = p0.isLocalUnlockedUser(v11);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v11);
	boolean v19 = p0.accountExistsCache(v18, p1);
	Map v21 = this.userDataCache;
	Object v22 = v21.get(p1);
	Map v23 = this.userDataCache;
	Object v24 = v23.get(p1);
	SQLiteDatabase v26 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v27 = new HashMap();
	String v29 = new String(2);
	Cursor v30 = v26.query(""ceDb.extras"", this.COLUMNS_EXTRAS_KEY_AND_VALUE, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v29, 0, 0, 0);
	boolean v31 = v30.moveToNext();
	v30.close();
	Map v25 = v27;
	Map v33 = this.userDataCache;
	Object v34 = v33.put(p1, v25);
	Object v35 = phiInstruction.get(p2);
	String v20 = v35;
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v20;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,11,
31 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,29 @50 exception:30,
34 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,32 @55 exception:33,
36 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:35,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
conditional branch(ne, to iindex=-1) 50,11,
52 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @106 exception:51,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
22 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 20,3 @26 exception:21,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findUserExtrasForAccount(Landroid/accounts/Account;)Ljava/util/Map; > 24,3 @36 exception:25,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
6 = new <Application,Ljava/util/HashMap>@6,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 6 @8 exception:7,
9 = new <Application,[Ljava/lang/String>@128 ,
10 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 9[11] = 10,
12 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 9[13] = 12,
14 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, COLUMNS_EXTRAS_KEY_AND_VALUE, <Application,[Ljava/lang/String> >,
18 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,15,14,16,9,11,11,11 @33 exception:17,
20 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 18 @37 exception:19,
conditional branch(eq, to iindex=-1) 20,11,
invokeinterface < Application, Landroid/database/Cursor, close()V > 18 @55 exception:31,
return 6,
28 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @40 exception:27,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
30 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 28,3,26 @44 exception:29,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
51 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 45,4 @57 exception:50,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 52 @128 exception:65,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	boolean v7 = p0.isLocalUnlockedUser(v5);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v5);
	boolean v10 = p0.accountExistsCache(v9, p1);
	String v11 = p0.readUserDataInternal(v9, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = phiInstruction.get(p3);
	return v8;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map findUserExtrasForAccount(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v1 = new HashMap();
	String v2 = new String(2);
	Cursor v3 = v1.query(""ceDb.extras"", this.COLUMNS_EXTRAS_KEY_AND_VALUE, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v2, 0, 0, 0);
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
","public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v7 = v8;
	boolean v9 = v7.contains(Account.type);
	boolean v6 = v9;
	boolean v10 = p0.isLocalUnlockedUser(v5);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v5);
	boolean v13 = p0.accountExistsCache(v12, p1);
	Map v15 = this.userDataCache;
	Object v16 = v15.get(p1);
	Map v17 = this.userDataCache;
	Object v18 = v17.get(p1);
	SQLiteDatabase v20 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v21 = new HashMap();
	String v23 = new String(2);
	Cursor v24 = v20.query(""ceDb.extras"", this.COLUMNS_EXTRAS_KEY_AND_VALUE, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v23, 0, 0, 0);
	boolean v25 = v24.moveToNext();
	v24.close();
	Map v19 = v21;
	Map v27 = this.userDataCache;
	Object v28 = v27.put(p1, v19);
	Object v29 = phiInstruction.get(p2);
	String v14 = v29;
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v14;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
9 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 6,7 @7 exception:8,
conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
15 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 5 @22 exception:14,
arraystore 13[7] = 15,
18 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @29 exception:17,
20 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 18 @33 exception:19,
arraystore 13[16] = 20,
23 = invokestatic < Application, Ljava/lang/String, format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; > 21,13 @41 exception:22,
25 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 6,23 @45 exception:24,
31 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,29 @50 exception:30,
34 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,32 @55 exception:33,
36 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:35,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
conditional branch(ne, to iindex=-1) 50,11,
52 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @106 exception:51,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
22 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 20,3 @26 exception:21,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
51 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 45,4 @57 exception:50,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 52 @128 exception:65,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = p0.getUserAccounts(v10);
	boolean v15 = p0.accountExistsCache(v14, p1);
	String v16 = p0.readUserDataInternal(v14, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Object v5 = phiInstruction.get(p3);
	return v5;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
","public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = new Object(4);
	Integer v4 = Integer.valueOf(v1);
	int v5 = Binder.getCallingPid();
	Integer v6 = Integer.valueOf(v5);
	String v7 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v3);
	int v8 = Log.v(""AccountManagerService"", v7);
	Object v9 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v10 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v11 = UserHandle.getCallingUserId();
	List v14 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v13 = v14;
	boolean v15 = v13.contains(Account.type);
	boolean v12 = v15;
	boolean v16 = p0.isLocalUnlockedUser(v11);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v11);
	boolean v19 = p0.accountExistsCache(v18, p1);
	Map v21 = this.userDataCache;
	Object v22 = v21.get(p1);
	Map v23 = this.userDataCache;
	Object v24 = v23.get(p1);
	Object v25 = phiInstruction.get(p2);
	String v20 = v25;
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v20;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","0","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @24 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @37 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @44 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @47 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @51 exception:31,
37 = invokestatic < Application, Landroid/os/Binder, getCallingUserHandle()Landroid/os/UserHandle; > @54 exception:36,
39 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 37 @58 exception:38,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @99 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @107 exception:67,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
","public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccountExplicitly: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	UserHandle v14 = Binder.getCallingUserHandle();
	int v15 = v14.getIdentifier();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	AccountManagerService$UserAccounts v17 = p0.getUserAccountsForCaller();
	long v18 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v18, v17, v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	boolean v21 = p0.removeAccountInternal(v17, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v21;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @24 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @37 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @44 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @47 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @51 exception:31,
37 = invokestatic < Application, Landroid/os/Binder, getCallingUserHandle()Landroid/os/UserHandle; > @54 exception:36,
39 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 37 @58 exception:38,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
3 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @99 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @107 exception:67,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 1
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
","public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccountExplicitly: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	UserHandle v14 = Binder.getCallingUserHandle();
	int v15 = v14.getIdentifier();
	List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
	boolean v18 = v17.contains(Account.type);
	boolean v16 = v18;
	int v20 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccounts(v20);
	AccountManagerService$UserAccounts v19 = v21;
	SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabase();
	String v24 = new String(1);
	String v25 = new String(2);
	Cursor v26 = v23.query(""accounts"", v24, ""name=? AND type=?"", v25, 0, 0, 0);
	boolean v27 = v26.moveToNext();
	long v28 = v26.getLong(0);
	v26.close();
	long v22 = v28;
	long v31 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v32 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,""accounts"",v22,v19,v1,v31);
	boolean v34 = this.mHandler.post(v32);
	long v35 = IAccountManager$Stub.clearCallingIdentity();
	boolean v36 = p0.removeAccountInternal(v19, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v35);
	return v36;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","1","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @24 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @37 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @44 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @47 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @51 exception:31,
37 = invokestatic < Application, Landroid/os/Binder, getCallingUserHandle()Landroid/os/UserHandle; > @54 exception:36,
39 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 37 @58 exception:38,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
3 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @53 exception:21,
return 20,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @99 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @107 exception:67,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 1
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
","public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccountExplicitly: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	UserHandle v14 = Binder.getCallingUserHandle();
	int v15 = v14.getIdentifier();
	List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
	boolean v18 = v17.contains(Account.type);
	boolean v16 = v18;
	int v20 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccounts(v20);
	AccountManagerService$UserAccounts v19 = v21;
	SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabase();
	String v24 = new String(1);
	String v25 = new String(2);
	Cursor v26 = v23.query(""accounts"", v24, ""name=? AND type=?"", v25, 0, 0, 0);
	boolean v27 = v26.moveToNext();
	v26.close();
	long v22 = -1;
	long v30 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v31 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,""accounts"",v22,v19,v1,v30);
	boolean v33 = this.mHandler.post(v31);
	long v34 = IAccountManager$Stub.clearCallingIdentity();
	boolean v35 = p0.removeAccountInternal(v19, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v34);
	return v35;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @24 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @37 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @44 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @47 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @51 exception:31,
37 = invokestatic < Application, Landroid/os/Binder, getCallingUserHandle()Landroid/os/UserHandle; > @54 exception:36,
39 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 37 @58 exception:38,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
3 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
4 = binaryop(lt) 2 , 3,
conditional branch(ne, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
8 = binaryop(add) 6 , 7,
10 = binaryop(rem) 8 , 9,
putfield 1.< Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > = 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
return 11,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @99 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @107 exception:67,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public long reserveDebugDbInsertionPoint(){
	this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
	return this.mDebugDbInsertionPoint;
}
-----
","public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccountExplicitly: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	UserHandle v14 = Binder.getCallingUserHandle();
	int v15 = v14.getIdentifier();
	List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v17 = v18;
	boolean v19 = v17.contains(Account.type);
	boolean v16 = v19;
	int v21 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v21);
	AccountManagerService$UserAccounts v22 = v23;
	AccountManagerService$UserAccounts v20 = v22;
	long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
	long v26 = this.mDebugDbInsertionPoint;
	AccountManagerService$1LogRecordTask v27 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,""accounts"",v24,v20,v1,v26);
	boolean v29 = this.mHandler.post(v27);
	long v30 = IAccountManager$Stub.clearCallingIdentity();
	boolean v31 = p0.removeAccountInternal(v20, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v30);
	return v31;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @24 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,4 @32 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @37 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @44 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @47 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,30 @51 exception:31,
37 = invokestatic < Application, Landroid/os/Binder, getCallingUserHandle()Landroid/os/UserHandle; > @54 exception:36,
39 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 37 @58 exception:38,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
3 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
4 = binaryop(lt) 2 , 3,
conditional branch(ne, to iindex=-1) 4,5,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, calculateDebugTableInsertionPoint()J > 1 @8 exception:12,
putfield 1.< Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > = 13,
14 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
return 14,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @99 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @107 exception:67,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public long reserveDebugDbInsertionPoint(){
	long v1 = p0.calculateDebugTableInsertionPoint();
	this.mDebugDbInsertionPoint = v1;
	return this.mDebugDbInsertionPoint;
}
-----
","public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""removeAccountExplicitly: "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", caller's uid "");
	StringBuilder v8 = v3.append(v1);
	StringBuilder v9 = v3.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v3.append(v10);
	String v12 = v3.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	UserHandle v14 = Binder.getCallingUserHandle();
	int v15 = v14.getIdentifier();
	List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v17 = v18;
	boolean v19 = v17.contains(Account.type);
	boolean v16 = v19;
	int v21 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v21);
	AccountManagerService$UserAccounts v22 = v23;
	AccountManagerService$UserAccounts v20 = v22;
	long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	long v27 = AccountsDb.calculateDebugTableInsertionPoint();
	this.mDebugDbInsertionPoint = v27;
	long v26 = this.mDebugDbInsertionPoint;
	AccountManagerService$1LogRecordTask v28 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,""accounts"",v24,v20,v1,v26);
	boolean v30 = this.mHandler.post(v28);
	long v31 = IAccountManager$Stub.clearCallingIdentity();
	boolean v32 = p0.removeAccountInternal(v20, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v31);
	return v32;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","2","4 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:3,
8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
37 = invokestatic < Application, Landroid/os/Binder, getCallingUserHandle()Landroid/os/UserHandle; > @54 exception:36,
39 = invokevirtual < Application, Landroid/os/UserHandle, getIdentifier()I > 37 @58 exception:38,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
3 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
4 = binaryop(lt) 2 , 3,
conditional branch(ne, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
8 = binaryop(add) 6 , 7,
10 = binaryop(rem) 8 , 9,
putfield 1.< Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > = 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
return 11,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$1LogRecordTask, <init>(Lcom/android/server/accounts/AccountManagerService;Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;IJ)V > 13,1,2,3,4,5,6,9 @25 exception:14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
17 = invokevirtual < Application, Landroid/os/Handler, post(Ljava/lang/Runnable;)Z > 15,13 @31 exception:16,
return,
62 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @99 exception:61,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 62 @107 exception:67,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	AccountManagerService$UserAccounts v6 = p0.getUserAccountsForCaller();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v7, v6, v1);
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	boolean v10 = p0.removeAccountInternal(v6, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return v10;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public long reserveDebugDbInsertionPoint(){
	this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
	return this.mDebugDbInsertionPoint;
}
-----
","public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v6 = v7;
	boolean v8 = v6.contains(Account.type);
	boolean v5 = v8;
	int v10 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v12 = AccountManagerService.getUserAccountsNotChecked(v10);
	AccountManagerService$UserAccounts v11 = v12;
	AccountManagerService$UserAccounts v9 = v11;
	long v13 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
	long v15 = this.mDebugDbInsertionPoint;
	AccountManagerService$1LogRecordTask v16 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,""accounts"",v13,v9,v1,v15);
	boolean v18 = this.mHandler.post(v16);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v9, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","0","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @11 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @27 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 12,4 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @53 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,34 @58 exception:35,
38 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @61 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,38 @65 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @68 exception:41,
44 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,42 @72 exception:43,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
73 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @124 exception:72,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$16, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;)V > 76,1,75,2,3,4,63,11,11,3 @146 exception:77,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 73 @152 exception:87,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	boolean v19 = p0.isSystemUid(v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	AccountManagerService$16 v21 = new AccountManagerService$16(p0,v21,p1,p2,p3,1,0,0,p2);
	v21.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
","public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""editProperties: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v1);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	int v18 = UserHandle.getCallingUserId();
	boolean v19 = p0.isAccountManagedByCaller(p2, v1, v18);
	boolean v20 = p0.isSystemUid(v1);
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v18);
	AccountManagerService$16 v23 = new AccountManagerService$16(p0,v22,p1,p2,p3,1,0,0,p2);
	v23.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @11 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @27 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 12,4 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @53 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,34 @58 exception:35,
38 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @61 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,38 @65 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @68 exception:41,
44 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,42 @72 exception:43,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo; > 24,22,9 @24 exception:25,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @37 exception:63,
return 23,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
73 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @124 exception:72,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$16, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;)V > 76,1,75,2,3,4,63,11,11,3 @146 exception:77,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 73 @152 exception:87,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	boolean v19 = p0.isSystemUid(v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	AccountManagerService$16 v21 = new AccountManagerService$16(p0,v21,p1,p2,p3,1,0,0,p2);
	v21.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""editProperties: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v1);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	int v18 = UserHandle.getCallingUserId();
	List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
	boolean v21 = v20.contains(p2);
	boolean v19 = v21;
	long v23 = Binder.clearCallingIdentity();
	String v24 = this.mPackageManager.getPackagesForUid(v1);
	PackageInfo v25 = this.mPackageManager.getPackageInfo(v24[phiInstruction], 0);
	Binder.restoreCallingIdentity(v23);
	boolean v22 = 1;
	long v27 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v29 = AccountManagerService.getUserAccountsNotChecked(v18);
	AccountManagerService$UserAccounts v28 = v29;
	AccountManagerService$16 v30 = new AccountManagerService$16(p0,v28,p1,p2,p3,1,0,0,p2);
	boolean v33 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v34 = new StringBuilder();
	StringBuilder v36 = v34.append(""initiating bind to authenticator type "");
	StringBuilder v37 = v34.append(this.mAccountType);
	String v38 = v34.toString();
	int v39 = Log.v(""AccountManagerService"", v38);
	boolean v40 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v41 = new StringBuilder();
	StringBuilder v43 = v41.append(""bind attempt failed for "");
	String v44 = AccountManagerService$Session.toDebugString();
	StringBuilder v45 = v41.append(v44);
	String v46 = v41.toString();
	int v47 = Log.d(""AccountManagerService"", v46);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v27);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @11 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @27 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 12,4 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @53 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,34 @58 exception:35,
38 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @61 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,38 @65 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @68 exception:41,
44 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,42 @72 exception:43,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
10 = new <Application,Ljava/lang/StringBuilder>@58,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @60 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @65 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,2 @68 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @71 exception:17,
20 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 8,18 @75 exception:19,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @78 exception:52,
return 9,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
73 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @124 exception:72,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$16, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;)V > 76,1,75,2,3,4,63,11,11,3 @146 exception:77,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 73 @152 exception:87,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	boolean v19 = p0.isSystemUid(v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	AccountManagerService$16 v21 = new AccountManagerService$16(p0,v21,p1,p2,p3,1,0,0,p2);
	v21.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""No known packages with uid "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Log.w(""AccountManagerService"", v6);
	Binder.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""editProperties: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v1);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	int v18 = UserHandle.getCallingUserId();
	List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
	boolean v21 = v20.contains(p2);
	boolean v19 = v21;
	long v23 = Binder.clearCallingIdentity();
	String v24 = this.mPackageManager.getPackagesForUid(v1);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""No known packages with uid "");
	StringBuilder v28 = v25.append(v1);
	String v29 = v25.toString();
	int v30 = Log.w(""AccountManagerService"", v29);
	Binder.restoreCallingIdentity(v23);
	boolean v22 = 0;
	long v32 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v34 = AccountManagerService.getUserAccountsNotChecked(v18);
	AccountManagerService$UserAccounts v33 = v34;
	AccountManagerService$16 v35 = new AccountManagerService$16(p0,v33,p1,p2,p3,1,0,0,p2);
	boolean v38 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v39 = new StringBuilder();
	StringBuilder v41 = v39.append(""initiating bind to authenticator type "");
	StringBuilder v42 = v39.append(this.mAccountType);
	String v43 = v39.toString();
	int v44 = Log.v(""AccountManagerService"", v43);
	boolean v45 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v46 = new StringBuilder();
	StringBuilder v48 = v46.append(""bind attempt failed for "");
	String v49 = AccountManagerService$Session.toDebugString();
	StringBuilder v50 = v46.append(v49);
	String v51 = v46.toString();
	int v52 = Log.d(""AccountManagerService"", v51);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v32);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @11 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @27 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 12,4 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @53 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,34 @58 exception:35,
38 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @61 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,38 @65 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @68 exception:41,
44 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,42 @72 exception:43,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
73 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @124 exception:72,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$16, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;)V > 76,1,75,2,3,4,63,11,11,3 @146 exception:77,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 73 @152 exception:87,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	boolean v19 = p0.isSystemUid(v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	AccountManagerService$16 v21 = new AccountManagerService$16(p0,v21,p1,p2,p3,1,0,0,p2);
	v21.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""editProperties: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v1);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	int v18 = UserHandle.getCallingUserId();
	List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v20 = v21;
	boolean v22 = v20.contains(p2);
	boolean v19 = v22;
	boolean v23 = p0.isSystemUid(v1);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);
	AccountManagerService$16 v26 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
	boolean v29 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v30 = new StringBuilder();
	StringBuilder v32 = v30.append(""initiating bind to authenticator type "");
	StringBuilder v33 = v30.append(this.mAccountType);
	String v34 = v30.toString();
	int v35 = Log.v(""AccountManagerService"", v34);
	IAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType);
	int v39 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);
	int v41 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v42 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v41);
	boolean v36 = 0;
	StringBuilder v50 = new StringBuilder();
	StringBuilder v52 = v50.append(""bind attempt failed for "");
	long v54 = SystemClock.elapsedRealtime();
	String v55 = AccountManagerService$Session.toDebugString(v54);
	String v53 = v55;
	StringBuilder v56 = v50.append(v53);
	String v57 = v50.toString();
	int v58 = Log.d(""AccountManagerService"", v57);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v60 = AccountManagerService$Session.getResponseAndClose();
	boolean v61 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v62 = new StringBuilder();
	Class v64 = AccountManagerService$Session.getClass();
	String v65 = v64.getSimpleName();
	StringBuilder v66 = v62.append(v65);
	StringBuilder v67 = v62.append("" calling onError() on response "");
	StringBuilder v68 = v62.append(v60);
	String v69 = v62.toString();
	int v70 = Log.v(""AccountManagerService"", v69);
	v60.onError(1, ""bind failure"");
	boolean v72 = Log.isLoggable(""AccountManagerService"", 2);
	int v73 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @11 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @27 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 12,4 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @53 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,34 @58 exception:35,
38 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @61 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,38 @65 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @68 exception:41,
44 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,42 @72 exception:43,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
73 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @124 exception:72,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$16, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;)V > 76,1,75,2,3,4,63,11,11,3 @146 exception:77,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 73 @152 exception:87,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	AccountManagerService$16 v20 = new AccountManagerService$16(p0,v20,p1,p2,p3,1,0,0,p2);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""editProperties: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v1);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	int v18 = UserHandle.getCallingUserId();
	List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v20 = v21;
	boolean v22 = v20.contains(p2);
	boolean v19 = v22;
	long v23 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = p0.getUserAccounts(v18);
	AccountManagerService$16 v25 = new AccountManagerService$16(p0,v24,p1,p2,p3,1,0,0,p2);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""initiating bind to authenticator type "");
	StringBuilder v32 = v29.append(this.mAccountType);
	String v33 = v29.toString();
	int v34 = Log.v(""AccountManagerService"", v33);
	IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
	int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
	int v40 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v41 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v40);
	boolean v35 = 0;
	StringBuilder v49 = new StringBuilder();
	StringBuilder v51 = v49.append(""bind attempt failed for "");
	long v53 = SystemClock.elapsedRealtime();
	String v54 = AccountManagerService$Session.toDebugString(v53);
	String v52 = v54;
	StringBuilder v55 = v49.append(v52);
	String v56 = v49.toString();
	int v57 = Log.d(""AccountManagerService"", v56);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
	boolean v60 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v61 = new StringBuilder();
	Class v63 = AccountManagerService$Session.getClass();
	String v64 = v63.getSimpleName();
	StringBuilder v65 = v61.append(v64);
	StringBuilder v66 = v61.append("" calling onError() on response "");
	StringBuilder v67 = v61.append(v59);
	String v68 = v61.toString();
	int v69 = Log.v(""AccountManagerService"", v68);
	v59.onError(1, ""bind failure"");
	boolean v71 = Log.isLoggable(""AccountManagerService"", 2);
	int v72 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v23);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @11 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,3 @27 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 12,4 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @53 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,34 @58 exception:35,
38 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @61 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,38 @65 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @68 exception:41,
44 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,42 @72 exception:43,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @82 exception:54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
73 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @124 exception:72,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$16, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLjava/lang/String;)V > 76,1,75,2,3,4,63,11,11,3 @146 exception:77,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
107 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 15,14 @26 exception:106,
conditional branch(eq, to iindex=-1) 107,13,
108 = new <Application,Ljava/lang/StringBuilder>@32,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 108 @34 exception:109,
112 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,110 @40 exception:111,
114 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,2 @43 exception:113,
117 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,115 @48 exception:116,
119 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 108 @51 exception:118,
121 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 15,119 @55 exception:120,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 73 @152 exception:87,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	boolean v19 = p0.isSystemUid(v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	AccountManagerService$16 v21 = new AccountManagerService$16(p0,v21,p1,p2,p3,1,0,0,p2);
	v21.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	boolean v5 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""there is no authenticator for "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", bailing out"");
	String v10 = v5.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""editProperties: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v1);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	int v18 = UserHandle.getCallingUserId();
	List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v20 = v21;
	boolean v22 = v20.contains(p2);
	boolean v19 = v22;
	boolean v23 = p0.isSystemUid(v1);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);
	AccountManagerService$16 v26 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
	boolean v29 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v30 = new StringBuilder();
	StringBuilder v32 = v30.append(""initiating bind to authenticator type "");
	StringBuilder v33 = v30.append(this.mAccountType);
	String v34 = v30.toString();
	int v35 = Log.v(""AccountManagerService"", v34);
	IAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType);
	int v39 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);
	boolean v41 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v42 = new StringBuilder();
	StringBuilder v44 = v42.append(""there is no authenticator for "");
	StringBuilder v45 = v42.append(this.mAccountType);
	StringBuilder v46 = v42.append("", bailing out"");
	String v47 = v42.toString();
	int v48 = Log.v(""AccountManagerService"", v47);
	boolean v36 = 0;
	StringBuilder v49 = new StringBuilder();
	StringBuilder v51 = v49.append(""bind attempt failed for "");
	long v53 = SystemClock.elapsedRealtime();
	String v54 = AccountManagerService$Session.toDebugString(v53);
	String v52 = v54;
	StringBuilder v55 = v49.append(v52);
	String v56 = v49.toString();
	int v57 = Log.d(""AccountManagerService"", v56);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
	boolean v60 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v61 = new StringBuilder();
	Class v63 = AccountManagerService$Session.getClass();
	String v64 = v63.getSimpleName();
	StringBuilder v65 = v61.append(v64);
	StringBuilder v66 = v61.append("" calling onError() on response "");
	StringBuilder v67 = v61.append(v59);
	String v68 = v61.toString();
	int v69 = Log.v(""AccountManagerService"", v68);
	v59.onError(1, ""bind failure"");
	boolean v71 = Log.isLoggable(""AccountManagerService"", 2);
	int v72 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","0","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,3 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,4 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
47 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @66 exception:46,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @89 exception:59,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(eq, to iindex=-1) 63,11,
75 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
80 = new <Application,Landroid/os/Bundle>@113,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 80 @115 exception:81,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,82,83 @122 exception:84,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,85,86 @129 exception:87,
90 = invokevirtual < Application, Landroid/accounts/Account, getAccessId()Ljava/lang/String; > 79 @134 exception:89,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,88,90 @138 exception:91,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,80 @141 exception:92,
93 = getCaughtException ,
95 = invokevirtual < Application, Landroid/os/RemoteException, getMessage()Ljava/lang/String; > 93 @146 exception:94,
97 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 7,95 @150 exception:96,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 75 @153 exception:109,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	String v27 = caughtException.getMessage();
	int v28 = Log.w(""AccountManagerService"", v27);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
","public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""renameAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("" -> "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = p3.length();
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	Account v21 = p0.renameAccountInternal(v20, p2, p3);
	Bundle v22 = new Bundle();
	v22.putString(""authAccount"", Account.name);
	v22.putString(""accountType"", Account.type);
	String v26 = v21.getAccessId();
	v22.putString(""accountAccessId"", v26);
	p1.onResult(v22);
	String v29 = caughtException.getMessage();
	int v30 = Log.w(""AccountManagerService"", v29);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,3 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,4 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
47 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @66 exception:46,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @89 exception:59,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
75 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 7,9 @10 exception:10,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
17 = invokevirtual < Application, Ljava/util/HashMap, keySet()Ljava/util/Set; > 15 @25 exception:16,
19 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 17 @29 exception:18,
21 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 19 @33 exception:20,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Landroid/accounts/Account, <init>(Ljava/lang/String;Ljava/lang/String;)V > 51,4,52 @100 exception:53,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
174 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 63,172 @121 exception:173,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 80 @115 exception:81,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,82,83 @122 exception:84,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,85,86 @129 exception:87,
90 = invokevirtual < Application, Landroid/accounts/Account, getAccessId()Ljava/lang/String; > 79 @134 exception:89,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,88,90 @138 exception:91,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,80 @141 exception:92,
93 = getCaughtException ,
95 = invokevirtual < Application, Landroid/os/RemoteException, getMessage()Ljava/lang/String; > 93 @146 exception:94,
97 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 7,95 @150 exception:96,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 75 @153 exception:109,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	String v27 = caughtException.getMessage();
	int v28 = Log.w(""AccountManagerService"", v27);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""renameAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("" -> "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = p3.length();
	int v17 = UserHandle.getCallingUserId();
	List v19 = AccountManagerService.getTypesManagedByCaller(v1, v17);
	boolean v20 = v19.contains(Account.type);
	boolean v18 = v20;
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v17);
	AccountManagerService$UserAccounts v22 = v23;
	AccountManagerService$NotificationId v25 = AccountManagerService.getSigninRequiredNotificationId(v22, p2);
	UserHandle v26 = new UserHandle(v27);
	int v27 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
	AccountManagerService.cancelNotification(v25, v26);
	HashMap v30 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v22);
	HashMap v31 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v22);
	Set v32 = v31.keySet();
	Iterator v33 = v32.iterator();
	boolean v34 = v33.hasNext();
	List v35 = AccountManagerService.getAccountRemovedReceivers(p2, v22);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v37 = new Account(p3,Account.type);
	long v39 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v37);
	int v40 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Account v24 = 0;
	Bundle v42 = new Bundle();
	v42.putString(""authAccount"", Account.name);
	v42.putString(""accountType"", Account.type);
	String v46 = v24.getAccessId();
	v42.putString(""accountAccessId"", v46);
	p1.onResult(v42);
	String v49 = caughtException.getMessage();
	int v50 = Log.w(""AccountManagerService"", v49);
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,3 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,4 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
47 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @66 exception:46,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @89 exception:59,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
75 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 7,9 @10 exception:10,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
17 = invokevirtual < Application, Ljava/util/HashMap, keySet()Ljava/util/Set; > 15 @25 exception:16,
19 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 17 @29 exception:18,
21 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 19 @33 exception:20,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Landroid/accounts/Account, <init>(Ljava/lang/String;Ljava/lang/String;)V > 51,4,52 @100 exception:53,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
174 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 63,172 @121 exception:173,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 80 @115 exception:81,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,82,83 @122 exception:84,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,85,86 @129 exception:87,
90 = invokevirtual < Application, Landroid/accounts/Account, getAccessId()Ljava/lang/String; > 79 @134 exception:89,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,88,90 @138 exception:91,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,80 @141 exception:92,
goto (from iindex= 64 to iindex = 9),
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 75 @153 exception:109,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""renameAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("" -> "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = p3.length();
	int v17 = UserHandle.getCallingUserId();
	List v19 = AccountManagerService.getTypesManagedByCaller(v1, v17);
	boolean v20 = v19.contains(Account.type);
	boolean v18 = v20;
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v17);
	AccountManagerService$UserAccounts v22 = v23;
	AccountManagerService$NotificationId v25 = AccountManagerService.getSigninRequiredNotificationId(v22, p2);
	UserHandle v26 = new UserHandle(v27);
	int v27 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
	AccountManagerService.cancelNotification(v25, v26);
	HashMap v30 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v22);
	HashMap v31 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v22);
	Set v32 = v31.keySet();
	Iterator v33 = v32.iterator();
	boolean v34 = v33.hasNext();
	List v35 = AccountManagerService.getAccountRemovedReceivers(p2, v22);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v37 = new Account(p3,Account.type);
	long v39 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v37);
	int v40 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Account v24 = 0;
	Bundle v42 = new Bundle();
	v42.putString(""authAccount"", Account.name);
	v42.putString(""accountType"", Account.type);
	String v46 = v24.getAccessId();
	v42.putString(""accountAccessId"", v46);
	p1.onResult(v42);
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,3 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,4 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
47 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @66 exception:46,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @89 exception:59,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
75 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @0 exception:4,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @5 exception:6,
9 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @9 exception:8,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Landroid/accounts/Account, hashCode()I > 3 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @34 exception:21,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$NotificationId, <init>(Ljava/lang/String;I)V > 24,22,23 @42 exception:25,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @45 exception:26,
29 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 27,3,24 @49 exception:28,
30 = phi  10,24,
monitorexit 5,
return 30,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 7,9 @10 exception:10,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, getPackageName()Ljava/lang/String; > 4 @2 exception:5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V > 1,2,6,3 @6 exception:7,
return,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
17 = invokevirtual < Application, Ljava/util/HashMap, keySet()Ljava/util/Set; > 15 @25 exception:16,
19 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 17 @29 exception:18,
21 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 19 @33 exception:20,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
4 = new <Application,Landroid/content/Intent>@0,
invokespecial < Application, Landroid/content/Intent, <init>(Ljava/lang/String;)V > 4,5 @4 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, setFlags(I)Landroid/content/Intent; > 4,7 @9 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 3 @14 exception:11,
15 = invokevirtual < Application, Landroid/content/pm/PackageManager, queryBroadcastReceiversAsUser(Landroid/content/Intent;II)Ljava/util/List; > 10,4,13,12 @19 exception:14,
16 = new <Application,Ljava/util/ArrayList>@23,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 16 @25 exception:17,
conditional branch(ne, to iindex=-1) 15,13,
19 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 15 @31 exception:18,
21 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 19 @35 exception:20,
conditional branch(eq, to iindex=-1) 21,13,
return 16,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Landroid/accounts/Account, <init>(Ljava/lang/String;Ljava/lang/String;)V > 51,4,52 @100 exception:53,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
174 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 63,172 @121 exception:173,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 80 @115 exception:81,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,82,83 @122 exception:84,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,85,86 @129 exception:87,
90 = invokevirtual < Application, Landroid/accounts/Account, getAccessId()Ljava/lang/String; > 79 @134 exception:89,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,88,90 @138 exception:91,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,80 @141 exception:92,
93 = getCaughtException ,
95 = invokevirtual < Application, Landroid/os/RemoteException, getMessage()Ljava/lang/String; > 93 @146 exception:94,
97 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 7,95 @150 exception:96,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 75 @153 exception:109,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	String v27 = caughtException.getMessage();
	int v28 = Log.w(""AccountManagerService"", v27);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public List getAccountRemovedReceivers(Account p1, AccountManagerService$UserAccounts p2){
	Intent v0 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v2 = v0.setFlags(16777216);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p2);
	List v4 = this.mPackageManager.queryBroadcastReceiversAsUser(v0, 0, v3);
	ArrayList v4 = new ArrayList();
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	return v4;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""renameAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("" -> "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = p3.length();
	int v17 = UserHandle.getCallingUserId();
	List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v19 = v20;
	boolean v21 = v19.contains(Account.type);
	boolean v18 = v21;
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v17);
	HashMap v26 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v28 = v27.get(p2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""AccountManagerService:37:"");
	int v32 = p2.hashCode();
	StringBuilder v33 = v29.append(v32);
	String v34 = v29.toString();
	AccountManagerService$NotificationId v35 = new AccountManagerService$NotificationId(v34,37);
	HashMap v37 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v38 = v37.put(p2, v35);
	AccountManagerService$NotificationId v25 = phiInstruction;
	UserHandle v39 = new UserHandle(v40);
	int v40 = this.userId;
	String v43 = this.mContext.getPackageName();
	AccountManagerService.cancelNotification(v25, v43, v39);
	HashMap v45 = this.credentialsPermissionNotificationIds;
	HashMap v46 = this.credentialsPermissionNotificationIds;
	Set v47 = v46.keySet();
	Iterator v48 = v47.iterator();
	boolean v49 = v48.hasNext();
	Intent v51 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v53 = v51.setFlags(16777216);
	int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
	ArrayList v56 = new ArrayList();
	Iterator v58 = v55.iterator();
	boolean v59 = v58.hasNext();
	List v50 = v56;
	SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
	v61.beginTransaction();
	Account v63 = new Account(p3,Account.type);
	SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v67 = new String(1);
	String v68 = new String(2);
	Cursor v69 = v66.query(""ceDb.accounts"", v67, ""name=? AND type=?"", v68, 0, 0, 0);
	boolean v70 = v69.moveToNext();
	long v71 = v69.getLong(0);
	v69.close();
	long v65 = v71;
	int v73 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	SQLiteDatabase v75 = this.mDeDatabase.getWritableDatabase();
	v75.endTransaction();
	Account v24 = 0;
	Bundle v77 = new Bundle();
	v77.putString(""authAccount"", Account.name);
	v77.putString(""accountType"", Account.type);
	String v81 = v24.getAccessId();
	v77.putString(""accountAccessId"", v81);
	p1.onResult(v77);
	String v84 = caughtException.getMessage();
	int v85 = Log.w(""AccountManagerService"", v84);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,3 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,4 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
47 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @66 exception:46,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @89 exception:59,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
75 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @0 exception:4,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @5 exception:6,
9 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @9 exception:8,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Landroid/accounts/Account, hashCode()I > 3 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @34 exception:21,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$NotificationId, <init>(Ljava/lang/String;I)V > 24,22,23 @42 exception:25,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @45 exception:26,
29 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 27,3,24 @49 exception:28,
30 = phi  10,24,
monitorexit 5,
return 30,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 7,9 @10 exception:10,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, getPackageName()Ljava/lang/String; > 4 @2 exception:5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V > 1,2,6,3 @6 exception:7,
return,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
17 = invokevirtual < Application, Ljava/util/HashMap, keySet()Ljava/util/Set; > 15 @25 exception:16,
19 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 17 @29 exception:18,
21 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 19 @33 exception:20,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
4 = new <Application,Landroid/content/Intent>@0,
invokespecial < Application, Landroid/content/Intent, <init>(Ljava/lang/String;)V > 4,5 @4 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, setFlags(I)Landroid/content/Intent; > 4,7 @9 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 3 @14 exception:11,
15 = invokevirtual < Application, Landroid/content/pm/PackageManager, queryBroadcastReceiversAsUser(Landroid/content/Intent;II)Ljava/util/List; > 10,4,13,12 @19 exception:14,
16 = new <Application,Ljava/util/ArrayList>@23,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 16 @25 exception:17,
conditional branch(ne, to iindex=-1) 15,13,
19 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 15 @31 exception:18,
21 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 19 @35 exception:20,
conditional branch(eq, to iindex=-1) 21,13,
return 16,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Landroid/accounts/Account, <init>(Ljava/lang/String;Ljava/lang/String;)V > 51,4,52 @100 exception:53,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @53 exception:21,
return 20,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
174 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 63,172 @121 exception:173,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 80 @115 exception:81,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,82,83 @122 exception:84,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,85,86 @129 exception:87,
90 = invokevirtual < Application, Landroid/accounts/Account, getAccessId()Ljava/lang/String; > 79 @134 exception:89,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,88,90 @138 exception:91,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,80 @141 exception:92,
93 = getCaughtException ,
95 = invokevirtual < Application, Landroid/os/RemoteException, getMessage()Ljava/lang/String; > 93 @146 exception:94,
97 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 7,95 @150 exception:96,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 75 @153 exception:109,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	String v27 = caughtException.getMessage();
	int v28 = Log.w(""AccountManagerService"", v27);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public List getAccountRemovedReceivers(Account p1, AccountManagerService$UserAccounts p2){
	Intent v0 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v2 = v0.setFlags(16777216);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p2);
	List v4 = this.mPackageManager.queryBroadcastReceiversAsUser(v0, 0, v3);
	ArrayList v4 = new ArrayList();
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	return v4;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""renameAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("" -> "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = p3.length();
	int v17 = UserHandle.getCallingUserId();
	List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v19 = v20;
	boolean v21 = v19.contains(Account.type);
	boolean v18 = v21;
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v17);
	HashMap v26 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v28 = v27.get(p2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""AccountManagerService:37:"");
	int v32 = p2.hashCode();
	StringBuilder v33 = v29.append(v32);
	String v34 = v29.toString();
	AccountManagerService$NotificationId v35 = new AccountManagerService$NotificationId(v34,37);
	HashMap v37 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v38 = v37.put(p2, v35);
	AccountManagerService$NotificationId v25 = phiInstruction;
	UserHandle v39 = new UserHandle(v40);
	int v40 = this.userId;
	String v43 = this.mContext.getPackageName();
	AccountManagerService.cancelNotification(v25, v43, v39);
	HashMap v45 = this.credentialsPermissionNotificationIds;
	HashMap v46 = this.credentialsPermissionNotificationIds;
	Set v47 = v46.keySet();
	Iterator v48 = v47.iterator();
	boolean v49 = v48.hasNext();
	Intent v51 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v53 = v51.setFlags(16777216);
	int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
	ArrayList v56 = new ArrayList();
	Iterator v58 = v55.iterator();
	boolean v59 = v58.hasNext();
	List v50 = v56;
	SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
	v61.beginTransaction();
	Account v63 = new Account(p3,Account.type);
	SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v67 = new String(1);
	String v68 = new String(2);
	Cursor v69 = v66.query(""ceDb.accounts"", v67, ""name=? AND type=?"", v68, 0, 0, 0);
	boolean v70 = v69.moveToNext();
	v69.close();
	long v65 = -1;
	int v72 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	SQLiteDatabase v74 = this.mDeDatabase.getWritableDatabase();
	v74.endTransaction();
	Account v24 = 0;
	Bundle v76 = new Bundle();
	v76.putString(""authAccount"", Account.name);
	v76.putString(""accountType"", Account.type);
	String v80 = v24.getAccessId();
	v76.putString(""accountAccessId"", v80);
	p1.onResult(v76);
	String v83 = caughtException.getMessage();
	int v84 = Log.w(""AccountManagerService"", v83);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 7,8 @7 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @15 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @21 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 12,3 @24 exception:17,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,19 @29 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,4 @32 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,24 @37 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,6 @40 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,29 @45 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @48 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,33 @52 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @55 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 7,37 @59 exception:38,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
47 = invokevirtual < Application, Ljava/lang/String, length()I > 4 @66 exception:46,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
60 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @89 exception:59,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
75 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @101 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @0 exception:4,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @5 exception:6,
9 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @9 exception:8,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 12 @19 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 12,14 @24 exception:15,
18 = invokevirtual < Application, Landroid/accounts/Account, hashCode()I > 3 @27 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 12,18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 12 @34 exception:21,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$NotificationId, <init>(Ljava/lang/String;I)V > 24,22,23 @42 exception:25,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetsigninRequiredNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @45 exception:26,
29 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 27,3,24 @49 exception:28,
30 = phi  10,24,
monitorexit 5,
return 30,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 7,9 @10 exception:10,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
6 = invokevirtual < Application, Landroid/content/Context, getPackageName()Ljava/lang/String; > 4 @2 exception:5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Ljava/lang/String;Landroid/os/UserHandle;)V > 1,2,6,3 @6 exception:7,
return,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
17 = invokevirtual < Application, Ljava/util/HashMap, keySet()Ljava/util/Set; > 15 @25 exception:16,
19 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 17 @29 exception:18,
21 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 19 @33 exception:20,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
4 = new <Application,Landroid/content/Intent>@0,
invokespecial < Application, Landroid/content/Intent, <init>(Ljava/lang/String;)V > 4,5 @4 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, setFlags(I)Landroid/content/Intent; > 4,7 @9 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 3 @14 exception:11,
15 = invokevirtual < Application, Landroid/content/pm/PackageManager, queryBroadcastReceiversAsUser(Landroid/content/Intent;II)Ljava/util/List; > 10,4,13,12 @19 exception:14,
16 = new <Application,Ljava/util/ArrayList>@23,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 16 @25 exception:17,
conditional branch(ne, to iindex=-1) 15,13,
19 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 15 @31 exception:18,
21 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 19 @35 exception:20,
conditional branch(eq, to iindex=-1) 21,13,
return 16,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Landroid/accounts/Account, <init>(Ljava/lang/String;Ljava/lang/String;)V > 51,4,52 @100 exception:53,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @37 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
23 = invokeinterface < Application, Landroid/database/Cursor, getLong(I)J > 17,12 @43 exception:22,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @47 exception:33,
return 23,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
174 = invokestatic < Application, Landroid/util/Log, e(Ljava/lang/String;Ljava/lang/String;)I > 63,172 @121 exception:173,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 80 @115 exception:81,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,82,83 @122 exception:84,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,85,86 @129 exception:87,
90 = invokevirtual < Application, Landroid/accounts/Account, getAccessId()Ljava/lang/String; > 79 @134 exception:89,
invokevirtual < Application, Landroid/os/Bundle, putString(Ljava/lang/String;Ljava/lang/String;)V > 80,88,90 @138 exception:91,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onResult(Landroid/os/Bundle;)V > 2,80 @141 exception:92,
goto (from iindex= 64 to iindex = 9),
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 75 @153 exception:109,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public List getAccountRemovedReceivers(Account p1, AccountManagerService$UserAccounts p2){
	Intent v0 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v2 = v0.setFlags(16777216);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p2);
	List v4 = this.mPackageManager.queryBroadcastReceiversAsUser(v0, 0, v3);
	ArrayList v4 = new ArrayList();
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	return v4;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""renameAccount: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("" -> "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v1);
	StringBuilder v11 = v3.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v3.append(v12);
	String v14 = v3.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = p3.length();
	int v17 = UserHandle.getCallingUserId();
	List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v19 = v20;
	boolean v21 = v19.contains(Account.type);
	boolean v18 = v21;
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v17);
	HashMap v26 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v28 = v27.get(p2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""AccountManagerService:37:"");
	int v32 = p2.hashCode();
	StringBuilder v33 = v29.append(v32);
	String v34 = v29.toString();
	AccountManagerService$NotificationId v35 = new AccountManagerService$NotificationId(v34,37);
	HashMap v37 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v38 = v37.put(p2, v35);
	AccountManagerService$NotificationId v25 = phiInstruction;
	UserHandle v39 = new UserHandle(v40);
	int v40 = this.userId;
	String v43 = this.mContext.getPackageName();
	AccountManagerService.cancelNotification(v25, v43, v39);
	HashMap v45 = this.credentialsPermissionNotificationIds;
	HashMap v46 = this.credentialsPermissionNotificationIds;
	Set v47 = v46.keySet();
	Iterator v48 = v47.iterator();
	boolean v49 = v48.hasNext();
	Intent v51 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v53 = v51.setFlags(16777216);
	int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
	ArrayList v56 = new ArrayList();
	Iterator v58 = v55.iterator();
	boolean v59 = v58.hasNext();
	List v50 = v56;
	SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
	v61.beginTransaction();
	Account v63 = new Account(p3,Account.type);
	SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v67 = new String(1);
	String v68 = new String(2);
	Cursor v69 = v66.query(""ceDb.accounts"", v67, ""name=? AND type=?"", v68, 0, 0, 0);
	boolean v70 = v69.moveToNext();
	long v71 = v69.getLong(0);
	v69.close();
	long v65 = v71;
	int v73 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	SQLiteDatabase v75 = this.mDeDatabase.getWritableDatabase();
	v75.endTransaction();
	Account v24 = 0;
	Bundle v77 = new Bundle();
	v77.putString(""authAccount"", Account.name);
	v77.putString(""accountType"", Account.type);
	String v81 = v24.getAccessId();
	v77.putString(""accountAccessId"", v81);
	p1.onResult(v77);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","0","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:6,
10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @38 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @43 exception:23,
26 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @46 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @50 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,4 @58 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,34 @63 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,5 @66 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @69 exception:39,
42 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 19,40 @73 exception:41,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @76 exception:43,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$5, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Landroid/accounts/IAccountManagerResponse;Lcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 45,1,16,2,46,11,11,47,11,3,2,18,4 @101 exception:48,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @107 exception:57,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
","public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	String v8 = p2.toSafeString();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v17 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v17.bind();
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:6,
10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @38 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @43 exception:23,
26 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @46 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @50 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,4 @58 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,34 @63 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,5 @66 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @69 exception:39,
42 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 19,40 @73 exception:41,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @76 exception:43,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$5, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Landroid/accounts/IAccountManagerResponse;Lcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 45,1,16,2,46,11,11,47,11,3,2,18,4 @101 exception:48,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @107 exception:57,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = phiInstruction;
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3);
	AccountManagerService$UserAccounts v5 = v6;
	AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4);
	AccountManagerService$UserAccounts v7 = v8;
	String v12 = p2.toSafeString();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);
	boolean v24 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""initiating bind to authenticator type "");
	StringBuilder v28 = v25.append(this.mAccountType);
	String v29 = v25.toString();
	int v30 = Log.v(""AccountManagerService"", v29);
	boolean v31 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v32 = new StringBuilder();
	StringBuilder v34 = v32.append(""bind attempt failed for "");
	String v35 = AccountManagerService$Session.toDebugString();
	StringBuilder v36 = v32.append(v35);
	String v37 = v32.toString();
	int v38 = Log.d(""AccountManagerService"", v37);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:6,
10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @38 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @43 exception:23,
26 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @46 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @50 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,4 @58 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,34 @63 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,5 @66 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @69 exception:39,
42 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 19,40 @73 exception:41,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @76 exception:43,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$5, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Landroid/accounts/IAccountManagerResponse;Lcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 45,1,16,2,46,11,11,47,11,3,2,18,4 @101 exception:48,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @107 exception:57,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = phiInstruction;
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3);
	AccountManagerService$UserAccounts v5 = v6;
	AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4);
	AccountManagerService$UserAccounts v7 = v8;
	String v12 = p2.toSafeString();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);
	boolean v24 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""initiating bind to authenticator type "");
	StringBuilder v28 = v25.append(this.mAccountType);
	String v29 = v25.toString();
	int v30 = Log.v(""AccountManagerService"", v29);
	boolean v31 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v32 = new StringBuilder();
	StringBuilder v34 = v32.append(""bind attempt failed for "");
	String v35 = AccountManagerService$Session.toDebugString();
	StringBuilder v36 = v32.append(v35);
	String v37 = v32.toString();
	int v38 = Log.d(""AccountManagerService"", v37);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:6,
10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @38 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @43 exception:23,
26 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @46 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @50 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,4 @58 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,34 @63 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,5 @66 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @69 exception:39,
42 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 19,40 @73 exception:41,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @76 exception:43,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$5, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Landroid/accounts/IAccountManagerResponse;Lcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 45,1,16,2,46,11,11,47,11,3,2,18,4 @101 exception:48,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @107 exception:57,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = phiInstruction;
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3);
	AccountManagerService$UserAccounts v5 = v6;
	AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4);
	AccountManagerService$UserAccounts v7 = v8;
	String v12 = p2.toSafeString();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);
	boolean v24 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""initiating bind to authenticator type "");
	StringBuilder v28 = v25.append(this.mAccountType);
	String v29 = v25.toString();
	int v30 = Log.v(""AccountManagerService"", v29);
	IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
	int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);
	int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v37 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v36);
	boolean v31 = 0;
	StringBuilder v45 = new StringBuilder();
	StringBuilder v47 = v45.append(""bind attempt failed for "");
	long v49 = SystemClock.elapsedRealtime();
	String v50 = AccountManagerService$Session.toDebugString(v49);
	String v48 = v50;
	StringBuilder v51 = v45.append(v48);
	String v52 = v45.toString();
	int v53 = Log.d(""AccountManagerService"", v52);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v55 = AccountManagerService$Session.getResponseAndClose();
	boolean v56 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v57 = new StringBuilder();
	Class v59 = AccountManagerService$Session.getClass();
	String v60 = v59.getSimpleName();
	StringBuilder v61 = v57.append(v60);
	StringBuilder v62 = v57.append("" calling onError() on response "");
	StringBuilder v63 = v57.append(v55);
	String v64 = v57.toString();
	int v65 = Log.v(""AccountManagerService"", v64);
	v55.onError(1, ""bind failure"");
	boolean v67 = Log.isLoggable(""AccountManagerService"", 2);
	int v68 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:6,
10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @38 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @43 exception:23,
26 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @46 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @50 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,4 @58 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,34 @63 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,5 @66 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @69 exception:39,
42 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 19,40 @73 exception:41,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @76 exception:43,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$5, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Landroid/accounts/IAccountManagerResponse;Lcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 45,1,16,2,46,11,11,47,11,3,2,18,4 @101 exception:48,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @107 exception:57,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = phiInstruction;
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3);
	AccountManagerService$UserAccounts v5 = v6;
	AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4);
	AccountManagerService$UserAccounts v7 = v8;
	String v12 = p2.toSafeString();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);
	boolean v24 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""initiating bind to authenticator type "");
	StringBuilder v28 = v25.append(this.mAccountType);
	String v29 = v25.toString();
	int v30 = Log.v(""AccountManagerService"", v29);
	IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
	int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);
	int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v37 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v36);
	boolean v31 = 0;
	StringBuilder v45 = new StringBuilder();
	StringBuilder v47 = v45.append(""bind attempt failed for "");
	long v49 = SystemClock.elapsedRealtime();
	String v50 = AccountManagerService$Session.toDebugString(v49);
	String v48 = v50;
	StringBuilder v51 = v45.append(v48);
	String v52 = v45.toString();
	int v53 = Log.d(""AccountManagerService"", v52);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v55 = AccountManagerService$Session.getResponseAndClose();
	boolean v56 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v57 = new StringBuilder();
	Class v59 = AccountManagerService$Session.getClass();
	String v60 = v59.getSimpleName();
	StringBuilder v61 = v57.append(v60);
	StringBuilder v62 = v57.append("" calling onError() on response "");
	StringBuilder v63 = v57.append(v55);
	String v64 = v57.toString();
	int v65 = Log.v(""AccountManagerService"", v64);
	v55.onError(1, ""bind failure"");
	boolean v67 = Log.isLoggable(""AccountManagerService"", 2);
	int v68 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @10 exception:6,
10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @38 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @43 exception:23,
26 = invokevirtual < Application, Landroid/accounts/Account, toSafeString()Ljava/lang/String; > 3 @46 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @50 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,29 @55 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,4 @58 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,34 @63 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 20,5 @66 exception:37,
40 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @69 exception:39,
42 = invokestatic < Application, Landroid/util/Slog, d(Ljava/lang/String;Ljava/lang/String;)I > 19,40 @73 exception:41,
44 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @76 exception:43,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$5, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Landroid/accounts/IAccountManagerResponse;Lcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 45,1,16,2,46,11,11,47,11,3,2,18,4 @101 exception:48,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 44 @107 exception:57,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = phiInstruction;
	AccountManagerService$UserAccounts v5 = AccountManagerService.getUserAccountsNotChecked(p3);
	AccountManagerService$UserAccounts v4 = v5;
	AccountManagerService$UserAccounts v7 = AccountManagerService.getUserAccountsNotChecked(p4);
	AccountManagerService$UserAccounts v6 = v7;
	String v11 = p2.toSafeString();
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v20 = new AccountManagerService$5(p0,v4,p1,Account.type,0,0,Account.name,0,p2,p1,v6,p3);
	boolean v23 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v24 = new StringBuilder();
	StringBuilder v26 = v24.append(""initiating bind to authenticator type "");
	StringBuilder v27 = v24.append(this.mAccountType);
	String v28 = v24.toString();
	int v29 = Log.v(""AccountManagerService"", v28);
	IAccountAuthenticatorCache v31 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v32 = AuthenticatorDescription.newKey(this.mAccountType);
	int v33 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v34 = v31.getServiceInfo(v32, v33);
	int v35 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v36 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v35);
	boolean v30 = 0;
	StringBuilder v44 = new StringBuilder();
	StringBuilder v46 = v44.append(""bind attempt failed for "");
	long v48 = SystemClock.elapsedRealtime();
	String v49 = AccountManagerService$Session.toDebugString(v48);
	String v47 = v49;
	StringBuilder v50 = v44.append(v47);
	String v51 = v44.toString();
	int v52 = Log.d(""AccountManagerService"", v51);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v54 = AccountManagerService$Session.getResponseAndClose();
	boolean v55 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v56 = new StringBuilder();
	Class v58 = AccountManagerService$Session.getClass();
	String v59 = v58.getSimpleName();
	StringBuilder v60 = v56.append(v59);
	StringBuilder v61 = v56.append("" calling onError() on response "");
	StringBuilder v62 = v56.append(v54);
	String v63 = v56.toString();
	int v64 = Log.v(""AccountManagerService"", v63);
	v54.onError(1, ""bind failure"");
	boolean v66 = Log.isLoggable(""AccountManagerService"", 2);
	int v67 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","0","7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @2 exception:6,
10 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,8 @8 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:11,
14 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:13,
15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
36 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:35,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 36 @79 exception:45,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
","public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","1","7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @2 exception:6,
10 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,8 @8 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:11,
14 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:13,
15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo; > 24,22,9 @24 exception:25,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @37 exception:63,
return 23,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
36 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:35,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 29 @39 exception:30,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
34 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 29,3,32 @46 exception:33,
35 = new <Application,Ljava/util/ArrayList>@49,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 35 @51 exception:36,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
conditional branch(eq, to iindex=-1) 38,9,
40 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 35,3 @60 exception:39,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
52 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 45 @102 exception:51,
54 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 52 @106 exception:53,
56 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 54 @110 exception:55,
conditional branch(eq, to iindex=-1) 56,9,
83 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 46 @160 exception:82,
85 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 83 @164 exception:84,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
monitorexit 8,
monitorexit 7,
return 107,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 36 @79 exception:45,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = phiInstruction.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = phiInstruction.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
","public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesManagedByCaller(v3, v4);
	boolean v7 = v6.contains(Account.type);
	boolean v5 = v7;
	long v9 = Binder.clearCallingIdentity();
	String v10 = this.mPackageManager.getPackagesForUid(v3);
	PackageInfo v11 = this.mPackageManager.getPackageInfo(v10[phiInstruction], 0);
	Binder.restoreCallingIdentity(v9);
	boolean v8 = 1;
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v15 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v14 = v15;
	boolean v17 = AccountManagerService.isSpecialPackageKey(p2);
	int v18 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v14);
	boolean v19 = AccountManagerService.packageExistsForUser(p2, v18);
	HashMap v20 = new HashMap();
	Integer v22 = AccountManagerService.resolveAccountVisibility(p1, p2, v14);
	Object v23 = v20.put(p2, v22);
	ArrayList v24 = new ArrayList();
	boolean v26 = AccountManagerService.shouldNotifyPackageOnAccountRemoval(p1, p2, v14);
	boolean v27 = v24.add(p2);
	boolean v28 = AccountManagerService.updateAccountVisibilityLocked(p1, p2, p3, v14);
	Set v29 = phiInstruction.entrySet();
	Iterator v30 = v29.iterator();
	boolean v31 = v30.hasNext();
	Iterator v32 = phiInstruction.iterator();
	boolean v33 = v32.hasNext();
	int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v14);
	AccountManagerService.sendAccountsChangedBroadcast(v34);
	boolean v16 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","1","7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @2 exception:6,
10 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,8 @8 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:11,
14 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:13,
15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
10 = new <Application,Ljava/lang/StringBuilder>@58,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @60 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @65 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,2 @68 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @71 exception:17,
20 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 8,18 @75 exception:19,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @78 exception:52,
return 9,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
36 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:35,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 29 @39 exception:30,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
34 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 29,3,32 @46 exception:33,
35 = new <Application,Ljava/util/ArrayList>@49,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 35 @51 exception:36,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
conditional branch(eq, to iindex=-1) 38,9,
40 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 35,3 @60 exception:39,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
52 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 45 @102 exception:51,
54 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 52 @106 exception:53,
56 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 54 @110 exception:55,
conditional branch(eq, to iindex=-1) 56,9,
83 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 46 @160 exception:82,
85 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 83 @164 exception:84,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
monitorexit 8,
monitorexit 7,
return 107,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 36 @79 exception:45,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""No known packages with uid "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Log.w(""AccountManagerService"", v6);
	Binder.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = phiInstruction.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = phiInstruction.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
","public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesManagedByCaller(v3, v4);
	boolean v7 = v6.contains(Account.type);
	boolean v5 = v7;
	long v9 = Binder.clearCallingIdentity();
	String v10 = this.mPackageManager.getPackagesForUid(v3);
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""No known packages with uid "");
	StringBuilder v14 = v11.append(v3);
	String v15 = v11.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	Binder.restoreCallingIdentity(v9);
	boolean v8 = 0;
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v19 = v20;
	boolean v22 = AccountManagerService.isSpecialPackageKey(p2);
	int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v19);
	boolean v24 = AccountManagerService.packageExistsForUser(p2, v23);
	HashMap v25 = new HashMap();
	Integer v27 = AccountManagerService.resolveAccountVisibility(p1, p2, v19);
	Object v28 = v25.put(p2, v27);
	ArrayList v29 = new ArrayList();
	boolean v31 = AccountManagerService.shouldNotifyPackageOnAccountRemoval(p1, p2, v19);
	boolean v32 = v29.add(p2);
	boolean v33 = AccountManagerService.updateAccountVisibilityLocked(p1, p2, p3, v19);
	Set v34 = phiInstruction.entrySet();
	Iterator v35 = v34.iterator();
	boolean v36 = v35.hasNext();
	Iterator v37 = phiInstruction.iterator();
	boolean v38 = v37.hasNext();
	int v39 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v19);
	AccountManagerService.sendAccountsChangedBroadcast(v39);
	boolean v21 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return v21;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","2","7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @2 exception:6,
10 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,8 @8 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:11,
14 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:13,
15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
36 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:35,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
5 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
9 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,2 @10 exception:8,
conditional branch(eq, to iindex=-1) 9,6,
goto (from iindex= 8 to iindex = 3),
14 = phi  6,13,
return 14,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
5 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
8 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 6,2,3 @6 exception:7,
11 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 5 @15 exception:12,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 29 @39 exception:30,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,5 @3 exception:6,
9 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @6 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @12 exception:11,
14 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 10,3,12 @16 exception:13,
17 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 9 @160 exception:18,
throw 17,
19 = getCaughtException ,
20 = new <Application,Ljava/lang/StringBuilder>@165,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @167 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @172 exception:23,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager$NameNotFoundException, getMessage()Ljava/lang/String; > 19 @175 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @179 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @182 exception:29,
33 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 31,30 @188 exception:32,
36 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 34 @192 exception:35,
return 36,
34 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 29,3,32 @46 exception:33,
35 = new <Application,Ljava/util/ArrayList>@49,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 35 @51 exception:36,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 6 @4 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 8,11,
12 = new <Application,Landroid/content/Intent>@16,
invokespecial < Application, Landroid/content/Intent, <init>(Ljava/lang/String;)V > 12,13 @20 exception:14,
17 = invokevirtual < Application, Landroid/content/Intent, setFlags(I)Landroid/content/Intent; > 12,15 @25 exception:16,
19 = invokevirtual < Application, Landroid/content/Intent, setPackage(Ljava/lang/String;)Landroid/content/Intent; > 12,3 @28 exception:18,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
22 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @33 exception:21,
24 = invokevirtual < Application, Landroid/content/pm/PackageManager, queryBroadcastReceiversAsUser(Landroid/content/Intent;II)Ljava/util/List; > 20,12,10,22 @37 exception:23,
conditional branch(eq, to iindex=-1) 24,10,
26 = invokeinterface < Application, Ljava/util/List, size()I > 24 @43 exception:25,
conditional branch(le, to iindex=-1) 26,10,
goto (from iindex= 25 to iindex = 2),
30 = phi  9,10,
return 30,
conditional branch(eq, to iindex=-1) 38,9,
40 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 35,3 @60 exception:39,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 6,2 @2 exception:7,
10 = binaryop(lt) 8 , 9,
conditional branch(ge, to iindex=-1) 10,11,
13 = invokestatic < Application, Landroid/os/StrictMode, allowThreadDiskWrites()Landroid/os/StrictMode$ThreadPolicy; > @14 exception:12,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setAccountVisibility(JLjava/lang/String;I)Z > 14,8,3,4 @20 exception:15,
conditional branch(ne, to iindex=-1) 16,11,
invokestatic < Application, Landroid/os/StrictMode, setThreadPolicy(Landroid/os/StrictMode$ThreadPolicy;)V > 13 @30 exception:21,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,5 @33 exception:22,
25 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @37 exception:24,
27 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 23,3,25 @41 exception:26,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountsDataCaches()V > @44 exception:28,
return 29,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
52 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 45 @102 exception:51,
54 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 52 @106 exception:53,
56 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 54 @110 exception:55,
conditional branch(eq, to iindex=-1) 56,9,
83 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 46 @160 exception:82,
85 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 83 @164 exception:84,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @8 exception:6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
10 = invokevirtual < Application, Landroid/content/Intent, getAction()Ljava/lang/String; > 8 @13 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,10 @17 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @20 exception:13,
17 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 15,14 @26 exception:16,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 19,2 @33 exception:20,
invokevirtual < Application, Landroid/content/Context, sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 18,8,19 @36 exception:21,
return,
monitorexit 8,
monitorexit 7,
return 107,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 36 @79 exception:45,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = phiInstruction.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = phiInstruction.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
depth : 2
public boolean isSpecialPackageKey(String p1){
	boolean v1 = ""android:accounts:key_legacy_visible"".equals(p1);
	boolean v2 = ""android:accounts:key_legacy_not_visible"".equals(p1);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	int v2 = this.mPackageManager.getPackageUidAsUser(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Object v1 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v2 = IAccountManager$Stub.clearCallingIdentity();
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	int v4 = this.mPackageManager.getPackageUidAsUser(p2, v3);
	IAccountManager$Stub.restoreCallingIdentity(v2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Package not found "");
	String v8 = caughtException.getMessage();
	StringBuilder v9 = v5.append(v8);
	String v10 = v5.toString();
	int v11 = Log.d(""AccountManagerService"", v10);
	Integer v12 = Integer.valueOf(3);
	return v12;
}
-----
depth : 2
public boolean shouldNotifyPackageOnAccountRemoval(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Integer v1 = p0.resolveAccountVisibility(p1, p2, p3);
	int v2 = v1.intValue();
	Intent v2 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v4 = v2.setFlags(16777216);
	Intent v5 = v2.setPackage(p2);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	List v7 = this.mPackageManager.queryBroadcastReceiversAsUser(v2, 0, v6);
	int v8 = v7.size();
	return phiInstruction;
}
-----
depth : 2
public boolean updateAccountVisibilityLocked(Account p1, String p2, int p3, AccountManagerService$UserAccounts p4){
	long v1 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	StrictMode$ThreadPolicy v2 = StrictMode.allowThreadDiskWrites();
	boolean v3 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v1, p2, p3);
	StrictMode.setThreadPolicy(v2);
	Map v5 = p0.getPackagesAndVisibilityForAccountLocked(p1, p4);
	Integer v6 = Integer.valueOf(p3);
	Object v7 = v5.put(p2, v6);
	AccountManager.invalidateLocalAccountsDataCaches();
	return 1;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v6 = v7;
	boolean v8 = v6.contains(Account.type);
	boolean v5 = v8;
	boolean v9 = p0.isSystemUid(v3);
	long v10 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
	boolean v14 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v15 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	boolean v13 = phiInstruction;
	int v16 = this.userId;
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	int v19 = this.mPackageManager.getPackageUidAsUser(p2, v16);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	boolean v17 = 0;
	HashMap v21 = new HashMap();
	Object v24 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v25 = IAccountManager$Stub.clearCallingIdentity();
	int v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	int v27 = this.mPackageManager.getPackageUidAsUser(p2, v26);
	IAccountManager$Stub.restoreCallingIdentity(v25);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""Package not found "");
	String v32 = caughtException.getMessage();
	StringBuilder v33 = v29.append(v32);
	String v34 = v29.toString();
	int v35 = Log.d(""AccountManagerService"", v34);
	Integer v36 = Integer.valueOf(3);
	Integer v23 = v36;
	Object v37 = v21.put(p2, v23);
	ArrayList v38 = new ArrayList();
	Integer v41 = AccountManagerService.resolveAccountVisibility(p1, p2, p5);
	int v42 = v41.intValue();
	Intent v43 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v45 = v43.setFlags(16777216);
	Intent v46 = v43.setPackage(p2);
	int v47 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	List v48 = this.mPackageManager.queryBroadcastReceiversAsUser(v43, 0, v47);
	int v49 = v48.size();
	boolean v40 = phiInstruction;
	boolean v50 = v38.add(p2);
	long v52 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	StrictMode$ThreadPolicy v53 = StrictMode.allowThreadDiskWrites();
	boolean v54 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v52, p2, p3);
	StrictMode.setThreadPolicy(v53);
	Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
	Integer v57 = Integer.valueOf(p3);
	Object v58 = v56.put(p2, v57);
	AccountManager.invalidateLocalAccountsDataCaches();
	boolean v51 = 1;
	Set v60 = phiInstruction.entrySet();
	Iterator v61 = v60.iterator();
	boolean v62 = v61.hasNext();
	Iterator v63 = phiInstruction.iterator();
	boolean v64 = v63.hasNext();
	int v65 = this.userId;
	StringBuilder v67 = new StringBuilder();
	StringBuilder v69 = v67.append(""the accounts changed, sending broadcast of "");
	String v70 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v71 = v67.append(v70);
	String v72 = v67.toString();
	int v73 = Log.i(""AccountManagerService"", v72);
	UserHandle v74 = new UserHandle(v65);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v74);
	boolean v12 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v10);
	return v12;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","2","7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @2 exception:6,
10 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,8 @8 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:11,
14 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:13,
15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
36 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:35,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
5 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
9 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,2 @10 exception:8,
conditional branch(eq, to iindex=-1) 9,6,
goto (from iindex= 10 to iindex = 2),
14 = phi  6,13,
return 14,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
5 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
8 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 6,2,3 @6 exception:7,
11 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 5 @15 exception:12,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 29 @39 exception:30,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,5 @3 exception:6,
9 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @6 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @12 exception:11,
14 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 10,3,12 @16 exception:13,
17 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 9 @160 exception:18,
throw 17,
19 = getCaughtException ,
20 = new <Application,Ljava/lang/StringBuilder>@165,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @167 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @172 exception:23,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager$NameNotFoundException, getMessage()Ljava/lang/String; > 19 @175 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @179 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @182 exception:29,
33 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 31,30 @188 exception:32,
36 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 34 @192 exception:35,
return 36,
34 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 29,3,32 @46 exception:33,
35 = new <Application,Ljava/util/ArrayList>@49,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 35 @51 exception:36,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 6 @4 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 8,11,
12 = new <Application,Landroid/content/Intent>@16,
invokespecial < Application, Landroid/content/Intent, <init>(Ljava/lang/String;)V > 12,13 @20 exception:14,
17 = invokevirtual < Application, Landroid/content/Intent, setFlags(I)Landroid/content/Intent; > 12,15 @25 exception:16,
19 = invokevirtual < Application, Landroid/content/Intent, setPackage(Ljava/lang/String;)Landroid/content/Intent; > 12,3 @28 exception:18,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
22 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @33 exception:21,
24 = invokevirtual < Application, Landroid/content/pm/PackageManager, queryBroadcastReceiversAsUser(Landroid/content/Intent;II)Ljava/util/List; > 20,12,10,22 @37 exception:23,
conditional branch(eq, to iindex=-1) 24,10,
26 = invokeinterface < Application, Ljava/util/List, size()I > 24 @43 exception:25,
conditional branch(le, to iindex=-1) 26,10,
goto (from iindex= 25 to iindex = 2),
30 = phi  9,10,
return 30,
conditional branch(eq, to iindex=-1) 38,9,
40 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 35,3 @60 exception:39,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 6,2 @2 exception:7,
10 = binaryop(lt) 8 , 9,
conditional branch(ge, to iindex=-1) 10,11,
13 = invokestatic < Application, Landroid/os/StrictMode, allowThreadDiskWrites()Landroid/os/StrictMode$ThreadPolicy; > @14 exception:12,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setAccountVisibility(JLjava/lang/String;I)Z > 14,8,3,4 @20 exception:15,
conditional branch(ne, to iindex=-1) 16,11,
invokestatic < Application, Landroid/os/StrictMode, setThreadPolicy(Landroid/os/StrictMode$ThreadPolicy;)V > 13 @30 exception:21,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,5 @33 exception:22,
25 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @37 exception:24,
27 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 23,3,25 @41 exception:26,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountsDataCaches()V > @44 exception:28,
return 29,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
52 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 45 @102 exception:51,
54 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 52 @106 exception:53,
56 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 54 @110 exception:55,
conditional branch(eq, to iindex=-1) 56,9,
83 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 46 @160 exception:82,
85 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 83 @164 exception:84,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @8 exception:6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
10 = invokevirtual < Application, Landroid/content/Intent, getAction()Ljava/lang/String; > 8 @13 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,10 @17 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @20 exception:13,
17 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 15,14 @26 exception:16,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 19,2 @33 exception:20,
invokevirtual < Application, Landroid/content/Context, sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 18,8,19 @36 exception:21,
return,
monitorexit 8,
monitorexit 7,
return 107,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 36 @79 exception:45,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = phiInstruction.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = phiInstruction.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
depth : 2
public boolean isSpecialPackageKey(String p1){
	boolean v1 = ""android:accounts:key_legacy_visible"".equals(p1);
	boolean v2 = ""android:accounts:key_legacy_not_visible"".equals(p1);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	int v2 = this.mPackageManager.getPackageUidAsUser(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Object v1 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v2 = IAccountManager$Stub.clearCallingIdentity();
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	int v4 = this.mPackageManager.getPackageUidAsUser(p2, v3);
	IAccountManager$Stub.restoreCallingIdentity(v2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Package not found "");
	String v8 = caughtException.getMessage();
	StringBuilder v9 = v5.append(v8);
	String v10 = v5.toString();
	int v11 = Log.d(""AccountManagerService"", v10);
	Integer v12 = Integer.valueOf(3);
	return v12;
}
-----
depth : 2
public boolean shouldNotifyPackageOnAccountRemoval(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Integer v1 = p0.resolveAccountVisibility(p1, p2, p3);
	int v2 = v1.intValue();
	Intent v2 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v4 = v2.setFlags(16777216);
	Intent v5 = v2.setPackage(p2);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	List v7 = this.mPackageManager.queryBroadcastReceiversAsUser(v2, 0, v6);
	int v8 = v7.size();
	return phiInstruction;
}
-----
depth : 2
public boolean updateAccountVisibilityLocked(Account p1, String p2, int p3, AccountManagerService$UserAccounts p4){
	long v1 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	StrictMode$ThreadPolicy v2 = StrictMode.allowThreadDiskWrites();
	boolean v3 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v1, p2, p3);
	StrictMode.setThreadPolicy(v2);
	Map v5 = p0.getPackagesAndVisibilityForAccountLocked(p1, p4);
	Integer v6 = Integer.valueOf(p3);
	Object v7 = v5.put(p2, v6);
	AccountManager.invalidateLocalAccountsDataCaches();
	return 1;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v6 = v7;
	boolean v8 = v6.contains(Account.type);
	boolean v5 = v8;
	boolean v9 = p0.isSystemUid(v3);
	long v10 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
	boolean v14 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v15 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	boolean v13 = phiInstruction;
	int v16 = this.userId;
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	int v19 = this.mPackageManager.getPackageUidAsUser(p2, v16);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	boolean v17 = 0;
	HashMap v21 = new HashMap();
	Object v24 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v25 = IAccountManager$Stub.clearCallingIdentity();
	int v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	int v27 = this.mPackageManager.getPackageUidAsUser(p2, v26);
	IAccountManager$Stub.restoreCallingIdentity(v25);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""Package not found "");
	String v32 = caughtException.getMessage();
	StringBuilder v33 = v29.append(v32);
	String v34 = v29.toString();
	int v35 = Log.d(""AccountManagerService"", v34);
	Integer v36 = Integer.valueOf(3);
	Integer v23 = v36;
	Object v37 = v21.put(p2, v23);
	ArrayList v38 = new ArrayList();
	Integer v41 = AccountManagerService.resolveAccountVisibility(p1, p2, p5);
	int v42 = v41.intValue();
	Intent v43 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v45 = v43.setFlags(16777216);
	Intent v46 = v43.setPackage(p2);
	int v47 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	List v48 = this.mPackageManager.queryBroadcastReceiversAsUser(v43, 0, v47);
	int v49 = v48.size();
	boolean v40 = phiInstruction;
	boolean v50 = v38.add(p2);
	long v52 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	StrictMode$ThreadPolicy v53 = StrictMode.allowThreadDiskWrites();
	boolean v54 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v52, p2, p3);
	StrictMode.setThreadPolicy(v53);
	Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
	Integer v57 = Integer.valueOf(p3);
	Object v58 = v56.put(p2, v57);
	AccountManager.invalidateLocalAccountsDataCaches();
	boolean v51 = 1;
	Set v60 = phiInstruction.entrySet();
	Iterator v61 = v60.iterator();
	boolean v62 = v61.hasNext();
	Iterator v63 = phiInstruction.iterator();
	boolean v64 = v63.hasNext();
	int v65 = this.userId;
	StringBuilder v67 = new StringBuilder();
	StringBuilder v69 = v67.append(""the accounts changed, sending broadcast of "");
	String v70 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v71 = v67.append(v70);
	String v72 = v67.toString();
	int v73 = Log.i(""AccountManagerService"", v72);
	UserHandle v74 = new UserHandle(v65);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v74);
	boolean v12 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v10);
	return v12;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","2","7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,5 @2 exception:6,
10 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,8 @8 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:11,
14 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:13,
15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
36 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:35,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
5 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 3,2 @2 exception:4,
conditional branch(ne, to iindex=-1) 5,6,
9 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 7,2 @10 exception:8,
conditional branch(eq, to iindex=-1) 9,6,
goto (from iindex= 8 to iindex = 3),
14 = phi  6,13,
return 14,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
5 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
8 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 6,2,3 @6 exception:7,
11 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 5 @15 exception:12,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 29 @39 exception:30,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,5 @3 exception:6,
9 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @6 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @12 exception:11,
14 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 10,3,12 @16 exception:13,
17 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 9 @160 exception:18,
throw 17,
19 = getCaughtException ,
20 = new <Application,Ljava/lang/StringBuilder>@165,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @167 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @172 exception:23,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager$NameNotFoundException, getMessage()Ljava/lang/String; > 19 @175 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @179 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @182 exception:29,
33 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 31,30 @188 exception:32,
36 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 34 @192 exception:35,
return 36,
34 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 29,3,32 @46 exception:33,
35 = new <Application,Ljava/util/ArrayList>@49,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 35 @51 exception:36,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,4 @0 exception:5,
8 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 6 @4 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 8,11,
12 = new <Application,Landroid/content/Intent>@16,
invokespecial < Application, Landroid/content/Intent, <init>(Ljava/lang/String;)V > 12,13 @20 exception:14,
17 = invokevirtual < Application, Landroid/content/Intent, setFlags(I)Landroid/content/Intent; > 12,15 @25 exception:16,
19 = invokevirtual < Application, Landroid/content/Intent, setPackage(Ljava/lang/String;)Landroid/content/Intent; > 12,3 @28 exception:18,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
22 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @33 exception:21,
24 = invokevirtual < Application, Landroid/content/pm/PackageManager, queryBroadcastReceiversAsUser(Landroid/content/Intent;II)Ljava/util/List; > 20,12,10,22 @37 exception:23,
conditional branch(eq, to iindex=-1) 24,10,
26 = invokeinterface < Application, Ljava/util/List, size()I > 24 @43 exception:25,
conditional branch(le, to iindex=-1) 26,10,
goto (from iindex= 25 to iindex = 2),
30 = phi  9,10,
return 30,
conditional branch(eq, to iindex=-1) 38,9,
40 = invokeinterface < Application, Ljava/util/List, add(Ljava/lang/Object;)Z > 35,3 @60 exception:39,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 6,2 @2 exception:7,
10 = binaryop(lt) 8 , 9,
conditional branch(ge, to iindex=-1) 10,11,
13 = invokestatic < Application, Landroid/os/StrictMode, allowThreadDiskWrites()Landroid/os/StrictMode$ThreadPolicy; > @14 exception:12,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setAccountVisibility(JLjava/lang/String;I)Z > 14,8,3,4 @20 exception:15,
conditional branch(ne, to iindex=-1) 16,11,
invokestatic < Application, Landroid/os/StrictMode, setThreadPolicy(Landroid/os/StrictMode$ThreadPolicy;)V > 13 @30 exception:21,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,5 @33 exception:22,
25 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 4 @37 exception:24,
27 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 23,3,25 @41 exception:26,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountsDataCaches()V > @44 exception:28,
return 29,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
52 = invokeinterface < Application, Ljava/util/Map, entrySet()Ljava/util/Set; > 45 @102 exception:51,
54 = invokeinterface < Application, Ljava/util/Set, iterator()Ljava/util/Iterator; > 52 @106 exception:53,
56 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 54 @110 exception:55,
conditional branch(eq, to iindex=-1) 56,9,
83 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 46 @160 exception:82,
85 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 83 @164 exception:84,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
3 = new <Application,Ljava/lang/StringBuilder>@0,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 3 @2 exception:4,
7 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,5 @8 exception:6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
10 = invokevirtual < Application, Landroid/content/Intent, getAction()Ljava/lang/String; > 8 @13 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 3,10 @17 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 3 @20 exception:13,
17 = invokestatic < Application, Landroid/util/Log, i(Ljava/lang/String;Ljava/lang/String;)I > 15,14 @26 exception:16,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 19,2 @33 exception:20,
invokevirtual < Application, Landroid/content/Context, sendBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 18,8,19 @36 exception:21,
return,
monitorexit 8,
monitorexit 7,
return 107,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 36 @79 exception:45,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	boolean v8 = p0.setAccountVisibility(p1, p2, p3, 1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = phiInstruction.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = phiInstruction.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
depth : 2
public boolean isSpecialPackageKey(String p1){
	boolean v1 = ""android:accounts:key_legacy_visible"".equals(p1);
	boolean v2 = ""android:accounts:key_legacy_not_visible"".equals(p1);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	int v2 = this.mPackageManager.getPackageUidAsUser(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Object v1 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v2 = IAccountManager$Stub.clearCallingIdentity();
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	int v4 = this.mPackageManager.getPackageUidAsUser(p2, v3);
	IAccountManager$Stub.restoreCallingIdentity(v2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Package not found "");
	String v8 = caughtException.getMessage();
	StringBuilder v9 = v5.append(v8);
	String v10 = v5.toString();
	int v11 = Log.d(""AccountManagerService"", v10);
	Integer v12 = Integer.valueOf(3);
	return v12;
}
-----
depth : 2
public boolean shouldNotifyPackageOnAccountRemoval(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Integer v1 = p0.resolveAccountVisibility(p1, p2, p3);
	int v2 = v1.intValue();
	Intent v2 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v4 = v2.setFlags(16777216);
	Intent v5 = v2.setPackage(p2);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	List v7 = this.mPackageManager.queryBroadcastReceiversAsUser(v2, 0, v6);
	int v8 = v7.size();
	return phiInstruction;
}
-----
depth : 2
public boolean updateAccountVisibilityLocked(Account p1, String p2, int p3, AccountManagerService$UserAccounts p4){
	long v1 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	StrictMode$ThreadPolicy v2 = StrictMode.allowThreadDiskWrites();
	boolean v3 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v1, p2, p3);
	StrictMode.setThreadPolicy(v2);
	Map v5 = p0.getPackagesAndVisibilityForAccountLocked(p1, p4);
	Integer v6 = Integer.valueOf(p3);
	Object v7 = v5.put(p2, v6);
	AccountManager.invalidateLocalAccountsDataCaches();
	return 1;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v6 = v7;
	boolean v8 = v6.contains(Account.type);
	boolean v5 = v8;
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v4);
	boolean v13 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v14 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	boolean v12 = phiInstruction;
	int v15 = this.userId;
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	int v18 = this.mPackageManager.getPackageUidAsUser(p2, v15);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	boolean v16 = 0;
	HashMap v20 = new HashMap();
	Object v23 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	int v26 = this.mPackageManager.getPackageUidAsUser(p2, v25);
	IAccountManager$Stub.restoreCallingIdentity(v24);
	StringBuilder v28 = new StringBuilder();
	StringBuilder v30 = v28.append(""Package not found "");
	String v31 = caughtException.getMessage();
	StringBuilder v32 = v28.append(v31);
	String v33 = v28.toString();
	int v34 = Log.d(""AccountManagerService"", v33);
	Integer v35 = Integer.valueOf(3);
	Integer v22 = v35;
	Object v36 = v20.put(p2, v22);
	ArrayList v37 = new ArrayList();
	Integer v40 = AccountManagerService.resolveAccountVisibility(p1, p2, p5);
	int v41 = v40.intValue();
	Intent v42 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v44 = v42.setFlags(16777216);
	Intent v45 = v42.setPackage(p2);
	int v46 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	List v47 = this.mPackageManager.queryBroadcastReceiversAsUser(v42, 0, v46);
	int v48 = v47.size();
	boolean v39 = phiInstruction;
	boolean v49 = v37.add(p2);
	long v51 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	StrictMode$ThreadPolicy v52 = StrictMode.allowThreadDiskWrites();
	boolean v53 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v51, p2, p3);
	StrictMode.setThreadPolicy(v52);
	Map v55 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
	Integer v56 = Integer.valueOf(p3);
	Object v57 = v55.put(p2, v56);
	AccountManager.invalidateLocalAccountsDataCaches();
	boolean v50 = 1;
	Set v59 = phiInstruction.entrySet();
	Iterator v60 = v59.iterator();
	boolean v61 = v60.hasNext();
	Iterator v62 = phiInstruction.iterator();
	boolean v63 = v62.hasNext();
	int v64 = this.userId;
	StringBuilder v66 = new StringBuilder();
	StringBuilder v68 = v66.append(""the accounts changed, sending broadcast of "");
	String v69 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v70 = v66.append(v69);
	String v71 = v66.toString();
	int v72 = Log.i(""AccountManagerService"", v71);
	UserHandle v73 = new UserHandle(v64);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v73);
	boolean v11 = 1;
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return v11;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","0","6 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 3,4 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 8 @11 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,10 @16 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 8,2 @19 exception:13,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,15 @24 exception:16,
19 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,19 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 8 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 3,30 @50 exception:31,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
42 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:41,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 42 @74 exception:52,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getPreviousName: "");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("", caller's uid "");
	int v6 = Binder.getCallingUid();
	StringBuilder v7 = v1.append(v6);
	StringBuilder v8 = v1.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v1.append(v9);
	String v11 = v1.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v16 = p0.getUserAccounts(v14);
	String v17 = p0.readPreviousNameInternal(v16, p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v17;
}
-----
","public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPreviousName: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
	String v18 = p0.readPreviousNameInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","1","6 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 3,4 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 8 @11 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,10 @16 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 8,2 @19 exception:13,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,15 @24 exception:16,
19 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,19 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 8 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 3,30 @50 exception:31,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
42 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:41,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
10 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 8,3 @14 exception:9,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String; > 15,3 @24 exception:16,
18 = new <Application,Ljava/util/concurrent/atomic/AtomicReference>@28,
invokespecial < Application, Ljava/util/concurrent/atomic/AtomicReference, <init>(Ljava/lang/Object;)V > 18,17 @30 exception:19,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @33 exception:20,
23 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 21,3,18 @37 exception:22,
monitorexit 6,
monitorexit 5,
return 17,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 42 @74 exception:52,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getPreviousName: "");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("", caller's uid "");
	int v6 = Binder.getCallingUid();
	StringBuilder v7 = v1.append(v6);
	StringBuilder v8 = v1.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v1.append(v9);
	String v11 = v1.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v16 = p0.getUserAccounts(v14);
	String v17 = p0.readPreviousNameInternal(v16, p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v17;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p2);
	AtomicReference v3 = new AtomicReference(v3);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v6 = v5.put(p2, v3);
	return v3;
}
-----
","public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPreviousName: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = AccountManagerService.getUserAccountsNotChecked(v15);
	AccountManagerService$UserAccounts v17 = v18;
	HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(v17);
	Object v21 = v20.get(p1);
	String v22 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p1);
	AtomicReference v23 = new AtomicReference(v22);
	HashMap v25 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(v17);
	Object v26 = v25.put(p1, v23);
	String v19 = v22;
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v19;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","1","6 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 3,4 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 8 @11 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,10 @16 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 8,2 @19 exception:13,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,15 @24 exception:16,
19 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,19 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 8 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 3,30 @50 exception:31,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
42 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:41,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
10 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 8,3 @14 exception:9,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
13 = invokevirtual < Application, Ljava/util/concurrent/atomic/AtomicReference, get()Ljava/lang/Object; > 11 @43 exception:12,
14 = checkcast <Application,Ljava/lang/String>13 <Application,Ljava/lang/String>,
monitorexit 6,
monitorexit 5,
return 14,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 42 @74 exception:52,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getPreviousName: "");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("", caller's uid "");
	int v6 = Binder.getCallingUid();
	StringBuilder v7 = v1.append(v6);
	StringBuilder v8 = v1.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v1.append(v9);
	String v11 = v1.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v16 = p0.getUserAccounts(v14);
	String v17 = p0.readPreviousNameInternal(v16, p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v17;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	Object v3 = v2.get();
	return v3;
}
-----
","public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPreviousName: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = AccountManagerService.getUserAccountsNotChecked(v15);
	AccountManagerService$UserAccounts v17 = v18;
	HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(v17);
	Object v21 = v20.get(p1);
	Object v22 = v21.get();
	String v19 = v22;
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v19;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","2","6 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 3,4 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 8 @11 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,10 @16 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 8,2 @19 exception:13,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,15 @24 exception:16,
19 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,19 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 8 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 3,30 @50 exception:31,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
42 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:41,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
10 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 8,3 @14 exception:9,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String; > 15,3 @24 exception:16,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@98 ,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @34 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @38 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
22 = invokeinterface < Application, Landroid/database/Cursor, getString(I)Ljava/lang/String; > 17,12 @44 exception:21,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @48 exception:32,
return 22,
18 = new <Application,Ljava/util/concurrent/atomic/AtomicReference>@28,
invokespecial < Application, Ljava/util/concurrent/atomic/AtomicReference, <init>(Ljava/lang/Object;)V > 18,17 @30 exception:19,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @33 exception:20,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
23 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 21,3,18 @37 exception:22,
monitorexit 6,
monitorexit 5,
return 17,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 42 @74 exception:52,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getPreviousName: "");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("", caller's uid "");
	int v6 = Binder.getCallingUid();
	StringBuilder v7 = v1.append(v6);
	StringBuilder v8 = v1.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v1.append(v9);
	String v11 = v1.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v16 = p0.getUserAccounts(v14);
	String v17 = p0.readPreviousNameInternal(v16, p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v17;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p2);
	AtomicReference v3 = new AtomicReference(v3);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v6 = v5.put(p2, v3);
	return v3;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
depth : 2
public String findDeAccountPreviousName(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	String v4 = v2.getString(0);
	v2.close();
	return v4;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
","public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPreviousName: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = AccountManagerService.getUserAccountsNotChecked(v15);
	AccountManagerService$UserAccounts v17 = v18;
	HashMap v20 = this.previousNameCache;
	Object v21 = v20.get(p1);
	SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabase();
	String v24 = new String(1);
	String v25 = new String(2);
	Cursor v26 = v23.query(""accounts"", v24, ""name=? AND type=?"", v25, 0, 0, 0);
	boolean v27 = v26.moveToNext();
	String v28 = v26.getString(0);
	v26.close();
	String v22 = v28;
	AtomicReference v30 = new AtomicReference(v22);
	HashMap v32 = this.previousNameCache;
	Object v33 = v32.put(p1, v30);
	String v19 = v22;
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v19;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","2","6 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 3,4 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 8 @11 exception:9,
12 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,10 @16 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 8,2 @19 exception:13,
17 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,15 @24 exception:16,
19 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,19 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 8,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 8,26 @43 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 8 @46 exception:29,
32 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 3,30 @50 exception:31,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
42 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:41,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
10 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 8,3 @14 exception:9,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String; > 15,3 @24 exception:16,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@98 ,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @34 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @38 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @52 exception:20,
return 12,
18 = new <Application,Ljava/util/concurrent/atomic/AtomicReference>@28,
invokespecial < Application, Ljava/util/concurrent/atomic/AtomicReference, <init>(Ljava/lang/Object;)V > 18,17 @30 exception:19,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @33 exception:20,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
23 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 21,3,18 @37 exception:22,
monitorexit 6,
monitorexit 5,
return 17,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 42 @74 exception:52,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getPreviousName: "");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("", caller's uid "");
	int v6 = Binder.getCallingUid();
	StringBuilder v7 = v1.append(v6);
	StringBuilder v8 = v1.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v1.append(v9);
	String v11 = v1.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v16 = p0.getUserAccounts(v14);
	String v17 = p0.readPreviousNameInternal(v16, p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v17;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p2);
	AtomicReference v3 = new AtomicReference(v3);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v6 = v5.put(p2, v3);
	return v3;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
depth : 2
public String findDeAccountPreviousName(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return 0;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
","public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPreviousName: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	Object v14 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = AccountManagerService.getUserAccountsNotChecked(v15);
	AccountManagerService$UserAccounts v17 = v18;
	HashMap v20 = this.previousNameCache;
	Object v21 = v20.get(p1);
	SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabase();
	String v24 = new String(1);
	String v25 = new String(2);
	Cursor v26 = v23.query(""accounts"", v24, ""name=? AND type=?"", v25, 0, 0, 0);
	boolean v27 = v26.moveToNext();
	v26.close();
	String v22 = 0;
	AtomicReference v29 = new AtomicReference(v22);
	HashMap v31 = this.previousNameCache;
	Object v32 = v31.put(p1, v29);
	String v19 = v22;
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v19;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","2","6 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 3,4 @3 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
38 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,36 @55 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @58 exception:39,
42 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:41,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
10 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 8,3 @14 exception:9,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String; > 15,3 @24 exception:16,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@98 ,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @34 exception:16,
19 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 17 @38 exception:18,
conditional branch(eq, to iindex=-1) 19,12,
22 = invokeinterface < Application, Landroid/database/Cursor, getString(I)Ljava/lang/String; > 17,12 @44 exception:21,
invokeinterface < Application, Landroid/database/Cursor, close()V > 17 @48 exception:32,
return 22,
18 = new <Application,Ljava/util/concurrent/atomic/AtomicReference>@28,
invokespecial < Application, Ljava/util/concurrent/atomic/AtomicReference, <init>(Ljava/lang/Object;)V > 18,17 @30 exception:19,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @33 exception:20,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
23 = invokevirtual < Application, Ljava/util/HashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 21,3,18 @37 exception:22,
monitorexit 6,
monitorexit 5,
return 17,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 42 @74 exception:52,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	String v6 = p0.readPreviousNameInternal(v5, p1);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return v6;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p2);
	AtomicReference v3 = new AtomicReference(v3);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v6 = v5.put(p2, v3);
	return v3;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
depth : 2
public String findDeAccountPreviousName(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	String v4 = v2.getString(0);
	v2.close();
	return v4;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
","public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v5 = v6;
	HashMap v8 = this.previousNameCache;
	Object v9 = v8.get(p1);
	SQLiteDatabase v11 = this.mDeDatabase.getReadableDatabase();
	String v12 = new String(1);
	String v13 = new String(2);
	Cursor v14 = v11.query(""accounts"", v12, ""name=? AND type=?"", v13, 0, 0, 0);
	boolean v15 = v14.moveToNext();
	String v16 = v14.getString(0);
	v14.close();
	String v10 = v16;
	AtomicReference v18 = new AtomicReference(v10);
	HashMap v20 = this.previousNameCache;
	Object v21 = v20.put(p1, v18);
	String v7 = v10;
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return v7;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","0","8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,3 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,29 @48 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @51 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,33 @55 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @58 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,37 @62 exception:38,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @75 exception:54,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @79 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$15, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Ljava/lang/String;)V > 60,1,59,2,61,9,9,62,9,3,4 @105 exception:63,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @111 exception:70,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("", response "");
	StringBuilder v6 = v1.append(p1);
	StringBuilder v7 = v1.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v1.append(v8);
	StringBuilder v10 = v1.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v1.append(v11);
	String v13 = v1.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	boolean v15 = TextUtils.isEmpty(p3);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
	AccountManagerService$15 v18 = new AccountManagerService$15(p0,v18,p1,Account.type,0,0,Account.name,0,p2,p3);
	v18.bind();
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
","public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	int v9 = Binder.getCallingUid();
	StringBuilder v10 = v2.append(v9);
	StringBuilder v11 = v2.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v2.append(v12);
	String v14 = v2.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	boolean v16 = TextUtils.isEmpty(p3);
	int v17 = UserHandle.getCallingUserId();
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v17);
	AccountManagerService$15 v20 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","1","8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,3 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,29 @48 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @51 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,33 @55 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @58 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,37 @62 exception:38,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @75 exception:54,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @79 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$15, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Ljava/lang/String;)V > 60,1,59,2,61,9,9,62,9,3,4 @105 exception:63,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @111 exception:70,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("", response "");
	StringBuilder v6 = v1.append(p1);
	StringBuilder v7 = v1.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v1.append(v8);
	StringBuilder v10 = v1.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v1.append(v11);
	String v13 = v1.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	boolean v15 = TextUtils.isEmpty(p3);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
	AccountManagerService$15 v18 = new AccountManagerService$15(p0,v18,p1,Account.type,0,0,Account.name,0,p2,p3);
	v18.bind();
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	int v9 = Binder.getCallingUid();
	StringBuilder v10 = v2.append(v9);
	StringBuilder v11 = v2.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v2.append(v12);
	String v14 = v2.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	boolean v16 = TextUtils.isEmpty(p3);
	int v17 = UserHandle.getCallingUserId();
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);
	AccountManagerService$UserAccounts v19 = v20;
	AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
	boolean v24 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""initiating bind to authenticator type "");
	StringBuilder v28 = v25.append(this.mAccountType);
	String v29 = v25.toString();
	int v30 = Log.v(""AccountManagerService"", v29);
	boolean v31 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v32 = new StringBuilder();
	StringBuilder v34 = v32.append(""bind attempt failed for "");
	String v35 = AccountManagerService$Session.toDebugString();
	StringBuilder v36 = v32.append(v35);
	String v37 = v32.toString();
	int v38 = Log.d(""AccountManagerService"", v37);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","1","8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @75 exception:54,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @79 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$15, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Ljava/lang/String;)V > 60,1,59,2,61,9,9,62,9,3,4 @105 exception:63,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @111 exception:70,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = TextUtils.isEmpty(p3);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	AccountManagerService$15 v5 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3);
	v5.bind();
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = TextUtils.isEmpty(p3);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v5 = v6;
	AccountManagerService$15 v7 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3);
	boolean v10 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""initiating bind to authenticator type "");
	StringBuilder v14 = v11.append(this.mAccountType);
	String v15 = v11.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	boolean v17 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v18 = new StringBuilder();
	StringBuilder v20 = v18.append(""bind attempt failed for "");
	String v21 = AccountManagerService$Session.toDebugString();
	StringBuilder v22 = v18.append(v21);
	String v23 = v18.toString();
	int v24 = Log.d(""AccountManagerService"", v23);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,3 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,29 @48 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @51 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,33 @55 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @58 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,37 @62 exception:38,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @75 exception:54,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @79 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$15, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Ljava/lang/String;)V > 60,1,59,2,61,9,9,62,9,3,4 @105 exception:63,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @111 exception:70,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("", response "");
	StringBuilder v6 = v1.append(p1);
	StringBuilder v7 = v1.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v1.append(v8);
	StringBuilder v10 = v1.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v1.append(v11);
	String v13 = v1.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	boolean v15 = TextUtils.isEmpty(p3);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
	AccountManagerService$15 v18 = new AccountManagerService$15(p0,v18,p1,Account.type,0,0,Account.name,0,p2,p3);
	v18.bind();
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	int v9 = Binder.getCallingUid();
	StringBuilder v10 = v2.append(v9);
	StringBuilder v11 = v2.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v2.append(v12);
	String v14 = v2.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	boolean v16 = TextUtils.isEmpty(p3);
	int v17 = UserHandle.getCallingUserId();
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);
	AccountManagerService$UserAccounts v19 = v20;
	AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
	boolean v24 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""initiating bind to authenticator type "");
	StringBuilder v28 = v25.append(this.mAccountType);
	String v29 = v25.toString();
	int v30 = Log.v(""AccountManagerService"", v29);
	IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
	int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);
	int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v37 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v36);
	boolean v31 = 0;
	StringBuilder v45 = new StringBuilder();
	StringBuilder v47 = v45.append(""bind attempt failed for "");
	long v49 = SystemClock.elapsedRealtime();
	String v50 = AccountManagerService$Session.toDebugString(v49);
	String v48 = v50;
	StringBuilder v51 = v45.append(v48);
	String v52 = v45.toString();
	int v53 = Log.d(""AccountManagerService"", v52);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v55 = AccountManagerService$Session.getResponseAndClose();
	boolean v56 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v57 = new StringBuilder();
	Class v59 = AccountManagerService$Session.getClass();
	String v60 = v59.getSimpleName();
	StringBuilder v61 = v57.append(v60);
	StringBuilder v62 = v57.append("" calling onError() on response "");
	StringBuilder v63 = v57.append(v55);
	String v64 = v57.toString();
	int v65 = Log.v(""AccountManagerService"", v64);
	v55.onError(1, ""bind failure"");
	boolean v67 = Log.isLoggable(""AccountManagerService"", 2);
	int v68 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @15 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @20 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,3 @23 exception:15,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,17 @28 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 10,2 @31 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,22 @36 exception:23,
26 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @39 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,26 @43 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,29 @48 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @51 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,33 @55 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @58 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 5,37 @62 exception:38,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @75 exception:54,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @79 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$15, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Ljava/lang/String;)V > 60,1,59,2,61,9,9,62,9,3,4 @105 exception:63,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
107 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 15,14 @26 exception:106,
conditional branch(eq, to iindex=-1) 107,13,
108 = new <Application,Ljava/lang/StringBuilder>@32,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 108 @34 exception:109,
112 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,110 @40 exception:111,
114 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,2 @43 exception:113,
117 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,115 @48 exception:116,
119 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 108 @51 exception:118,
121 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 15,119 @55 exception:120,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @111 exception:70,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("", response "");
	StringBuilder v6 = v1.append(p1);
	StringBuilder v7 = v1.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v1.append(v8);
	StringBuilder v10 = v1.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v1.append(v11);
	String v13 = v1.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	boolean v15 = TextUtils.isEmpty(p3);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
	AccountManagerService$15 v18 = new AccountManagerService$15(p0,v18,p1,Account.type,0,0,Account.name,0,p2,p3);
	v18.bind();
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	boolean v5 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""there is no authenticator for "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", bailing out"");
	String v10 = v5.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	int v9 = Binder.getCallingUid();
	StringBuilder v10 = v2.append(v9);
	StringBuilder v11 = v2.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v2.append(v12);
	String v14 = v2.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	boolean v16 = TextUtils.isEmpty(p3);
	int v17 = UserHandle.getCallingUserId();
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);
	AccountManagerService$UserAccounts v19 = v20;
	AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
	boolean v24 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append(""initiating bind to authenticator type "");
	StringBuilder v28 = v25.append(this.mAccountType);
	String v29 = v25.toString();
	int v30 = Log.v(""AccountManagerService"", v29);
	IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
	int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);
	boolean v36 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v37 = new StringBuilder();
	StringBuilder v39 = v37.append(""there is no authenticator for "");
	StringBuilder v40 = v37.append(this.mAccountType);
	StringBuilder v41 = v37.append("", bailing out"");
	String v42 = v37.toString();
	int v43 = Log.v(""AccountManagerService"", v42);
	boolean v31 = 0;
	StringBuilder v44 = new StringBuilder();
	StringBuilder v46 = v44.append(""bind attempt failed for "");
	long v48 = SystemClock.elapsedRealtime();
	String v49 = AccountManagerService$Session.toDebugString(v48);
	String v47 = v49;
	StringBuilder v50 = v44.append(v47);
	String v51 = v44.toString();
	int v52 = Log.d(""AccountManagerService"", v51);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v54 = AccountManagerService$Session.getResponseAndClose();
	boolean v55 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v56 = new StringBuilder();
	Class v58 = AccountManagerService$Session.getClass();
	String v59 = v58.getSimpleName();
	StringBuilder v60 = v56.append(v59);
	StringBuilder v61 = v56.append("" calling onError() on response "");
	StringBuilder v62 = v56.append(v54);
	String v63 = v56.toString();
	int v64 = Log.v(""AccountManagerService"", v63);
	v54.onError(1, ""bind failure"");
	boolean v66 = Log.isLoggable(""AccountManagerService"", 2);
	int v67 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","8 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 5,6 @7 exception:7,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
55 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @75 exception:54,
57 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @79 exception:56,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$15, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZLandroid/accounts/Account;Ljava/lang/String;)V > 60,1,59,2,61,9,9,62,9,3,4 @105 exception:63,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 57 @111 exception:70,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = TextUtils.isEmpty(p3);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	AccountManagerService$15 v5 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3);
	v5.bind();
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = TextUtils.isEmpty(p3);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v5 = v6;
	AccountManagerService$15 v7 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3);
	boolean v10 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""initiating bind to authenticator type "");
	StringBuilder v14 = v11.append(this.mAccountType);
	String v15 = v11.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	IAccountAuthenticatorCache v18 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v19 = AuthenticatorDescription.newKey(this.mAccountType);
	int v20 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v21 = v18.getServiceInfo(v19, v20);
	int v22 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v23 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v22);
	boolean v17 = 0;
	StringBuilder v31 = new StringBuilder();
	StringBuilder v33 = v31.append(""bind attempt failed for "");
	long v35 = SystemClock.elapsedRealtime();
	String v36 = AccountManagerService$Session.toDebugString(v35);
	String v34 = v36;
	StringBuilder v37 = v31.append(v34);
	String v38 = v31.toString();
	int v39 = Log.d(""AccountManagerService"", v38);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v41 = AccountManagerService$Session.getResponseAndClose();
	boolean v42 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v43 = new StringBuilder();
	Class v45 = AccountManagerService$Session.getClass();
	String v46 = v45.getSimpleName();
	StringBuilder v47 = v43.append(v46);
	StringBuilder v48 = v43.append("" calling onError() on response "");
	StringBuilder v49 = v43.append(v41);
	String v50 = v43.toString();
	int v51 = Log.v(""AccountManagerService"", v50);
	v41.onError(1, ""bind failure"");
	boolean v53 = Log.isLoggable(""AccountManagerService"", 2);
	int v54 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","0","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @6 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @11 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @17 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@25,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,5 @43 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @48 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @51 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,33 @55 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @58 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,37 @62 exception:38,
46 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:45,
48 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @69 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
67 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 55 @102 exception:66,
69 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 67 @106 exception:68,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
monitorexit 65,
monitorexit 51,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 48 @140 exception:83,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""invalidateAuthToken: accountType "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v1);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v19 = p0.invalidateAuthTokenLocked(v17, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v22 = v19.iterator();
	boolean v23 = v22.hasNext();
	TokenCache v24 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v17);
	v24.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
","public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""invalidateAuthToken: accountType "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", caller's uid "");
	StringBuilder v10 = v5.append(v1);
	StringBuilder v11 = v5.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v5.append(v12);
	String v14 = v5.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v20 = p0.invalidateAuthTokenLocked(v18, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v23 = v20.iterator();
	boolean v24 = v23.hasNext();
	TokenCache v25 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
	v25.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @6 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @11 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @17 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@25,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,5 @43 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @48 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @51 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,33 @55 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @58 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,37 @62 exception:38,
46 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:45,
48 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @69 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
11 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 9 @11 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 9 @50 exception:33,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
67 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 55 @102 exception:66,
69 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 67 @106 exception:68,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
return,
monitorexit 65,
monitorexit 51,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 48 @140 exception:83,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""invalidateAuthToken: accountType "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v1);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v19 = p0.invalidateAuthTokenLocked(v17, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v22 = v19.iterator();
	boolean v23 = v22.hasNext();
	TokenCache v24 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v17);
	v24.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 1
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 1
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 1
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
","public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""invalidateAuthToken: accountType "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", caller's uid "");
	StringBuilder v10 = v5.append(v1);
	StringBuilder v11 = v5.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v5.append(v12);
	String v14 = v5.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v16);
	AccountManagerService$UserAccounts v18 = v19;
	SQLiteDatabase v21 = this.mDeDatabase.getWritableDatabase();
	v21.beginTransaction();
	ArrayList v24 = new ArrayList();
	Cursor v26 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p1, p2);
	boolean v27 = v26.moveToNext();
	v26.close();
	List v23 = v24;
	SQLiteDatabase v30 = this.mDeDatabase.getWritableDatabase();
	v30.setTransactionSuccessful();
	SQLiteDatabase v33 = this.mDeDatabase.getWritableDatabase();
	v33.endTransaction();
	Iterator v35 = v23.iterator();
	boolean v36 = v35.hasNext();
	TokenCache v37 = this.accountTokenCaches;
	this.mCachedTokens.evict(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @6 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @11 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @17 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
46 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:45,
48 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @69 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
11 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 9 @11 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 9 @50 exception:33,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
67 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 55 @102 exception:66,
69 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 67 @106 exception:68,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
return,
monitorexit 65,
monitorexit 51,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 48 @140 exception:83,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	int v5 = UserHandle.getCallingUserId();
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v5);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v9 = p0.invalidateAuthTokenLocked(v7, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v12 = v9.iterator();
	boolean v13 = v12.hasNext();
	TokenCache v14 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v7);
	v14.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 1
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 1
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 1
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
","public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	int v5 = UserHandle.getCallingUserId();
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(v5);
	AccountManagerService$UserAccounts v7 = v8;
	SQLiteDatabase v10 = this.mDeDatabase.getWritableDatabase();
	v10.beginTransaction();
	ArrayList v13 = new ArrayList();
	Cursor v15 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p1, p2);
	boolean v16 = v15.moveToNext();
	v15.close();
	List v12 = v13;
	SQLiteDatabase v19 = this.mDeDatabase.getWritableDatabase();
	v19.setTransactionSuccessful();
	SQLiteDatabase v22 = this.mDeDatabase.getWritableDatabase();
	v22.endTransaction();
	Iterator v24 = v12.iterator();
	boolean v25 = v24.hasNext();
	TokenCache v26 = this.accountTokenCaches;
	this.mCachedTokens.evict(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @6 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @11 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @17 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@25,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,5 @43 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @48 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @51 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,33 @55 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @58 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,37 @62 exception:38,
46 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:45,
48 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @69 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 3,
arraystore 8[10] = 2,
13 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, rawQuery(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor; > 6,11,8 @17 exception:12,
return 13,
11 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 9 @11 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 9 @50 exception:33,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
67 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 55 @102 exception:66,
69 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 67 @106 exception:68,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, mTokenEvictors, <Application,Ljava/util/HashMap> > 1,
5 = new <Application,Landroid/util/Pair>@2,
invokespecial < Application, Landroid/util/Pair, <init>(Ljava/lang/Object;Ljava/lang/Object;)V > 5,2,3 @4 exception:6,
8 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 4,5 @7 exception:7,
9 = checkcast <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>8 <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>,
conditional branch(eq, to iindex=-1) 9,10,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor, evict()V > 9 @15 exception:11,
return,
return,
monitorexit 65,
monitorexit 51,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 48 @140 exception:83,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""invalidateAuthToken: accountType "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v1);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v19 = p0.invalidateAuthTokenLocked(v17, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v22 = v19.iterator();
	boolean v23 = v22.hasNext();
	TokenCache v24 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v17);
	v24.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 2
public Cursor findAuthtokenForAllAccounts(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	Cursor v2 = v1.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v1);
	return v2;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
depth : 2
public void evict(String p1, String p2){
	Pair v0 = new Pair(p1,p2);
	Object v2 = this.mTokenEvictors.get(v0);
	v2.evict();
	return;
}
-----
","public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""invalidateAuthToken: accountType "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", caller's uid "");
	StringBuilder v10 = v5.append(v1);
	StringBuilder v11 = v5.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v5.append(v12);
	String v14 = v5.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v16);
	AccountManagerService$UserAccounts v18 = v19;
	SQLiteDatabase v21 = this.mDeDatabase.getWritableDatabase();
	v21.beginTransaction();
	ArrayList v24 = new ArrayList();
	SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v28 = new String(2);
	Cursor v29 = v27.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v28);
	Cursor v26 = v29;
	boolean v30 = v26.moveToNext();
	v26.close();
	List v23 = v24;
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v34 = v23.iterator();
	boolean v35 = v34.hasNext();
	TokenCache v36 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
	Pair v39 = new Pair(p1,p2);
	Object v41 = this.mTokenEvictors.get(v39);
	v41.evict();
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @6 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @11 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @17 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@25,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @27 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @32 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,2 @35 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @40 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,5 @43 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @48 exception:30,
33 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @51 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,33 @55 exception:34,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @58 exception:36,
39 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,37 @62 exception:38,
46 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:45,
48 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @69 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 3,
arraystore 8[10] = 2,
13 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, rawQuery(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor; > 6,11,8 @17 exception:12,
return 13,
11 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 9 @11 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 9 @50 exception:33,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
67 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 55 @102 exception:66,
69 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 67 @106 exception:68,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, mTokenEvictors, <Application,Ljava/util/HashMap> > 1,
5 = new <Application,Landroid/util/Pair>@2,
invokespecial < Application, Landroid/util/Pair, <init>(Ljava/lang/Object;Ljava/lang/Object;)V > 5,2,3 @4 exception:6,
8 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 4,5 @7 exception:7,
9 = checkcast <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>8 <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>,
conditional branch(eq, to iindex=-1) 9,10,
return,
return,
monitorexit 65,
monitorexit 51,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 48 @140 exception:83,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""invalidateAuthToken: accountType "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v1);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v19 = p0.invalidateAuthTokenLocked(v17, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v22 = v19.iterator();
	boolean v23 = v22.hasNext();
	TokenCache v24 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v17);
	v24.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 2
public Cursor findAuthtokenForAllAccounts(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	Cursor v2 = v1.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v1);
	return v2;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
depth : 2
public void evict(String p1, String p2){
	Pair v0 = new Pair(p1,p2);
	Object v2 = this.mTokenEvictors.get(v0);
	return;
}
-----
","public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""invalidateAuthToken: accountType "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", caller's uid "");
	StringBuilder v10 = v5.append(v1);
	StringBuilder v11 = v5.append("", pid "");
	int v12 = Binder.getCallingPid();
	StringBuilder v13 = v5.append(v12);
	String v14 = v5.toString();
	int v15 = Log.v(""AccountManagerService"", v14);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v16);
	AccountManagerService$UserAccounts v18 = v19;
	SQLiteDatabase v21 = this.mDeDatabase.getWritableDatabase();
	v21.beginTransaction();
	ArrayList v24 = new ArrayList();
	SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v28 = new String(2);
	Cursor v29 = v27.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v28);
	Cursor v26 = v29;
	boolean v30 = v26.moveToNext();
	v26.close();
	List v23 = v24;
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v34 = v23.iterator();
	boolean v35 = v34.hasNext();
	TokenCache v36 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
	Pair v39 = new Pair(p1,p2);
	Object v41 = this.mTokenEvictors.get(v39);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
8 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,6 @6 exception:7,
11 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,9 @11 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @17 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
46 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:45,
48 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @69 exception:47,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
invokespecial < Application, Ljava/util/ArrayList, <init>()V > 5 @2 exception:6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper, getReadableDatabaseUserIsUnlocked()Landroid/database/sqlite/SQLiteDatabase; > 4 @2 exception:5,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 3,
arraystore 8[10] = 2,
13 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, rawQuery(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor; > 6,11,8 @17 exception:12,
return 13,
11 = invokeinterface < Application, Landroid/database/Cursor, moveToNext()Z > 9 @11 exception:10,
conditional branch(eq, to iindex=-1) 11,12,
invokeinterface < Application, Landroid/database/Cursor, close()V > 9 @50 exception:33,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
67 = invokeinterface < Application, Ljava/util/List, iterator()Ljava/util/Iterator; > 55 @102 exception:66,
69 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 67 @106 exception:68,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, mTokenEvictors, <Application,Ljava/util/HashMap> > 1,
5 = new <Application,Landroid/util/Pair>@2,
invokespecial < Application, Landroid/util/Pair, <init>(Ljava/lang/Object;Ljava/lang/Object;)V > 5,2,3 @4 exception:6,
8 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 4,5 @7 exception:7,
9 = checkcast <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>8 <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>,
conditional branch(eq, to iindex=-1) 9,10,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor, evict()V > 9 @15 exception:11,
return,
return,
monitorexit 65,
monitorexit 51,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 48 @140 exception:83,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	int v5 = UserHandle.getCallingUserId();
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v5);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v9 = p0.invalidateAuthTokenLocked(v7, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v12 = v9.iterator();
	boolean v13 = v12.hasNext();
	TokenCache v14 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v7);
	v14.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 2
public Cursor findAuthtokenForAllAccounts(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	Cursor v2 = v1.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v1);
	return v2;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
depth : 2
public void evict(String p1, String p2){
	Pair v0 = new Pair(p1,p2);
	Object v2 = this.mTokenEvictors.get(v0);
	v2.evict();
	return;
}
-----
","public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	int v5 = UserHandle.getCallingUserId();
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(v5);
	AccountManagerService$UserAccounts v7 = v8;
	SQLiteDatabase v10 = this.mDeDatabase.getWritableDatabase();
	v10.beginTransaction();
	ArrayList v13 = new ArrayList();
	SQLiteDatabase v16 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v17 = new String(2);
	Cursor v18 = v16.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v17);
	Cursor v15 = v18;
	boolean v19 = v15.moveToNext();
	v15.close();
	List v12 = v13;
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v23 = v12.iterator();
	boolean v24 = v23.hasNext();
	TokenCache v25 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v7);
	Pair v28 = new Pair(p1,p2);
	Object v30 = this.mTokenEvictors.get(v28);
	v30.evict();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","0","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @11 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @14 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @34 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,3 @37 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,2 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 17,5 @55 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,34 @60 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,11 @63 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,39 @68 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @71 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,43 @75 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @78 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,47 @82 exception:48,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
74 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @98 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$12, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Landroid/os/Bundle;)V > 77,1,76,2,78,5,7,79,7,7,3,4 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 74 @137 exception:93,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
","public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""confirmCredentials: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", expectActivityLaunch "");
	StringBuilder v11 = v4.append(p4);
	StringBuilder v12 = v4.append("", caller's uid "");
	StringBuilder v13 = v4.append(v2);
	StringBuilder v14 = v4.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v4.append(v15);
	String v17 = v4.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	boolean v19 = p0.isCrossUser(v2, p5);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(p5);
	AccountManagerService$12 v22 = new AccountManagerService$12(p0,v21,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v22.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","1","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @11 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @14 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @34 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,3 @37 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,2 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 17,5 @55 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,34 @60 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,11 @63 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,39 @68 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @71 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,43 @75 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @78 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,47 @82 exception:48,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
74 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @98 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$12, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Landroid/os/Bundle;)V > 77,1,76,2,78,5,7,79,7,7,3,4 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 74 @137 exception:93,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""confirmCredentials: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", expectActivityLaunch "");
	StringBuilder v11 = v4.append(p4);
	StringBuilder v12 = v4.append("", caller's uid "");
	StringBuilder v13 = v4.append(v2);
	StringBuilder v14 = v4.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v4.append(v15);
	String v17 = v4.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	boolean v19 = phiInstruction;
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
	AccountManagerService$UserAccounts v23 = v24;
	AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""initiating bind to authenticator type "");
	StringBuilder v32 = v29.append(this.mAccountType);
	String v33 = v29.toString();
	int v34 = Log.v(""AccountManagerService"", v33);
	boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v36 = new StringBuilder();
	StringBuilder v38 = v36.append(""bind attempt failed for "");
	String v39 = AccountManagerService$Session.toDebugString();
	StringBuilder v40 = v36.append(v39);
	String v41 = v36.toString();
	int v42 = Log.d(""AccountManagerService"", v41);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","1","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @11 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @14 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @34 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,3 @37 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,2 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 17,5 @55 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,34 @60 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,11 @63 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,39 @68 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @71 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,43 @75 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @78 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,47 @82 exception:48,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
74 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @98 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$12, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Landroid/os/Bundle;)V > 77,1,76,2,78,5,7,79,7,7,3,4 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 74 @137 exception:93,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""confirmCredentials: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", expectActivityLaunch "");
	StringBuilder v11 = v4.append(p4);
	StringBuilder v12 = v4.append("", caller's uid "");
	StringBuilder v13 = v4.append(v2);
	StringBuilder v14 = v4.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v4.append(v15);
	String v17 = v4.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	boolean v19 = phiInstruction;
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
	AccountManagerService$UserAccounts v23 = v24;
	AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""initiating bind to authenticator type "");
	StringBuilder v32 = v29.append(this.mAccountType);
	String v33 = v29.toString();
	int v34 = Log.v(""AccountManagerService"", v33);
	boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v36 = new StringBuilder();
	StringBuilder v38 = v36.append(""bind attempt failed for "");
	String v39 = AccountManagerService$Session.toDebugString();
	StringBuilder v40 = v36.append(v39);
	String v41 = v36.toString();
	int v42 = Log.d(""AccountManagerService"", v41);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @11 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @14 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @34 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,3 @37 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,2 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 17,5 @55 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,34 @60 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,11 @63 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,39 @68 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @71 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,43 @75 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @78 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,47 @82 exception:48,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
74 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @98 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$12, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Landroid/os/Bundle;)V > 77,1,76,2,78,5,7,79,7,7,3,4 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 74 @137 exception:93,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""confirmCredentials: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", expectActivityLaunch "");
	StringBuilder v11 = v4.append(p4);
	StringBuilder v12 = v4.append("", caller's uid "");
	StringBuilder v13 = v4.append(v2);
	StringBuilder v14 = v4.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v4.append(v15);
	String v17 = v4.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	boolean v19 = phiInstruction;
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
	AccountManagerService$UserAccounts v23 = v24;
	AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""initiating bind to authenticator type "");
	StringBuilder v32 = v29.append(this.mAccountType);
	String v33 = v29.toString();
	int v34 = Log.v(""AccountManagerService"", v33);
	IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
	int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
	int v40 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v41 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v40);
	boolean v35 = 0;
	StringBuilder v49 = new StringBuilder();
	StringBuilder v51 = v49.append(""bind attempt failed for "");
	long v53 = SystemClock.elapsedRealtime();
	String v54 = AccountManagerService$Session.toDebugString(v53);
	String v52 = v54;
	StringBuilder v55 = v49.append(v52);
	String v56 = v49.toString();
	int v57 = Log.d(""AccountManagerService"", v56);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
	boolean v60 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v61 = new StringBuilder();
	Class v63 = AccountManagerService$Session.getClass();
	String v64 = v63.getSimpleName();
	StringBuilder v65 = v61.append(v64);
	StringBuilder v66 = v61.append("" calling onError() on response "");
	StringBuilder v67 = v61.append(v59);
	String v68 = v61.toString();
	int v69 = Log.v(""AccountManagerService"", v68);
	v59.onError(1, ""bind failure"");
	boolean v71 = Log.isLoggable(""AccountManagerService"", 2);
	int v72 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @11 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @14 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @34 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,3 @37 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,2 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 17,5 @55 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,34 @60 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,11 @63 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,39 @68 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @71 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,43 @75 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @78 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,47 @82 exception:48,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
74 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @98 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$12, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Landroid/os/Bundle;)V > 77,1,76,2,78,5,7,79,7,7,3,4 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 74 @137 exception:93,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""confirmCredentials: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", expectActivityLaunch "");
	StringBuilder v11 = v4.append(p4);
	StringBuilder v12 = v4.append("", caller's uid "");
	StringBuilder v13 = v4.append(v2);
	StringBuilder v14 = v4.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v4.append(v15);
	String v17 = v4.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	boolean v19 = phiInstruction;
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
	AccountManagerService$UserAccounts v23 = v24;
	AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""initiating bind to authenticator type "");
	StringBuilder v32 = v29.append(this.mAccountType);
	String v33 = v29.toString();
	int v34 = Log.v(""AccountManagerService"", v33);
	IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
	int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
	int v40 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v41 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v40);
	boolean v35 = 0;
	StringBuilder v49 = new StringBuilder();
	StringBuilder v51 = v49.append(""bind attempt failed for "");
	long v53 = SystemClock.elapsedRealtime();
	String v54 = AccountManagerService$Session.toDebugString(v53);
	String v52 = v54;
	StringBuilder v55 = v49.append(v52);
	String v56 = v49.toString();
	int v57 = Log.d(""AccountManagerService"", v56);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
	boolean v60 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v61 = new StringBuilder();
	Class v63 = AccountManagerService$Session.getClass();
	String v64 = v63.getSimpleName();
	StringBuilder v65 = v61.append(v64);
	StringBuilder v66 = v61.append("" calling onError() on response "");
	StringBuilder v67 = v61.append(v59);
	String v68 = v61.toString();
	int v69 = Log.v(""AccountManagerService"", v68);
	v59.onError(1, ""bind failure"");
	boolean v71 = Log.isLoggable(""AccountManagerService"", 2);
	int v72 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","2","9 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 4,7 @11 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @14 exception:10,
15 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 12,13 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 17 @29 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,19 @34 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,3 @37 exception:22,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,24 @42 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 17,2 @45 exception:27,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,29 @50 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 17,5 @55 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,34 @60 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,11 @63 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 17,39 @68 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @71 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 17,43 @75 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 17 @78 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 12,47 @82 exception:48,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
74 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @98 exception:73,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$12, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLandroid/accounts/Account;Landroid/os/Bundle;)V > 77,1,76,2,78,5,7,79,7,7,3,4 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
107 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 15,14 @26 exception:106,
conditional branch(eq, to iindex=-1) 107,13,
108 = new <Application,Ljava/lang/StringBuilder>@32,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 108 @34 exception:109,
112 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,110 @40 exception:111,
114 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,2 @43 exception:113,
117 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 108,115 @48 exception:116,
119 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 108 @51 exception:118,
121 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 15,119 @55 exception:120,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 74 @137 exception:93,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	boolean v5 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""there is no authenticator for "");
	StringBuilder v8 = v5.append(p1);
	StringBuilder v9 = v5.append("", bailing out"");
	String v10 = v5.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""confirmCredentials: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", expectActivityLaunch "");
	StringBuilder v11 = v4.append(p4);
	StringBuilder v12 = v4.append("", caller's uid "");
	StringBuilder v13 = v4.append(v2);
	StringBuilder v14 = v4.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v4.append(v15);
	String v17 = v4.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	boolean v19 = phiInstruction;
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
	AccountManagerService$UserAccounts v23 = v24;
	AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""initiating bind to authenticator type "");
	StringBuilder v32 = v29.append(this.mAccountType);
	String v33 = v29.toString();
	int v34 = Log.v(""AccountManagerService"", v33);
	IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
	int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
	boolean v40 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v41 = new StringBuilder();
	StringBuilder v43 = v41.append(""there is no authenticator for "");
	StringBuilder v44 = v41.append(this.mAccountType);
	StringBuilder v45 = v41.append("", bailing out"");
	String v46 = v41.toString();
	int v47 = Log.v(""AccountManagerService"", v46);
	boolean v35 = 0;
	StringBuilder v48 = new StringBuilder();
	StringBuilder v50 = v48.append(""bind attempt failed for "");
	long v52 = SystemClock.elapsedRealtime();
	String v53 = AccountManagerService$Session.toDebugString(v52);
	String v51 = v53;
	StringBuilder v54 = v48.append(v51);
	String v55 = v48.toString();
	int v56 = Log.d(""AccountManagerService"", v55);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v58 = AccountManagerService$Session.getResponseAndClose();
	boolean v59 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v60 = new StringBuilder();
	Class v62 = AccountManagerService$Session.getClass();
	String v63 = v62.getSimpleName();
	StringBuilder v64 = v60.append(v63);
	StringBuilder v65 = v60.append("" calling onError() on response "");
	StringBuilder v66 = v60.append(v58);
	String v67 = v60.toString();
	int v68 = Log.v(""AccountManagerService"", v67);
	v58.onError(1, ""bind failure"");
	boolean v70 = Log.isLoggable(""AccountManagerService"", 2);
	int v71 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","0","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 3,8 @13 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @16 exception:11,
16 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,14 @23 exception:15,
conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 18,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 18,4 @49 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,30 @54 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,12 @57 exception:33,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,35 @62 exception:36,
39 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,39 @69 exception:40,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,42 @74 exception:43,
46 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @77 exception:45,
48 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,46 @81 exception:47,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,49 @86 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,6 @89 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 18 @92 exception:54,
57 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @96 exception:56,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 61,62 @111 exception:63,
conditional branch(eq, to iindex=-1) 3,17,
65 = invokevirtual < Application, Landroid/os/Bundle, size()I > 3 @116 exception:64,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
conditional branch(ne, to iindex=-1) 87,17,
89 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @145 exception:88,
92 = invokestatic < Application, Lcom/android/server/accounts/CryptoHelper, getInstance()Lcom/android/server/accounts/CryptoHelper; > @151 exception:91,
94 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, decryptBundle(Landroid/os/Bundle;)Landroid/os/Bundle; > 92,3 @155 exception:93,
98 = getCaughtException ,
101 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,99 @263 exception:100,
conditional branch(eq, to iindex=-1) 101,17,
104 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 13,102,98 @271 exception:103,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,90,7 @274 exception:108,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	int v25 = Binder.getCallingPid();
	CryptoHelper v26 = CryptoHelper.getInstance();
	Bundle v27 = v26.decryptBundle(p2);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 3);
	int v29 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p0.sendErrorResponse(p1, 8, ""failed to decrypt session bundle"");
	return;
}
-----
","public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""finishSession: response "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", expectActivityLaunch "");
	StringBuilder v9 = v4.append(p3);
	StringBuilder v10 = v4.append("", caller's uid "");
	StringBuilder v11 = v4.append(v2);
	StringBuilder v12 = v4.append("", caller's user id "");
	int v13 = UserHandle.getCallingUserId();
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	StringBuilder v18 = v4.append("", for user id "");
	StringBuilder v19 = v4.append(p5);
	String v20 = v4.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = p2.size();
	boolean v24 = p0.isCrossUser(v2, p5);
	boolean v25 = p0.canUserModifyAccounts(p5, v2);
	int v26 = Binder.getCallingPid();
	CryptoHelper v27 = CryptoHelper.getInstance();
	Bundle v28 = v27.decryptBundle(p2);
	boolean v29 = Log.isLoggable(""AccountManagerService"", 3);
	int v30 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p0.sendErrorResponse(p1, 8, ""failed to decrypt session bundle"");
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","1","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 3,8 @13 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @16 exception:11,
16 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,14 @23 exception:15,
conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 18,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 18,4 @49 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,30 @54 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,12 @57 exception:33,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,35 @62 exception:36,
39 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,39 @69 exception:40,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,42 @74 exception:43,
46 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @77 exception:45,
48 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,46 @81 exception:47,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,49 @86 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,6 @89 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 18 @92 exception:54,
57 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @96 exception:56,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 61,62 @111 exception:63,
conditional branch(eq, to iindex=-1) 3,17,
65 = invokevirtual < Application, Landroid/os/Bundle, size()I > 3 @116 exception:64,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 87,17,
89 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @145 exception:88,
92 = invokestatic < Application, Lcom/android/server/accounts/CryptoHelper, getInstance()Lcom/android/server/accounts/CryptoHelper; > @151 exception:91,
1 = load_metadata: <Application,Lcom/android/server/accounts/CryptoHelper>, <Primordial,Ljava/lang/Class>,
monitorenter 1,
2 = getstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> >,
conditional branch(ne, to iindex=-1) 2,3,
4 = new <Application,Lcom/android/server/accounts/CryptoHelper>@7,
invokespecial < Application, Lcom/android/server/accounts/CryptoHelper, <init>()V > 4 @9 exception:5,
putstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> > = 4,
7 = getstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> >,
monitorexit 1,
return 7,
94 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, decryptBundle(Landroid/os/Bundle;)Landroid/os/Bundle; > 92,3 @155 exception:93,
5 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,3 @2 exception:4,
8 = invokevirtual < Application, Landroid/os/Bundle, getByteArray(Ljava/lang/String;)[B > 2,6 @7 exception:7,
11 = invokevirtual < Application, Landroid/os/Bundle, getByteArray(Ljava/lang/String;)[B > 2,9 @13 exception:10,
14 = invokevirtual < Application, Landroid/os/Bundle, getByteArray(Ljava/lang/String;)[B > 2,12 @20 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, verifyMac([B[B[B)Z > 1,11,8,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
18 = new <Application,Ljavax/crypto/spec/IvParameterSpec>@39,
invokespecial < Application, Ljavax/crypto/spec/IvParameterSpec, <init>([B)V > 18,8 @41 exception:19,
22 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 20 @46 exception:21,
24 = getfield < Application, Lcom/android/server/accounts/CryptoHelper, mEncryptionKey, <Application,Ljavax/crypto/SecretKey> > 1,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 22,23,24,18 @53 exception:25,
27 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 22,11 @56 exception:26,
29 = invokestatic < Application, Landroid/os/Parcel, obtain()Landroid/os/Parcel; > @60 exception:28,
30 = arraylength 27,
invokevirtual < Application, Landroid/os/Parcel, unmarshall([BII)V > 29,27,17,30 @66 exception:31,
invokevirtual < Application, Landroid/os/Parcel, setDataPosition(I)V > 29,17 @69 exception:32,
33 = new <Application,Landroid/os/Bundle>@72,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 33 @74 exception:34,
invokevirtual < Application, Landroid/os/Bundle, readFromParcel(Landroid/os/Parcel;)V > 33,29 @77 exception:35,
invokevirtual < Application, Landroid/os/Parcel, recycle()V > 29 @80 exception:36,
return 33,
98 = getCaughtException ,
101 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,99 @263 exception:100,
conditional branch(eq, to iindex=-1) 101,17,
104 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 13,102,98 @271 exception:103,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,90,7 @274 exception:108,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,3,4 @0 exception:5,
6 = getCaughtException ,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 8,7 @8 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
14 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 8,12,6 @16 exception:13,
return,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	int v25 = Binder.getCallingPid();
	CryptoHelper v26 = CryptoHelper.getInstance();
	Bundle v27 = v26.decryptBundle(p2);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 3);
	int v29 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p0.sendErrorResponse(p1, 8, ""failed to decrypt session bundle"");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public CryptoHelper getInstance(){
	CryptoHelper v0 = new CryptoHelper();
	this.sInstance = v0;
	return this.sInstance;
}
-----
depth : 1
public Bundle decryptBundle(Bundle p1){
	Object v1 = Objects.requireNonNull(p1, ""Cannot decrypt null bundle."");
	byte[] v2 = p1.getByteArray(""iv"");
	byte[] v3 = p1.getByteArray(""cipher"");
	byte[] v4 = p1.getByteArray(""mac"");
	boolean v5 = p0.verifyMac(v3, v2, v4);
	IvParameterSpec v5 = new IvParameterSpec(v2);
	Cipher v7 = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
	v7.init(2, this.mEncryptionKey, v5);
	byte[] v9 = v7.doFinal(v3);
	Parcel v10 = Parcel.obtain();
	v10.unmarshall(v9, 0, v9.length);
	v10.setDataPosition(0);
	Bundle v12 = new Bundle();
	v12.readFromParcel(v10);
	v10.recycle();
	return v12;
}
-----
depth : 1
public void sendErrorResponse(IAccountManagerResponse p1, int p2, String p3){
	p1.onError(p2, p3);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""finishSession: response "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", expectActivityLaunch "");
	StringBuilder v9 = v4.append(p3);
	StringBuilder v10 = v4.append("", caller's uid "");
	StringBuilder v11 = v4.append(v2);
	StringBuilder v12 = v4.append("", caller's user id "");
	int v13 = UserHandle.getCallingUserId();
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	StringBuilder v18 = v4.append("", for user id "");
	StringBuilder v19 = v4.append(p5);
	String v20 = v4.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = p2.size();
	boolean v24 = phiInstruction;
	boolean v28 = AccountManagerService.isProfileOwner(v2);
	UserManager v29 = AccountManagerService.getUserManager();
	UserHandle v30 = new UserHandle(p5);
	Bundle v32 = v29.getUserRestrictions(v30);
	boolean v33 = v32.getBoolean(""no_modify_accounts"");
	boolean v27 = 0;
	int v34 = Binder.getCallingPid();
	CryptoHelper v36 = new CryptoHelper();
	this.sInstance = v36;
	CryptoHelper v35 = this.sInstance;
	Object v39 = Objects.requireNonNull(p2, ""Cannot decrypt null bundle."");
	byte[] v40 = p2.getByteArray(""iv"");
	byte[] v41 = p2.getByteArray(""cipher"");
	byte[] v42 = p2.getByteArray(""mac"");
	boolean v43 = CryptoHelper.verifyMac(v41, v40, v42);
	IvParameterSpec v44 = new IvParameterSpec(v40);
	Cipher v46 = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
	v46.init(2, this.mEncryptionKey, v44);
	byte[] v48 = v46.doFinal(v41);
	Parcel v49 = Parcel.obtain();
	v49.unmarshall(v48, 0, v48.length);
	v49.setDataPosition(0);
	Bundle v52 = new Bundle();
	v52.readFromParcel(v49);
	v49.recycle();
	Bundle v38 = v52;
	boolean v56 = Log.isLoggable(""AccountManagerService"", 3);
	int v57 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p1.onError(8, ""failed to decrypt session bundle"");
	boolean v60 = Log.isLoggable(""AccountManagerService"", 2);
	int v61 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","1","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 3,8 @13 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @16 exception:11,
16 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,14 @23 exception:15,
conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 18,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 18,4 @49 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,30 @54 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,12 @57 exception:33,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,35 @62 exception:36,
39 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,39 @69 exception:40,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,42 @74 exception:43,
46 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @77 exception:45,
48 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,46 @81 exception:47,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,49 @86 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,6 @89 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 18 @92 exception:54,
57 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @96 exception:56,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 61,62 @111 exception:63,
conditional branch(eq, to iindex=-1) 3,17,
65 = invokevirtual < Application, Landroid/os/Bundle, size()I > 3 @116 exception:64,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 87,17,
89 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @145 exception:88,
92 = invokestatic < Application, Lcom/android/server/accounts/CryptoHelper, getInstance()Lcom/android/server/accounts/CryptoHelper; > @151 exception:91,
1 = load_metadata: <Application,Lcom/android/server/accounts/CryptoHelper>, <Primordial,Ljava/lang/Class>,
monitorenter 1,
2 = getstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> >,
conditional branch(ne, to iindex=-1) 2,3,
4 = new <Application,Lcom/android/server/accounts/CryptoHelper>@7,
invokespecial < Application, Lcom/android/server/accounts/CryptoHelper, <init>()V > 4 @9 exception:5,
putstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> > = 4,
7 = getstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> >,
monitorexit 1,
return 7,
94 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, decryptBundle(Landroid/os/Bundle;)Landroid/os/Bundle; > 92,3 @155 exception:93,
5 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,3 @2 exception:4,
8 = invokevirtual < Application, Landroid/os/Bundle, getByteArray(Ljava/lang/String;)[B > 2,6 @7 exception:7,
11 = invokevirtual < Application, Landroid/os/Bundle, getByteArray(Ljava/lang/String;)[B > 2,9 @13 exception:10,
14 = invokevirtual < Application, Landroid/os/Bundle, getByteArray(Ljava/lang/String;)[B > 2,12 @20 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, verifyMac([B[B[B)Z > 1,11,8,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
18 = new <Application,Ljavax/crypto/spec/IvParameterSpec>@39,
invokespecial < Application, Ljavax/crypto/spec/IvParameterSpec, <init>([B)V > 18,8 @41 exception:19,
22 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 20 @46 exception:21,
24 = getfield < Application, Lcom/android/server/accounts/CryptoHelper, mEncryptionKey, <Application,Ljavax/crypto/SecretKey> > 1,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 22,23,24,18 @53 exception:25,
27 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 22,11 @56 exception:26,
29 = invokestatic < Application, Landroid/os/Parcel, obtain()Landroid/os/Parcel; > @60 exception:28,
30 = arraylength 27,
invokevirtual < Application, Landroid/os/Parcel, unmarshall([BII)V > 29,27,17,30 @66 exception:31,
invokevirtual < Application, Landroid/os/Parcel, setDataPosition(I)V > 29,17 @69 exception:32,
33 = new <Application,Landroid/os/Bundle>@72,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 33 @74 exception:34,
invokevirtual < Application, Landroid/os/Bundle, readFromParcel(Landroid/os/Parcel;)V > 33,29 @77 exception:35,
invokevirtual < Application, Landroid/os/Parcel, recycle()V > 29 @80 exception:36,
return 33,
98 = getCaughtException ,
101 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,99 @263 exception:100,
conditional branch(eq, to iindex=-1) 101,17,
104 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 13,102,98 @271 exception:103,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,90,7 @274 exception:108,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,3,4 @0 exception:5,
6 = getCaughtException ,
10 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 8,7 @8 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
14 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 8,12,6 @16 exception:13,
return,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	int v25 = Binder.getCallingPid();
	CryptoHelper v26 = CryptoHelper.getInstance();
	Bundle v27 = v26.decryptBundle(p2);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 3);
	int v29 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p0.sendErrorResponse(p1, 8, ""failed to decrypt session bundle"");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public CryptoHelper getInstance(){
	CryptoHelper v0 = new CryptoHelper();
	this.sInstance = v0;
	return this.sInstance;
}
-----
depth : 1
public Bundle decryptBundle(Bundle p1){
	Object v1 = Objects.requireNonNull(p1, ""Cannot decrypt null bundle."");
	byte[] v2 = p1.getByteArray(""iv"");
	byte[] v3 = p1.getByteArray(""cipher"");
	byte[] v4 = p1.getByteArray(""mac"");
	boolean v5 = p0.verifyMac(v3, v2, v4);
	IvParameterSpec v5 = new IvParameterSpec(v2);
	Cipher v7 = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
	v7.init(2, this.mEncryptionKey, v5);
	byte[] v9 = v7.doFinal(v3);
	Parcel v10 = Parcel.obtain();
	v10.unmarshall(v9, 0, v9.length);
	v10.setDataPosition(0);
	Bundle v12 = new Bundle();
	v12.readFromParcel(v10);
	v10.recycle();
	return v12;
}
-----
depth : 1
public void sendErrorResponse(IAccountManagerResponse p1, int p2, String p3){
	p1.onError(p2, p3);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""finishSession: response "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", expectActivityLaunch "");
	StringBuilder v9 = v4.append(p3);
	StringBuilder v10 = v4.append("", caller's uid "");
	StringBuilder v11 = v4.append(v2);
	StringBuilder v12 = v4.append("", caller's user id "");
	int v13 = UserHandle.getCallingUserId();
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	StringBuilder v18 = v4.append("", for user id "");
	StringBuilder v19 = v4.append(p5);
	String v20 = v4.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = p2.size();
	boolean v24 = phiInstruction;
	boolean v28 = AccountManagerService.isProfileOwner(v2);
	UserManager v29 = AccountManagerService.getUserManager();
	UserHandle v30 = new UserHandle(p5);
	Bundle v32 = v29.getUserRestrictions(v30);
	boolean v33 = v32.getBoolean(""no_modify_accounts"");
	boolean v27 = 0;
	int v34 = Binder.getCallingPid();
	CryptoHelper v36 = new CryptoHelper();
	this.sInstance = v36;
	CryptoHelper v35 = this.sInstance;
	Object v39 = Objects.requireNonNull(p2, ""Cannot decrypt null bundle."");
	byte[] v40 = p2.getByteArray(""iv"");
	byte[] v41 = p2.getByteArray(""cipher"");
	byte[] v42 = p2.getByteArray(""mac"");
	boolean v43 = CryptoHelper.verifyMac(v41, v40, v42);
	IvParameterSpec v44 = new IvParameterSpec(v40);
	Cipher v46 = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
	v46.init(2, this.mEncryptionKey, v44);
	byte[] v48 = v46.doFinal(v41);
	Parcel v49 = Parcel.obtain();
	v49.unmarshall(v48, 0, v48.length);
	v49.setDataPosition(0);
	Bundle v52 = new Bundle();
	v52.readFromParcel(v49);
	v49.recycle();
	Bundle v38 = v52;
	boolean v56 = Log.isLoggable(""AccountManagerService"", 3);
	int v57 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p1.onError(8, ""failed to decrypt session bundle"");
	boolean v60 = Log.isLoggable(""AccountManagerService"", 2);
	int v61 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","2","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 3,8 @13 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @16 exception:11,
16 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,14 @23 exception:15,
conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 18,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 18,4 @49 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,30 @54 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,12 @57 exception:33,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,35 @62 exception:36,
39 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,39 @69 exception:40,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,42 @74 exception:43,
46 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @77 exception:45,
48 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,46 @81 exception:47,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,49 @86 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,6 @89 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 18 @92 exception:54,
57 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @96 exception:56,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 61,62 @111 exception:63,
conditional branch(eq, to iindex=-1) 3,17,
65 = invokevirtual < Application, Landroid/os/Bundle, size()I > 3 @116 exception:64,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 87,17,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,153,154 @138 exception:155,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,153,6 @141 exception:156,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	p0.sendErrorResponse(p1, 100, ""User is not allowed to add an account!"");
	p0.showCantAddAccount(100, p5);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""finishSession: response "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", expectActivityLaunch "");
	StringBuilder v9 = v4.append(p3);
	StringBuilder v10 = v4.append("", caller's uid "");
	StringBuilder v11 = v4.append(v2);
	StringBuilder v12 = v4.append("", caller's user id "");
	int v13 = UserHandle.getCallingUserId();
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	StringBuilder v18 = v4.append("", for user id "");
	StringBuilder v19 = v4.append(p5);
	String v20 = v4.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = p2.size();
	boolean v24 = phiInstruction;
	Object v29 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v30 = v29.isActiveProfileOwner(p2);
	boolean v31 = v29.isActiveDeviceOwner(p2);
	boolean v28 = phiInstruction;
	UserManager v32 = AccountManagerService.getUserManager();
	UserHandle v33 = new UserHandle(p5);
	Bundle v35 = v32.getUserRestrictions(v33);
	boolean v36 = v35.getBoolean(""no_modify_accounts"");
	boolean v27 = 0;
	p0.sendErrorResponse(p1, 100, ""User is not allowed to add an account!"");
	Object v40 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
	Object v39 = v40;
	Intent v42 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v44 = v42.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v45 = v42.addFlags(268435456);
	Intent v41 = v42;
	Intent v47 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v49 = v47.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v50 = v47.addFlags(268435456);
	Intent v46 = v47;
	long v51 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v52 = new UserHandle(p5);
	this.mContext.startActivityAsUser(phiInstruction, v52);
	IAccountManager$Stub.restoreCallingIdentity(v51);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","2","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 3,8 @13 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @16 exception:11,
16 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,14 @23 exception:15,
conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 18,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 18,4 @49 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,30 @54 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,12 @57 exception:33,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,35 @62 exception:36,
39 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,39 @69 exception:40,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,42 @74 exception:43,
46 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @77 exception:45,
48 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,46 @81 exception:47,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,49 @86 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,6 @89 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 18 @92 exception:54,
57 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @96 exception:56,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 61,62 @111 exception:63,
conditional branch(eq, to iindex=-1) 3,17,
65 = invokevirtual < Application, Landroid/os/Bundle, size()I > 3 @116 exception:64,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 87,17,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,153,154 @138 exception:155,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,153,6 @141 exception:156,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	p0.sendErrorResponse(p1, 100, ""User is not allowed to add an account!"");
	p0.showCantAddAccount(100, p5);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""finishSession: response "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", expectActivityLaunch "");
	StringBuilder v9 = v4.append(p3);
	StringBuilder v10 = v4.append("", caller's uid "");
	StringBuilder v11 = v4.append(v2);
	StringBuilder v12 = v4.append("", caller's user id "");
	int v13 = UserHandle.getCallingUserId();
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	StringBuilder v18 = v4.append("", for user id "");
	StringBuilder v19 = v4.append(p5);
	String v20 = v4.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = p2.size();
	boolean v24 = phiInstruction;
	Object v29 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v30 = v29.isActiveProfileOwner(p2);
	boolean v31 = v29.isActiveDeviceOwner(p2);
	boolean v28 = phiInstruction;
	UserManager v32 = AccountManagerService.getUserManager();
	UserHandle v33 = new UserHandle(p5);
	Bundle v35 = v32.getUserRestrictions(v33);
	boolean v36 = v35.getBoolean(""no_modify_accounts"");
	boolean v27 = 1;
	p0.sendErrorResponse(p1, 100, ""User is not allowed to add an account!"");
	Object v40 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
	Object v39 = v40;
	Intent v42 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v44 = v42.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v45 = v42.addFlags(268435456);
	Intent v41 = v42;
	Intent v47 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v49 = v47.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v50 = v47.addFlags(268435456);
	Intent v46 = v47;
	long v51 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v52 = new UserHandle(p5);
	this.mContext.startActivityAsUser(phiInstruction, v52);
	IAccountManager$Stub.restoreCallingIdentity(v51);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","2","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 3,8 @13 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @16 exception:11,
16 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,14 @23 exception:15,
conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 18 @31 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,20 @36 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 18,2 @39 exception:23,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,25 @44 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 18,4 @49 exception:28,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,30 @54 exception:31,
34 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,12 @57 exception:33,
37 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,35 @62 exception:36,
39 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @65 exception:38,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,39 @69 exception:40,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,42 @74 exception:43,
46 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @77 exception:45,
48 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,46 @81 exception:47,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 18,49 @86 exception:50,
53 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 18,6 @89 exception:52,
55 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 18 @92 exception:54,
57 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 13,55 @96 exception:56,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 61,62 @111 exception:63,
conditional branch(eq, to iindex=-1) 3,17,
65 = invokevirtual < Application, Landroid/os/Bundle, size()I > 3 @116 exception:64,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 87,17,
89 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @145 exception:88,
92 = invokestatic < Application, Lcom/android/server/accounts/CryptoHelper, getInstance()Lcom/android/server/accounts/CryptoHelper; > @151 exception:91,
94 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, decryptBundle(Landroid/os/Bundle;)Landroid/os/Bundle; > 92,3 @155 exception:93,
5 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,3 @2 exception:4,
8 = invokevirtual < Application, Landroid/os/Bundle, getByteArray(Ljava/lang/String;)[B > 2,6 @7 exception:7,
11 = invokevirtual < Application, Landroid/os/Bundle, getByteArray(Ljava/lang/String;)[B > 2,9 @13 exception:10,
14 = invokevirtual < Application, Landroid/os/Bundle, getByteArray(Ljava/lang/String;)[B > 2,12 @20 exception:13,
16 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, verifyMac([B[B[B)Z > 1,11,8,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 2,5,
6 = arraylength 2,
conditional branch(eq, to iindex=-1) 6,5,
conditional branch(eq, to iindex=-1) 4,5,
7 = arraylength 4,
conditional branch(ne, to iindex=-1) 7,5,
goto (from iindex= 6 to iindex = 10),
16 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,13 @23 exception:15,
conditional branch(eq, to iindex=-1) 16,5,
19 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,17 @31 exception:18,
return 5,
conditional branch(ne, to iindex=-1) 16,17,
18 = new <Application,Ljavax/crypto/spec/IvParameterSpec>@39,
invokespecial < Application, Ljavax/crypto/spec/IvParameterSpec, <init>([B)V > 18,8 @41 exception:19,
22 = invokestatic < Application, Ljavax/crypto/Cipher, getInstance(Ljava/lang/String;)Ljavax/crypto/Cipher; > 20 @46 exception:21,
24 = getfield < Application, Lcom/android/server/accounts/CryptoHelper, mEncryptionKey, <Application,Ljavax/crypto/SecretKey> > 1,
invokevirtual < Application, Ljavax/crypto/Cipher, init(ILjava/security/Key;Ljava/security/spec/AlgorithmParameterSpec;)V > 22,23,24,18 @53 exception:25,
27 = invokevirtual < Application, Ljavax/crypto/Cipher, doFinal([B)[B > 22,11 @56 exception:26,
29 = invokestatic < Application, Landroid/os/Parcel, obtain()Landroid/os/Parcel; > @60 exception:28,
30 = arraylength 27,
invokevirtual < Application, Landroid/os/Parcel, unmarshall([BII)V > 29,27,17,30 @66 exception:31,
invokevirtual < Application, Landroid/os/Parcel, setDataPosition(I)V > 29,17 @69 exception:32,
33 = new <Application,Landroid/os/Bundle>@72,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 33 @74 exception:34,
invokevirtual < Application, Landroid/os/Bundle, readFromParcel(Landroid/os/Parcel;)V > 33,29 @77 exception:35,
invokevirtual < Application, Landroid/os/Parcel, recycle()V > 29 @80 exception:36,
return 33,
98 = getCaughtException ,
101 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 13,99 @263 exception:100,
conditional branch(eq, to iindex=-1) 101,17,
104 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 13,102,98 @271 exception:103,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,90,7 @274 exception:108,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	int v25 = Binder.getCallingPid();
	CryptoHelper v26 = CryptoHelper.getInstance();
	Bundle v27 = v26.decryptBundle(p2);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 3);
	int v29 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p0.sendErrorResponse(p1, 8, ""failed to decrypt session bundle"");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public Bundle decryptBundle(Bundle p1){
	Object v1 = Objects.requireNonNull(p1, ""Cannot decrypt null bundle."");
	byte[] v2 = p1.getByteArray(""iv"");
	byte[] v3 = p1.getByteArray(""cipher"");
	byte[] v4 = p1.getByteArray(""mac"");
	boolean v5 = p0.verifyMac(v3, v2, v4);
	IvParameterSpec v5 = new IvParameterSpec(v2);
	Cipher v7 = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
	v7.init(2, this.mEncryptionKey, v5);
	byte[] v9 = v7.doFinal(v3);
	Parcel v10 = Parcel.obtain();
	v10.unmarshall(v9, 0, v9.length);
	v10.setDataPosition(0);
	Bundle v12 = new Bundle();
	v12.readFromParcel(v10);
	v10.recycle();
	return v12;
}
-----
depth : 2
public boolean verifyMac(byte[] p1, byte[] p2, byte[] p3){
	boolean v1 = Log.isLoggable(""Account"", 2);
	int v2 = Log.v(""Account"", ""Cipher or MAC is empty!"");
	return 0;
}
-----
","public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""finishSession: response "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", expectActivityLaunch "");
	StringBuilder v9 = v4.append(p3);
	StringBuilder v10 = v4.append("", caller's uid "");
	StringBuilder v11 = v4.append(v2);
	StringBuilder v12 = v4.append("", caller's user id "");
	int v13 = UserHandle.getCallingUserId();
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	StringBuilder v18 = v4.append("", for user id "");
	StringBuilder v19 = v4.append(p5);
	String v20 = v4.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = p2.size();
	boolean v24 = phiInstruction;
	Object v29 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v30 = v29.isActiveProfileOwner(p2);
	boolean v31 = v29.isActiveDeviceOwner(p2);
	boolean v28 = phiInstruction;
	UserManager v32 = AccountManagerService.getUserManager();
	UserHandle v33 = new UserHandle(p5);
	Bundle v35 = v32.getUserRestrictions(v33);
	boolean v36 = v35.getBoolean(""no_modify_accounts"");
	boolean v27 = 0;
	int v37 = Binder.getCallingPid();
	CryptoHelper v38 = CryptoHelper.getInstance();
	Object v40 = Objects.requireNonNull(p2, ""Cannot decrypt null bundle."");
	byte[] v41 = p2.getByteArray(""iv"");
	byte[] v42 = p2.getByteArray(""cipher"");
	byte[] v43 = p2.getByteArray(""mac"");
	boolean v45 = Log.isLoggable(""Account"", 2);
	int v46 = Log.v(""Account"", ""Cipher or MAC is empty!"");
	boolean v44 = 0;
	IvParameterSpec v47 = new IvParameterSpec(v41);
	Cipher v49 = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
	v49.init(2, this.mEncryptionKey, v47);
	byte[] v51 = v49.doFinal(v42);
	Parcel v52 = Parcel.obtain();
	v52.unmarshall(v51, 0, v51.length);
	v52.setDataPosition(0);
	Bundle v55 = new Bundle();
	v55.readFromParcel(v52);
	v52.recycle();
	Bundle v39 = v55;
	boolean v59 = Log.isLoggable(""AccountManagerService"", 3);
	int v60 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p0.sendErrorResponse(p1, 8, ""failed to decrypt session bundle"");
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","0","11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,9 @1 exception:10,
13 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @11 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @19 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @24 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,3 @27 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @32 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @35 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @40 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,4 @43 exception:34,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,36 @48 exception:37,
40 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @51 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,40 @55 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,43 @60 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 19,6 @63 exception:46,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,48 @68 exception:49,
52 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @71 exception:51,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,52 @75 exception:53,
57 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,55 @80 exception:56,
59 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @83 exception:58,
61 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,59 @87 exception:60,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,62 @92 exception:63,
66 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,8 @95 exception:65,
68 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @98 exception:67,
70 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,68 @102 exception:69,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 74,75 @114 exception:76,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 77,78 @124 exception:79,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
conditional branch(ne, to iindex=-1) 97,18,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,99,100 @160 exception:101,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,99,8 @163 exception:102,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
-----
","public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", authTokenType "");
	StringBuilder v11 = v4.append(p3);
	StringBuilder v12 = v4.append("", requiredFeatures "");
	String v13 = Arrays.toString(p4);
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", expectActivityLaunch "");
	StringBuilder v16 = v4.append(p5);
	StringBuilder v17 = v4.append("", caller's uid "");
	int v18 = Binder.getCallingUid();
	StringBuilder v19 = v4.append(v18);
	StringBuilder v20 = v4.append("", pid "");
	int v21 = Binder.getCallingPid();
	StringBuilder v22 = v4.append(v21);
	StringBuilder v23 = v4.append("", for user id "");
	StringBuilder v24 = v4.append(p7);
	String v25 = v4.toString();
	int v26 = Log.v(""AccountManagerService"", v25);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v29 = p0.isCrossUser(v2, p7);
	boolean v30 = p0.canUserModifyAccounts(p7, v2);
	boolean v31 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","1","11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,9 @1 exception:10,
13 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @11 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @19 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @24 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,3 @27 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @32 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @35 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @40 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,4 @43 exception:34,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,36 @48 exception:37,
40 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @51 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,40 @55 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,43 @60 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 19,6 @63 exception:46,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,48 @68 exception:49,
52 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @71 exception:51,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,52 @75 exception:53,
57 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,55 @80 exception:56,
59 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @83 exception:58,
61 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,59 @87 exception:60,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,62 @92 exception:63,
66 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,8 @95 exception:65,
68 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @98 exception:67,
70 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,68 @102 exception:69,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 74,75 @114 exception:76,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 77,78 @124 exception:79,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,99,100 @160 exception:101,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,99,8 @163 exception:102,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
12 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, createShowAdminSupportIntent(IZ)Landroid/content/Intent; > 7,3,8 @32 exception:11,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", authTokenType "");
	StringBuilder v11 = v4.append(p3);
	StringBuilder v12 = v4.append("", requiredFeatures "");
	String v13 = Arrays.toString(p4);
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", expectActivityLaunch "");
	StringBuilder v16 = v4.append(p5);
	StringBuilder v17 = v4.append("", caller's uid "");
	int v18 = Binder.getCallingUid();
	StringBuilder v19 = v4.append(v18);
	StringBuilder v20 = v4.append("", pid "");
	int v21 = Binder.getCallingPid();
	StringBuilder v22 = v4.append(v21);
	StringBuilder v23 = v4.append("", for user id "");
	StringBuilder v24 = v4.append(p7);
	String v25 = v4.toString();
	int v26 = Log.v(""AccountManagerService"", v25);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v29 = phiInstruction;
	boolean v33 = AccountManagerService.isProfileOwner(v2);
	UserManager v34 = AccountManagerService.getUserManager();
	UserHandle v35 = new UserHandle(p7);
	Bundle v37 = v34.getUserRestrictions(v35);
	boolean v38 = v37.getBoolean(""no_modify_accounts"");
	boolean v32 = 0;
	boolean v40 = AccountManagerService.isProfileOwner(v2);
	Object v41 = this.mContext.getSystemService(""device_policy"");
	String v42 = v41.getAccountTypesWithManagementDisabledAsUser(p7);
	boolean v43 = v42[phiInstruction].equals(p2);
	boolean v39 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	Object v46 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v47 = v46.createShowAdminSupportIntent(p7, 0);
	Intent v48 = AccountManagerService.getDefaultCantAddAccountIntent(101);
	long v49 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v50 = new UserHandle(p7);
	this.mContext.startActivityAsUser(phiInstruction, v50);
	IAccountManager$Stub.restoreCallingIdentity(v49);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","1","11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,9 @1 exception:10,
13 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @11 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @19 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @24 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,3 @27 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @32 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @35 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @40 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,4 @43 exception:34,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,36 @48 exception:37,
40 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @51 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,40 @55 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,43 @60 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 19,6 @63 exception:46,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,48 @68 exception:49,
52 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @71 exception:51,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,52 @75 exception:53,
57 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,55 @80 exception:56,
59 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @83 exception:58,
61 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,59 @87 exception:60,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,62 @92 exception:63,
66 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,8 @95 exception:65,
68 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @98 exception:67,
70 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,68 @102 exception:69,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 74,75 @114 exception:76,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 77,78 @124 exception:79,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,99,100 @160 exception:101,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,99,8 @163 exception:102,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
12 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, createShowAdminSupportIntent(IZ)Landroid/content/Intent; > 7,3,8 @32 exception:11,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", authTokenType "");
	StringBuilder v11 = v4.append(p3);
	StringBuilder v12 = v4.append("", requiredFeatures "");
	String v13 = Arrays.toString(p4);
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", expectActivityLaunch "");
	StringBuilder v16 = v4.append(p5);
	StringBuilder v17 = v4.append("", caller's uid "");
	int v18 = Binder.getCallingUid();
	StringBuilder v19 = v4.append(v18);
	StringBuilder v20 = v4.append("", pid "");
	int v21 = Binder.getCallingPid();
	StringBuilder v22 = v4.append(v21);
	StringBuilder v23 = v4.append("", for user id "");
	StringBuilder v24 = v4.append(p7);
	String v25 = v4.toString();
	int v26 = Log.v(""AccountManagerService"", v25);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v29 = phiInstruction;
	boolean v33 = AccountManagerService.isProfileOwner(v2);
	UserManager v34 = AccountManagerService.getUserManager();
	UserHandle v35 = new UserHandle(p7);
	Bundle v37 = v34.getUserRestrictions(v35);
	boolean v38 = v37.getBoolean(""no_modify_accounts"");
	boolean v32 = 0;
	boolean v40 = AccountManagerService.isProfileOwner(v2);
	Object v41 = this.mContext.getSystemService(""device_policy"");
	String v42 = v41.getAccountTypesWithManagementDisabledAsUser(p7);
	boolean v43 = v42[phiInstruction].equals(p2);
	boolean v39 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	Object v46 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v47 = v46.createShowAdminSupportIntent(p7, 0);
	Intent v48 = AccountManagerService.getDefaultCantAddAccountIntent(101);
	long v49 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v50 = new UserHandle(p7);
	this.mContext.startActivityAsUser(phiInstruction, v50);
	IAccountManager$Stub.restoreCallingIdentity(v49);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","2","11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,9 @1 exception:10,
13 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @11 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @19 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @24 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,3 @27 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @32 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @35 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @40 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,4 @43 exception:34,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,36 @48 exception:37,
40 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @51 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,40 @55 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,43 @60 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 19,6 @63 exception:46,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,48 @68 exception:49,
52 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @71 exception:51,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,52 @75 exception:53,
57 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,55 @80 exception:56,
59 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @83 exception:58,
61 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,59 @87 exception:60,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,62 @92 exception:63,
66 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,8 @95 exception:65,
68 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @98 exception:67,
70 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,68 @102 exception:69,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 74,75 @114 exception:76,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 77,78 @124 exception:79,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountAndLogMetrics(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V > 1,2,3,4,5,6,7,8 @167 exception:98,
10 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @2 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @6 exception:11,
conditional branch(ne, to iindex=-1) 7,13,
14 = new <Application,Landroid/os/Bundle>@12,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 14 @14 exception:15,
goto (from iindex= 9 to iindex = 3),
16 = phi  14,7,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,18,12 @23 exception:19,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,20,10 @28 exception:21,
23 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @31 exception:22,
25 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,8 @37 exception:24,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
26 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_ADD, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecordWithUid(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;I)V > 1,25,26,27,12 @45 exception:28,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,3,4,6,2,5 @7 exception:7,
return,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$9>@48,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$9, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLjava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)V > 29,1,25,2,3,6,30,13,13,30,4,5,16,3 @70 exception:31,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @73 exception:32,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 23 @76 exception:40,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p0.addAccountAndLogMetrics(p1, p2, p3, p4, p5, p6, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void addAccountAndLogMetrics(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	Bundle v2 = new Bundle();
	phiInstruction.putInt(""callerUid"", v2);
	phiInstruction.putInt(""callerPid"", v1);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(p7);
	p0.logRecordWithUid(v7, AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", v2);
	AccountManagerService$9 v8 = new AccountManagerService$9(p0,v7,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void logRecordWithUid(AccountManagerService$UserAccounts p1, String p2, String p3, int p4){
	p0.logRecord(p2, p3, -1, p1, p4);
	return;
}
-----
depth : 2
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", authTokenType "");
	StringBuilder v11 = v4.append(p3);
	StringBuilder v12 = v4.append("", requiredFeatures "");
	String v13 = Arrays.toString(p4);
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", expectActivityLaunch "");
	StringBuilder v16 = v4.append(p5);
	StringBuilder v17 = v4.append("", caller's uid "");
	int v18 = Binder.getCallingUid();
	StringBuilder v19 = v4.append(v18);
	StringBuilder v20 = v4.append("", pid "");
	int v21 = Binder.getCallingPid();
	StringBuilder v22 = v4.append(v21);
	StringBuilder v23 = v4.append("", for user id "");
	StringBuilder v24 = v4.append(p7);
	String v25 = v4.toString();
	int v26 = Log.v(""AccountManagerService"", v25);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v29 = phiInstruction;
	Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v35 = v34.isActiveProfileOwner(p2);
	boolean v36 = v34.isActiveDeviceOwner(p2);
	boolean v33 = phiInstruction;
	UserManager v37 = AccountManagerService.getUserManager();
	UserHandle v38 = new UserHandle(p7);
	Bundle v40 = v37.getUserRestrictions(v38);
	boolean v41 = v40.getBoolean(""no_modify_accounts"");
	boolean v32 = 0;
	Object v44 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v45 = v44.isActiveProfileOwner(p3);
	boolean v46 = v44.isActiveDeviceOwner(p3);
	boolean v43 = phiInstruction;
	Object v47 = this.mContext.getSystemService(""device_policy"");
	String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);
	boolean v49 = v48[phiInstruction].equals(p2);
	boolean v42 = 0;
	int v51 = Binder.getCallingPid();
	int v52 = Binder.getCallingUid();
	Bundle v53 = new Bundle();
	phiInstruction.putInt(""callerUid"", v52);
	phiInstruction.putInt(""callerPid"", v51);
	long v57 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v59 = AccountManagerService.getUserAccountsNotChecked(p7);
	AccountManagerService$UserAccounts v58 = v59;
	AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", -1, v58, v52);
	AccountManagerService$9 v62 = new AccountManagerService$9(AccountManagerService,v58,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	boolean v65 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v66 = new StringBuilder();
	StringBuilder v68 = v66.append(""initiating bind to authenticator type "");
	StringBuilder v69 = v66.append(this.mAccountType);
	String v70 = v66.toString();
	int v71 = Log.v(""AccountManagerService"", v70);
	boolean v72 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v73 = new StringBuilder();
	StringBuilder v75 = v73.append(""bind attempt failed for "");
	String v76 = AccountManagerService$Session.toDebugString();
	StringBuilder v77 = v73.append(v76);
	String v78 = v73.toString();
	int v79 = Log.d(""AccountManagerService"", v78);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v57);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","2","11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,9 @1 exception:10,
13 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @11 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @19 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @24 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,3 @27 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @32 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @35 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @40 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,4 @43 exception:34,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,36 @48 exception:37,
40 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @51 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,40 @55 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,43 @60 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 19,6 @63 exception:46,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,48 @68 exception:49,
52 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @71 exception:51,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,52 @75 exception:53,
57 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,55 @80 exception:56,
59 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @83 exception:58,
61 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,59 @87 exception:60,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,62 @92 exception:63,
66 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,8 @95 exception:65,
68 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @98 exception:67,
70 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,68 @102 exception:69,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 74,75 @114 exception:76,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 77,78 @124 exception:79,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountAndLogMetrics(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V > 1,2,3,4,5,6,7,8 @167 exception:98,
10 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @2 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @6 exception:11,
conditional branch(ne, to iindex=-1) 7,13,
14 = new <Application,Landroid/os/Bundle>@12,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 14 @14 exception:15,
goto (from iindex= 9 to iindex = 3),
16 = phi  14,7,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,18,12 @23 exception:19,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,20,10 @28 exception:21,
23 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @31 exception:22,
25 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,8 @37 exception:24,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
26 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_ADD, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecordWithUid(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;I)V > 1,25,26,27,12 @45 exception:28,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,3,4,6,2,5 @7 exception:7,
return,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$9>@48,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$9, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLjava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)V > 29,1,25,2,3,6,30,13,13,30,4,5,16,3 @70 exception:31,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @73 exception:32,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 23 @76 exception:40,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p0.addAccountAndLogMetrics(p1, p2, p3, p4, p5, p6, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void addAccountAndLogMetrics(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	Bundle v2 = new Bundle();
	phiInstruction.putInt(""callerUid"", v2);
	phiInstruction.putInt(""callerPid"", v1);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(p7);
	p0.logRecordWithUid(v7, AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", v2);
	AccountManagerService$9 v8 = new AccountManagerService$9(p0,v7,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void logRecordWithUid(AccountManagerService$UserAccounts p1, String p2, String p3, int p4){
	p0.logRecord(p2, p3, -1, p1, p4);
	return;
}
-----
depth : 2
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", authTokenType "");
	StringBuilder v11 = v4.append(p3);
	StringBuilder v12 = v4.append("", requiredFeatures "");
	String v13 = Arrays.toString(p4);
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", expectActivityLaunch "");
	StringBuilder v16 = v4.append(p5);
	StringBuilder v17 = v4.append("", caller's uid "");
	int v18 = Binder.getCallingUid();
	StringBuilder v19 = v4.append(v18);
	StringBuilder v20 = v4.append("", pid "");
	int v21 = Binder.getCallingPid();
	StringBuilder v22 = v4.append(v21);
	StringBuilder v23 = v4.append("", for user id "");
	StringBuilder v24 = v4.append(p7);
	String v25 = v4.toString();
	int v26 = Log.v(""AccountManagerService"", v25);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v29 = phiInstruction;
	Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v35 = v34.isActiveProfileOwner(p2);
	boolean v36 = v34.isActiveDeviceOwner(p2);
	boolean v33 = phiInstruction;
	UserManager v37 = AccountManagerService.getUserManager();
	UserHandle v38 = new UserHandle(p7);
	Bundle v40 = v37.getUserRestrictions(v38);
	boolean v41 = v40.getBoolean(""no_modify_accounts"");
	boolean v32 = 1;
	Object v44 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v45 = v44.isActiveProfileOwner(p3);
	boolean v46 = v44.isActiveDeviceOwner(p3);
	boolean v43 = phiInstruction;
	Object v47 = this.mContext.getSystemService(""device_policy"");
	String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);
	boolean v49 = v48[phiInstruction].equals(p2);
	boolean v42 = 0;
	int v51 = Binder.getCallingPid();
	int v52 = Binder.getCallingUid();
	Bundle v53 = new Bundle();
	phiInstruction.putInt(""callerUid"", v52);
	phiInstruction.putInt(""callerPid"", v51);
	long v57 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v59 = AccountManagerService.getUserAccountsNotChecked(p7);
	AccountManagerService$UserAccounts v58 = v59;
	AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", -1, v58, v52);
	AccountManagerService$9 v62 = new AccountManagerService$9(AccountManagerService,v58,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	boolean v65 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v66 = new StringBuilder();
	StringBuilder v68 = v66.append(""initiating bind to authenticator type "");
	StringBuilder v69 = v66.append(this.mAccountType);
	String v70 = v66.toString();
	int v71 = Log.v(""AccountManagerService"", v70);
	boolean v72 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v73 = new StringBuilder();
	StringBuilder v75 = v73.append(""bind attempt failed for "");
	String v76 = AccountManagerService$Session.toDebugString();
	StringBuilder v77 = v73.append(v76);
	String v78 = v73.toString();
	int v79 = Log.d(""AccountManagerService"", v78);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v57);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","2","11 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,9 @1 exception:10,
13 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @4 exception:12,
17 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 14,15 @11 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @19 exception:20,
23 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,21 @24 exception:22,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,3 @27 exception:24,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,26 @32 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,2 @35 exception:29,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,31 @40 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,4 @43 exception:34,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,36 @48 exception:37,
40 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @51 exception:39,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,40 @55 exception:41,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,43 @60 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 19,6 @63 exception:46,
50 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,48 @68 exception:49,
52 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @71 exception:51,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,52 @75 exception:53,
57 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,55 @80 exception:56,
59 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @83 exception:58,
61 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,59 @87 exception:60,
64 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,62 @92 exception:63,
66 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 19,8 @95 exception:65,
68 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @98 exception:67,
70 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 14,68 @102 exception:69,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 74,75 @114 exception:76,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 77,78 @124 exception:79,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
5 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @0 exception:4,
conditional branch(eq, to iindex=-1) 3,5,
conditional branch(eq, to iindex=-1) 2,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
10 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 7,8 @14 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountAndLogMetrics(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V > 1,2,3,4,5,6,7,8 @167 exception:98,
10 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @2 exception:9,
12 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @6 exception:11,
conditional branch(ne, to iindex=-1) 7,13,
14 = new <Application,Landroid/os/Bundle>@12,
invokespecial < Application, Landroid/os/Bundle, <init>()V > 14 @14 exception:15,
goto (from iindex= 9 to iindex = 3),
16 = phi  14,7,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,18,12 @23 exception:19,
invokevirtual < Application, Landroid/os/Bundle, putInt(Ljava/lang/String;I)V > 16,20,10 @28 exception:21,
23 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @31 exception:22,
25 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,8 @37 exception:24,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
26 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_ADD, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecordWithUid(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;I)V > 1,25,26,27,12 @45 exception:28,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,3,4,6,2,5 @7 exception:7,
return,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$9>@48,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$9, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;ZZLjava/lang/String;ZZLjava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)V > 29,1,25,2,3,6,30,13,13,30,4,5,16,3 @70 exception:31,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @73 exception:32,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 23 @76 exception:40,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p0.addAccountAndLogMetrics(p1, p2, p3, p4, p5, p6, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void addAccountAndLogMetrics(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	Bundle v2 = new Bundle();
	phiInstruction.putInt(""callerUid"", v2);
	phiInstruction.putInt(""callerPid"", v1);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(p7);
	p0.logRecordWithUid(v7, AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", v2);
	AccountManagerService$9 v8 = new AccountManagerService$9(p0,v7,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void logRecordWithUid(AccountManagerService$UserAccounts p1, String p2, String p3, int p4){
	p0.logRecord(p2, p3, -1, p1, p4);
	return;
}
-----
depth : 2
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccount: accountType "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", authTokenType "");
	StringBuilder v11 = v4.append(p3);
	StringBuilder v12 = v4.append("", requiredFeatures "");
	String v13 = Arrays.toString(p4);
	StringBuilder v14 = v4.append(v13);
	StringBuilder v15 = v4.append("", expectActivityLaunch "");
	StringBuilder v16 = v4.append(p5);
	StringBuilder v17 = v4.append("", caller's uid "");
	int v18 = Binder.getCallingUid();
	StringBuilder v19 = v4.append(v18);
	StringBuilder v20 = v4.append("", pid "");
	int v21 = Binder.getCallingPid();
	StringBuilder v22 = v4.append(v21);
	StringBuilder v23 = v4.append("", for user id "");
	StringBuilder v24 = v4.append(p7);
	String v25 = v4.toString();
	int v26 = Log.v(""AccountManagerService"", v25);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v29 = phiInstruction;
	Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v35 = v34.isActiveProfileOwner(p2);
	boolean v36 = v34.isActiveDeviceOwner(p2);
	boolean v33 = phiInstruction;
	UserManager v37 = AccountManagerService.getUserManager();
	UserHandle v38 = new UserHandle(p7);
	Bundle v40 = v37.getUserRestrictions(v38);
	boolean v41 = v40.getBoolean(""no_modify_accounts"");
	boolean v32 = 0;
	Object v44 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v45 = v44.isActiveProfileOwner(p3);
	boolean v46 = v44.isActiveDeviceOwner(p3);
	boolean v43 = phiInstruction;
	Object v47 = this.mContext.getSystemService(""device_policy"");
	String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);
	boolean v49 = v48[phiInstruction].equals(p2);
	boolean v42 = 0;
	int v51 = Binder.getCallingPid();
	int v52 = Binder.getCallingUid();
	Bundle v53 = new Bundle();
	phiInstruction.putInt(""callerUid"", v52);
	phiInstruction.putInt(""callerPid"", v51);
	long v57 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v59 = AccountManagerService.getUserAccountsNotChecked(p7);
	AccountManagerService$UserAccounts v58 = v59;
	AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, ""accounts"", -1, v58, v52);
	AccountManagerService$9 v62 = new AccountManagerService$9(AccountManagerService,v58,p1,p2,p5,1,0,0,1,p3,p4,phiInstruction,p2);
	boolean v65 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v66 = new StringBuilder();
	StringBuilder v68 = v66.append(""initiating bind to authenticator type "");
	StringBuilder v69 = v66.append(this.mAccountType);
	String v70 = v66.toString();
	int v71 = Log.v(""AccountManagerService"", v70);
	boolean v72 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v73 = new StringBuilder();
	StringBuilder v75 = v73.append(""bind attempt failed for "");
	String v76 = AccountManagerService$Session.toDebugString();
	StringBuilder v77 = v73.append(v76);
	String v78 = v73.toString();
	int v79 = Log.d(""AccountManagerService"", v78);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v57);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","0","6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @2 exception:5,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,7 @8 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:12,
14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
35 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:34,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
40 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 38,3 @72 exception:39,
conditional branch(eq, to iindex=-1) 40,18,
43 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 41,3 @94 exception:42,
conditional branch(eq, to iindex=-1) 43,18,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,37 @100 exception:49,
conditional branch(eq, to iindex=-1) 50,18,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 35 @106 exception:53,
return 50,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v10 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	int v11 = p0.getAccountVisibilityFromCache(p1, p2, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v11;
}
-----
","public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v10 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	int v11 = p0.getAccountVisibilityFromCache(p1, p2, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v11;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","1","6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @2 exception:5,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,7 @8 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:12,
14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo; > 24,22,9 @24 exception:25,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @37 exception:63,
return 23,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
35 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:34,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
40 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 38,3 @72 exception:39,
conditional branch(eq, to iindex=-1) 40,18,
43 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 41,3 @94 exception:42,
conditional branch(eq, to iindex=-1) 43,18,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,37 @115 exception:44,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,5 @3 exception:6,
9 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @6 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @12 exception:11,
14 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 10,3,12 @16 exception:13,
17 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 9 @160 exception:18,
throw 17,
19 = getCaughtException ,
20 = new <Application,Ljava/lang/StringBuilder>@165,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @167 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @172 exception:23,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager$NameNotFoundException, getMessage()Ljava/lang/String; > 19 @175 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @179 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @182 exception:29,
33 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 31,30 @188 exception:32,
36 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 34 @192 exception:35,
return 36,
47 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 45 @119 exception:46,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 35 @123 exception:48,
return 47,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v10 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	Integer v11 = p0.resolveAccountVisibility(p1, p2, v8);
	int v12 = v11.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v12;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Object v1 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v2 = IAccountManager$Stub.clearCallingIdentity();
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	int v4 = this.mPackageManager.getPackageUidAsUser(p2, v3);
	IAccountManager$Stub.restoreCallingIdentity(v2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Package not found "");
	String v8 = caughtException.getMessage();
	StringBuilder v9 = v5.append(v8);
	String v10 = v5.toString();
	int v11 = Log.d(""AccountManagerService"", v10);
	Integer v12 = Integer.valueOf(3);
	return v12;
}
-----
","public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesManagedByCaller(v3, v4);
	boolean v7 = v6.contains(Account.type);
	boolean v5 = v7;
	long v9 = Binder.clearCallingIdentity();
	String v10 = this.mPackageManager.getPackagesForUid(v3);
	PackageInfo v11 = this.mPackageManager.getPackageInfo(v10[phiInstruction], 0);
	Binder.restoreCallingIdentity(v9);
	boolean v8 = 1;
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v15 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v14 = v15;
	boolean v16 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v17 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	Object v19 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	int v21 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v14);
	int v22 = this.mPackageManager.getPackageUidAsUser(p2, v21);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	StringBuilder v24 = new StringBuilder();
	StringBuilder v26 = v24.append(""Package not found "");
	String v27 = caughtException.getMessage();
	StringBuilder v28 = v24.append(v27);
	String v29 = v24.toString();
	int v30 = Log.d(""AccountManagerService"", v29);
	Integer v31 = Integer.valueOf(3);
	Integer v18 = v31;
	int v32 = v18.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v32;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","1","6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @2 exception:5,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,7 @8 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:12,
14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
4 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
7 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackagesForUid(I)[Ljava/lang/String; > 5,2 @6 exception:6,
conditional branch(eq, to iindex=-1) 7,9,
10 = new <Application,Ljava/lang/StringBuilder>@58,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 10 @60 exception:11,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 10,12 @65 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 10,2 @68 exception:15,
18 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 10 @71 exception:17,
20 = invokestatic < Application, Landroid/util/Log, w(Ljava/lang/String;Ljava/lang/String;)I > 8,18 @75 exception:19,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 4 @78 exception:52,
return 9,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
35 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:34,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
40 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 38,3 @72 exception:39,
conditional branch(eq, to iindex=-1) 40,18,
43 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 41,3 @94 exception:42,
conditional branch(eq, to iindex=-1) 43,18,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,37 @115 exception:44,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,5 @3 exception:6,
9 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @6 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @12 exception:11,
14 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 10,3,12 @16 exception:13,
17 = getCaughtException ,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 9 @160 exception:18,
throw 17,
19 = getCaughtException ,
20 = new <Application,Ljava/lang/StringBuilder>@165,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 20 @167 exception:21,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,22 @172 exception:23,
26 = invokevirtual < Application, Landroid/content/pm/PackageManager$NameNotFoundException, getMessage()Ljava/lang/String; > 19 @175 exception:25,
28 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 20,26 @179 exception:27,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 20 @182 exception:29,
33 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 31,30 @188 exception:32,
36 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 34 @192 exception:35,
return 36,
47 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 45 @119 exception:46,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 35 @123 exception:48,
return 47,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v10 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	Integer v11 = p0.resolveAccountVisibility(p1, p2, v8);
	int v12 = v11.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v12;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""No known packages with uid "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Log.w(""AccountManagerService"", v6);
	Binder.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Object v1 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v2 = IAccountManager$Stub.clearCallingIdentity();
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	int v4 = this.mPackageManager.getPackageUidAsUser(p2, v3);
	IAccountManager$Stub.restoreCallingIdentity(v2);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""Package not found "");
	String v8 = caughtException.getMessage();
	StringBuilder v9 = v5.append(v8);
	String v10 = v5.toString();
	int v11 = Log.d(""AccountManagerService"", v10);
	Integer v12 = Integer.valueOf(3);
	return v12;
}
-----
","public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v6 = AccountManagerService.getTypesManagedByCaller(v3, v4);
	boolean v7 = v6.contains(Account.type);
	boolean v5 = v7;
	long v9 = Binder.clearCallingIdentity();
	String v10 = this.mPackageManager.getPackagesForUid(v3);
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append(""No known packages with uid "");
	StringBuilder v14 = v11.append(v3);
	String v15 = v11.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	Binder.restoreCallingIdentity(v9);
	boolean v8 = 0;
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v4);
	AccountManagerService$UserAccounts v19 = v20;
	boolean v21 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v22 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	Object v24 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v25 = IAccountManager$Stub.clearCallingIdentity();
	int v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v19);
	int v27 = this.mPackageManager.getPackageUidAsUser(p2, v26);
	IAccountManager$Stub.restoreCallingIdentity(v25);
	StringBuilder v29 = new StringBuilder();
	StringBuilder v31 = v29.append(""Package not found "");
	String v32 = caughtException.getMessage();
	StringBuilder v33 = v29.append(v32);
	String v34 = v29.toString();
	int v35 = Log.d(""AccountManagerService"", v34);
	Integer v36 = Integer.valueOf(3);
	Integer v23 = v36;
	int v37 = v23.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return v37;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","2","6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @2 exception:5,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,7 @8 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:12,
14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
35 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:34,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
40 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 38,3 @72 exception:39,
conditional branch(eq, to iindex=-1) 40,18,
43 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 41,3 @94 exception:42,
conditional branch(eq, to iindex=-1) 43,18,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,37 @115 exception:44,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,5 @3 exception:6,
9 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @6 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @12 exception:11,
14 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 10,3,12 @16 exception:13,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 9 @20 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 14,38 @25 exception:39,
conditional branch(eq, to iindex=-1) 40,42,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @39 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPackageSignature(Ljava/lang/String;II)I > 1,43,14,45 @43 exception:46,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @4 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
10 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 8,4 @10 exception:9,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 7 @14 exception:15,
16 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
18 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 16 @19 exception:17,
19 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>18 <Application,Landroid/content/pm/PackageManagerInternal>,
21 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 10 @25 exception:20,
23 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 21 @29 exception:22,
conditional branch(eq, to iindex=-1) 23,5,
25 = invokeinterface < Application, Ljava/util/Iterator, next()Ljava/lang/Object; > 21 @35 exception:24,
26 = checkcast <Application,Landroid/content/pm/RegisteredServicesCache$ServiceInfo>25 <Application,Landroid/content/pm/RegisteredServicesCache$ServiceInfo>,
27 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, type, <Application,Ljava/lang/Object> > 26,
28 = checkcast <Application,Landroid/accounts/AuthenticatorDescription>27 <Application,Landroid/accounts/AuthenticatorDescription>,
29 = getfield < Application, Landroid/accounts/AuthenticatorDescription, type, <Application,Ljava/lang/String> > 28,
31 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 2,29 @47 exception:30,
conditional branch(eq, to iindex=-1) 31,5,
36 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, uid, <Primordial,I> > 26,
conditional branch(ne, to iindex=-1) 36,3,
39 = invokevirtual < Application, Landroid/content/pm/PackageManagerInternal, hasSignatureCapability(III)Z > 19,36,3,37 @61 exception:38,
conditional branch(eq, to iindex=-1) 39,5,
return 40,
conditional branch(ne, to iindex=-1) 47,48,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,4 @55 exception:49,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,4 @3 exception:6,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/lang/Integer>9 <Application,Ljava/lang/Integer>,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 10 @15 exception:12,
goto (from iindex= 10 to iindex = 2),
14 = phi  13,11,
monitorexit 5,
return 14,
conditional branch(eq, to iindex=-1) 50,42,
103 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 50 @61 exception:102,
return 103,
47 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 45 @119 exception:46,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 35 @123 exception:48,
return 47,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v10 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	Integer v11 = p0.resolveAccountVisibility(p1, p2, v8);
	int v12 = v11.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v12;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	int v7 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	int v8 = p0.checkPackageSignature(Account.type, v4, v7);
	int v9 = p0.getAccountVisibilityFromCache(p1, p2, p3);
	Integer v10 = Integer.valueOf(v9);
	return v10;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public int checkPackageSignature(String p1, int p2, int p3){
	long v1 = Binder.clearCallingIdentity();
	Collection v2 = this.mAuthenticatorCache.getAllServices(p3);
	Binder.restoreCallingIdentity(v1);
	Object v4 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v5 = v2.iterator();
	boolean v6 = v5.hasNext();
	Object v7 = v5.next();
	boolean v8 = p1.equals(AuthenticatorDescription.type);
	boolean v9 = v4.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, p2, 16);
	return 1;
}
-----
depth : 2
public int getAccountVisibilityFromCache(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = p0.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v2 = v1.get(p2);
	int v3 = v2.intValue();
	return phiInstruction;
}
-----
","public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v6 = v7;
	boolean v8 = v6.contains(Account.type);
	boolean v5 = v8;
	boolean v9 = p0.isSystemUid(v3);
	long v10 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
	boolean v12 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v13 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	int v21 = this.userId;
	long v23 = Binder.clearCallingIdentity();
	Collection v24 = this.mAuthenticatorCache.getAllServices(v21);
	Binder.restoreCallingIdentity(v23);
	Object v26 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v27 = v24.iterator();
	boolean v28 = v27.hasNext();
	Object v29 = v27.next();
	boolean v30 = Account.type.equals(AuthenticatorDescription.type);
	boolean v31 = v26.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v18, 16);
	int v22 = 1;
	Map v33 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v34 = v33.get(p2);
	int v35 = v34.intValue();
	int v32 = phiInstruction;
	Integer v36 = Integer.valueOf(v32);
	Integer v14 = v36;
	int v37 = v14.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v10);
	return v37;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","2","6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @2 exception:5,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,7 @8 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:12,
14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
35 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:34,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
40 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 38,3 @72 exception:39,
conditional branch(eq, to iindex=-1) 40,18,
43 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 41,3 @94 exception:42,
conditional branch(eq, to iindex=-1) 43,18,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,37 @115 exception:44,
7 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,5 @3 exception:6,
9 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @6 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
12 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @12 exception:11,
14 = invokevirtual < Application, Landroid/content/pm/PackageManager, getPackageUidAsUser(Ljava/lang/String;I)I > 10,3,12 @16 exception:13,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 9 @20 exception:37,
40 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 14,38 @25 exception:39,
conditional branch(eq, to iindex=-1) 40,42,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @39 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPackageSignature(Ljava/lang/String;II)I > 1,43,14,45 @43 exception:46,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokestatic < Application, Landroid/os/Binder, clearCallingIdentity()J > @4 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
10 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getAllServices(I)Ljava/util/Collection; > 8,4 @10 exception:9,
invokestatic < Application, Landroid/os/Binder, restoreCallingIdentity(J)V > 7 @14 exception:15,
16 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
18 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 16 @19 exception:17,
19 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>18 <Application,Landroid/content/pm/PackageManagerInternal>,
21 = invokeinterface < Application, Ljava/util/Collection, iterator()Ljava/util/Iterator; > 10 @25 exception:20,
23 = invokeinterface < Application, Ljava/util/Iterator, hasNext()Z > 21 @29 exception:22,
conditional branch(eq, to iindex=-1) 23,5,
25 = invokeinterface < Application, Ljava/util/Iterator, next()Ljava/lang/Object; > 21 @35 exception:24,
26 = checkcast <Application,Landroid/content/pm/RegisteredServicesCache$ServiceInfo>25 <Application,Landroid/content/pm/RegisteredServicesCache$ServiceInfo>,
27 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, type, <Application,Ljava/lang/Object> > 26,
28 = checkcast <Application,Landroid/accounts/AuthenticatorDescription>27 <Application,Landroid/accounts/AuthenticatorDescription>,
29 = getfield < Application, Landroid/accounts/AuthenticatorDescription, type, <Application,Ljava/lang/String> > 28,
31 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 2,29 @47 exception:30,
conditional branch(eq, to iindex=-1) 31,5,
36 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, uid, <Primordial,I> > 26,
conditional branch(ne, to iindex=-1) 36,3,
return 41,
conditional branch(ne, to iindex=-1) 47,48,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,4 @55 exception:49,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,4 @3 exception:6,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/lang/Integer>9 <Application,Ljava/lang/Integer>,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 10 @15 exception:12,
goto (from iindex= 10 to iindex = 2),
14 = phi  13,11,
monitorexit 5,
return 14,
conditional branch(eq, to iindex=-1) 50,42,
103 = invokestatic < Application, Ljava/lang/Integer, valueOf(I)Ljava/lang/Integer; > 50 @61 exception:102,
return 103,
47 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 45 @119 exception:46,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 35 @123 exception:48,
return 47,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v10 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	Integer v11 = p0.resolveAccountVisibility(p1, p2, v8);
	int v12 = v11.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v12;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	int v7 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	int v8 = p0.checkPackageSignature(Account.type, v4, v7);
	int v9 = p0.getAccountVisibilityFromCache(p1, p2, p3);
	Integer v10 = Integer.valueOf(v9);
	return v10;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public int checkPackageSignature(String p1, int p2, int p3){
	long v1 = Binder.clearCallingIdentity();
	Collection v2 = this.mAuthenticatorCache.getAllServices(p3);
	Binder.restoreCallingIdentity(v1);
	Object v4 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v5 = v2.iterator();
	boolean v6 = v5.hasNext();
	Object v7 = v5.next();
	boolean v8 = p1.equals(AuthenticatorDescription.type);
	return 2;
}
-----
depth : 2
public int getAccountVisibilityFromCache(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = p0.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v2 = v1.get(p2);
	int v3 = v2.intValue();
	return phiInstruction;
}
-----
","public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v6 = v7;
	boolean v8 = v6.contains(Account.type);
	boolean v5 = v8;
	boolean v9 = p0.isSystemUid(v3);
	long v10 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
	boolean v12 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v13 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	int v21 = this.userId;
	long v23 = Binder.clearCallingIdentity();
	Collection v24 = this.mAuthenticatorCache.getAllServices(v21);
	Binder.restoreCallingIdentity(v23);
	Object v26 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v27 = v24.iterator();
	boolean v28 = v27.hasNext();
	Object v29 = v27.next();
	boolean v30 = Account.type.equals(AuthenticatorDescription.type);
	int v22 = 2;
	Map v32 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v33 = v32.get(p2);
	int v34 = v33.intValue();
	int v31 = phiInstruction;
	Integer v35 = Integer.valueOf(v31);
	Integer v14 = v35;
	int v36 = v14.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v10);
	return v36;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","2","6 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 2,4 @2 exception:5,
9 = invokestatic < Application, Ljava/util/Objects, requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object; > 3,7 @8 exception:8,
11 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @11 exception:10,
13 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @15 exception:12,
14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,4 @1 exception:5,
return 6,
9 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 7,2 @8 exception:8,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
35 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @62 exception:34,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
40 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 38,3 @72 exception:39,
conditional branch(eq, to iindex=-1) 40,18,
43 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 41,3 @94 exception:42,
conditional branch(eq, to iindex=-1) 43,18,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,37 @100 exception:49,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,4 @3 exception:6,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 5,2 @4 exception:6,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
13 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 10,11 @16 exception:12,
14 = new <Application,Ljava/util/HashMap>@19,
invokespecial < Application, Ljava/util/HashMap, <init>()V > 14 @21 exception:15,
17 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @24 exception:16,
19 = invokeinterface < Application, Ljava/util/Map, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > 17,2,14 @28 exception:18,
invokestatic < Application, Landroid/accounts/AccountManager, invalidateLocalAccountsDataCaches()V > @31 exception:20,
21 = phi  8,14,
return 21,
9 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 7,3 @7 exception:8,
10 = checkcast <Application,Ljava/lang/Integer>9 <Application,Ljava/lang/Integer>,
conditional branch(eq, to iindex=-1) 10,11,
13 = invokevirtual < Application, Ljava/lang/Integer, intValue()I > 10 @15 exception:12,
goto (from iindex= 10 to iindex = 2),
14 = phi  13,11,
monitorexit 5,
return 14,
conditional branch(eq, to iindex=-1) 50,18,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 35 @106 exception:53,
return 50,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v10 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	int v11 = p0.getAccountVisibilityFromCache(p1, p2, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v11;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public int getAccountVisibilityFromCache(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = p0.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v2 = v1.get(p2);
	int v3 = v2.intValue();
	return phiInstruction;
}
-----
depth : 2
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	int v3 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v3 = new HashMap();
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v6 = v5.put(p1, v3);
	AccountManager.invalidateLocalAccountsDataCaches();
	return phiInstruction;
}
-----
","public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
	List v6 = v7;
	boolean v8 = v6.contains(Account.type);
	boolean v5 = v8;
	boolean v9 = p0.isSystemUid(v3);
	long v10 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
	boolean v12 = ""android:accounts:key_legacy_visible"".equals(p2);
	boolean v13 = ""android:accounts:key_legacy_not_visible"".equals(p2);
	Map v16 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p3);
	Object v17 = v16.get(p1);
	int v18 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v19 = new HashMap();
	Map v21 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p3);
	Object v22 = v21.put(p1, v19);
	AccountManager.invalidateLocalAccountsDataCaches();
	Map v15 = phiInstruction;
	Object v24 = v15.get(p2);
	int v25 = v24.intValue();
	int v14 = phiInstruction;
	IAccountManager$Stub.restoreCallingIdentity(v10);
	return v14;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;)V","0","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
11 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @13 exception:10,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 11 @24 exception:19,
return,","depth : 0
public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.unregisterAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.unregisterAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;)V","1","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
11 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @13 exception:10,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetmReceiversForType(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 4 @0 exception:5,
monitorenter 6,
conditional branch(ne, to iindex=-1) 2,7,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = phi  2,8,
12 = arraylength 10,
40 = phi  39,7,
conditional branch(ge, to iindex=-1) 40,12,
monitorexit 6,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 11 @24 exception:19,
return,","depth : 0
public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.unregisterAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void unregisterAccountListener(String p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p3);
	String v1 = new String(1);
	return;
}
-----
","public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v5 = v6;
	Map v8 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(v5);
	String v9 = new String(1);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;)V","2","5 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:4,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 6,5,3 @6 exception:7,
9 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @9 exception:8,
11 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @13 exception:10,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetmReceiversForType(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 4 @0 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, mReceiversForType, <Application,Ljava/util/Map> > 1,
return 2,
monitorenter 6,
conditional branch(ne, to iindex=-1) 2,7,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = phi  2,8,
12 = arraylength 10,
40 = phi  39,7,
conditional branch(ge, to iindex=-1) 40,12,
monitorexit 6,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 11 @24 exception:19,
return,","depth : 0
public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.unregisterAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void unregisterAccountListener(String p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p3);
	String v1 = new String(1);
	return;
}
-----
depth : 2
public Map -$$Nest$fgetmReceiversForType(AccountManagerService$UserAccounts p1){
	return this.mReceiversForType;
}
-----
","public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
	AccountManagerService$UserAccounts v5 = v6;
	Map v8 = this.mReceiversForType;
	String v9 = new String(1);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;","0","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
9 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 6,7 @6 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
28 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @13 exception:27,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,10,28,2,3,4,29 @22 exception:30,
return 31,","depth : 0
public Account getAccountsForPackage(String p1, int p2, String p3){
	int v3 = UserHandle.getCallingUserId();
	Account v4 = p0.getAccountsAsUserForPackage(0, v3, p1, p2, p3, 1);
	return v4;
}
-----
","public Account getAccountsForPackage(String p1, int p2, String p3){
	int v3 = UserHandle.getCallingUserId();
	Account v4 = p0.getAccountsAsUserForPackage(0, v3, p1, p2, p3, 1);
	return v4;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;","1","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
9 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 6,7 @6 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
28 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @13 exception:27,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,10,28,2,3,4,29 @22 exception:30,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:8,
11 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:10,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 9,12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
16 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 13,14 @18 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
goto (from iindex= 12 to iindex = 36),
42 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 40,39 @63 exception:41,
conditional branch(eq, to iindex=-1) 42,17,
43 = new <Application,Ljava/lang/StringBuilder>@69,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @71 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @76 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,2 @79 exception:48,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,50 @84 exception:51,
54 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @87 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,54 @91 exception:55,
59 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,57 @96 exception:58,
61 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @99 exception:60,
63 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,61 @103 exception:62,
65 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @106 exception:64,
67 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 40,65 @110 exception:66,
72 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 9 @113 exception:71,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,9,72 @117 exception:73,
conditional branch(eq, to iindex=-1) 5,75,
77 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 9,12 @124 exception:76,
conditional branch(ne, to iindex=-1) 77,17,
conditional branch(eq, to iindex=-1) 2,17,
79 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 74,2 @132 exception:78,
conditional branch(eq, to iindex=-1) 79,17,
goto (from iindex= 64 to iindex = 3),
86 = phi  4,4,6,
87 = phi  5,5,9,
91 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,87,3,86 @141 exception:90,
93 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 91 @145 exception:92,
conditional branch(ne, to iindex=-1) 93,17,
conditional branch(eq, to iindex=-1) 2,17,
95 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 91,2 @153 exception:94,
conditional branch(ne, to iindex=-1) 95,17,
goto (from iindex= 76 to iindex = 39),
126 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 126,
return 31,","depth : 0
public Account getAccountsForPackage(String p1, int p2, String p3){
	int v3 = UserHandle.getCallingUserId();
	Account v4 = p0.getAccountsAsUserForPackage(0, v3, p1, p2, p3, 1);
	return v4;
}
-----
depth : 1
public Account getAccountsAsUserForPackage(String p1, int p2, String p3, int p4, String p5, boolean p6){
	boolean v19 = v17.contains(p1);
	List v20 = p0.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v21 = v20.isEmpty();
	boolean v22 = v20.contains(p1);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","public Account getAccountsForPackage(String p1, int p2, String p3){
	int v3 = UserHandle.getCallingUserId();
	boolean v24 = v22.contains(0);
	List v25 = AccountManagerService.getTypesVisibleToCaller(phiInstruction, v3, phiInstruction);
	boolean v26 = v25.isEmpty();
	boolean v27 = v25.contains(0);
	Account v4 = this.EMPTY_ACCOUNT_ARRAY;
	return v4;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;","2","6 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:5,
9 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 6,7 @6 exception:8,
conditional branch(eq, to iindex=-1) 9,10,
28 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @13 exception:27,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,10,28,2,3,4,29 @22 exception:30,
9 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:8,
11 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @4 exception:10,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 9,12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
16 = invokevirtual < Application, Landroid/content/Context, checkCallingOrSelfPermission(Ljava/lang/String;)I > 13,14 @18 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
goto (from iindex= 12 to iindex = 36),
42 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 40,39 @63 exception:41,
conditional branch(eq, to iindex=-1) 42,17,
43 = new <Application,Ljava/lang/StringBuilder>@69,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 43 @71 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,45 @76 exception:46,
49 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,2 @79 exception:48,
52 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,50 @84 exception:51,
54 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @87 exception:53,
56 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,54 @91 exception:55,
59 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 43,57 @96 exception:58,
61 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @99 exception:60,
63 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 43,61 @103 exception:62,
65 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 43 @106 exception:64,
67 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 40,65 @110 exception:66,
72 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 9 @113 exception:71,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,9,72 @117 exception:73,
conditional branch(eq, to iindex=-1) 5,75,
77 = invokestatic < Application, Landroid/os/UserHandle, isSameApp(II)Z > 9,12 @124 exception:76,
conditional branch(ne, to iindex=-1) 77,17,
conditional branch(eq, to iindex=-1) 2,17,
79 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 74,2 @132 exception:78,
conditional branch(eq, to iindex=-1) 79,17,
goto (from iindex= 64 to iindex = 3),
86 = phi  4,4,6,
87 = phi  5,5,9,
91 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,87,3,86 @141 exception:90,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
return 7,
93 = invokeinterface < Application, Ljava/util/List, isEmpty()Z > 91 @145 exception:92,
conditional branch(ne, to iindex=-1) 93,17,
conditional branch(eq, to iindex=-1) 2,17,
95 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 91,2 @153 exception:94,
conditional branch(ne, to iindex=-1) 95,17,
goto (from iindex= 76 to iindex = 39),
126 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 126,
return 31,","depth : 0
public Account getAccountsForPackage(String p1, int p2, String p3){
	int v3 = UserHandle.getCallingUserId();
	Account v4 = p0.getAccountsAsUserForPackage(0, v3, p1, p2, p3, 1);
	return v4;
}
-----
depth : 1
public Account getAccountsAsUserForPackage(String p1, int p2, String p3, int p4, String p5, boolean p6){
	boolean v19 = v17.contains(p1);
	List v20 = p0.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v21 = v20.isEmpty();
	boolean v22 = v20.contains(p1);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
depth : 2
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
","public Account getAccountsForPackage(String p1, int p2, String p3){
	int v3 = UserHandle.getCallingUserId();
	boolean v24 = v22.contains(0);
	List v26 = AccountManagerService.getTypesForCaller(phiInstruction, p2, 1);
	List v25 = v26;
	boolean v27 = v25.isEmpty();
	boolean v28 = v25.contains(0);
	Account v4 = this.EMPTY_ACCOUNT_ARRAY;
	return v4;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","0","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @9 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @15 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @23 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @45 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @50 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @55 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @58 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @62 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @67 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @72 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @77 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @84 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @89 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @92 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @96 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @99 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @103 exception:61,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 66,67 @120 exception:68,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 69,70 @129 exception:71,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @132 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @136 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
conditional branch(ne, to iindex=-1) 79,15,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,116,117 @167 exception:118,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
","public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startAddAccountSession: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v26 = Binder.getCallingUid();
	int v27 = UserHandle.getUserId(v26);
	boolean v28 = p0.canUserModifyAccounts(v27, v26);
	boolean v29 = p0.canUserModifyAccountsForType(v27, p2, v26);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v27);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","1","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @9 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @15 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @23 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @45 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @50 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @55 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @58 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @62 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @67 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @72 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @77 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @84 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @89 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @92 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @96 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @99 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @103 exception:61,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 66,67 @120 exception:68,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 69,70 @129 exception:71,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @132 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @136 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,116,117 @167 exception:118,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
12 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, createShowAdminSupportIntent(IZ)Landroid/content/Intent; > 7,3,8 @32 exception:11,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startAddAccountSession: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v26 = Binder.getCallingUid();
	int v27 = UserHandle.getUserId(v26);
	boolean v29 = AccountManagerService.isProfileOwner(v26);
	UserManager v30 = AccountManagerService.getUserManager();
	UserHandle v31 = new UserHandle(v27);
	Bundle v33 = v30.getUserRestrictions(v31);
	boolean v34 = v33.getBoolean(""no_modify_accounts"");
	boolean v28 = 0;
	boolean v36 = AccountManagerService.isProfileOwner(v26);
	Object v37 = this.mContext.getSystemService(""device_policy"");
	String v38 = v37.getAccountTypesWithManagementDisabledAsUser(v27);
	boolean v39 = v38[phiInstruction].equals(p2);
	boolean v35 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	Object v42 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v43 = v42.createShowAdminSupportIntent(v27, 0);
	Intent v44 = AccountManagerService.getDefaultCantAddAccountIntent(101);
	long v45 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v46 = new UserHandle(v27);
	this.mContext.startActivityAsUser(phiInstruction, v46);
	IAccountManager$Stub.restoreCallingIdentity(v45);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","1","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @9 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @15 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @23 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @45 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @50 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @55 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @58 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @62 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @67 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @72 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @77 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @84 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @89 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @92 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @96 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @99 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @103 exception:61,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 66,67 @120 exception:68,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 69,70 @129 exception:71,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @132 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @136 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,120,121 @150 exception:122,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,120,75 @153 exception:123,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
12 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, createShowAdminSupportIntent(IZ)Landroid/content/Intent; > 7,3,8 @32 exception:11,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	p1.onError(100, ""User is not allowed to add an account!"");
	p0.showCantAddAccount(100, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startAddAccountSession: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v26 = Binder.getCallingUid();
	int v27 = UserHandle.getUserId(v26);
	boolean v29 = AccountManagerService.isProfileOwner(v26);
	UserManager v30 = AccountManagerService.getUserManager();
	UserHandle v31 = new UserHandle(v27);
	Bundle v33 = v30.getUserRestrictions(v31);
	boolean v34 = v33.getBoolean(""no_modify_accounts"");
	boolean v28 = 0;
	p1.onError(100, ""User is not allowed to add an account!"");
	Object v37 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v38 = v37.createShowAdminSupportIntent(v27, 0);
	Intent v39 = AccountManagerService.getDefaultCantAddAccountIntent(100);
	long v40 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v41 = new UserHandle(v27);
	this.mContext.startActivityAsUser(phiInstruction, v41);
	IAccountManager$Stub.restoreCallingIdentity(v40);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @9 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @15 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @23 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @45 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @50 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @55 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @58 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @62 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @67 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @72 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @77 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @84 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @89 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @92 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @96 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @99 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @103 exception:61,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 66,67 @120 exception:68,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 69,70 @129 exception:71,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @132 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @136 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,116,117 @167 exception:118,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startAddAccountSession: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v26 = Binder.getCallingUid();
	int v27 = UserHandle.getUserId(v26);
	Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v31 = v30.isActiveProfileOwner(p2);
	boolean v32 = v30.isActiveDeviceOwner(p2);
	boolean v29 = phiInstruction;
	UserManager v33 = AccountManagerService.getUserManager();
	UserHandle v34 = new UserHandle(v27);
	Bundle v36 = v33.getUserRestrictions(v34);
	boolean v37 = v36.getBoolean(""no_modify_accounts"");
	boolean v28 = 0;
	Object v40 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v41 = v40.isActiveProfileOwner(p3);
	boolean v42 = v40.isActiveDeviceOwner(p3);
	boolean v39 = phiInstruction;
	Object v43 = this.mContext.getSystemService(""device_policy"");
	String v44 = v43.getAccountTypesWithManagementDisabledAsUser(v27);
	boolean v45 = v44[phiInstruction].equals(p2);
	boolean v38 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	Object v49 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
	Object v48 = v49;
	Intent v51 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v53 = v51.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v54 = v51.addFlags(268435456);
	Intent v50 = v51;
	Intent v56 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v58 = v56.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v59 = v56.addFlags(268435456);
	Intent v55 = v56;
	long v60 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v61 = new UserHandle(v27);
	this.mContext.startActivityAsUser(phiInstruction, v61);
	IAccountManager$Stub.restoreCallingIdentity(v60);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @9 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @15 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @23 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @45 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @50 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @55 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @58 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @62 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @67 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @72 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @77 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @84 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @89 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @92 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @96 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @99 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @103 exception:61,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 66,67 @120 exception:68,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 69,70 @129 exception:71,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @132 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @136 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,116,117 @167 exception:118,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startAddAccountSession: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v26 = Binder.getCallingUid();
	int v27 = UserHandle.getUserId(v26);
	Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v31 = v30.isActiveProfileOwner(p2);
	boolean v32 = v30.isActiveDeviceOwner(p2);
	boolean v29 = phiInstruction;
	UserManager v33 = AccountManagerService.getUserManager();
	UserHandle v34 = new UserHandle(v27);
	Bundle v36 = v33.getUserRestrictions(v34);
	boolean v37 = v36.getBoolean(""no_modify_accounts"");
	boolean v28 = 1;
	Object v40 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v41 = v40.isActiveProfileOwner(p3);
	boolean v42 = v40.isActiveDeviceOwner(p3);
	boolean v39 = phiInstruction;
	Object v43 = this.mContext.getSystemService(""device_policy"");
	String v44 = v43.getAccountTypesWithManagementDisabledAsUser(v27);
	boolean v45 = v44[phiInstruction].equals(p2);
	boolean v38 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	Object v49 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
	Object v48 = v49;
	Intent v51 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v53 = v51.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v54 = v51.addFlags(268435456);
	Intent v50 = v51;
	Intent v56 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v58 = v56.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v59 = v56.addFlags(268435456);
	Intent v55 = v56;
	long v60 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v61 = new UserHandle(v27);
	this.mContext.startActivityAsUser(phiInstruction, v61);
	IAccountManager$Stub.restoreCallingIdentity(v60);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","10 = invokestatic < Application, Landroid/os/Bundle, setDefusable(Landroid/os/Bundle;Z)Landroid/os/Bundle; > 7,8 @9 exception:9,
14 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 11,12 @15 exception:13,
conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 16 @23 exception:17,
20 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,18 @29 exception:19,
22 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,3 @32 exception:21,
25 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,23 @37 exception:24,
27 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 16,2 @40 exception:26,
30 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,28 @45 exception:29,
32 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,4 @50 exception:31,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,33 @55 exception:34,
37 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 5 @58 exception:36,
39 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,37 @62 exception:38,
42 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,40 @67 exception:41,
44 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Z)Ljava/lang/StringBuilder; > 16,6 @72 exception:43,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,45 @77 exception:46,
49 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @80 exception:48,
51 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,49 @84 exception:50,
54 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 16,52 @89 exception:53,
56 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @92 exception:55,
58 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 16,56 @96 exception:57,
60 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 16 @99 exception:59,
62 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 11,60 @103 exception:61,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 66,67 @120 exception:68,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 69,70 @129 exception:71,
73 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @132 exception:72,
75 = invokestatic < Application, Landroid/os/UserHandle, getUserId(I)I > 73 @136 exception:74,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 10,2 @14 exception:11,
13 = invokevirtual < Application, Landroid/os/UserManager, getUserRestrictions(Landroid/os/UserHandle;)Landroid/os/Bundle; > 9,10 @17 exception:12,
16 = invokevirtual < Application, Landroid/os/Bundle, getBoolean(Ljava/lang/String;)Z > 13,14 @24 exception:15,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
9 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveProfileOwner(I)Z > 6,2 @10 exception:8,
conditional branch(ne, to iindex=-1) 9,7,
11 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManagerInternal, isActiveDeviceOwner(I)Z > 6,2 @16 exception:10,
conditional branch(eq, to iindex=-1) 11,7,
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
12 = invokevirtual < Application, Landroid/content/Context, getSystemService(Ljava/lang/String;)Ljava/lang/Object; > 9,10 @12 exception:11,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
15 = invokevirtual < Application, Landroid/app/admin/DevicePolicyManager, getAccountTypesWithManagementDisabledAsUser(I)[Ljava/lang/String; > 13,2 @18 exception:14,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
19 = invokevirtual < Application, Ljava/lang/String, equals(Ljava/lang/Object;)Z > 17,3 @32 exception:18,
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 2,116,117 @167 exception:118,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
4 = invokevirtual < Application, Landroid/util/ArrayMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 2,1 @3 exception:3,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
invokespecial < Application, Landroid/content/Intent, <init>(Landroid/content/Context;Ljava/lang/Class;)V > 3,4,5 @6 exception:6,
9 = invokevirtual < Application, Landroid/content/Intent, putExtra(Ljava/lang/String;I)Landroid/content/Intent; > 3,7,2 @11 exception:8,
12 = invokevirtual < Application, Landroid/content/Intent, addFlags(I)Landroid/content/Intent; > 3,10 @16 exception:11,
return 3,
24 = phi  18,23,
28 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @44 exception:27,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
invokespecial < Application, Landroid/os/UserHandle, <init>(I)V > 30,3 @52 exception:31,
invokevirtual < Application, Landroid/content/Context, startActivityAsUser(Landroid/content/Intent;Landroid/os/UserHandle;)V > 29,24,30 @55 exception:32,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 28 @58 exception:37,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = v3[phiInstruction].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""startAddAccountSession: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	String v22 = v3.toString();
	int v23 = Log.v(""AccountManagerService"", v22);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v26 = Binder.getCallingUid();
	int v27 = UserHandle.getUserId(v26);
	Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v31 = v30.isActiveProfileOwner(p2);
	boolean v32 = v30.isActiveDeviceOwner(p2);
	boolean v29 = phiInstruction;
	UserManager v33 = AccountManagerService.getUserManager();
	UserHandle v34 = new UserHandle(v27);
	Bundle v36 = v33.getUserRestrictions(v34);
	boolean v37 = v36.getBoolean(""no_modify_accounts"");
	boolean v28 = 0;
	Object v40 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v41 = v40.isActiveProfileOwner(p3);
	boolean v42 = v40.isActiveDeviceOwner(p3);
	boolean v39 = phiInstruction;
	Object v43 = this.mContext.getSystemService(""device_policy"");
	String v44 = v43.getAccountTypesWithManagementDisabledAsUser(v27);
	boolean v45 = v44[phiInstruction].equals(p2);
	boolean v38 = 0;
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	Object v49 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
	Object v48 = v49;
	Intent v51 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v53 = v51.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v54 = v51.addFlags(268435456);
	Intent v50 = v51;
	Intent v56 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v58 = v56.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v59 = v56.addFlags(268435456);
	Intent v55 = v56;
	long v60 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v61 = new UserHandle(v27);
	this.mContext.startActivityAsUser(phiInstruction, v61);
	IAccountManager$Stub.restoreCallingIdentity(v60);
	return;
}
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","0","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 54,55 @87 exception:56,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 57,58 @98 exception:59,
conditional branch(eq, to iindex=-1) 4,14,
goto (from iindex= 48 to iindex = 2),
60 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 60,61 @107 exception:62,
64 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @110 exception:63,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
68 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @119 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V > 71,1,70,2,3,4 @134 exception:72,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 68 @140 exception:79,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
","public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""hasFeatures: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v23 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v23, p4);
	long v25 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v26 = p0.getUserAccounts(v23);
	AccountManagerService$TestFeaturesSession v27 = new AccountManagerService$TestFeaturesSession(p0,v26,p1,p2,p3);
	v27.bind();
	IAccountManager$Stub.restoreCallingIdentity(v25);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 54,55 @87 exception:56,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 57,58 @98 exception:59,
conditional branch(eq, to iindex=-1) 4,14,
goto (from iindex= 48 to iindex = 2),
60 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 60,61 @107 exception:62,
64 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @110 exception:63,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
return,
68 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @119 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V > 71,1,70,2,3,4 @134 exception:72,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 68 @140 exception:79,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""hasFeatures: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v23 = UserHandle.getCallingUserId();
	boolean v25 = AccountManagerService.isAccountVisibleToCaller(Account.type, v1, v23, p4);
	long v26 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v28 = AccountManagerService.getUserAccountsNotChecked(v23);
	AccountManagerService$UserAccounts v27 = v28;
	AccountManagerService$TestFeaturesSession v29 = new AccountManagerService$TestFeaturesSession(p0,v27,p1,p2,p3);
	boolean v32 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v33 = new StringBuilder();
	StringBuilder v35 = v33.append(""initiating bind to authenticator type "");
	StringBuilder v36 = v33.append(this.mAccountType);
	String v37 = v33.toString();
	int v38 = Log.v(""AccountManagerService"", v37);
	boolean v39 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v40 = new StringBuilder();
	StringBuilder v42 = v40.append(""bind attempt failed for "");
	String v43 = AccountManagerService$Session.toDebugString();
	StringBuilder v44 = v40.append(v43);
	String v45 = v40.toString();
	int v46 = Log.d(""AccountManagerService"", v45);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v26);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","1","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 54,55 @87 exception:56,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 57,58 @98 exception:59,
conditional branch(eq, to iindex=-1) 4,14,
60 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 60,61 @107 exception:62,
64 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @110 exception:63,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
return,
68 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @119 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V > 71,1,70,2,3,4 @134 exception:72,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 68 @140 exception:79,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""hasFeatures: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v23 = UserHandle.getCallingUserId();
	boolean v25 = AccountManagerService.isAccountVisibleToCaller(Account.type, v1, v23, p4);
	long v26 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v28 = AccountManagerService.getUserAccountsNotChecked(v23);
	AccountManagerService$UserAccounts v27 = v28;
	AccountManagerService$TestFeaturesSession v29 = new AccountManagerService$TestFeaturesSession(p0,v27,p1,p2,p3);
	boolean v32 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v33 = new StringBuilder();
	StringBuilder v35 = v33.append(""initiating bind to authenticator type "");
	StringBuilder v36 = v33.append(this.mAccountType);
	String v37 = v33.toString();
	int v38 = Log.v(""AccountManagerService"", v37);
	boolean v39 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
	StringBuilder v40 = new StringBuilder();
	StringBuilder v42 = v40.append(""bind attempt failed for "");
	String v43 = AccountManagerService$Session.toDebugString();
	StringBuilder v44 = v40.append(v43);
	String v45 = v40.toString();
	int v46 = Log.d(""AccountManagerService"", v45);
	AccountManagerService$Session.onError(1, ""bind failure"");
	IAccountManager$Stub.restoreCallingIdentity(v26);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 54,55 @87 exception:56,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 57,58 @98 exception:59,
conditional branch(eq, to iindex=-1) 4,14,
goto (from iindex= 48 to iindex = 2),
60 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 60,61 @107 exception:62,
64 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @110 exception:63,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(ne, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,3,4,5 @4 exception:7,
10 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 8,2 @8 exception:9,
return 10,
conditional branch(eq, to iindex=-1) 7,8,
return,
68 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @119 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V > 71,1,70,2,3,4 @134 exception:72,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 68 @140 exception:79,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 2
public boolean isAccountVisibleToCaller(String p1, int p2, int p3, String p4){
	List v1 = p0.getTypesVisibleToCaller(p2, p3, p4);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""hasFeatures: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v23 = UserHandle.getCallingUserId();
	List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);
	boolean v27 = v26.contains(p2);
	boolean v25 = v27;
	long v28 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v29 = p0.getUserAccounts(v23);
	AccountManagerService$TestFeaturesSession v30 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
	boolean v33 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v34 = new StringBuilder();
	StringBuilder v36 = v34.append(""initiating bind to authenticator type "");
	StringBuilder v37 = v34.append(this.mAccountType);
	String v38 = v34.toString();
	int v39 = Log.v(""AccountManagerService"", v38);
	IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType);
	int v43 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);
	int v45 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v46 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v45);
	boolean v40 = 0;
	StringBuilder v54 = new StringBuilder();
	StringBuilder v56 = v54.append(""bind attempt failed for "");
	long v58 = SystemClock.elapsedRealtime();
	String v59 = AccountManagerService$Session.toDebugString(v58);
	String v57 = v59;
	StringBuilder v60 = v54.append(v57);
	String v61 = v54.toString();
	int v62 = Log.d(""AccountManagerService"", v61);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v64 = AccountManagerService$Session.getResponseAndClose();
	boolean v65 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v66 = new StringBuilder();
	Class v68 = AccountManagerService$Session.getClass();
	String v69 = v68.getSimpleName();
	StringBuilder v70 = v66.append(v69);
	StringBuilder v71 = v66.append("" calling onError() on response "");
	StringBuilder v72 = v66.append(v64);
	String v73 = v66.toString();
	int v74 = Log.v(""AccountManagerService"", v73);
	v64.onError(1, ""bind failure"");
	boolean v76 = Log.isLoggable(""AccountManagerService"", 2);
	int v77 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v28);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 54,55 @87 exception:56,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 57,58 @98 exception:59,
conditional branch(eq, to iindex=-1) 4,14,
60 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 60,61 @107 exception:62,
64 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @110 exception:63,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(ne, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,3,4,5 @4 exception:7,
10 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 8,2 @8 exception:9,
return 10,
conditional branch(eq, to iindex=-1) 7,8,
return,
68 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @119 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V > 71,1,70,2,3,4 @134 exception:72,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 68 @140 exception:79,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 2
public boolean isAccountVisibleToCaller(String p1, int p2, int p3, String p4){
	List v1 = p0.getTypesVisibleToCaller(p2, p3, p4);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""hasFeatures: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v23 = UserHandle.getCallingUserId();
	List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);
	boolean v27 = v26.contains(p2);
	boolean v25 = v27;
	long v28 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v29 = p0.getUserAccounts(v23);
	AccountManagerService$TestFeaturesSession v30 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
	boolean v33 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v34 = new StringBuilder();
	StringBuilder v36 = v34.append(""initiating bind to authenticator type "");
	StringBuilder v37 = v34.append(this.mAccountType);
	String v38 = v34.toString();
	int v39 = Log.v(""AccountManagerService"", v38);
	IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType);
	int v43 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);
	int v45 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v46 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v45);
	boolean v40 = 0;
	StringBuilder v54 = new StringBuilder();
	StringBuilder v56 = v54.append(""bind attempt failed for "");
	long v58 = SystemClock.elapsedRealtime();
	String v59 = AccountManagerService$Session.toDebugString(v58);
	String v57 = v59;
	StringBuilder v60 = v54.append(v57);
	String v61 = v54.toString();
	int v62 = Log.d(""AccountManagerService"", v61);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v64 = AccountManagerService$Session.getResponseAndClose();
	boolean v65 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v66 = new StringBuilder();
	Class v68 = AccountManagerService$Session.getClass();
	String v69 = v68.getSimpleName();
	StringBuilder v70 = v66.append(v69);
	StringBuilder v71 = v66.append("" calling onError() on response "");
	StringBuilder v72 = v66.append(v64);
	String v73 = v66.toString();
	int v74 = Log.v(""AccountManagerService"", v73);
	v64.onError(1, ""bind failure"");
	boolean v76 = Log.isLoggable(""AccountManagerService"", 2);
	int v77 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v28);
	return;
}
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","2","7 = invokestatic < Application, Landroid/os/Binder, getCallingUid()I > @0 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
invokevirtual < Application, Landroid/app/AppOpsManager, checkPackage(ILjava/lang/String;)V > 8,7,5 @6 exception:9,
13 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,11 @12 exception:12,
conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 15 @20 exception:16,
19 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,17 @25 exception:18,
21 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,3 @28 exception:20,
24 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,22 @33 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 15,2 @36 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,27 @41 exception:28,
31 = invokestatic < Application, Ljava/util/Arrays, toString([Ljava/lang/Object;)Ljava/lang/String; > 4 @44 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,31 @48 exception:32,
36 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,34 @53 exception:35,
38 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,7 @56 exception:37,
41 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 15,39 @61 exception:40,
43 = invokestatic < Application, Landroid/os/Binder, getCallingPid()I > @64 exception:42,
45 = invokevirtual < Application, Ljava/lang/StringBuilder, append(I)Ljava/lang/StringBuilder; > 15,43 @68 exception:44,
47 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 15 @71 exception:46,
49 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,47 @75 exception:48,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 54,55 @87 exception:56,
conditional branch(eq, to iindex=-1) 2,14,
57 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 57,58 @98 exception:59,
conditional branch(eq, to iindex=-1) 4,14,
goto (from iindex= 48 to iindex = 2),
60 = phi  53,14,
invokestatic < Application, Lcom/android/internal/util/Preconditions, checkArgument(ZLjava/lang/Object;)V > 60,61 @107 exception:62,
64 = invokestatic < Application, Landroid/os/UserHandle, getCallingUserId()I > @110 exception:63,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(ne, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,3,4,5 @4 exception:7,
10 = invokeinterface < Application, Ljava/util/List, contains(Ljava/lang/Object;)Z > 8,2 @8 exception:9,
return 10,
conditional branch(eq, to iindex=-1) 7,8,
return,
68 = invokestatic < Application, Landroid/accounts/IAccountManager$Stub, clearCallingIdentity()J > @119 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokespecial < Application, Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession, <init>(Lcom/android/server/accounts/AccountManagerService;Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;)V > 71,1,70,2,3,4 @134 exception:72,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
5 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 2,3 @3 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 7 @11 exception:8,
11 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,9 @16 exception:10,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
14 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 7,12 @21 exception:13,
16 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 7 @24 exception:15,
18 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 2,16 @28 exception:17,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$fgetmAuthenticatorCache(Lcom/android/server/accounts/AccountManagerService;)Lcom/android/server/accounts/IAccountAuthenticatorCache; > 3 @2 exception:4,
7 = invokestatic < Application, Landroid/accounts/AuthenticatorDescription, newKey(Ljava/lang/String;)Landroid/accounts/AuthenticatorDescription; > 2 @6 exception:6,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 8 @12 exception:9,
12 = invokeinterface < Application, Lcom/android/server/accounts/IAccountAuthenticatorCache, getServiceInfo(Landroid/accounts/AuthenticatorDescription;I)Landroid/content/pm/RegisteredServicesCache$ServiceInfo; > 5,7,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
19 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 17 @63 exception:18,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, -$$Nest$misLocalUnlockedUser(Lcom/android/server/accounts/AccountManagerService;I)Z > 16,19 @67 exception:20,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 91 @81 exception:92,
95 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,93 @86 exception:94,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
98 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 91,96 @91 exception:97,
101 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 91,99 @96 exception:100,
103 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 91 @99 exception:102,
105 = invokestatic < Application, Landroid/util/Slog, w(Ljava/lang/String;Ljava/lang/String;)I > 15,103 @103 exception:104,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 25 @41 exception:26,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,27 @46 exception:28,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
3 = invokestatic < Application, Landroid/os/SystemClock, elapsedRealtime()J > @0 exception:2,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString(J)Ljava/lang/String; > 1,3 @4 exception:4,
return 5,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 25,31 @53 exception:32,
35 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 25 @56 exception:34,
37 = invokestatic < Application, Landroid/util/Log, d(Ljava/lang/String;Ljava/lang/String;)I > 2,35 @60 exception:36,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, getResponseAndClose()Landroid/accounts/IAccountManagerResponse; > 1 @6 exception:7,
conditional branch(eq, to iindex=-1) 8,11,
18 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @15 exception:17,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
invokespecial < Application, Ljava/lang/StringBuilder, <init>()V > 19 @23 exception:20,
22 = invokevirtual < Application, Ljava/lang/Object, getClass()Ljava/lang/Class; > 1 @26 exception:21,
24 = invokevirtual < Application, Ljava/lang/Class, getSimpleName()Ljava/lang/String; > 22 @30 exception:23,
26 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,24 @34 exception:25,
29 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/String;)Ljava/lang/StringBuilder; > 19,27 @39 exception:28,
31 = invokevirtual < Application, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > 19,8 @42 exception:30,
33 = invokevirtual < Application, Ljava/lang/StringBuilder, toString()Ljava/lang/String; > 19 @45 exception:32,
35 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;)I > 10,33 @49 exception:34,
invokeinterface < Application, Landroid/accounts/IAccountManagerResponse, onError(ILjava/lang/String;)V > 8,2,3 @52 exception:40,
41 = getCaughtException ,
43 = invokestatic < Application, Landroid/util/Log, isLoggable(Ljava/lang/String;I)Z > 10,9 @57 exception:42,
conditional branch(eq, to iindex=-1) 43,11,
46 = invokestatic < Application, Landroid/util/Log, v(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I > 10,44,41 @65 exception:45,
goto (from iindex= 32 to iindex = 12),
return,
return,
invokestatic < Application, Landroid/accounts/IAccountManager$Stub, restoreCallingIdentity(J)V > 68 @140 exception:79,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 2
public boolean isAccountVisibleToCaller(String p1, int p2, int p3, String p4){
	List v1 = p0.getTypesVisibleToCaller(p2, p3, p4);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""hasFeatures: "");
	StringBuilder v7 = v4.append(p2);
	StringBuilder v8 = v4.append("", response "");
	StringBuilder v9 = v4.append(p1);
	StringBuilder v10 = v4.append("", features "");
	String v11 = Arrays.toString(p3);
	StringBuilder v12 = v4.append(v11);
	StringBuilder v13 = v4.append("", caller's uid "");
	StringBuilder v14 = v4.append(v1);
	StringBuilder v15 = v4.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v4.append(v16);
	String v18 = v4.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v23 = UserHandle.getCallingUserId();
	List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);
	boolean v27 = v26.contains(p2);
	boolean v25 = v27;
	long v28 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v29 = p0.getUserAccounts(v23);
	AccountManagerService$TestFeaturesSession v30 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
	boolean v33 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v34 = new StringBuilder();
	StringBuilder v36 = v34.append(""initiating bind to authenticator type "");
	StringBuilder v37 = v34.append(this.mAccountType);
	String v38 = v34.toString();
	int v39 = Log.v(""AccountManagerService"", v38);
	IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType);
	int v43 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);
	int v45 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v46 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v45);
	boolean v40 = 0;
	StringBuilder v54 = new StringBuilder();
	StringBuilder v56 = v54.append(""bind attempt failed for "");
	long v58 = SystemClock.elapsedRealtime();
	String v59 = AccountManagerService$Session.toDebugString(v58);
	String v57 = v59;
	StringBuilder v60 = v54.append(v57);
	String v61 = v54.toString();
	int v62 = Log.d(""AccountManagerService"", v61);
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v64 = AccountManagerService$Session.getResponseAndClose();
	boolean v65 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v66 = new StringBuilder();
	Class v68 = AccountManagerService$Session.getClass();
	String v69 = v68.getSimpleName();
	StringBuilder v70 = v66.append(v69);
	StringBuilder v71 = v66.append("" calling onError() on response "");
	StringBuilder v72 = v66.append(v64);
	String v73 = v66.toString();
	int v74 = Log.v(""AccountManagerService"", v73);
	v64.onError(1, ""bind failure"");
	boolean v76 = Log.isLoggable(""AccountManagerService"", 2);
	int v77 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	IAccountManager$Stub.restoreCallingIdentity(v28);
	return;
}
","SYS_OR_SIG"

