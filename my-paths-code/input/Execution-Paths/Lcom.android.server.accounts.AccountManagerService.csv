"Class","Method","Depth","Trace Instruction(s) ...","Java Code Representation","Access Control Level"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","0","conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
arraystore 11[9] = 13,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
conditional branch(ne, to iindex=-1) 43,10,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","1","conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
arraystore 11[9] = 13,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
monitorexit 6,
monitorexit 5,
return 9,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","1","conditional branch(eq, to iindex=-1) 8,10,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
monitorexit 6,
monitorexit 5,
return 9,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	boolean v6 = p0.canUserModifyAccounts(v4, v1);
	boolean v7 = p0.canUserModifyAccountsForType(v4, Account.type, v1);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v4);
	boolean v10 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v10;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","2","conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
arraystore 11[9] = 13,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
return 5,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = new <Application,Landroid/content/ContentValues>@6,
15 = new <Application,[Ljava/lang/String>@2514 ,
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 15[17] = 16,
18 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 15[19] = 18,
conditional branch(le, to iindex=-1) 23,17,
24 = phi  17,19,
return 24,
monitorexit 6,
monitorexit 5,
return 9,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public boolean updateAccountLastAuthenticatedTime(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	long v3 = System.currentTimeMillis();
	Long v4 = Long.valueOf(v3);
	v1.put(""last_password_entry_time_millis_epoch"", v4);
	String v5 = new String(2);
	int v6 = v1.update(""accounts"", v1, ""name=? AND type=?"", v5);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","2","conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
arraystore 11[9] = 13,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
return 5,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = new <Application,Landroid/content/ContentValues>@6,
15 = new <Application,[Ljava/lang/String>@2514 ,
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 15[17] = 16,
18 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 15[19] = 18,
conditional branch(le, to iindex=-1) 23,17,
24 = phi  17,19,
return 24,
monitorexit 6,
monitorexit 5,
return 9,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public boolean updateAccountLastAuthenticatedTime(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	long v3 = System.currentTimeMillis();
	Long v4 = Long.valueOf(v3);
	v1.put(""last_password_entry_time_millis_epoch"", v4);
	String v5 = new String(2);
	int v6 = v1.update(""accounts"", v1, ""name=? AND type=?"", v5);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","accountAuthenticated(Landroid/accounts/Account;)Z","2","conditional branch(eq, to iindex=-1) 8,10,
11 = new <Application,[Ljava/lang/Object>@156 ,
arraystore 11[10] = 2,
arraystore 11[9] = 13,
27 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,27,4,26 @45 exception:28,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 29,10,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,26,4 @51 exception:39,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(eq, to iindex=-1) 40,10,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,26,41,4 @59 exception:42,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 43,10,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,26 @70 exception:46,
49 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateLastAuthenticatedTime(Landroid/accounts/Account;)Z > 1,2 @73 exception:48,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @0 exception:3,
return 5,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 4,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateAccountLastAuthenticatedTime(Landroid/accounts/Account;)Z > 7,2 @12 exception:8,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = new <Application,Landroid/content/ContentValues>@6,
15 = new <Application,[Ljava/lang/String>@2514 ,
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 15[17] = 16,
18 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 15[19] = 18,
conditional branch(le, to iindex=-1) 23,17,
24 = phi  17,19,
return 24,
monitorexit 6,
monitorexit 5,
return 9,
return 49,","depth : 0
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(2);
	Integer v3 = Integer.valueOf(v1);
	String v4 = String.format(""accountAuthenticated( account: %s, callerUid: %s)"", v2);
	int v5 = Log.v(""AccountManagerService"", v4);
	Object v6 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v7 = UserHandle.getCallingUserId();
	boolean v8 = p0.isAccountManagedByCaller(Account.type, v1, v7);
	boolean v9 = p0.canUserModifyAccounts(v7, v1);
	boolean v10 = p0.canUserModifyAccountsForType(v7, Account.type, v1);
	long v11 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v7);
	boolean v13 = p0.updateLastAuthenticatedTime(p1);
	IAccountManager$Stub.restoreCallingIdentity(v11);
	return v13;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean updateLastAuthenticatedTime(Account p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsForCaller();
	boolean v2 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public boolean updateAccountLastAuthenticatedTime(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	long v3 = System.currentTimeMillis();
	Long v4 = Long.valueOf(v3);
	v1.put(""last_password_entry_time_millis_epoch"", v4);
	String v5 = new String(2);
	int v6 = v1.update(""accounts"", v1, ""name=? AND type=?"", v5);
	return phiInstruction;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
conditional branch(eq, to iindex=-1) 66,14,
67 = new <Application,Lcom/android/server/accounts/AccountManagerService$18>@117,
69 = new <Application,Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession>@122,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 69 @133 exception:72,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	AccountManagerService$18 v22 = new AccountManagerService$18(p0,p1,p4);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v23 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v21,v22,p2,p3,v1,p4,1);
	v23.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 66,14,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,64,3,7,5,70 @106 exception:74,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
11 = binaryop(xor) 9 , 10,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
28 = phi  27,14,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
46 = phi  45,14,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
return 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, handleGetAccountsResult(Landroid/accounts/IAccountManagerResponse;[Landroid/accounts/Account;Ljava/lang/String;)V > 1,2,75,5 @110 exception:76,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, needToStartChooseAccountActivity([Landroid/accounts/Account;Ljava/lang/String;)Z > 1,3,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = arraylength 3,
conditional branch(ne, to iindex=-1) 8,9,
13 = new <Application,Landroid/os/Bundle>@14,
15 = arrayload 3[7],
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 15,
19 = arrayload 3[7],
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 19,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,13 @38 exception:23,
return,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	Account v23 = p0.getAccountsFromCache(v21, p2, v1, p4, 1);
	p0.handleGetAccountsResult(p1, v23, p4);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 1
public void handleGetAccountsResult(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = p0.needToStartChooseAccountActivity(p2, p3);
	Bundle v1 = new Bundle();
	v1.putString(""authAccount"", Account.name);
	v1.putString(""accountType"", Account.type);
	p0.onResult(p1, v1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 66,14,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,64,3,7,5,70 @106 exception:74,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
11 = binaryop(xor) 9 , 10,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
28 = phi  27,14,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
46 = phi  45,14,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
return 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, handleGetAccountsResult(Landroid/accounts/IAccountManagerResponse;[Landroid/accounts/Account;Ljava/lang/String;)V > 1,2,75,5 @110 exception:76,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, needToStartChooseAccountActivity([Landroid/accounts/Account;Ljava/lang/String;)Z > 1,3,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,7,
8 = arraylength 3,
conditional branch(ne, to iindex=-1) 8,9,
13 = new <Application,Landroid/os/Bundle>@14,
15 = arrayload 3[7],
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 15,
19 = arrayload 3[7],
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 19,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,13 @38 exception:23,
return,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	int v4 = UserHandle.getCallingUserId();
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(v4);
	boolean v7 = ArrayUtils.isEmpty(p3);
	Account v8 = p0.getAccountsFromCache(v6, p2, v1, p4, 1);
	p0.handleGetAccountsResult(p1, v8, p4);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 1
public void handleGetAccountsResult(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = p0.needToStartChooseAccountActivity(p2, p3);
	Bundle v1 = new Bundle();
	v1.putString(""authAccount"", Account.name);
	v1.putString(""accountType"", Account.type);
	p0.onResult(p1, v1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 66,14,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,64,3,7,5,70 @106 exception:74,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
11 = binaryop(xor) 9 , 10,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
28 = phi  27,14,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
46 = phi  45,14,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
conditional branch(ne, to iindex=-1) 5,7,
goto (from iindex= 3 to iindex = 2),
10 = phi  9,5,
11 = new <Application,Ljava/util/LinkedHashMap>@8,
13 = arraylength 3,
33 = phi  32,7,
conditional branch(ge, to iindex=-1) 33,13,
40 = new <Application,[Landroid/accounts/Account>@5639 ,
45 = checkcast <Application,[Landroid/accounts/Account>44 <Application,[Landroid/accounts/Account>,
return 45,
return 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, handleGetAccountsResult(Landroid/accounts/IAccountManagerResponse;[Landroid/accounts/Account;Ljava/lang/String;)V > 1,2,75,5 @110 exception:76,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, needToStartChooseAccountActivity([Landroid/accounts/Account;Ljava/lang/String;)Z > 1,3,4 @0 exception:5,
4 = arraylength 2,
conditional branch(ge, to iindex=-1) 4,6,
7 = arraylength 2,
conditional branch(le, to iindex=-1) 7,6,
8 = arrayload 2[5],
conditional branch(ne, to iindex=-1) 16,17,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = arraylength 3,
conditional branch(ne, to iindex=-1) 8,9,
13 = new <Application,Landroid/os/Bundle>@14,
15 = arrayload 3[7],
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 15,
19 = arrayload 3[7],
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 19,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,13 @38 exception:23,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
36 = getCaughtException ,
conditional branch(eq, to iindex=-1) 38,5,
return,
return,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	Account v23 = p0.getAccountsFromCache(v21, p2, v1, p4, 1);
	p0.handleGetAccountsResult(p1, v23, p4);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 2
public Account filterAccounts(AccountManagerService$UserAccounts p1, Account p2, int p3, String p4, boolean p5){
	String v1 = p0.getPackageNameForUid(p3);
	LinkedHashMap v1 = new LinkedHashMap();
	Map v3 = p0.filterSharedAccounts(p1, v1, p3, p4);
	int v4 = v3.size();
	Account v4 = new Account(v4);
	Set v5 = v3.keySet();
	Object v6 = v5.toArray(v4);
	return v6;
}
-----
depth : 1
public void handleGetAccountsResult(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = p0.needToStartChooseAccountActivity(p2, p3);
	Bundle v1 = new Bundle();
	v1.putString(""authAccount"", Account.name);
	v1.putString(""accountType"", Account.type);
	p0.onResult(p1, v1);
	return;
}
-----
depth : 2
public boolean needToStartChooseAccountActivity(Account p1, String p2){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	Integer v3 = p0.resolveAccountVisibility(p1[0], p2, v2);
	int v4 = v3.intValue();
	return 1;
}
-----
depth : 2
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 66,14,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,64,3,7,5,70 @106 exception:74,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
11 = binaryop(xor) 9 , 10,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
28 = phi  27,14,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
46 = phi  45,14,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
conditional branch(ne, to iindex=-1) 5,7,
goto (from iindex= 3 to iindex = 2),
10 = phi  9,5,
11 = new <Application,Ljava/util/LinkedHashMap>@8,
13 = arraylength 3,
33 = phi  32,7,
conditional branch(ge, to iindex=-1) 33,13,
40 = new <Application,[Landroid/accounts/Account>@5639 ,
45 = checkcast <Application,[Landroid/accounts/Account>44 <Application,[Landroid/accounts/Account>,
return 45,
return 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, handleGetAccountsResult(Landroid/accounts/IAccountManagerResponse;[Landroid/accounts/Account;Ljava/lang/String;)V > 1,2,75,5 @110 exception:76,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, needToStartChooseAccountActivity([Landroid/accounts/Account;Ljava/lang/String;)Z > 1,3,4 @0 exception:5,
4 = arraylength 2,
conditional branch(ge, to iindex=-1) 4,6,
7 = arraylength 2,
conditional branch(le, to iindex=-1) 7,6,
8 = arrayload 2[5],
conditional branch(ne, to iindex=-1) 16,17,
return 5,
conditional branch(eq, to iindex=-1) 6,7,
8 = arraylength 3,
conditional branch(ne, to iindex=-1) 8,9,
13 = new <Application,Landroid/os/Bundle>@14,
15 = arrayload 3[7],
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 15,
19 = arrayload 3[7],
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 19,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,13 @38 exception:23,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
36 = getCaughtException ,
conditional branch(eq, to iindex=-1) 38,5,
return,
return,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	Account v23 = p0.getAccountsFromCache(v21, p2, v1, p4, 1);
	p0.handleGetAccountsResult(p1, v23, p4);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 2
public Account filterAccounts(AccountManagerService$UserAccounts p1, Account p2, int p3, String p4, boolean p5){
	String v1 = p0.getPackageNameForUid(p3);
	LinkedHashMap v1 = new LinkedHashMap();
	Map v3 = p0.filterSharedAccounts(p1, v1, p3, p4);
	int v4 = v3.size();
	Account v4 = new Account(v4);
	Set v5 = v3.keySet();
	Object v6 = v5.toArray(v4);
	return v6;
}
-----
depth : 1
public void handleGetAccountsResult(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = p0.needToStartChooseAccountActivity(p2, p3);
	Bundle v1 = new Bundle();
	v1.putString(""authAccount"", Account.name);
	v1.putString(""accountType"", Account.type);
	p0.onResult(p1, v1);
	return;
}
-----
depth : 2
public boolean needToStartChooseAccountActivity(Account p1, String p2){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	Integer v3 = p0.resolveAccountVisibility(p1[0], p2, v2);
	int v4 = v3.intValue();
	return 0;
}
-----
depth : 2
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @90 exception:63,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 66,14,
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,64,3,7,5,70 @106 exception:74,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
11 = binaryop(xor) 9 , 10,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
28 = phi  27,14,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
46 = phi  45,14,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
conditional branch(ne, to iindex=-1) 5,7,
10 = phi  9,5,
11 = new <Application,Ljava/util/LinkedHashMap>@8,
13 = arraylength 3,
33 = phi  32,7,
conditional branch(ge, to iindex=-1) 33,13,
40 = new <Application,[Landroid/accounts/Account>@5639 ,
45 = checkcast <Application,[Landroid/accounts/Account>44 <Application,[Landroid/accounts/Account>,
return 45,
return 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, handleGetAccountsResult(Landroid/accounts/IAccountManagerResponse;[Landroid/accounts/Account;Ljava/lang/String;)V > 1,2,75,5 @110 exception:76,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, needToStartChooseAccountActivity([Landroid/accounts/Account;Ljava/lang/String;)Z > 1,3,4 @0 exception:5,
4 = arraylength 2,
conditional branch(ge, to iindex=-1) 4,6,
7 = arraylength 2,
conditional branch(le, to iindex=-1) 7,6,
8 = arrayload 2[5],
conditional branch(ne, to iindex=-1) 16,17,
return 6,
conditional branch(eq, to iindex=-1) 6,7,
8 = arraylength 3,
conditional branch(ne, to iindex=-1) 8,9,
13 = new <Application,Landroid/os/Bundle>@14,
15 = arrayload 3[7],
16 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 15,
19 = arrayload 3[7],
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 19,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,13 @38 exception:23,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
36 = getCaughtException ,
conditional branch(eq, to iindex=-1) 38,5,
return,
return,
return,","depth : 0
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v19);
	boolean v22 = ArrayUtils.isEmpty(p3);
	Account v23 = p0.getAccountsFromCache(v21, p2, v1, p4, 1);
	p0.handleGetAccountsResult(p1, v23, p4);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 2
public Account filterAccounts(AccountManagerService$UserAccounts p1, Account p2, int p3, String p4, boolean p5){
	LinkedHashMap v0 = new LinkedHashMap();
	Map v2 = p0.filterSharedAccounts(p1, v0, p3, p4);
	int v3 = v2.size();
	Account v3 = new Account(v3);
	Set v4 = v2.keySet();
	Object v5 = v4.toArray(v3);
	return v5;
}
-----
depth : 1
public void handleGetAccountsResult(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = p0.needToStartChooseAccountActivity(p2, p3);
	Bundle v1 = new Bundle();
	v1.putString(""authAccount"", Account.name);
	v1.putString(""accountType"", Account.type);
	p0.onResult(p1, v1);
	return;
}
-----
depth : 2
public boolean needToStartChooseAccountActivity(Account p1, String p2){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	Integer v3 = p0.resolveAccountVisibility(p1[0], p2, v2);
	int v4 = v3.intValue();
	return 1;
}
-----
depth : 2
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","0","conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
conditional branch(ne, to iindex=-1) 64,10,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""peekAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	boolean v19 = p0.isLocalUnlockedUser(v17);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	String v22 = p0.readAuthTokenInternal(v21, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","1","conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 64,10,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthTokensByAccount(Landroid/accounts/Account;)Ljava/util/Map; > 19,3 @44 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @48 exception:22,
26 = phi  18,21,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""peekAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	boolean v19 = p0.isLocalUnlockedUser(v17);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	String v22 = p0.readAuthTokenInternal(v21, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = [resolveCodeAbst] + 26 = phi  18,21.get(p3);
	return v8;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","1","conditional branch(eq, to iindex=-1) 9,10,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 64,10,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthTokensByAccount(Landroid/accounts/Account;)Ljava/util/Map; > 19,3 @44 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @48 exception:22,
26 = phi  18,21,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	boolean v7 = p0.isLocalUnlockedUser(v5);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v5);
	String v10 = p0.readAuthTokenInternal(v9, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v10;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = [resolveCodeAbst] + 26 = phi  18,21.get(p3);
	return v8;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
conditional branch(ne, to iindex=-1) 64,10,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthTokensByAccount(Landroid/accounts/Account;)Ljava/util/Map; > 19,3 @44 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = new <Application,Ljava/util/HashMap>@6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, <Application,[Ljava/lang/String> >,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[14] = 13,
conditional branch(eq, to iindex=-1) 20,12,
return 6,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @48 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
26 = phi  18,21,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""peekAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	boolean v19 = p0.isLocalUnlockedUser(v17);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	String v22 = p0.readAuthTokenInternal(v21, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = [resolveCodeAbst] + 26 = phi  18,21.get(p3);
	return v8;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map findAuthTokensByAccount(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v1 = new HashMap();
	String v2 = new String(2);
	Cursor v3 = v1.query(""ceDb.authtokens"", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v2, 0, 0, 0);
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 9,10,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
conditional branch(ne, to iindex=-1) 64,10,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthTokensByAccount(Landroid/accounts/Account;)Ljava/util/Map; > 19,3 @44 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = new <Application,Ljava/util/HashMap>@6,
8 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, <Application,[Ljava/lang/String> >,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[14] = 13,
conditional branch(eq, to iindex=-1) 20,12,
return 6,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @48 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
26 = phi  18,21,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	boolean v7 = p0.isLocalUnlockedUser(v5);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v5);
	String v10 = p0.readAuthTokenInternal(v9, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v10;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = [resolveCodeAbst] + 26 = phi  18,21.get(p3);
	return v8;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map findAuthTokensByAccount(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v1 = new HashMap();
	String v2 = new String(2);
	Cursor v3 = v1.query(""ceDb.authtokens"", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v2, 0, 0, 0);
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
50 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
52 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,50,5,49 @78 exception:51,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 52,10,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,49 @84 exception:63,
conditional branch(ne, to iindex=-1) 64,10,
68 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,49 @124 exception:67,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readAuthTokenInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,68,2,3 @128 exception:69,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 12,
13 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @30 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
18 = checkcast <Application,Ljava/util/Map>17 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 18,11,
26 = phi  18,21,
32 = checkcast <Application,Ljava/lang/String>31 <Application,Ljava/lang/String>,
monitorexit 13,
monitorexit 12,
return 32,
return 70,","depth : 0
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""peekAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	boolean v19 = p0.isLocalUnlockedUser(v17);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	String v22 = p0.readAuthTokenInternal(v21, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return v22;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readAuthTokenInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v4 = v3.get(p2);
	Object v5 = [resolveCodeAbst] + 26 = phi  18,21.get(p3);
	return v5;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
conditional branch(ne, to iindex=-1) 64,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
goto (from iindex= 66 to iindex = 25),
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,69,3,7,5,14 @174 exception:76,
78 = new <Application,Landroid/os/Bundle>@178,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,78 @186 exception:81,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	Account v24 = p0.getAccountsFromCache(v23, p2, v1, p4, 0);
	Bundle v24 = new Bundle();
	v24.putParcelableArray(""accounts"", v24);
	p0.onResult(p1, v24);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
return 7,
conditional branch(ne, to iindex=-1) 64,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
goto (from iindex= 66 to iindex = 25),
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,69,3,7,5,14 @174 exception:76,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
11 = binaryop(xor) 9 , 10,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
28 = phi  27,14,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
46 = phi  45,14,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
return 50,
78 = new <Application,Landroid/os/Bundle>@178,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,78 @186 exception:81,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
36 = getCaughtException ,
conditional branch(eq, to iindex=-1) 38,5,
return,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	Account v24 = p0.getAccountsFromCache(v23, p2, v1, p4, 0);
	Bundle v24 = new Bundle();
	v24.putParcelableArray(""accounts"", v24);
	p0.onResult(p1, v24);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 1
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
return 7,
conditional branch(ne, to iindex=-1) 64,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 4,14,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,69,3,7,5,14 @174 exception:76,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
11 = binaryop(xor) 9 , 10,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
28 = phi  27,14,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
46 = phi  45,14,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
return 50,
78 = new <Application,Landroid/os/Bundle>@178,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,78 @186 exception:81,
conditional branch(ne, to iindex=-1) 3,5,
6 = new <Application,Ljava/lang/Exception>@4,
conditional branch(eq, to iindex=-1) 13,5,
14 = new <Application,Ljava/lang/StringBuilder>@22,
36 = getCaughtException ,
conditional branch(eq, to iindex=-1) 38,5,
return,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	Account v24 = p0.getAccountsFromCache(v23, p2, v1, p4, 0);
	Bundle v24 = new Bundle();
	v24.putParcelableArray(""accounts"", v24);
	p0.onResult(p1, v24);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 1
public void onResult(IAccountManagerResponse p1, Bundle p2){
	Exception v0 = new Exception();
	int v2 = Log.e(""AccountManagerService"", ""the result is unexpectedly null"", v0);
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	Class v5 = p0.getClass();
	String v6 = v5.getSimpleName();
	StringBuilder v7 = v3.append(v6);
	StringBuilder v8 = v3.append("" calling onResult() on response "");
	StringBuilder v9 = v3.append(p1);
	String v10 = v3.toString();
	int v11 = Log.v(""AccountManagerService"", v10);
	p1.onResult(p2);
	boolean v13 = Log.isLoggable(""AccountManagerService"", 2);
	int v14 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
5 = new <Application,Ljava/util/ArrayList>@0,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
return 7,
conditional branch(ne, to iindex=-1) 64,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession>@142,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @159 exception:73,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v23 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v23,p1,p2,p3,v1,p4,0);
	v23.bind();
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 2
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
5 = new <Application,Ljava/util/ArrayList>@0,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
return 7,
conditional branch(ne, to iindex=-1) 64,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$GetAccountsByTypeAndFeatureSession>@142,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @159 exception:73,
conditional branch(eq, to iindex=-1) 5,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	AccountManagerService$GetAccountsByTypeAndFeatureSession v23 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v23,p1,p2,p3,v1,p4,0);
	v23.bind();
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 2
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""bind attempt failed for "");
	String v5 = p0.toDebugString();
	StringBuilder v6 = v2.append(v5);
	String v7 = v2.toString();
	int v8 = Log.d(""AccountManagerService"", v7);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@26,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
62 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,7,60,5 @94 exception:61,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,2,3,5 @1 exception:6,
5 = new <Application,Ljava/util/ArrayList>@0,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
return 7,
conditional branch(ne, to iindex=-1) 64,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @132 exception:68,
conditional branch(eq, to iindex=-1) 4,14,
70 = arraylength 4,
conditional branch(ne, to iindex=-1) 70,14,
goto (from iindex= 66 to iindex = 25),
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsFromCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,69,3,7,5,14 @174 exception:76,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
11 = binaryop(xor) 9 , 10,
conditional branch(eq, to iindex=-1) 3,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 15,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
28 = phi  27,14,
conditional branch(eq, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 28,14,
31 = new <Application,[Landroid/accounts/Account>@8928 ,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
46 = phi  45,14,
conditional branch(eq, to iindex=-1) 38,14,
monitorexit 15,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;[Landroid/accounts/Account;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,31,4,5,6 @127 exception:49,
conditional branch(ne, to iindex=-1) 5,7,
goto (from iindex= 3 to iindex = 2),
10 = phi  9,5,
11 = new <Application,Ljava/util/LinkedHashMap>@8,
13 = arraylength 3,
33 = phi  32,7,
conditional branch(ge, to iindex=-1) 33,13,
40 = new <Application,[Landroid/accounts/Account>@5639 ,
45 = checkcast <Application,[Landroid/accounts/Account>44 <Application,[Landroid/accounts/Account>,
return 45,
return 50,
78 = new <Application,Landroid/os/Bundle>@178,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, onResult(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;)V > 1,2,78 @186 exception:81,
return,","depth : 0
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""getAccounts: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	int v19 = UserHandle.getCallingUserId();
	List v20 = p0.getTypesVisibleToCaller(v1, v19, p4);
	boolean v21 = v20.contains(p2);
	long v22 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v19);
	Account v24 = p0.getAccountsFromCache(v23, p2, v1, p4, 0);
	Bundle v24 = new Bundle();
	v24.putParcelableArray(""accounts"", v24);
	p0.onResult(p1, v24);
	IAccountManager$Stub.restoreCallingIdentity(v22);
	return;
}
-----
depth : 1
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 2
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public Account getAccountsFromCache(AccountManagerService$UserAccounts p1, String p2, int p3, String p4, boolean p5){
	boolean v1 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
	Preconditions.checkState((v1 ^ 1), ""Method should not be called with cacheLock"");
	Collection v3 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	Account v5 = new Account(phiInstruction);
	Collection v6 = AccountManagerService$UserAccounts.accountCache.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	Account v9 = p0.filterAccounts(p1, v5, p3, p4, p5);
	return v9;
}
-----
depth : 2
public Account filterAccounts(AccountManagerService$UserAccounts p1, Account p2, int p3, String p4, boolean p5){
	String v1 = p0.getPackageNameForUid(p3);
	LinkedHashMap v1 = new LinkedHashMap();
	Map v3 = p0.filterSharedAccounts(p1, v1, p3, p4);
	int v4 = v3.size();
	Account v4 = new Account(v4);
	Set v5 = v3.keySet();
	Object v6 = v5.toArray(v4);
	return v6;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","0","conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
conditional branch(ne, to iindex=-1) 57,12,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
conditional branch(ne, to iindex=-1) 97,12,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","1","conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
return 23,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","1","conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
return 23,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","2","conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","2","conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V","2","conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Ljava/lang/StringBuilder>@20,
conditional branch(eq, to iindex=-1) 3,12,
goto (from iindex= 38 to iindex = 2),
50 = phi  49,12,
conditional branch(eq, to iindex=-1) 2,12,
goto (from iindex= 44 to iindex = 2),
53 = phi  49,12,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,5 @100 exception:56,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 57,12,
72 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,72,7,74 @116 exception:75,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 76,12,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @122 exception:77,
conditional branch(ne, to iindex=-1) 78,12,
80 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,7 @128 exception:79,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
5 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 3 @2 exception:4,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 80,12,
goto (from iindex= 65 to iindex = 26),
94 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,5,7 @160 exception:93,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 94,12,
95 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,5,95,7 @176 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,12,
return,","depth : 0
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", for user id "");
	StringBuilder v14 = v2.append(p4);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	boolean v19 = p0.isCrossUser(v1, p4);
	UserHandle v20 = UserHandle.of(p4);
	int v21 = v20.getIdentifier();
	boolean v22 = p0.isAccountManagedByCaller(Account.type, v1, v21);
	boolean v23 = p0.isSystemUid(v1);
	boolean v24 = p0.isProfileOwner(v1);
	boolean v25 = p0.canUserModifyAccounts(p4, v1);
	boolean v26 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(eq, to iindex=-1) 44,10,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 9,10,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	p0.setPasswordInternal(v7, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,Landroid/content/ContentValues>@6,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@76 ,
arraystore 7[10] = 9,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
return,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 9,10,
11 = new <Application,Ljava/lang/StringBuilder>@13,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 20,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,Landroid/content/ContentValues>@6,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@76 ,
arraystore 7[10] = 9,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
return,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setPassword(Landroid/accounts/Account;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 9,10,
42 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,42,5,41 @65 exception:43,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 44,10,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,41 @75 exception:57,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,58,2,3,5 @79 exception:59,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,Landroid/content/ContentValues>@6,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@76 ,
arraystore 7[10] = 9,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
return,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void setPassword(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	p0.setPasswordInternal(v7, p1, p2, v1);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	boolean v21 = p0.saveAuthTokenToDatabase(v20, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	boolean v21 = p0.saveAuthTokenToDatabase(v20, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 10,11,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v5);
	boolean v9 = p0.saveAuthTokenToDatabase(v8, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
monitorenter 5,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
30 = phi  10,24,
monitorexit 5,
return 30,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,Landroid/content/ContentValues>@6,
return 20,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	boolean v21 = p0.saveAuthTokenToDatabase(v20, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public boolean deleteAuthtokensByAccountIdAndType(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=? AND type=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long insertAuthToken(long p1, String p2, String p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	Long v3 = Long.valueOf(p1);
	v1.put(""accounts_id"", v3);
	v1.put(""type"", p2);
	v1.put(""authtoken"", p3);
	long v7 = v1.insert(""ceDb.authtokens"", ""authtoken"", v1);
	return v7;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
monitorenter 5,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
30 = phi  10,24,
monitorexit 5,
return 30,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 20,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,Landroid/content/ContentValues>@6,
return 20,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setAuthToken: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", authTokenType "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v16 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
	boolean v21 = p0.saveAuthTokenToDatabase(v20, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public boolean deleteAuthtokensByAccountIdAndType(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=? AND type=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long insertAuthToken(long p1, String p2, String p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	Long v3 = Long.valueOf(p1);
	v1.put(""accounts_id"", v3);
	v1.put(""type"", p2);
	v1.put(""authtoken"", p3);
	long v7 = v1.insert(""ceDb.authtokens"", ""authtoken"", v1);
	return v7;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 10,11,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @78 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @88 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, saveAuthTokenToDatabase(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)Z > 1,67,2,3,4 @92 exception:68,
conditional branch(eq, to iindex=-1) 3,6,
conditional branch(ne, to iindex=-1) 4,6,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @6 exception:7,
monitorenter 5,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
30 = phi  10,24,
monitorexit 5,
return 30,
10 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @10 exception:9,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,8,12 @18 exception:13,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 17,3 @31 exception:18,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
21 = binaryop(lt) 19 , 20,
conditional branch(ge, to iindex=-1) 21,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthtokensByAccountIdAndType(JLjava/lang/String;)Z > 22,19,4 @50 exception:23,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[11] = 10,
arraystore 8[12] = 3,
conditional branch(le, to iindex=-1) 16,11,
17 = phi  11,12,
return 17,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
27 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertAuthToken(JLjava/lang/String;Ljava/lang/String;)J > 25,19,4,5 @55 exception:26,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,Landroid/content/ContentValues>@6,
return 20,
28 = binaryop(lt) 27 , 20,
conditional branch(lt, to iindex=-1) 28,6,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 31 @65 exception:32,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @71 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeAuthTokenIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @77 exception:46,
monitorexit 45,
monitorexit 14,
return 42,
return,","depth : 0
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""authTokenType cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v5);
	boolean v9 = p0.saveAuthTokenToDatabase(v8, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean saveAuthTokenToDatabase(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserHandle v3 = UserHandle.of(v2);
	p0.cancelNotification(v1, v3);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v6 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	boolean v7 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v6, p3);
	long v8 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v6, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeAuthTokenIntoCacheLocked(p1, p2, p3, p4);
	return 1;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public boolean deleteAuthtokensByAccountIdAndType(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=? AND type=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public long insertAuthToken(long p1, String p2, String p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	Long v3 = Long.valueOf(p1);
	v1.put(""accounts_id"", v3);
	v1.put(""type"", p2);
	v1.put(""authtoken"", p3);
	long v7 = v1.insert(""ceDb.authtokens"", ""authtoken"", v1);
	return v7;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","0","conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, grantAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @14 exception:15,
goto (from iindex= 8 to iindex = 4),
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.grantAppPermission(p1, p2, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","1","conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, revokeAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @18 exception:14,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 12 @21 exception:13,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 14,2 @26 exception:15,
18 = binaryop(lt) 16 , 17,
conditional branch(lt, to iindex=-1) 18,5,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
20 = conversion(J) 4,
22 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteGrantsByAccountIdAuthTokenTypeAndUid(JLjava/lang/String;J)Z > 19,16,3,20 @40 exception:21,
23 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 23 @45 exception:24,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 34 @50 exception:35,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @53 exception:36,
39 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @57 exception:38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,37,41 @65 exception:42,
monitorexit 11,
monitorexit 10,
59 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
conditional branch(eq, to iindex=-1) 63,5,
return,
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.revokeAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void revokeAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v4 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	boolean v5 = AccountManagerService$UserAccounts.accountsDb.deleteGrantsByAccountIdAuthTokenTypeAndUid(v4, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService$NotificationId v8 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v9 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v10 = UserHandle.of(v9);
	p0.cancelNotification(v8, v10);
	Iterator v12 = this.mAppPermissionChangeListeners.iterator();
	boolean v13 = v12.hasNext();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","1","conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, grantAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @14 exception:15,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
14 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 12,2 @21 exception:13,
16 = binaryop(lt) 14 , 15,
conditional branch(lt, to iindex=-1) 16,5,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertGrant(JLjava/lang/String;I)J > 17,14,3,4 @33 exception:18,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @36 exception:23,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @40 exception:25,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,24,28 @48 exception:29,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelAccountAccessRequestNotificationIfNeeded(Landroid/accounts/Account;IZ)V > 1,2,4,30 @52 exception:31,
monitorexit 11,
monitorexit 10,
48 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
conditional branch(eq, to iindex=-1) 52,5,
return,
goto (from iindex= 8 to iindex = 4),
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.grantAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void grantAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	long v4 = AccountManagerService$UserAccounts.accountsDb.insertGrant(v3, p2, p3);
	AccountManagerService$NotificationId v5 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v7 = UserHandle.of(v6);
	p0.cancelNotification(v5, v7);
	p0.cancelAccountAccessRequestNotificationIfNeeded(p1, p3, 1);
	Iterator v10 = this.mAppPermissionChangeListeners.iterator();
	boolean v11 = v10.hasNext();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","2","conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, revokeAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @18 exception:14,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
return 4,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 12 @21 exception:13,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 14,2 @26 exception:15,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
18 = binaryop(lt) 16 , 17,
conditional branch(lt, to iindex=-1) 18,5,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
20 = conversion(J) 4,
22 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteGrantsByAccountIdAuthTokenTypeAndUid(JLjava/lang/String;J)Z > 19,16,3,20 @40 exception:21,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
9 = new <Application,[Ljava/lang/String>@78 ,
arraystore 9[12] = 11,
arraystore 9[13] = 3,
arraystore 9[16] = 15,
conditional branch(le, to iindex=-1) 20,12,
21 = phi  12,13,
return 21,
23 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 23 @45 exception:24,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 34 @50 exception:35,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @53 exception:36,
monitorenter 10,
11 = new <Application,Landroid/util/Pair>@13,
12 = new <Application,Landroid/util/Pair>@15,
21 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>20 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 21,22,
23 = new <Application,Ljava/lang/StringBuilder>@39,
46 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@82,
52 = phi  21,46,
monitorexit 10,
return 52,
39 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @57 exception:38,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,37,41 @65 exception:42,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
return,
monitorexit 11,
monitorexit 10,
59 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
conditional branch(eq, to iindex=-1) 63,5,
return,
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.revokeAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void revokeAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v4 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	boolean v5 = AccountManagerService$UserAccounts.accountsDb.deleteGrantsByAccountIdAuthTokenTypeAndUid(v4, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService$NotificationId v8 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v9 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v10 = UserHandle.of(v9);
	p0.cancelNotification(v8, v10);
	Iterator v12 = this.mAppPermissionChangeListeners.iterator();
	boolean v13 = v12.hasNext();
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public boolean deleteGrantsByAccountIdAuthTokenTypeAndUid(long p1, String p2, long p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	String v1 = new String(3);
	String v2 = String.valueOf(p1);
	String v3 = String.valueOf(p3);
	int v4 = v1.delete(""grants"", ""accounts_id=? AND auth_token_type=? AND uid=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public AccountManagerService$NotificationId getCredentialPermissionNotificationId(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	HashMap v3 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Pair v3 = new Pair(v3,v5);
	Pair v3 = new Pair(p1,p2);
	Integer v5 = Integer.valueOf(p3);
	HashMap v7 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v8 = v7.get(v3);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append(""AccountManagerService:38:"");
	int v11 = p1.hashCode();
	StringBuilder v12 = v8.append(v11);
	StringBuilder v13 = v8.append("":"");
	int v14 = p2.hashCode();
	StringBuilder v15 = v8.append(v14);
	StringBuilder v16 = v8.append("":"");
	StringBuilder v17 = v8.append(p3);
	String v18 = v8.toString();
	AccountManagerService$NotificationId v18 = new AccountManagerService$NotificationId(v18,38);
	HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v21 = v20.put(v3, v18);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","2","conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, revokeAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @18 exception:14,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
return 4,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 12 @21 exception:13,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 14,2 @26 exception:15,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 20,
18 = binaryop(lt) 16 , 17,
conditional branch(lt, to iindex=-1) 18,5,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
20 = conversion(J) 4,
22 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteGrantsByAccountIdAuthTokenTypeAndUid(JLjava/lang/String;J)Z > 19,16,3,20 @40 exception:21,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
9 = new <Application,[Ljava/lang/String>@78 ,
arraystore 9[12] = 11,
arraystore 9[13] = 3,
arraystore 9[16] = 15,
conditional branch(le, to iindex=-1) 20,12,
21 = phi  12,13,
return 21,
23 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 23 @45 exception:24,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 34 @50 exception:35,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @53 exception:36,
monitorenter 10,
11 = new <Application,Landroid/util/Pair>@13,
12 = new <Application,Landroid/util/Pair>@15,
21 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>20 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 21,22,
23 = new <Application,Ljava/lang/StringBuilder>@39,
46 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@82,
52 = phi  21,46,
monitorexit 10,
return 52,
39 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @57 exception:38,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,37,41 @65 exception:42,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
return,
monitorexit 11,
monitorexit 10,
59 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
conditional branch(eq, to iindex=-1) 63,5,
return,
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.revokeAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void revokeAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v4 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	boolean v5 = AccountManagerService$UserAccounts.accountsDb.deleteGrantsByAccountIdAuthTokenTypeAndUid(v4, p2, p3);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	AccountManagerService$NotificationId v8 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v9 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v10 = UserHandle.of(v9);
	p0.cancelNotification(v8, v10);
	Iterator v12 = this.mAppPermissionChangeListeners.iterator();
	boolean v13 = v12.hasNext();
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public boolean deleteGrantsByAccountIdAuthTokenTypeAndUid(long p1, String p2, long p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	String v1 = new String(3);
	String v2 = String.valueOf(p1);
	String v3 = String.valueOf(p3);
	int v4 = v1.delete(""grants"", ""accounts_id=? AND auth_token_type=? AND uid=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public AccountManagerService$NotificationId getCredentialPermissionNotificationId(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	HashMap v3 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Pair v3 = new Pair(v3,v5);
	Pair v3 = new Pair(p1,p2);
	Integer v5 = Integer.valueOf(p3);
	HashMap v7 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v8 = v7.get(v3);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append(""AccountManagerService:38:"");
	int v11 = p1.hashCode();
	StringBuilder v12 = v8.append(v11);
	StringBuilder v13 = v8.append("":"");
	int v14 = p2.hashCode();
	StringBuilder v15 = v8.append(v14);
	StringBuilder v16 = v8.append("":"");
	StringBuilder v17 = v8.append(p3);
	String v18 = v8.toString();
	AccountManagerService$NotificationId v18 = new AccountManagerService$NotificationId(v18,38);
	HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v21 = v20.put(v3, v18);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V","2","conditional branch(eq, to iindex=-1) 5,13,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, grantAppPermission(Landroid/accounts/Account;Ljava/lang/String;I)V > 1,2,3,4 @14 exception:15,
conditional branch(eq, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 3,5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @9 exception:8,
return 4,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 9,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 9,
monitorenter 11,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
14 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 12,2 @21 exception:13,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
16 = binaryop(lt) 14 , 15,
conditional branch(lt, to iindex=-1) 16,5,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 9,
19 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertGrant(JLjava/lang/String;I)J > 17,14,3,4 @33 exception:18,
5 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,Landroid/content/ContentValues>@6,
return 22,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getCredentialPermissionNotificationId(Landroid/accounts/Account;Ljava/lang/String;I)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3,4 @36 exception:23,
monitorenter 10,
11 = new <Application,Landroid/util/Pair>@13,
12 = new <Application,Landroid/util/Pair>@15,
21 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>20 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 21,22,
23 = new <Application,Ljava/lang/StringBuilder>@39,
46 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@82,
52 = phi  21,46,
monitorexit 10,
return 52,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 9 @40 exception:25,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,24,28 @48 exception:29,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
return,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelAccountAccessRequestNotificationIfNeeded(Landroid/accounts/Account;IZ)V > 1,2,4,30 @52 exception:31,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,8,
9 = arraylength 7,
14 = phi  13,8,
conditional branch(ge, to iindex=-1) 14,9,
return,
monitorexit 11,
monitorexit 10,
48 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppPermissionChangeListeners, <Application,Ljava/util/concurrent/CopyOnWriteArrayList> > 1,
conditional branch(eq, to iindex=-1) 52,5,
return,
goto (from iindex= 8 to iindex = 4),
return,","depth : 0
public void updateAppPermission(Account p1, String p2, int p3, boolean p4){
	p0.grantAppPermission(p1, p2, p3);
	return;
}
-----
depth : 1
public void grantAppPermission(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	long v4 = AccountManagerService$UserAccounts.accountsDb.insertGrant(v3, p2, p3);
	AccountManagerService$NotificationId v5 = p0.getCredentialPermissionNotificationId(p1, p2, p3);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v2);
	UserHandle v7 = UserHandle.of(v6);
	p0.cancelNotification(v5, v7);
	p0.cancelAccountAccessRequestNotificationIfNeeded(p1, p3, 1);
	Iterator v10 = this.mAppPermissionChangeListeners.iterator();
	boolean v11 = v10.hasNext();
	return;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public long insertGrant(long p1, String p2, int p3){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	Long v3 = Long.valueOf(p1);
	v1.put(""accounts_id"", v3);
	v1.put(""auth_token_type"", p2);
	Integer v6 = Integer.valueOf(p3);
	v1.put(""uid"", v6);
	long v8 = v1.insert(""grants"", ""accounts_id"", v1);
	return v8;
}
-----
depth : 2
public AccountManagerService$NotificationId getCredentialPermissionNotificationId(Account p1, String p2, int p3){
	int v1 = UserHandle.getUserId(p3);
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	HashMap v3 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Pair v3 = new Pair(v3,v5);
	Pair v3 = new Pair(p1,p2);
	Integer v5 = Integer.valueOf(p3);
	HashMap v7 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v8 = v7.get(v3);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append(""AccountManagerService:38:"");
	int v11 = p1.hashCode();
	StringBuilder v12 = v8.append(v11);
	StringBuilder v13 = v8.append("":"");
	int v14 = p2.hashCode();
	StringBuilder v15 = v8.append(v14);
	StringBuilder v16 = v8.append("":"");
	StringBuilder v17 = v8.append(p3);
	String v18 = v8.toString();
	AccountManagerService$NotificationId v18 = new AccountManagerService$NotificationId(v18,38);
	HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(v2);
	Object v21 = v20.put(v3, v18);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public void cancelAccountAccessRequestNotificationIfNeeded(Account p1, int p2, boolean p3){
	String v1 = this.mPackageManager.getPackagesForUid(p2);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","0","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(eq, to iindex=-1) 50,18,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","1","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
monitorexit 31,
monitorexit 30,
return 12,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","1","conditional branch(eq, to iindex=-1) 17,18,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
monitorexit 31,
monitorexit 30,
return 12,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	Object v5 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v3);
	boolean v9 = p0.addAccountInternal(v8, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","2","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = new <Application,Ljava/util/LinkedHashMap>@6,
10 = new <Application,[Ljava/lang/String>@1911 ,
conditional branch(eq, to iindex=-1) 17,13,
return 5,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
monitorexit 31,
monitorexit 30,
return 12,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public Map findAllDeAccounts(){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	LinkedHashMap v1 = new LinkedHashMap();
	String v2 = new String(3);
	Cursor v3 = v1.query(""accounts"", v2, 0, 0, 0, 0, ""_id"");
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","2","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 20,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = new <Application,Ljava/util/LinkedHashMap>@6,
10 = new <Application,[Ljava/lang/String>@1911 ,
conditional branch(eq, to iindex=-1) 17,13,
return 5,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
monitorexit 31,
monitorexit 30,
return 12,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public Map findAllDeAccounts(){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	LinkedHashMap v1 = new LinkedHashMap();
	String v2 = new String(3);
	Cursor v3 = v1.query(""accounts"", v2, 0, 0, 0, 0, ""_id"");
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z","2","conditional branch(eq, to iindex=-1) 17,18,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
conditional branch(le, to iindex=-1) 22,14,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @56 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
29 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,27 @60 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 32 @125 exception:33,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 34,3 @130 exception:35,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
41 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAllDeAccounts()Ljava/util/Map; > 39 @181 exception:40,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = new <Application,Ljava/util/LinkedHashMap>@6,
10 = new <Application,[Ljava/lang/String>@1911 ,
conditional branch(eq, to iindex=-1) 17,13,
return 5,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 208 @226 exception:209,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
monitorexit 31,
monitorexit 30,
return 12,
return 65,","depth : 0
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	Object v5 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v3);
	boolean v9 = p0.addAccountInternal(v8, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public Map findAllDeAccounts(){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	LinkedHashMap v1 = new LinkedHashMap();
	String v2 = new String(3);
	Cursor v3 = v1.query(""accounts"", v2, 0, 0, 0, 0, ""_id"");
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","0","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","1","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
conditional branch(ne, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 14,6,
15 = new <Application,Ljava/lang/StringBuilder>@24,
conditional branch(eq, to iindex=-1) 35,36,
37 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
conditional branch(ne, to iindex=-1) 39,6,
return 51,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""  caller uid "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" has "");
	StringBuilder v7 = v2.append(p3[phiInstruction]);
	String v8 = v2.toString();
	int v9 = Log.v(""AccountManagerService"", v8);
	int v10 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	int v11 = this.mAppOpsManager.noteOpNoThrow(v10, p2, p1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","1","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
conditional branch(ne, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 14,6,
conditional branch(eq, to iindex=-1) 35,36,
37 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
conditional branch(ne, to iindex=-1) 39,6,
return 51,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	int v4 = this.mAppOpsManager.noteOpNoThrow(v3, p2, p1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
conditional branch(ne, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 14,6,
15 = new <Application,Ljava/lang/StringBuilder>@24,
conditional branch(eq, to iindex=-1) 35,36,
37 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
conditional branch(ne, to iindex=-1) 39,6,
return 51,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""  caller uid "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" has "");
	StringBuilder v7 = v2.append(p3[phiInstruction]);
	String v8 = v2.toString();
	int v9 = Log.v(""AccountManagerService"", v8);
	int v10 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	int v11 = this.mAppOpsManager.noteOpNoThrow(v10, p2, p1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
conditional branch(ne, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 14,6,
conditional branch(eq, to iindex=-1) 35,36,
37 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAppOpsManager, <Application,Landroid/app/AppOpsManager> > 1,
conditional branch(ne, to iindex=-1) 39,6,
return 51,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	int v4 = this.mAppOpsManager.noteOpNoThrow(v3, p2, p1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 40 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
72 = new <Application,[Ljava/lang/String>@1197 ,
74 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPermissionAndNote(Ljava/lang/String;I[Ljava/lang/String;)Z > 1,70,65,72 @123 exception:73,
conditional branch(ne, to iindex=-1) 10,6,
conditional branch(eq, to iindex=-1) 14,6,
15 = new <Application,Ljava/lang/StringBuilder>@24,
conditional branch(eq, to iindex=-1) 35,36,
return 51,
78 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,67 @131 exception:77,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = new <Application,Lcom/android/server/accounts/AccountManagerService$14>@135,
80 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
81 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 79 @160 exception:83,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startUpdateCredentialsSession: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = Binder.getCallingUid();
	int v21 = UserHandle.getCallingUserId();
	String v22 = p5.getString(""androidPackageName"");
	String v22 = new String(1);
	boolean v23 = p0.checkPermissionAndNote(v22, v20, v22);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v21);
	AccountManagerService$14 v25 = new AccountManagerService$14(p0,v25,p1,Account.type,p4,Account.name,0,1,v23,p2,p3,p5);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public boolean checkPermissionAndNote(String p1, int p2, String p3){
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""  caller uid "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" has "");
	StringBuilder v7 = v2.append(p3[phiInstruction]);
	String v8 = v2.toString();
	int v9 = Log.v(""AccountManagerService"", v8);
	int v10 = AppOpsManager.permissionToOpCode(p3[phiInstruction]);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","0","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@19,
goto (from iindex= 39 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""updateCredentials: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
	AccountManagerService$13 v22 = new AccountManagerService$13(p0,v22,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v22.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","1","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@19,
goto (from iindex= 39 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""updateCredentials: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
	AccountManagerService$13 v22 = new AccountManagerService$13(p0,v22,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v22.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","1","conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	AccountManagerService$13 v5 = new AccountManagerService$13(p0,v5,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v5.bind();
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@19,
goto (from iindex= 39 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""updateCredentials: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
	AccountManagerService$13 v22 = new AccountManagerService$13(p0,v22,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v22.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@19,
goto (from iindex= 39 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
conditional branch(eq, to iindex=-1) 5,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""updateCredentials: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", expectActivityLaunch "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", caller's uid "");
	int v13 = Binder.getCallingUid();
	StringBuilder v14 = v2.append(v13);
	StringBuilder v15 = v2.append("", pid "");
	int v16 = Binder.getCallingPid();
	StringBuilder v17 = v2.append(v16);
	String v18 = v2.toString();
	int v19 = Log.v(""AccountManagerService"", v18);
	int v20 = UserHandle.getCallingUserId();
	long v21 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
	AccountManagerService$13 v22 = new AccountManagerService$13(p0,v22,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v22.bind();
	IAccountManager$Stub.restoreCallingIdentity(v21);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""bind attempt failed for "");
	String v5 = p0.toDebugString();
	StringBuilder v6 = v2.append(v5);
	String v7 = v2.toString();
	int v8 = Log.d(""AccountManagerService"", v7);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 13,14,
conditional branch(eq, to iindex=-1) 2,14,
conditional branch(eq, to iindex=-1) 3,14,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,65 @111 exception:68,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
70 = new <Application,Lcom/android/server/accounts/AccountManagerService$13>@115,
71 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
72 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 70 @141 exception:74,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	AccountManagerService$13 v5 = new AccountManagerService$13(p0,v5,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
	v5.bind();
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z","0","8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z > 1,2,3,4,6,5 @6 exception:7,
return 8,","depth : 0
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z","1","8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z > 1,2,3,4,6,5 @6 exception:7,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(eq, to iindex=-1) 50,18,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
return 65,
return 8,","depth : 0
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}
-----
depth : 1
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z","2","8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z > 1,2,3,4,6,5 @6 exception:7,
conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@24,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
return 4,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
conditional branch(le, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
monitorexit 31,
monitorexit 30,
return 12,
return 65,
return 8,","depth : 0
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}
-----
depth : 1
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""addAccountExplicitly: "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v2);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	Object v15 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v3);
	boolean v19 = p0.addAccountInternal(v18, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return v19;
}
-----
depth : 2
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z","2","8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z > 1,2,3,4,6,5 @6 exception:7,
conditional branch(eq, to iindex=-1) 17,18,
48 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,48,11,13 @71 exception:49,
conditional branch(ne, to iindex=-1) 2,5,
return 9,
conditional branch(eq, to iindex=-1) 50,18,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @81 exception:62,
return 4,
65 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, addAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ILjava/util/Map;Ljava/lang/String;)Z > 1,63,2,3,4,11,5,6 @92 exception:64,
conditional branch(ne, to iindex=-1) 3,12,
13 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 13,12,
conditional branch(le, to iindex=-1) 16,14,
20 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,12,
conditional branch(le, to iindex=-1) 22,14,
conditional branch(ne, to iindex=-1) 29,12,
30 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 30,
31 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 31,
32 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
38 = binaryop(lt) 36 , 37,
conditional branch(lt, to iindex=-1) 38,12,
39 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
conditional branch(le, to iindex=-1) 43,44,
193 = new <Application,Ljava/lang/StringBuilder>@195,
208 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
monitorexit 31,
monitorexit 30,
return 12,
return 65,
return 8,","depth : 0
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}
-----
depth : 1
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	Object v5 = Objects.requireNonNull(p1, ""account cannot be null"");
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v3);
	boolean v9 = p0.addAccountInternal(v8, p1, p2, p3, v2, p4, p5);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 2
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public boolean addAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, Bundle p4, int p5, Map p6, String p7){
	Bundle v1 = Bundle.setDefusable(p4, 1);
	int v2 = Account.name.length();
	int v3 = Account.type.length();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v5 = p0.isLocalUnlockedUser(v4);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p2);
	Map v8 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
	int v9 = v8.size();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(""insertAccountIntoDatabase: "");
	String v12 = p2.toSafeString();
	StringBuilder v13 = v9.append(v12);
	StringBuilder v14 = v9.append("", skipping since more than 50 accounts on device exist"");
	String v15 = v9.toString();
	int v16 = Log.w(""AccountManagerService"", v15);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","0","28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","1","28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","1","28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","2","28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","2","28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V","2","28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,24 @45 exception:27,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
29 = new <Application,Lcom/android/server/accounts/AccountManagerService$7>@49,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 29 @68 exception:31,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
	AccountManagerService$7 v8 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	v8.bind();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","NONE"

"Lcom/android/server/accounts/AccountManagerService","getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;","0","conditional branch(ne, to iindex=-1) 32,33,
conditional branch(eq, to iindex=-1) 2,33,
35 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,2,6,8 @29 exception:34,
conditional branch(ne, to iindex=-1) 35,33,
46 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 46,","depth : 0
public Account getAccountsByTypeForPackage(String p1, String p2, String p3){
	boolean v6 = p0.isAccountManagedByCaller(p1, v1, v2);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;","1","conditional branch(ne, to iindex=-1) 32,33,
conditional branch(eq, to iindex=-1) 2,33,
35 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,2,6,8 @29 exception:34,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 35,33,
46 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 46,","depth : 0
public Account getAccountsByTypeForPackage(String p1, String p2, String p3){
	boolean v6 = p0.isAccountManagedByCaller(p1, v1, v2);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;","2","conditional branch(ne, to iindex=-1) 32,33,
conditional branch(eq, to iindex=-1) 2,33,
35 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,2,6,8 @29 exception:34,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 35,33,
46 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 46,","depth : 0
public Account getAccountsByTypeForPackage(String p1, String p2, String p3){
	boolean v6 = p0.isAccountManagedByCaller(p1, v1, v2);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","0","12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
conditional branch(eq, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
40 = phi  12,36,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","1","12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
40 = phi  12,36,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = new <Application,Ljava/util/LinkedHashMap>@38,
conditional branch(eq, to iindex=-1) 16,10,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,5,11,43,2 @104 exception:44,
return 45,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	LinkedHashMap v2 = new LinkedHashMap();
	Iterator v4 = p2.iterator();
	boolean v5 = v4.hasNext();
	int v6 = p3.intValue();
	Map v7 = p0.filterSharedAccounts(p4, v2, v6, p1);
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","1","12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
40 = phi  12,36,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
conditional branch(ne, to iindex=-1) 9,10,
11 = new <Application,Ljava/util/LinkedHashMap>@38,
conditional branch(eq, to iindex=-1) 16,10,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,5,11,43,2 @104 exception:44,
return 45,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v2);
	Integer v8 = Integer.valueOf(v1);
	Map v9 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v8, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v9;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	LinkedHashMap v2 = new LinkedHashMap();
	Iterator v4 = p2.iterator();
	boolean v5 = v4.hasNext();
	int v6 = p3.intValue();
	Map v7 = p0.filterSharedAccounts(p4, v2, v6, p1);
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","2","12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
40 = phi  12,36,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
11 = getCaughtException ,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 9,10,
11 = new <Application,Ljava/util/LinkedHashMap>@38,
conditional branch(eq, to iindex=-1) 16,10,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,5,11,43,2 @104 exception:44,
conditional branch(eq, to iindex=-1) 7,8,
conditional branch(eq, to iindex=-1) 2,8,
conditional branch(lt, to iindex=-1) 10,8,
conditional branch(ne, to iindex=-1) 4,11,
conditional branch(eq, to iindex=-1) 17,8,
conditional branch(eq, to iindex=-1) 19,8,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(ne, to iindex=-1) 22,8,
23 = new <Application,[Ljava/lang/String>@498 ,
24 = phi  22,23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
31 = arraylength 24,
48 = phi  47,8,
conditional branch(ge, to iindex=-1) 48,31,
32 = arrayload 24[48],
33 = new <Application,Ljava/lang/StringBuilder>@70,
conditional branch(eq, to iindex=-1) 45,8,
return 3,
return 45,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	LinkedHashMap v2 = new LinkedHashMap();
	Iterator v4 = p2.iterator();
	boolean v5 = v4.hasNext();
	int v6 = p3.intValue();
	Map v7 = p0.filterSharedAccounts(p4, v2, v6, p1);
	return v7;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Map filterSharedAccounts(AccountManagerService$UserAccounts p1, Map p2, int p3, String p4){
	UserManager v1 = p0.getUserManager();
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserManager v3 = p0.getUserManager();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserInfo v5 = v3.getUserInfo(v4);
	boolean v6 = v5.isRestricted();
	String v7 = this.mPackageManager.getPackagesForUid(p3);
	String v7 = new String(0);
	Resources v8 = this.mContext.getResources();
	String v9 = v8.getString(17039884);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("";"");
	StringBuilder v12 = v9.append(phiInstruction[phiInstruction]);
	StringBuilder v13 = v9.append("";"");
	String v14 = v9.toString();
	boolean v15 = v9.contains(v14);
	return p2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","2","12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
36 = new <Application,Ljava/util/ArrayList>@64,
40 = phi  12,36,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
11 = getCaughtException ,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 9,10,
11 = new <Application,Ljava/util/LinkedHashMap>@38,
conditional branch(eq, to iindex=-1) 16,10,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,5,11,43,2 @104 exception:44,
conditional branch(eq, to iindex=-1) 7,8,
conditional branch(eq, to iindex=-1) 2,8,
conditional branch(lt, to iindex=-1) 10,8,
conditional branch(ne, to iindex=-1) 4,11,
conditional branch(eq, to iindex=-1) 17,8,
conditional branch(eq, to iindex=-1) 19,8,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(ne, to iindex=-1) 22,8,
23 = new <Application,[Ljava/lang/String>@498 ,
24 = phi  22,23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
31 = arraylength 24,
48 = phi  47,8,
conditional branch(ge, to iindex=-1) 48,31,
32 = arrayload 24[48],
33 = new <Application,Ljava/lang/StringBuilder>@70,
conditional branch(eq, to iindex=-1) 45,8,
return 3,
return 45,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	ArrayList v5 = new ArrayList();
	boolean v7 = v5.add(p2);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v2);
	Integer v10 = Integer.valueOf(v1);
	Map v11 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v10, v9);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	LinkedHashMap v2 = new LinkedHashMap();
	Iterator v4 = p2.iterator();
	boolean v5 = v4.hasNext();
	int v6 = p3.intValue();
	Map v7 = p0.filterSharedAccounts(p4, v2, v6, p1);
	return v7;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	int v2 = this.mPackageManager.getPackageUidAsUser(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Map filterSharedAccounts(AccountManagerService$UserAccounts p1, Map p2, int p3, String p4){
	UserManager v1 = p0.getUserManager();
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserManager v3 = p0.getUserManager();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserInfo v5 = v3.getUserInfo(v4);
	boolean v6 = v5.isRestricted();
	String v7 = this.mPackageManager.getPackagesForUid(p3);
	String v7 = new String(0);
	Resources v8 = this.mContext.getResources();
	String v9 = v8.getString(17039884);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("";"");
	StringBuilder v12 = v9.append(phiInstruction[phiInstruction]);
	StringBuilder v13 = v9.append("";"");
	String v14 = v9.toString();
	boolean v15 = v9.contains(v14);
	return p2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;","2","12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesForCaller(IIZ)Ljava/util/List; > 1,5,7,10 @14 exception:11,
5 = new <Application,Ljava/util/ArrayList>@0,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 17 @20 exception:18,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
20 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>19 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 24,25,
return 5,
conditional branch(eq, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 3,13,
conditional branch(eq, to iindex=-1) 10,13,
goto (from iindex= 15 to iindex = 32),
conditional branch(eq, to iindex=-1) 3,13,
40 = phi  12,36,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,7 @76 exception:45,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/util/List;Ljava/lang/Integer;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,40,48,46 @84 exception:49,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 5 @0 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,2,7 @4 exception:8,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
11 = getCaughtException ,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 9,10,
11 = new <Application,Ljava/util/LinkedHashMap>@38,
conditional branch(eq, to iindex=-1) 16,10,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, filterSharedAccounts(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/util/Map;ILjava/lang/String;)Ljava/util/Map; > 1,5,11,43,2 @104 exception:44,
conditional branch(eq, to iindex=-1) 7,8,
conditional branch(eq, to iindex=-1) 2,8,
conditional branch(lt, to iindex=-1) 10,8,
conditional branch(ne, to iindex=-1) 4,11,
conditional branch(eq, to iindex=-1) 17,8,
conditional branch(eq, to iindex=-1) 19,8,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(ne, to iindex=-1) 22,8,
23 = new <Application,[Ljava/lang/String>@498 ,
24 = phi  22,23,
25 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
31 = arraylength 24,
48 = phi  47,8,
conditional branch(ge, to iindex=-1) 48,31,
32 = arrayload 24[48],
33 = new <Application,Ljava/lang/StringBuilder>@70,
conditional branch(eq, to iindex=-1) 45,8,
return 3,
return 45,
return 50,","depth : 0
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	boolean v5 = v4.contains(p2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v2);
	Integer v8 = Integer.valueOf(v1);
	Map v9 = p0.getAccountsAndVisibilityForPackage(p1, phiInstruction, v8, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v9;
}
-----
depth : 1
public List getTypesForCaller(int p1, int p2, boolean p3){
	ArrayList v0 = new ArrayList();
	long v2 = Binder.clearCallingIdentity();
	Collection v3 = this.mAuthenticatorCache.getAllServices(p2);
	Binder.restoreCallingIdentity(v2);
	Object v5 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v6 = v3.iterator();
	boolean v7 = v6.hasNext();
	return v0;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public Map getAccountsAndVisibilityForPackage(String p1, List p2, Integer p3, AccountManagerService$UserAccounts p4){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
	boolean v2 = p0.packageExistsForUser(p1, v1);
	LinkedHashMap v2 = new LinkedHashMap();
	Iterator v4 = p2.iterator();
	boolean v5 = v4.hasNext();
	int v6 = p3.intValue();
	Map v7 = p0.filterSharedAccounts(p4, v2, v6, p1);
	return v7;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Map filterSharedAccounts(AccountManagerService$UserAccounts p1, Map p2, int p3, String p4){
	UserManager v1 = p0.getUserManager();
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserManager v3 = p0.getUserManager();
	int v4 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	UserInfo v5 = v3.getUserInfo(v4);
	boolean v6 = v5.isRestricted();
	String v7 = this.mPackageManager.getPackagesForUid(p3);
	String v7 = new String(0);
	Resources v8 = this.mContext.getResources();
	String v9 = v8.getString(17039884);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("";"");
	StringBuilder v12 = v9.append(phiInstruction[phiInstruction]);
	StringBuilder v13 = v9.append("";"");
	String v14 = v9.toString();
	boolean v15 = v9.contains(v14);
	return p2;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;","0","12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
return 12,","depth : 0
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","0","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","1","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
conditional branch(ne, to iindex=-1) 14,9,
goto (from iindex= 14 to iindex = 24),
return,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
return 12,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
depth : 1
public void checkManageOrCreateUsersPermission(String p1){
	return;
}
-----
depth : 1
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","1","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
conditional branch(eq, to iindex=-1) 8,9,
return,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
return 12,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
depth : 1
public void checkManageOrCreateUsersPermission(String p1){
	return;
}
-----
depth : 1
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","2","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
conditional branch(ne, to iindex=-1) 14,9,
goto (from iindex= 14 to iindex = 24),
return,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 77,17,
conditional branch(eq, to iindex=-1) 2,17,
conditional branch(eq, to iindex=-1) 79,17,
goto (from iindex= 64 to iindex = 3),
86 = phi  4,4,6,
87 = phi  5,5,9,
conditional branch(ne, to iindex=-1) 93,17,
conditional branch(eq, to iindex=-1) 2,17,
conditional branch(ne, to iindex=-1) 95,17,
goto (from iindex= 76 to iindex = 39),
126 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 126,
return 12,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
depth : 1
public void checkManageOrCreateUsersPermission(String p1){
	return;
}
-----
depth : 1
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
depth : 2
public Account getAccountsAsUserForPackage(String p1, int p2, String p3, int p4, String p5, boolean p6){
	boolean v19 = v17.contains(p1);
	List v20 = p0.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v21 = v20.isEmpty();
	boolean v22 = v20.contains(p1);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addSharedAccountsFromParentUser(IILjava/lang/String;)V","2","invokestatic < Application, Lcom/android/server/accounts/AccountManagerService, checkManageOrCreateUsersPermission(Ljava/lang/String;)V > 5 @2 exception:6,
conditional branch(eq, to iindex=-1) 8,9,
return,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; > 1,7,2,4 @6 exception:8,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,2,3,4,9,4,10 @16 exception:11,
conditional branch(ne, to iindex=-1) 77,17,
conditional branch(eq, to iindex=-1) 2,17,
conditional branch(eq, to iindex=-1) 79,17,
goto (from iindex= 64 to iindex = 3),
86 = phi  4,4,6,
87 = phi  5,5,9,
conditional branch(ne, to iindex=-1) 93,17,
conditional branch(eq, to iindex=-1) 2,17,
conditional branch(ne, to iindex=-1) 95,17,
goto (from iindex= 76 to iindex = 39),
126 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 126,
return 12,
10 = arraylength 9,
16 = phi  15,7,
conditional branch(ge, to iindex=-1) 16,10,
return,","depth : 0
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	AccountManagerService.checkManageOrCreateUsersPermission(""addSharedAccountsFromParentUser"");
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	return;
}
-----
depth : 1
public void checkManageOrCreateUsersPermission(String p1){
	return;
}
-----
depth : 1
public Account getAccountsAsUser(String p1, int p2, String p3){
	Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);
	return v3;
}
-----
depth : 2
public Account getAccountsAsUserForPackage(String p1, int p2, String p3, int p4, String p5, boolean p6){
	boolean v19 = v17.contains(p1);
	List v20 = p0.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v21 = v20.isEmpty();
	boolean v22 = v20.contains(p1);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","0","10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
monitorexit 34,
monitorexit 33,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","1","10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
return 23,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
14 = new <Application,Ljava/util/HashMap>@19,
17 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @24 exception:16,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	int v3 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v3 = new HashMap();
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v6 = v5.put(p1, v3);
	AccountManager.invalidateLocalAccountsDataCaches();
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","1","10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
return 23,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","2","10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
14 = new <Application,Ljava/util/HashMap>@19,
17 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @24 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	int v3 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v3 = new HashMap();
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v6 = v5.put(p1, v3);
	AccountManager.invalidateLocalAccountsDataCaches();
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","2","10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
14 = new <Application,Ljava/util/HashMap>@19,
17 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @24 exception:16,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(v3);
	Map v7 = p0.getPackagesAndVisibilityForAccountLocked(p1, v6);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return v7;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	int v3 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v3 = new HashMap();
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v6 = v5.put(p1, v3);
	AccountManager.invalidateLocalAccountsDataCaches();
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;","2","10 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
12 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,10,7,9 @15 exception:11,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 12,13,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,7 @21 exception:14,
conditional branch(eq, to iindex=-1) 15,13,
goto (from iindex= 13 to iindex = 27),
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @58 exception:31,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 32,
monitorenter 33,
34 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 32,
monitorenter 34,
36 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,32 @68 exception:35,
5 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetvisibilityCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 3 @0 exception:4,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, visibilityCache, <Application,Ljava/util/Map> > 1,
return 2,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
21 = phi  8,14,
return 21,
monitorexit 34,
monitorexit 33,
return 36,","depth : 0
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	boolean v5 = p0.isSystemUid(v2);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetvisibilityCache(AccountManagerService$UserAccounts p1){
	return this.visibilityCache;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setUserData: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", key "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	boolean v19 = p0.accountExistsCache(v18, p1);
	p0.setUserdataInternal(v18, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
6 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
11 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
14 = checkcast <Application,[Landroid/accounts/Account>13 <Application,[Landroid/accounts/Account>,
15 = arraylength 14,
23 = phi  22,9,
conditional branch(ge, to iindex=-1) 23,15,
16 = arrayload 14[23],
17 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 16,
18 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,9,
monitorexit 4,
return 37,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertExtra(JLjava/lang/String;Ljava/lang/String;)J > 24,11,4,5 @39 exception:25,
27 = binaryop(lt) 26 , 12,
conditional branch(ge, to iindex=-1) 27,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
monitorexit 45,
monitorexit 6,
return,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setUserData: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", key "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	boolean v19 = p0.accountExistsCache(v18, p1);
	p0.setUserdataInternal(v18, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean accountExistsCache(AccountManagerService$UserAccounts p1, Account p2){
	boolean v1 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v2 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	boolean v3 = Account.name.equals(Account.name);
	return 1;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	long v4 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v2, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 10,11,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
6 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
11 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
14 = checkcast <Application,[Landroid/accounts/Account>13 <Application,[Landroid/accounts/Account>,
15 = arraylength 14,
23 = phi  22,9,
conditional branch(ge, to iindex=-1) 23,15,
16 = arrayload 14[23],
17 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 16,
18 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,9,
monitorexit 4,
return 37,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, insertExtra(JLjava/lang/String;Ljava/lang/String;)J > 24,11,4,5 @39 exception:25,
27 = binaryop(lt) 26 , 12,
conditional branch(ge, to iindex=-1) 27,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
monitorexit 45,
monitorexit 6,
return,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v1, v3);
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(v3);
	boolean v7 = p0.accountExistsCache(v6, p1);
	p0.setUserdataInternal(v6, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean accountExistsCache(AccountManagerService$UserAccounts p1, Account p2){
	boolean v1 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v2 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	boolean v3 = Account.name.equals(Account.name);
	return 1;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	long v4 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v2, p3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = new <Application,Ljava/lang/StringBuilder>@12,
28 = new <Application,[Ljava/lang/String>@459 ,
arraystore 28[29] = 3,
conditional branch(eq, to iindex=-1) 34,29,
return 38,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateExtra(JLjava/lang/String;)Z > 19,17,5 @56 exception:20,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,Landroid/content/ContentValues>@6,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
conditional branch(ne, to iindex=-1) 19,11,
goto (from iindex= 18 to iindex = 2),
20 = phi  11,15,
return 20,
conditional branch(ne, to iindex=-1) 21,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
monitorexit 45,
monitorexit 6,
return,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setUserData: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", key "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	boolean v19 = p0.accountExistsCache(v18, p1);
	p0.setUserdataInternal(v18, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.updateExtra(v3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public long findExtrasIdByAccountId(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""accounts_id="");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("" AND "");
	StringBuilder v6 = v1.append(""key"");
	StringBuilder v7 = v1.append(""=?"");
	String v8 = v1.toString();
	String v8 = new String(1);
	Cursor v9 = v1.query(""ceDb.extras"", v1, v8, v8, 0, 0, 0);
	boolean v10 = v9.moveToNext();
	long v11 = v9.getLong(0);
	v9.close();
	return v11;
}
-----
depth : 2
public boolean updateExtra(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""value"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""extras"", v1, ""_id=?"", v3);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 20,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = new <Application,Ljava/lang/StringBuilder>@12,
28 = new <Application,[Ljava/lang/String>@459 ,
arraystore 28[29] = 3,
conditional branch(eq, to iindex=-1) 34,29,
return 38,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateExtra(JLjava/lang/String;)Z > 19,17,5 @56 exception:20,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,Landroid/content/ContentValues>@6,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
conditional branch(ne, to iindex=-1) 19,11,
goto (from iindex= 18 to iindex = 2),
20 = phi  11,15,
return 20,
conditional branch(ne, to iindex=-1) 21,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
monitorexit 45,
monitorexit 6,
return,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""setUserData: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", key "");
	StringBuilder v7 = v2.append(p2);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
	boolean v19 = p0.accountExistsCache(v18, p1);
	p0.setUserdataInternal(v18, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.updateExtra(v3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public long findExtrasIdByAccountId(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""accounts_id="");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("" AND "");
	StringBuilder v6 = v1.append(""key"");
	StringBuilder v7 = v1.append(""=?"");
	String v8 = v1.toString();
	String v8 = new String(1);
	Cursor v9 = v1.query(""ceDb.extras"", v1, v8, v8, 0, 0, 0);
	boolean v10 = v9.moveToNext();
	long v11 = v9.getLong(0);
	v9.close();
	return v11;
}
-----
depth : 2
public boolean updateExtra(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""value"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""extras"", v1, ""_id=?"", v3);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 10,11,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 2,11,
51 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
53 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,51,6,50 @72 exception:52,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 53,11,
67 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,50 @82 exception:66,
69 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,67,2 @86 exception:68,
conditional branch(ne, to iindex=-1) 69,11,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setUserdataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,67,2,3,4 @96 exception:70,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 7 @5 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
11 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 9,3 @10 exception:10,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
13 = binaryop(lt) 11 , 12,
conditional branch(ge, to iindex=-1) 13,14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findExtrasIdByAccountId(JLjava/lang/String;)J > 15,11,4 @29 exception:16,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = new <Application,Ljava/lang/StringBuilder>@12,
28 = new <Application,[Ljava/lang/String>@459 ,
arraystore 28[29] = 3,
conditional branch(eq, to iindex=-1) 34,29,
return 38,
18 = binaryop(lt) 17 , 12,
conditional branch(ge, to iindex=-1) 18,14,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateExtra(JLjava/lang/String;)Z > 19,17,5 @56 exception:20,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,Landroid/content/ContentValues>@6,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
conditional branch(ne, to iindex=-1) 19,11,
goto (from iindex= 18 to iindex = 2),
20 = phi  11,15,
return 20,
conditional branch(ne, to iindex=-1) 21,14,
33 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 33 @71 exception:34,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
43 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 43 @76 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, writeUserDataIntoCacheLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V > 1,2,3,4,5 @82 exception:46,
monitorexit 45,
monitorexit 6,
return,
return,","depth : 0
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v1, v3);
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(v3);
	boolean v7 = p0.accountExistsCache(v6, p1);
	p0.setUserdataInternal(v6, p1, p2, p3);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setUserdataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, String p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	long v3 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.updateExtra(v3, p4);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.writeUserDataIntoCacheLocked(p1, p2, p3, p4);
	AccountManager.invalidateLocalAccountUserDataCaches();
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public long findExtrasIdByAccountId(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""accounts_id="");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("" AND "");
	StringBuilder v6 = v1.append(""key"");
	StringBuilder v7 = v1.append(""=?"");
	String v8 = v1.toString();
	String v8 = new String(1);
	Cursor v9 = v1.query(""ceDb.extras"", v1, v8, v8, 0, 0, 0);
	boolean v10 = v9.moveToNext();
	long v11 = v9.getLong(0);
	v9.close();
	return v11;
}
-----
depth : 2
public boolean updateExtra(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""value"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""extras"", v1, ""_id=?"", v3);
	return phiInstruction;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","0","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,81,75 @135 exception:84,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v24);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","1","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,81,75 @135 exception:84,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v24);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","1","conditional branch(eq, to iindex=-1) 14,15,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,81,75 @135 exception:84,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getUserId(v3);
	boolean v5 = p0.canUserModifyAccounts(v4, v3);
	boolean v6 = p0.canUserModifyAccountsForType(v4, p2, v3);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v4);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,81,75 @135 exception:84,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v24);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,81,75 @135 exception:84,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v24);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,15,
conditional branch(eq, to iindex=-1) 3,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @105 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @122 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,81,75 @135 exception:84,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""addAccount: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	int v23 = Binder.getCallingUid();
	int v24 = UserHandle.getUserId(v23);
	boolean v25 = p0.canUserModifyAccounts(v24, v23);
	boolean v26 = p0.canUserModifyAccountsForType(v24, p2, v23);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v24);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","0","12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","1","12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,5,2,3 @9 exception:8,
conditional branch(eq, to iindex=-1) 11,12,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @26 exception:15,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;ILjava/lang/String;Ljava/util/List;Z)[Landroid/accounts/Account; > 1,16,5,3,9,12 @33 exception:17,
return 18,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public Account getAccounts(int p1, String p2){
	List v3 = p0.getTypesVisibleToCaller(v1, p1, p2);
	boolean v4 = v3.isEmpty();
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(p1);
	Account v7 = p0.getAccountsInternal(v6, v1, p2, v3, 0);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","1","12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,5,2,3 @9 exception:8,
conditional branch(eq, to iindex=-1) 11,12,
25 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 25,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public Account getAccounts(int p1, String p2){
	List v3 = p0.getTypesVisibleToCaller(v1, p1, p2);
	boolean v4 = v3.isEmpty();
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","2","12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,5,2,3 @9 exception:8,
return 7,
conditional branch(eq, to iindex=-1) 11,12,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @26 exception:15,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;ILjava/lang/String;Ljava/util/List;Z)[Landroid/accounts/Account; > 1,16,5,3,9,12 @33 exception:17,
7 = new <Application,Ljava/util/ArrayList>@0,
conditional branch(eq, to iindex=-1) 12,13,
28 = new <Application,[Landroid/accounts/Account>@4527 ,
36 = phi  35,13,
conditional branch(ge, to iindex=-1) 36,30,
return 28,
return 18,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public Account getAccounts(int p1, String p2){
	List v3 = p0.getTypesVisibleToCaller(v1, p1, p2);
	boolean v4 = v3.isEmpty();
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(p1);
	Account v7 = p0.getAccountsInternal(v6, v1, p2, v3, 0);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return v7;
}
-----
depth : 2
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 2
public Account getAccountsInternal(AccountManagerService$UserAccounts p1, int p2, String p3, List p4, boolean p5){
	ArrayList v0 = new ArrayList();
	Iterator v2 = p4.iterator();
	boolean v3 = v2.hasNext();
	int v4 = v0.size();
	Account v4 = new Account(v4);
	int v5 = v0.size();
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","onAccountAccessed(Ljava/lang/String;)V","2","12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts(ILjava/lang/String;)[Landroid/accounts/Account; > 1,9,14 @27 exception:15,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,5,2,3 @9 exception:8,
return 7,
conditional branch(eq, to iindex=-1) 11,12,
25 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 25,
17 = arraylength 16,
34 = phi  33,18,
conditional branch(ge, to iindex=-1) 34,17,
return,","depth : 0
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	Account v6 = p0.getAccounts(v3, v5);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public Account getAccounts(int p1, String p2){
	List v3 = p0.getTypesVisibleToCaller(v1, p1, p2);
	boolean v4 = v3.isEmpty();
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
depth : 2
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V","0","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@25,
goto (from iindex= 44 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 48 to iindex = 2),
64 = phi  8,15,
conditional branch(ne, to iindex=-1) 3,15,
240 = getCaughtException ,
goto (from iindex= 60 to iindex = 14),
241 = new <Application,Ljava/lang/StringBuilder>@146,
return,","depth : 0
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthToken: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", notifyOnAuthFailure "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", expectActivityLaunch "");
	StringBuilder v13 = v2.append(p5);
	StringBuilder v14 = v2.append("", caller's uid "");
	int v15 = Binder.getCallingUid();
	StringBuilder v16 = v2.append(v15);
	StringBuilder v17 = v2.append("", pid "");
	int v18 = Binder.getCallingPid();
	StringBuilder v19 = v2.append(v18);
	String v20 = v2.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = Slog.w(""AccountManagerService"", ""getAuthToken called with null account"");
	p1.onError(7, ""account is null"");
	StringBuilder v24 = new StringBuilder();
	StringBuilder v26 = v24.append(""Failed to report error back to the client."");
	StringBuilder v27 = v24.append(caughtException);
	String v28 = v24.toString();
	int v29 = Slog.w(""AccountManagerService"", v28);
	return;
}
-----
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V","0","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@25,
goto (from iindex= 44 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 48 to iindex = 2),
64 = phi  8,15,
conditional branch(ne, to iindex=-1) 3,15,
return,","depth : 0
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthToken: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", notifyOnAuthFailure "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", expectActivityLaunch "");
	StringBuilder v13 = v2.append(p5);
	StringBuilder v14 = v2.append("", caller's uid "");
	int v15 = Binder.getCallingUid();
	StringBuilder v16 = v2.append(v15);
	StringBuilder v17 = v2.append("", pid "");
	int v18 = Binder.getCallingPid();
	StringBuilder v19 = v2.append(v18);
	String v20 = v2.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = Slog.w(""AccountManagerService"", ""getAuthToken called with null account"");
	p1.onError(7, ""account is null"");
	return;
}
-----
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V","0","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@25,
goto (from iindex= 44 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 48 to iindex = 2),
64 = phi  8,15,
conditional branch(ne, to iindex=-1) 3,15,
conditional branch(ne, to iindex=-1) 4,15,
240 = getCaughtException ,
goto (from iindex= 60 to iindex = 14),
241 = new <Application,Ljava/lang/StringBuilder>@146,
return,","depth : 0
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthToken: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", notifyOnAuthFailure "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", expectActivityLaunch "");
	StringBuilder v13 = v2.append(p5);
	StringBuilder v14 = v2.append("", caller's uid "");
	int v15 = Binder.getCallingUid();
	StringBuilder v16 = v2.append(v15);
	StringBuilder v17 = v2.append("", pid "");
	int v18 = Binder.getCallingPid();
	StringBuilder v19 = v2.append(v18);
	String v20 = v2.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = Slog.w(""AccountManagerService"", ""getAuthToken called with null authTokenType"");
	p1.onError(7, ""authTokenType is null"");
	StringBuilder v24 = new StringBuilder();
	StringBuilder v26 = v24.append(""Failed to report error back to the client."");
	StringBuilder v27 = v24.append(caughtException);
	String v28 = v24.toString();
	int v29 = Slog.w(""AccountManagerService"", v28);
	return;
}
-----
","NONE"
"Lcom/android/server/accounts/AccountManagerService","getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V","0","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@25,
goto (from iindex= 44 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 48 to iindex = 2),
64 = phi  8,15,
conditional branch(ne, to iindex=-1) 3,15,
conditional branch(ne, to iindex=-1) 4,15,
return,","depth : 0
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthToken: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", notifyOnAuthFailure "");
	StringBuilder v11 = v2.append(p4);
	StringBuilder v12 = v2.append("", expectActivityLaunch "");
	StringBuilder v13 = v2.append(p5);
	StringBuilder v14 = v2.append("", caller's uid "");
	int v15 = Binder.getCallingUid();
	StringBuilder v16 = v2.append(v15);
	StringBuilder v17 = v2.append("", pid "");
	int v18 = Binder.getCallingPid();
	StringBuilder v19 = v2.append(v18);
	String v20 = v2.toString();
	int v21 = Log.v(""AccountManagerService"", v20);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v23 = Slog.w(""AccountManagerService"", ""getAuthToken called with null authTokenType"");
	p1.onError(7, ""authTokenType is null"");
	return;
}
-----
","NONE"

"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","0","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,9,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(eq, to iindex=-1) 45,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","1","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,9,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
conditional branch(ne, to iindex=-1) 8,4,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
12 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAccountPasswordByNameAndType(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 11,12,13 @58 exception:14,
monitorexit 10,
monitorexit 9,
return 15,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","1","conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 2,9,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
conditional branch(ne, to iindex=-1) 8,4,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
12 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAccountPasswordByNameAndType(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 11,12,13 @58 exception:14,
monitorexit 10,
monitorexit 9,
return 15,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v1, v3);
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(v3);
	String v7 = p0.readPasswordInternal(v6, p1);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return v7;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,9,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 8,4,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
12 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAccountPasswordByNameAndType(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 11,12,13 @58 exception:14,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 2,
arraystore 8[10] = 3,
12 = new <Application,[Ljava/lang/String>@1810 ,
conditional branch(eq, to iindex=-1) 18,9,
return 21,
monitorexit 10,
monitorexit 9,
return 15,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
	return v3;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public String findAccountPasswordByNameAndType(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v1 = new String(1);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	String v4 = v2.getString(0);
	v2.close();
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,9,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 8,4,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
12 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAccountPasswordByNameAndType(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 11,12,13 @58 exception:14,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 2,
arraystore 8[10] = 3,
12 = new <Application,[Ljava/lang/String>@1810 ,
conditional branch(eq, to iindex=-1) 18,9,
return 9,
monitorexit 10,
monitorexit 9,
return 15,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	int v7 = Binder.getCallingUid();
	StringBuilder v8 = v2.append(v7);
	StringBuilder v9 = v2.append("", pid "");
	int v10 = Binder.getCallingPid();
	StringBuilder v11 = v2.append(v10);
	String v12 = v2.toString();
	int v13 = Log.v(""AccountManagerService"", v12);
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	String v18 = p0.readPasswordInternal(v17, p1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return v18;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
	return v3;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public String findAccountPasswordByNameAndType(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v1 = new String(1);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPassword(Landroid/accounts/Account;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 2,9,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,43,4,42 @65 exception:44,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 45,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,42 @75 exception:58,
61 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,59,2 @79 exception:60,
conditional branch(ne, to iindex=-1) 3,4,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @4 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
8 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,6 @8 exception:7,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 8,4,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
12 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAccountPasswordByNameAndType(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 11,12,13 @58 exception:14,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 2,
arraystore 8[10] = 3,
12 = new <Application,[Ljava/lang/String>@1810 ,
conditional branch(eq, to iindex=-1) 18,9,
return 21,
monitorexit 10,
monitorexit 9,
return 15,
return 61,","depth : 0
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v1, v3);
	long v5 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v6 = p0.getUserAccounts(v3);
	String v7 = p0.readPasswordInternal(v6, p1);
	IAccountManager$Stub.restoreCallingIdentity(v5);
	return v7;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readPasswordInternal(AccountManagerService$UserAccounts p1, Account p2){
	int v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	boolean v2 = p0.isLocalUnlockedUser(v1);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
	return v3;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 2
public String findAccountPasswordByNameAndType(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	String v1 = new String(1);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	String v4 = v2.getString(0);
	v2.close();
	return v4;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V","0","13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, registerAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
return,","depth : 0
public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.registerAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V","1","13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, registerAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetmReceiversForType(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 4 @0 exception:5,
monitorenter 6,
conditional branch(ne, to iindex=-1) 2,7,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = phi  2,8,
12 = arraylength 10,
44 = phi  43,7,
conditional branch(ge, to iindex=-1) 44,12,
monitorexit 6,
return,
return,","depth : 0
public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.registerAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void registerAccountListener(String p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p3);
	String v1 = new String(1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V","2","13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, registerAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetmReceiversForType(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 4 @0 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, mReceiversForType, <Application,Ljava/util/Map> > 1,
return 2,
monitorenter 6,
conditional branch(ne, to iindex=-1) 2,7,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = phi  2,8,
12 = arraylength 10,
44 = phi  43,7,
conditional branch(ge, to iindex=-1) 44,12,
monitorexit 6,
return,
return,","depth : 0
public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.registerAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void registerAccountListener(String p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p3);
	String v1 = new String(1);
	return;
}
-----
depth : 2
public Map -$$Nest$fgetmReceiversForType(AccountManagerService$UserAccounts p1){
	return this.mReceiversForType;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","0","conditional branch(eq, to iindex=-1) 7,8,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
19 = arrayload 15[25],
20 = getfield < Application, Landroid/accounts/AccountAndUser, account, <Application,Landroid/accounts/Account> > 19,
22 = invokevirtual < Application, Landroid/accounts/Account, equals(Ljava/lang/Object;)Z > 20,2 @29 exception:21,
conditional branch(eq, to iindex=-1) 22,8,
return 17,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	boolean v5 = AccountAndUser.account.equals(p1);
	Binder.restoreCallingIdentity(v3);
	return 1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","1","conditional branch(eq, to iindex=-1) 7,8,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
3 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:2,
8 = new <Primordial,[I>@127 ,
16 = phi  15,9,
conditional branch(ge, to iindex=-1) 16,7,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts([I)[Landroid/accounts/AccountAndUser; > 1,8 @30 exception:19,
return 20,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
19 = arrayload 15[25],
20 = getfield < Application, Landroid/accounts/AccountAndUser, account, <Application,Landroid/accounts/Account> > 19,
22 = invokevirtual < Application, Landroid/accounts/Account, equals(Ljava/lang/Object;)Z > 20,2 @29 exception:21,
conditional branch(eq, to iindex=-1) 22,8,
return 17,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	boolean v5 = AccountAndUser.account.equals(p1);
	Binder.restoreCallingIdentity(v3);
	return 1;
}
-----
depth : 1
public AccountAndUser getAllAccounts(){
	UserManager v1 = p0.getUserManager();
	List v2 = v1.getAliveUsers();
	int v3 = v2.size();
	[I v3 = new [I(v3);
	AccountAndUser v4 = p0.getAccounts(v3);
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","1","conditional branch(eq, to iindex=-1) 7,8,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
3 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:2,
8 = new <Primordial,[I>@127 ,
16 = phi  15,9,
conditional branch(ge, to iindex=-1) 16,7,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts([I)[Landroid/accounts/AccountAndUser; > 1,8 @30 exception:19,
return 20,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
return 8,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public AccountAndUser getAllAccounts(){
	UserManager v1 = p0.getUserManager();
	List v2 = v1.getAliveUsers();
	int v3 = v2.size();
	[I v3 = new [I(v3);
	AccountAndUser v4 = p0.getAccounts(v3);
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","2","conditional branch(eq, to iindex=-1) 7,8,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
3 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:2,
8 = new <Primordial,[I>@127 ,
16 = phi  15,9,
conditional branch(ge, to iindex=-1) 16,7,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts([I)[Landroid/accounts/AccountAndUser; > 1,8 @30 exception:19,
5 = arraylength 2,
31 = phi  30,6,
conditional branch(ge, to iindex=-1) 31,5,
38 = new <Application,[Landroid/accounts/AccountAndUser>@5437 ,
41 = checkcast <Application,[Landroid/accounts/AccountAndUser>40 <Application,[Landroid/accounts/AccountAndUser>,
return 41,
return 20,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
19 = arrayload 15[25],
20 = getfield < Application, Landroid/accounts/AccountAndUser, account, <Application,Landroid/accounts/Account> > 19,
22 = invokevirtual < Application, Landroid/accounts/Account, equals(Ljava/lang/Object;)Z > 20,2 @29 exception:21,
conditional branch(eq, to iindex=-1) 22,8,
return 17,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	boolean v5 = AccountAndUser.account.equals(p1);
	Binder.restoreCallingIdentity(v3);
	return 1;
}
-----
depth : 1
public AccountAndUser getAllAccounts(){
	UserManager v1 = p0.getUserManager();
	List v2 = v1.getAliveUsers();
	int v3 = v2.size();
	[I v3 = new [I(v3);
	AccountAndUser v4 = p0.getAccounts(v3);
	return v4;
}
-----
depth : 2
public AccountAndUser getAccounts([I p1){
	ArrayList v1 = Lists.newArrayList();
	int v2 = v1.size();
	AccountAndUser v2 = new AccountAndUser(v2);
	Object v3 = v1.toArray(v2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","someUserHasAccount(Landroid/accounts/Account;)Z","2","conditional branch(eq, to iindex=-1) 7,8,
15 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAllAccounts()[Landroid/accounts/AccountAndUser; > 1 @16 exception:14,
3 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @0 exception:2,
8 = new <Primordial,[I>@127 ,
16 = phi  15,9,
conditional branch(ge, to iindex=-1) 16,7,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccounts([I)[Landroid/accounts/AccountAndUser; > 1,8 @30 exception:19,
5 = arraylength 2,
31 = phi  30,6,
conditional branch(ge, to iindex=-1) 31,5,
38 = new <Application,[Landroid/accounts/AccountAndUser>@5437 ,
41 = checkcast <Application,[Landroid/accounts/AccountAndUser>40 <Application,[Landroid/accounts/AccountAndUser>,
return 41,
return 20,
16 = arraylength 15,
18 = binaryop(sub) 16 , 17,
25 = phi  24,18,
conditional branch(lt, to iindex=-1) 25,8,
return 8,","depth : 0
public boolean someUserHasAccount(Account p1){
	long v3 = Binder.clearCallingIdentity();
	AccountAndUser v4 = p0.getAllAccounts();
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public AccountAndUser getAllAccounts(){
	UserManager v1 = p0.getUserManager();
	List v2 = v1.getAliveUsers();
	int v3 = v2.size();
	[I v3 = new [I(v3);
	AccountAndUser v4 = p0.getAccounts(v3);
	return v4;
}
-----
depth : 2
public AccountAndUser getAccounts([I p1){
	ArrayList v1 = Lists.newArrayList();
	int v2 = v1.size();
	AccountAndUser v2 = new AccountAndUser(v2);
	Object v3 = v1.toArray(v2);
	return v3;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;","0","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,4,2 @53 exception:36,
conditional branch(ne, to iindex=-1) 37,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAuthenticatorTypesInternal(I)[Landroid/accounts/AuthenticatorDescription; > 1,2 @63 exception:53,
return 54,","depth : 0
public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthenticatorTypes: for user id "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("" caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	boolean v13 = p0.isCrossUser(v1, p1);
	long v14 = IAccountManager$Stub.clearCallingIdentity();
	AuthenticatorDescription v15 = p0.getAuthenticatorTypesInternal(p1);
	IAccountManager$Stub.restoreCallingIdentity(v14);
	return v15;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;","1","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,4,2 @53 exception:36,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 37,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAuthenticatorTypesInternal(I)[Landroid/accounts/AuthenticatorDescription; > 1,2 @63 exception:53,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
10 = new <Application,[Landroid/accounts/AuthenticatorDescription>@159 ,
23 = phi  22,13,
conditional branch(eq, to iindex=-1) 15,13,
return 10,
return 54,","depth : 0
public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthenticatorTypes: for user id "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("" caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	boolean v13 = p0.isCrossUser(v1, p1);
	long v14 = IAccountManager$Stub.clearCallingIdentity();
	AuthenticatorDescription v15 = p0.getAuthenticatorTypesInternal(p1);
	IAccountManager$Stub.restoreCallingIdentity(v14);
	return v15;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AuthenticatorDescription getAuthenticatorTypesInternal(int p1){
	this.mAuthenticatorCache.updateServices(p1);
	Collection v2 = this.mAuthenticatorCache.getAllServices(p1);
	int v3 = v2.size();
	AuthenticatorDescription v3 = new AuthenticatorDescription(v3);
	Iterator v4 = v2.iterator();
	boolean v5 = v4.hasNext();
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;","1","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,4,2 @53 exception:36,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 37,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAuthenticatorTypesInternal(I)[Landroid/accounts/AuthenticatorDescription; > 1,2 @63 exception:53,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
10 = new <Application,[Landroid/accounts/AuthenticatorDescription>@159 ,
23 = phi  22,13,
conditional branch(eq, to iindex=-1) 15,13,
return 10,
return 54,","depth : 0
public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""getAuthenticatorTypes: for user id "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("" caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	boolean v13 = p0.isCrossUser(v1, p1);
	long v14 = IAccountManager$Stub.clearCallingIdentity();
	AuthenticatorDescription v15 = p0.getAuthenticatorTypesInternal(p1);
	IAccountManager$Stub.restoreCallingIdentity(v14);
	return v15;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AuthenticatorDescription getAuthenticatorTypesInternal(int p1){
	this.mAuthenticatorCache.updateServices(p1);
	Collection v2 = this.mAuthenticatorCache.getAllServices(p1);
	int v3 = v2.size();
	AuthenticatorDescription v3 = new AuthenticatorDescription(v3);
	Iterator v4 = v2.iterator();
	boolean v5 = v4.hasNext();
	return v3;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","0","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(eq, to iindex=-1) 43,9,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""clearPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","1","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""clearPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","1","conditional branch(eq, to iindex=-1) 8,9,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	p0.setPasswordInternal(v7, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","2","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,Landroid/content/ContentValues>@6,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@76 ,
arraystore 7[10] = 9,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
return,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""clearPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","2","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 20,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,Landroid/content/ContentValues>@6,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@76 ,
arraystore 7[10] = 9,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
return,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""clearPassword: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v14);
	p0.setPasswordInternal(v17, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","clearPassword(Landroid/accounts/Account;)V","2","conditional branch(eq, to iindex=-1) 8,9,
41 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
43 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,41,4,40 @64 exception:42,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 43,9,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @74 exception:56,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setPasswordInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;I)V > 1,57,2,9,4 @79 exception:58,
conditional branch(ne, to iindex=-1) 3,6,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 9 @12 exception:10,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
11 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
13 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 11,3 @17 exception:12,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
15 = binaryop(lt) 13 , 14,
conditional branch(lt, to iindex=-1) 15,6,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, updateCeAccountPassword(JLjava/lang/String;)I > 16,13,4 @29 exception:17,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,Landroid/content/ContentValues>@6,
12 = new <Application,[Ljava/lang/String>@1811 ,
arraystore 12[15] = 14,
return 19,
19 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
21 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, deleteAuthTokensByAccountId(J)Z > 19,13 @34 exception:20,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@76 ,
arraystore 7[10] = 9,
conditional branch(le, to iindex=-1) 14,10,
goto (from iindex= 14 to iindex = 2),
15 = phi  6,10,
return 15,
23 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetauthTokenCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @37 exception:22,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, authTokenCache, <Application,Ljava/util/Map> > 1,
return 2,
27 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 2 @44 exception:26,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Landroid/accounts/Account;)V > 27,3 @48 exception:28,
3 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
return,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 29 @53 exception:30,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 4,6,
conditional branch(ne, to iindex=-1) 33,6,
goto (from iindex= 32 to iindex = 4),
38 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CLEAR_PASSWORD, <Application,Ljava/lang/String> >,
39 = phi  34,38,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,39,42,13,2,5 @77 exception:43,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
59 = phi  6,31,
64 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 64 @82 exception:65,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
conditional branch(eq, to iindex=-1) 59,6,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendNotificationAccountUpdated(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,3,2 @87 exception:66,
conditional branch(eq, to iindex=-1) 11,12,
return,
68 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @90 exception:67,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,68 @94 exception:69,
3 = new <Application,Ljava/lang/StringBuilder>@0,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
return,
monitorexit 8,
monitorexit 7,
return,
return,","depth : 0
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	p0.setPasswordInternal(v7, p1, 0, v1);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void setPasswordInternal(AccountManagerService$UserAccounts p1, Account p2, String p3, int p4){
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	long v2 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p2);
	int v3 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v2, p3);
	boolean v4 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v2);
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(p1);
	Object v6 = v5.remove(p2);
	TokenCache v7 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(p1);
	v7.remove(p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	int v10 = p3.length();
	p0.logRecord(phiInstruction, ""accounts"", v2, p1, p4);
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	p0.sendNotificationAccountUpdated(p2, p1);
	int v14 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.sendAccountsChangedBroadcast(v14);
	return;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public int updateCeAccountPassword(long p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	ContentValues v1 = new ContentValues();
	v1.put(""password"", p2);
	String v3 = new String(1);
	String v4 = String.valueOf(p1);
	int v5 = v1.update(""ceDb.accounts"", v1, ""_id=?"", v3);
	return v5;
}
-----
depth : 2
public boolean deleteAuthTokensByAccountId(long p1){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v2 = String.valueOf(p1);
	int v3 = v1.delete(""ceDb.authtokens"", ""accounts_id=?"", v1);
	return phiInstruction;
}
-----
depth : 2
public Map -$$Nest$fgetauthTokenCache(AccountManagerService$UserAccounts p1){
	return this.authTokenCache;
}
-----
depth : 2
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 2
public void remove(Account p1){
	this.mCachedTokens.evict(p1);
	return;
}
-----
depth : 2
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 2
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 2
public void sendNotificationAccountUpdated(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = p0.getRequestingPackages(p1, p2);
	Set v2 = v1.entrySet();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	return;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","0","conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
arraystore 13[7] = 15,
arraystore 13[16] = 20,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
conditional branch(ne, to iindex=-1) 50,11,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = p0.getUserAccounts(v10);
	boolean v15 = p0.accountExistsCache(v14, p1);
	String v16 = p0.readUserDataInternal(v14, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","1","conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
arraystore 13[7] = 15,
arraystore 13[16] = 20,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 50,11,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
6 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
11 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
14 = checkcast <Application,[Landroid/accounts/Account>13 <Application,[Landroid/accounts/Account>,
15 = arraylength 14,
23 = phi  22,9,
conditional branch(ge, to iindex=-1) 23,15,
16 = arrayload 14[23],
17 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 16,
18 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 20,9,
monitorexit 4,
return 37,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findUserExtrasForAccount(Landroid/accounts/Account;)Ljava/util/Map; > 24,3 @36 exception:25,
28 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @40 exception:27,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = p0.getUserAccounts(v10);
	boolean v15 = p0.accountExistsCache(v14, p1);
	String v16 = p0.readUserDataInternal(v14, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean accountExistsCache(AccountManagerService$UserAccounts p1, Account p2){
	boolean v1 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v2 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	boolean v3 = Account.name.equals(Account.name);
	return 1;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = [resolveCodeAbst] + 45 = phi  10,31.get(p3);
	return v8;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","1","conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
arraystore 13[7] = 15,
arraystore 13[16] = 20,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mUsers, <Application,Landroid/util/SparseArray> > 1,
monitorenter 3,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mLocalUnlockedUsers, <Application,Landroid/util/SparseBooleanArray> > 1,
monitorexit 3,
return 6,
conditional branch(ne, to iindex=-1) 50,11,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
6 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
conditional branch(eq, to iindex=-1) 8,9,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountCache, <Application,Ljava/util/HashMap> > 2,
11 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
14 = checkcast <Application,[Landroid/accounts/Account>13 <Application,[Landroid/accounts/Account>,
15 = arraylength 14,
23 = phi  22,9,
conditional branch(ge, to iindex=-1) 23,15,
monitorexit 4,
return 9,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findUserExtrasForAccount(Landroid/accounts/Account;)Ljava/util/Map; > 24,3 @36 exception:25,
28 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @40 exception:27,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = p0.getUserAccounts(v10);
	boolean v15 = p0.accountExistsCache(v14, p1);
	String v16 = p0.readUserDataInternal(v14, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isLocalUnlockedUser(int p1){
	boolean v1 = this.mLocalUnlockedUsers.get(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean accountExistsCache(AccountManagerService$UserAccounts p1, Account p2){
	boolean v1 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
	Object v2 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
	return 0;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = [resolveCodeAbst] + 45 = phi  10,31.get(p3);
	return v8;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
arraystore 13[7] = 15,
arraystore 13[16] = 20,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
conditional branch(ne, to iindex=-1) 50,11,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findUserExtrasForAccount(Landroid/accounts/Account;)Ljava/util/Map; > 24,3 @36 exception:25,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = new <Application,Ljava/util/HashMap>@6,
9 = new <Application,[Ljava/lang/String>@128 ,
10 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 9[11] = 10,
12 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 9[13] = 12,
14 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, COLUMNS_EXTRAS_KEY_AND_VALUE, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 20,11,
return 6,
28 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @40 exception:27,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = p0.getUserAccounts(v10);
	boolean v15 = p0.accountExistsCache(v14, p1);
	String v16 = p0.readUserDataInternal(v14, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = [resolveCodeAbst] + 45 = phi  10,31.get(p3);
	return v8;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map findUserExtrasForAccount(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v1 = new HashMap();
	String v2 = new String(2);
	Cursor v3 = v1.query(""ceDb.extras"", this.COLUMNS_EXTRAS_KEY_AND_VALUE, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v2, 0, 0, 0);
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 9,11,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
conditional branch(ne, to iindex=-1) 50,11,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
26 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findUserExtrasForAccount(Landroid/accounts/Account;)Ljava/util/Map; > 24,3 @36 exception:25,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
6 = new <Application,Ljava/util/HashMap>@6,
9 = new <Application,[Ljava/lang/String>@128 ,
10 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 9[11] = 10,
12 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 9[13] = 12,
14 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, COLUMNS_EXTRAS_KEY_AND_VALUE, <Application,[Ljava/lang/String> >,
conditional branch(eq, to iindex=-1) 20,11,
return 6,
28 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @40 exception:27,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v3 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v4 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = p0.isAccountManagedByCaller(Account.type, v1, v5);
	boolean v7 = p0.isLocalUnlockedUser(v5);
	long v8 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v5);
	boolean v10 = p0.accountExistsCache(v9, p1);
	String v11 = p0.readUserDataInternal(v9, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v8);
	return v11;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Map v5 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p2);
	Map v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v7 = v6.put(p2, v5);
	Object v8 = [resolveCodeAbst] + 45 = phi  10,31.get(p3);
	return v8;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map findUserExtrasForAccount(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	HashMap v1 = new HashMap();
	String v2 = new String(2);
	Cursor v3 = v1.query(""ceDb.extras"", this.COLUMNS_EXTRAS_KEY_AND_VALUE, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v2, 0, 0, 0);
	boolean v4 = v3.moveToNext();
	v3.close();
	return v1;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 9,11,
13 = new <Application,[Ljava/lang/Object>@1612 ,
arraystore 13[11] = 2,
arraystore 13[10] = 3,
arraystore 13[7] = 15,
arraystore 13[16] = 20,
37 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
39 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,37,5,36 @64 exception:38,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 39,11,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isLocalUnlockedUser(I)Z > 1,36 @70 exception:49,
conditional branch(ne, to iindex=-1) 50,11,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,36 @110 exception:53,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, accountExistsCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Z > 1,54,2 @114 exception:55,
conditional branch(ne, to iindex=-1) 56,11,
58 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readUserDataInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; > 1,54,2,3 @124 exception:57,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
7 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @3 exception:6,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
10 = checkcast <Application,Ljava/util/Map>9 <Application,Ljava/util/Map>,
monitorexit 5,
conditional branch(ne, to iindex=-1) 10,16,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 17,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 18,
20 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserDataCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 2 @22 exception:19,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userDataCache, <Application,Ljava/util/Map> > 1,
return 2,
23 = checkcast <Application,Ljava/util/Map>22 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 23,16,
31 = phi  23,26,
monitorexit 18,
monitorexit 17,
goto (from iindex= 28 to iindex = 7),
45 = phi  10,31,
52 = checkcast <Application,Ljava/lang/String>51 <Application,Ljava/lang/String>,
return 52,
return 58,","depth : 0
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = new Object(4);
	Integer v3 = Integer.valueOf(v1);
	int v4 = Binder.getCallingPid();
	Integer v5 = Integer.valueOf(v4);
	String v6 = String.format(""getUserData( account: %s, key: %s, callerUid: %s, pid: %s"", v2);
	int v7 = Log.v(""AccountManagerService"", v6);
	Object v8 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v9 = Objects.requireNonNull(p2, ""key cannot be null"");
	int v10 = UserHandle.getCallingUserId();
	boolean v11 = p0.isAccountManagedByCaller(Account.type, v1, v10);
	boolean v12 = p0.isLocalUnlockedUser(v10);
	long v13 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v14 = p0.getUserAccounts(v10);
	boolean v15 = p0.accountExistsCache(v14, p1);
	String v16 = p0.readUserDataInternal(v14, p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v13);
	return v16;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public String readUserDataInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v2 = v1.get(p2);
	Map v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(p1);
	Object v4 = v3.get(p2);
	Object v5 = [resolveCodeAbst] + 45 = phi  10,31.get(p3);
	return v5;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
depth : 2
public Map -$$Nest$fgetuserDataCache(AccountManagerService$UserAccounts p1){
	return this.userDataCache;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","0","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","1","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 1
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","1","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
5 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getReadableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 3 @2 exception:4,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
17 = invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 5,14,7,15,10,12,12,12 @33 exception:16,
conditional branch(eq, to iindex=-1) 19,12,
return 20,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 1
public long findDeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","2","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
4 = binaryop(lt) 2 , 3,
conditional branch(ne, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
8 = binaryop(add) 6 , 7,
10 = binaryop(rem) 8 , 9,
putfield 1.< Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > = 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
return 11,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public long reserveDebugDbInsertionPoint(){
	this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
	return this.mDebugDbInsertionPoint;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","2","conditional branch(eq, to iindex=-1) 8,9,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
4 = binaryop(lt) 2 , 3,
conditional branch(ne, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
8 = binaryop(add) 6 , 7,
10 = binaryop(rem) 8 , 9,
putfield 1.< Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > = 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
return 11,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
13 = new <Application,Lcom/android/server/accounts/AccountManagerService$1LogRecordTask>@14,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mHandler, <Application,Lcom/android/server/accounts/AccountManagerService$MessageHandler> > 1,
return,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v1, v4);
	AccountManagerService$UserAccounts v6 = p0.getUserAccountsForCaller();
	long v7 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v7, v6, v1);
	long v9 = IAccountManager$Stub.clearCallingIdentity();
	boolean v10 = p0.removeAccountInternal(v6, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v9);
	return v10;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	AccountManagerService$1LogRecordTask v1 = new AccountManagerService$1LogRecordTask(p0,p1,p2,p3,p4,p5,v1);
	boolean v3 = this.mHandler.post(v1);
	return;
}
-----
depth : 2
public long reserveDebugDbInsertionPoint(){
	this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
	return this.mDebugDbInsertionPoint;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","removeAccountExplicitly(Landroid/accounts/Account;)Z","2","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(ne, to iindex=-1) 2,9,
40 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
42 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,40,4,39 @73 exception:41,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 42,9,
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsForCaller()Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1 @79 exception:53,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,3 @4 exception:4,
return 4,
return 5,
55 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 54,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountId(Landroid/accounts/Account;)J > 55,2 @85 exception:56,
58 = getstatic < Application, Lcom/android/server/accounts/AccountsDb, DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, <Application,Ljava/lang/String> >,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, logRecord(Ljava/lang/String;Ljava/lang/String;JLcom/android/server/accounts/AccountManagerService$UserAccounts;I)V > 1,58,59,57,54,4 @96 exception:60,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, reserveDebugDbInsertionPoint()J > 7 @4 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
4 = binaryop(lt) 2 , 3,
conditional branch(ne, to iindex=-1) 4,5,
6 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
8 = binaryop(add) 6 , 7,
10 = binaryop(rem) 8 , 9,
putfield 1.< Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > = 10,
11 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDebugDbInsertionPoint, <Primordial,J> > 1,
return 11,
11 = binaryop(lt) 9 , 10,
conditional branch(eq, to iindex=-1) 11,12,
return,
64 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, removeAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;I)Z > 1,54,2,4 @103 exception:63,
return 64,","depth : 0
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""removeAccountExplicitly: "");
	StringBuilder v5 = v2.append(p1);
	StringBuilder v6 = v2.append("", caller's uid "");
	StringBuilder v7 = v2.append(v1);
	StringBuilder v8 = v2.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v2.append(v9);
	String v11 = v2.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	UserHandle v13 = Binder.getCallingUserHandle();
	int v14 = v13.getIdentifier();
	boolean v15 = p0.isAccountManagedByCaller(Account.type, v1, v14);
	AccountManagerService$UserAccounts v16 = p0.getUserAccountsForCaller();
	long v17 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, ""accounts"", v17, v16, v1);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	boolean v20 = p0.removeAccountInternal(v16, p1, v1);
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return v20;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccountsForCaller(){
	int v1 = UserHandle.getCallingUserId();
	AccountManagerService$UserAccounts v2 = p0.getUserAccounts(v1);
	return v2;
}
-----
depth : 2
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void logRecord(String p1, String p2, long p3, AccountManagerService$UserAccounts p4, int p5){
	long v1 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
	return;
}
-----
depth : 2
public long reserveDebugDbInsertionPoint(){
	this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
	return this.mDebugDbInsertionPoint;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","0","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	boolean v19 = p0.isSystemUid(v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	AccountManagerService$16 v21 = new AccountManagerService$16(p0,v21,p1,p2,p3,1,0,0,p2);
	v21.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","1","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
return 23,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	boolean v19 = p0.isSystemUid(v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	AccountManagerService$16 v21 = new AccountManagerService$16(p0,v21,p1,p2,p3,1,0,0,p2);
	v21.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","1","conditional branch(eq, to iindex=-1) 10,11,
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
return 23,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(p2, v1, v3);
	boolean v5 = p0.isSystemUid(v1);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	AccountManagerService$16 v7 = new AccountManagerService$16(p0,v7,p1,p2,p3,1,0,0,p2);
	v7.bind();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","2","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	boolean v19 = p0.isSystemUid(v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	AccountManagerService$16 v21 = new AccountManagerService$16(p0,v21,p1,p2,p3,1,0,0,p2);
	v21.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","2","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
goto (from iindex= 33 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
conditional branch(eq, to iindex=-1) 5,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""editProperties: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", expectActivityLaunch "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", caller's uid "");
	StringBuilder v11 = v2.append(v1);
	StringBuilder v12 = v2.append("", pid "");
	int v13 = Binder.getCallingPid();
	StringBuilder v14 = v2.append(v13);
	String v15 = v2.toString();
	int v16 = Log.v(""AccountManagerService"", v15);
	int v17 = UserHandle.getCallingUserId();
	boolean v18 = p0.isAccountManagedByCaller(p2, v1, v17);
	boolean v19 = p0.isSystemUid(v1);
	long v20 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v17);
	AccountManagerService$16 v21 = new AccountManagerService$16(p0,v21,p1,p2,p3,1,0,0,p2);
	v21.bind();
	IAccountManager$Stub.restoreCallingIdentity(v20);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""bind attempt failed for "");
	String v5 = p0.toDebugString();
	StringBuilder v6 = v2.append(v5);
	String v7 = v2.toString();
	int v8 = Log.d(""AccountManagerService"", v7);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V","2","conditional branch(eq, to iindex=-1) 10,11,
conditional branch(eq, to iindex=-1) 2,11,
conditional branch(eq, to iindex=-1) 3,11,
57 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,3,6,55 @86 exception:56,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 57,11,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,6 @92 exception:58,
conditional branch(eq, to iindex=-1) 59,11,
goto (from iindex= 45 to iindex = 26),
75 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @128 exception:74,
76 = new <Application,Lcom/android/server/accounts/AccountManagerService$16>@132,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 76 @149 exception:78,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(p2, v1, v3);
	boolean v5 = p0.isSystemUid(v1);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
	AccountManagerService$16 v7 = new AccountManagerService$16(p0,v7,p1,p2,p3,1,0,0,p2);
	v7.bind();
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(eq, to iindex=-1) 63,11,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
80 = new <Application,Landroid/os/Bundle>@113,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
93 = getCaughtException ,
95 = invokevirtual < Application, Landroid/os/RemoteException, getMessage()Ljava/lang/String; > 93 @146 exception:94,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	String v27 = [resolveCodeAbst] + 93 = getCaughtException .getMessage();
	int v28 = Log.w(""AccountManagerService"", v27);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
93 = getCaughtException ,
95 = invokevirtual < Application, Landroid/os/RemoteException, getMessage()Ljava/lang/String; > 93 @146 exception:94,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	String v27 = [resolveCodeAbst] + 93 = getCaughtException .getMessage();
	int v28 = Log.w(""AccountManagerService"", v27);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
goto (from iindex= 64 to iindex = 9),
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
monitorenter 5,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
30 = phi  10,24,
monitorexit 5,
return 30,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
return,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
4 = new <Application,Landroid/content/Intent>@0,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
16 = new <Application,Ljava/util/ArrayList>@23,
conditional branch(ne, to iindex=-1) 15,13,
conditional branch(eq, to iindex=-1) 21,13,
return 16,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
93 = getCaughtException ,
95 = invokevirtual < Application, Landroid/os/RemoteException, getMessage()Ljava/lang/String; > 93 @146 exception:94,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	String v27 = [resolveCodeAbst] + 93 = getCaughtException .getMessage();
	int v28 = Log.w(""AccountManagerService"", v27);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public List getAccountRemovedReceivers(Account p1, AccountManagerService$UserAccounts p2){
	Intent v0 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v2 = v0.setFlags(16777216);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p2);
	List v4 = this.mPackageManager.queryBroadcastReceiversAsUser(v0, 0, v3);
	ArrayList v4 = new ArrayList();
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	return v4;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
monitorenter 5,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
30 = phi  10,24,
monitorexit 5,
return 30,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
return,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
4 = new <Application,Landroid/content/Intent>@0,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
16 = new <Application,Ljava/util/ArrayList>@23,
conditional branch(ne, to iindex=-1) 15,13,
conditional branch(eq, to iindex=-1) 21,13,
return 16,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 20,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
93 = getCaughtException ,
95 = invokevirtual < Application, Landroid/os/RemoteException, getMessage()Ljava/lang/String; > 93 @146 exception:94,
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	String v27 = [resolveCodeAbst] + 93 = getCaughtException .getMessage();
	int v28 = Log.w(""AccountManagerService"", v27);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public List getAccountRemovedReceivers(Account p1, AccountManagerService$UserAccounts p2){
	Intent v0 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v2 = v0.setFlags(16777216);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p2);
	List v4 = this.mPackageManager.queryBroadcastReceiversAsUser(v0, 0, v3);
	ArrayList v4 = new ArrayList();
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	return v4;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return -1;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 3,11,
conditional branch(eq, to iindex=-1) 4,11,
conditional branch(gt, to iindex=-1) 47,48,
goto (from iindex= 32 to iindex = 15),
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
63 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,61,6,60 @95 exception:62,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(eq, to iindex=-1) 63,11,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,60 @105 exception:76,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, renameAccountInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;Ljava/lang/String;)Landroid/accounts/Account; > 1,77,3,4 @109 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getSigninRequiredNotificationId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Lcom/android/server/accounts/AccountManagerService$NotificationId; > 1,2,3 @0 exception:5,
monitorenter 5,
10 = checkcast <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>9 <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>,
conditional branch(ne, to iindex=-1) 10,11,
12 = new <Application,Ljava/lang/StringBuilder>@17,
24 = new <Application,Lcom/android/server/accounts/AccountManagerService$NotificationId>@40,
30 = phi  10,24,
monitorexit 5,
return 30,
7 = new <Application,Landroid/os/UserHandle>@4,
9 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 2 @6 exception:8,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, cancelNotification(Lcom/android/server/accounts/AccountManagerService$NotificationId;Landroid/os/UserHandle;)V > 1,6,7 @13 exception:11,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
return,
13 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @16 exception:12,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
monitorenter 13,
15 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetcredentialsPermissionNotificationIds(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @21 exception:14,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, credentialsPermissionNotificationIds, <Application,Ljava/util/HashMap> > 1,
return 2,
conditional branch(eq, to iindex=-1) 21,22,
monitorexit 13,
45 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 45,
46 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 46,
48 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountRemovedReceivers(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/List; > 1,3,2 @87 exception:47,
4 = new <Application,Landroid/content/Intent>@0,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
16 = new <Application,Ljava/util/ArrayList>@23,
conditional branch(ne, to iindex=-1) 15,13,
conditional branch(eq, to iindex=-1) 21,13,
return 16,
49 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 49 @93 exception:50,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
51 = new <Application,Landroid/accounts/Account>@96,
52 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
54 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
56 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findCeAccountId(Landroid/accounts/Account;)J > 54,51 @105 exception:55,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@88 ,
10 = new <Application,[Ljava/lang/String>@139 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 23,
58 = binaryop(lt) 56 , 57,
conditional branch(lt, to iindex=-1) 58,22,
184 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 184 @126 exception:185,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
return,
monitorexit 46,
monitorexit 45,
return 22,
80 = new <Application,Landroid/os/Bundle>@113,
83 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 79,
86 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 79,
goto (from iindex= 64 to iindex = 9),
return,","depth : 0
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""renameAccount: "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("" -> "");
	StringBuilder v7 = v2.append(p3);
	StringBuilder v8 = v2.append("", caller's uid "");
	StringBuilder v9 = v2.append(v1);
	StringBuilder v10 = v2.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v2.append(v11);
	String v13 = v2.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = p3.length();
	int v16 = UserHandle.getCallingUserId();
	boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
	long v18 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
	Account v20 = p0.renameAccountInternal(v19, p2, p3);
	Bundle v20 = new Bundle();
	v20.putString(""authAccount"", Account.name);
	v20.putString(""accountType"", Account.type);
	String v24 = v20.getAccessId();
	v20.putString(""accountAccessId"", v24);
	p1.onResult(v20);
	IAccountManager$Stub.restoreCallingIdentity(v18);
	return;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Account renameAccountInternal(AccountManagerService$UserAccounts p1, Account p2, String p3){
	AccountManagerService$NotificationId v1 = p0.getSigninRequiredNotificationId(p1, p2);
	UserHandle v1 = new UserHandle(v2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
	p0.cancelNotification(v1, v1);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	HashMap v6 = AccountManagerService$UserAccounts.-$$Nest$fgetcredentialsPermissionNotificationIds(p1);
	Set v7 = v6.keySet();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	List v10 = p0.getAccountRemovedReceivers(p2, p1);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	Account v11 = new Account(p3,Account.type);
	long v13 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(v11);
	int v14 = Log.e(""AccountManagerService"", ""renameAccount failed - account with new name already exists"");
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	return 0;
}
-----
depth : 2
public AccountManagerService$NotificationId getSigninRequiredNotificationId(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	HashMap v2 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v3 = v2.get(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""AccountManagerService:37:"");
	int v6 = p2.hashCode();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	AccountManagerService$NotificationId v8 = new AccountManagerService$NotificationId(v8,37);
	HashMap v10 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
	Object v11 = v10.put(p2, v8);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void cancelNotification(AccountManagerService$NotificationId p1, UserHandle p2){
	String v1 = this.mContext.getPackageName();
	p0.cancelNotification(p1, v1, p2);
	return;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public HashMap -$$Nest$fgetcredentialsPermissionNotificationIds(AccountManagerService$UserAccounts p1){
	return this.credentialsPermissionNotificationIds;
}
-----
depth : 2
public List getAccountRemovedReceivers(Account p1, AccountManagerService$UserAccounts p2){
	Intent v0 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v2 = v0.setFlags(16777216);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p2);
	List v4 = this.mPackageManager.queryBroadcastReceiversAsUser(v0, 0, v3);
	ArrayList v4 = new ArrayList();
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	return v4;
}
-----
depth : 2
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 2
public long findCeAccountId(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""ceDb.accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	long v4 = v2.getLong(0);
	v2.close();
	return v4;
}
-----
depth : 2
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","0","10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
goto (from iindex= 18 to iindex = 81),
conditional branch(eq, to iindex=-1) 2,11,
58 = new <Application,Landroid/os/Bundle>@118,
63 = getCaughtException ,
64 = new <Application,Ljava/lang/StringBuilder>@135,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	Bundle v4 = new Bundle();
	v4.putBoolean(""booleanResult"", 0);
	p1.onResult(v4);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""Failed to report error back to the client."");
	StringBuilder v10 = v7.append(caughtException);
	String v11 = v7.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","1","10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","1","10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","2","10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","2","10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V","2","10 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,7,8 @15 exception:9,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 10,11,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,4 @21 exception:15,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
18 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,5 @25 exception:17,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 16,11,
conditional branch(ne, to iindex=-1) 18,11,
20 = new <Application,Ljava/lang/StringBuilder>@36,
45 = new <Application,Lcom/android/server/accounts/AccountManagerService$5>@80,
46 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
47 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 45 @104 exception:49,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
	AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""Copying account "");
	String v7 = p2.toSafeString();
	StringBuilder v8 = v4.append(v7);
	StringBuilder v9 = v4.append("" from user "");
	StringBuilder v10 = v4.append(p3);
	StringBuilder v11 = v4.append("" to user "");
	StringBuilder v12 = v4.append(p4);
	String v13 = v4.toString();
	int v14 = Slog.d(""AccountManagerService"", v13);
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$5 v15 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
	v15.bind();
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","0","15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","1","15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
return 23,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
35 = new <Application,Ljava/util/ArrayList>@49,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
conditional branch(eq, to iindex=-1) 38,9,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
conditional branch(eq, to iindex=-1) 56,9,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
monitorexit 8,
monitorexit 7,
return 107,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = [resolveCodeAbst] + 45 = phi  42,29,29,20.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = [resolveCodeAbst] + 46 = phi  44,35,35,22.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","1","15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
return 9,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
35 = new <Application,Ljava/util/ArrayList>@49,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
conditional branch(eq, to iindex=-1) 38,9,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
conditional branch(eq, to iindex=-1) 56,9,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
monitorexit 8,
monitorexit 7,
return 107,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	Binder.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = [resolveCodeAbst] + 45 = phi  42,29,29,20.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = [resolveCodeAbst] + 46 = phi  44,35,35,22.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","2","15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 9,6,
goto (from iindex= 8 to iindex = 3),
14 = phi  6,13,
return 14,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
11 = getCaughtException ,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
17 = getCaughtException ,
throw 17,
19 = getCaughtException ,
20 = new <Application,Ljava/lang/StringBuilder>@165,
return 36,
35 = new <Application,Ljava/util/ArrayList>@49,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 8,11,
12 = new <Application,Landroid/content/Intent>@16,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 24,10,
conditional branch(le, to iindex=-1) 26,10,
goto (from iindex= 25 to iindex = 2),
30 = phi  9,10,
return 30,
conditional branch(eq, to iindex=-1) 38,9,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
10 = binaryop(lt) 8 , 9,
conditional branch(ge, to iindex=-1) 10,11,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
conditional branch(ne, to iindex=-1) 16,11,
return 11,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
conditional branch(eq, to iindex=-1) 56,9,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
3 = new <Application,Ljava/lang/StringBuilder>@0,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
return,
monitorexit 8,
monitorexit 7,
return 107,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = [resolveCodeAbst] + 45 = phi  42,29,29,20.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = [resolveCodeAbst] + 46 = phi  44,35,35,22.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
depth : 2
public boolean isSpecialPackageKey(String p1){
	boolean v1 = android:accounts:key_legacy_visible.equals(p1);
	boolean v2 = android:accounts:key_legacy_not_visible.equals(p1);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Object v1 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v2 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Package not found "");
	String v6 = [resolveCodeAbst] + 19 = getCaughtException .getMessage();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	int v9 = Log.d(""AccountManagerService"", v8);
	Integer v10 = Integer.valueOf(3);
	return v10;
}
-----
depth : 2
public boolean shouldNotifyPackageOnAccountRemoval(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Integer v1 = p0.resolveAccountVisibility(p1, p2, p3);
	int v2 = v1.intValue();
	Intent v2 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v4 = v2.setFlags(16777216);
	Intent v5 = v2.setPackage(p2);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	List v7 = this.mPackageManager.queryBroadcastReceiversAsUser(v2, 0, v6);
	int v8 = v7.size();
	return phiInstruction;
}
-----
depth : 2
public boolean updateAccountVisibilityLocked(Account p1, String p2, int p3, AccountManagerService$UserAccounts p4){
	long v1 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	StrictMode$ThreadPolicy v2 = StrictMode.allowThreadDiskWrites();
	boolean v3 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v1, p2, p3);
	StrictMode.setThreadPolicy(v2);
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","2","15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,12 @27 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 15 to iindex = 29),
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 9,6,
goto (from iindex= 10 to iindex = 2),
14 = phi  6,13,
return 14,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
11 = getCaughtException ,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
17 = getCaughtException ,
throw 17,
19 = getCaughtException ,
20 = new <Application,Ljava/lang/StringBuilder>@165,
return 36,
35 = new <Application,Ljava/util/ArrayList>@49,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 8,11,
12 = new <Application,Landroid/content/Intent>@16,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 24,10,
conditional branch(le, to iindex=-1) 26,10,
goto (from iindex= 25 to iindex = 2),
30 = phi  9,10,
return 30,
conditional branch(eq, to iindex=-1) 38,9,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
10 = binaryop(lt) 8 , 9,
conditional branch(ge, to iindex=-1) 10,11,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
conditional branch(ne, to iindex=-1) 16,11,
return 11,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
conditional branch(eq, to iindex=-1) 56,9,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
3 = new <Application,Ljava/lang/StringBuilder>@0,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
return,
monitorexit 8,
monitorexit 7,
return 107,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = [resolveCodeAbst] + 45 = phi  42,29,29,20.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = [resolveCodeAbst] + 46 = phi  44,35,35,22.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
depth : 2
public boolean isSpecialPackageKey(String p1){
	boolean v1 = android:accounts:key_legacy_visible.equals(p1);
	boolean v2 = android:accounts:key_legacy_not_visible.equals(p1);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Object v1 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v2 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Package not found "");
	String v6 = [resolveCodeAbst] + 19 = getCaughtException .getMessage();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	int v9 = Log.d(""AccountManagerService"", v8);
	Integer v10 = Integer.valueOf(3);
	return v10;
}
-----
depth : 2
public boolean shouldNotifyPackageOnAccountRemoval(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Integer v1 = p0.resolveAccountVisibility(p1, p2, p3);
	int v2 = v1.intValue();
	Intent v2 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v4 = v2.setFlags(16777216);
	Intent v5 = v2.setPackage(p2);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	List v7 = this.mPackageManager.queryBroadcastReceiversAsUser(v2, 0, v6);
	int v8 = v7.size();
	return phiInstruction;
}
-----
depth : 2
public boolean updateAccountVisibilityLocked(Account p1, String p2, int p3, AccountManagerService$UserAccounts p4){
	long v1 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	StrictMode$ThreadPolicy v2 = StrictMode.allowThreadDiskWrites();
	boolean v3 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v1, p2, p3);
	StrictMode.setThreadPolicy(v2);
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z","2","15 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,15,12,14 @21 exception:16,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 17,18,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,14 @66 exception:37,
40 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;IZLcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,25,38 @75 exception:39,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 6,
monitorenter 7,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 6,
monitorenter 8,
conditional branch(eq, to iindex=-1) 5,9,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSpecialPackageKey(Ljava/lang/String;)Z > 1,3 @9 exception:23,
conditional branch(ne, to iindex=-1) 5,6,
conditional branch(eq, to iindex=-1) 9,6,
goto (from iindex= 8 to iindex = 3),
14 = phi  6,13,
return 14,
conditional branch(eq, to iindex=-1) 24,9,
26 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @24 exception:25,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
28 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, packageExistsForUser(Ljava/lang/String;I)Z > 1,3,26 @28 exception:27,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
11 = getCaughtException ,
throw 11,
return 13,
conditional branch(ne, to iindex=-1) 28,9,
29 = new <Application,Ljava/util/HashMap>@37,
32 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,6 @42 exception:31,
10 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
17 = getCaughtException ,
throw 17,
19 = getCaughtException ,
20 = new <Application,Ljava/lang/StringBuilder>@165,
return 36,
35 = new <Application,Ljava/util/ArrayList>@49,
38 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, shouldNotifyPackageOnAccountRemoval(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,6 @54 exception:37,
conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 8,11,
12 = new <Application,Landroid/content/Intent>@16,
20 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 24,10,
conditional branch(le, to iindex=-1) 26,10,
goto (from iindex= 25 to iindex = 2),
30 = phi  9,10,
return 30,
conditional branch(eq, to iindex=-1) 38,9,
goto (from iindex= 33 to iindex = 28),
45 = phi  42,29,29,20,
46 = phi  44,35,35,22,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, updateAccountVisibilityLocked(Landroid/accounts/Account;Ljava/lang/String;ILcom/android/server/accounts/AccountManagerService$UserAccounts;)Z > 1,2,3,4,6 @91 exception:49,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
10 = binaryop(lt) 8 , 9,
conditional branch(ge, to iindex=-1) 10,11,
14 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 5,
conditional branch(ne, to iindex=-1) 16,11,
return 11,
conditional branch(ne, to iindex=-1) 50,9,
conditional branch(eq, to iindex=-1) 5,9,
conditional branch(eq, to iindex=-1) 56,9,
conditional branch(eq, to iindex=-1) 85,9,
97 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 6 @184 exception:96,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendAccountsChangedBroadcast(I)V > 1,97 @188 exception:98,
3 = new <Application,Ljava/lang/StringBuilder>@0,
8 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, ACCOUNTS_CHANGED_INTENT, <Application,Landroid/content/Intent> >,
18 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
19 = new <Application,Landroid/os/UserHandle>@31,
return,
monitorexit 8,
monitorexit 7,
return 107,
return 40,","depth : 0
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v4);
	boolean v8 = p0.setAccountVisibility(p1, p2, p3, 1, v7);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return v8;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public boolean setAccountVisibility(Account p1, String p2, int p3, boolean p4, AccountManagerService$UserAccounts p5){
	boolean v1 = p0.isSpecialPackageKey(p2);
	int v2 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	boolean v3 = p0.packageExistsForUser(p2, v2);
	HashMap v3 = new HashMap();
	Integer v5 = p0.resolveAccountVisibility(p1, p2, p5);
	Object v6 = v3.put(p2, v5);
	ArrayList v6 = new ArrayList();
	boolean v8 = p0.shouldNotifyPackageOnAccountRemoval(p1, p2, p5);
	boolean v9 = v6.add(p2);
	boolean v10 = p0.updateAccountVisibilityLocked(p1, p2, p3, p5);
	Set v11 = [resolveCodeAbst] + 45 = phi  42,29,29,20.entrySet();
	Iterator v12 = v11.iterator();
	boolean v13 = v12.hasNext();
	Iterator v14 = [resolveCodeAbst] + 46 = phi  44,35,35,22.iterator();
	boolean v15 = v14.hasNext();
	int v16 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
	p0.sendAccountsChangedBroadcast(v16);
	return 1;
}
-----
depth : 2
public boolean isSpecialPackageKey(String p1){
	boolean v1 = android:accounts:key_legacy_visible.equals(p1);
	boolean v2 = android:accounts:key_legacy_not_visible.equals(p1);
	return phiInstruction;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public boolean packageExistsForUser(String p1, int p2){
	long v1 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Object v1 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	long v2 = IAccountManager$Stub.clearCallingIdentity();
	IAccountManager$Stub.restoreCallingIdentity(v2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Package not found "");
	String v6 = [resolveCodeAbst] + 19 = getCaughtException .getMessage();
	StringBuilder v7 = v3.append(v6);
	String v8 = v3.toString();
	int v9 = Log.d(""AccountManagerService"", v8);
	Integer v10 = Integer.valueOf(3);
	return v10;
}
-----
depth : 2
public boolean shouldNotifyPackageOnAccountRemoval(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Integer v1 = p0.resolveAccountVisibility(p1, p2, p3);
	int v2 = v1.intValue();
	Intent v2 = new Intent(""android.accounts.action.ACCOUNT_REMOVED"");
	Intent v4 = v2.setFlags(16777216);
	Intent v5 = v2.setPackage(p2);
	int v6 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	List v7 = this.mPackageManager.queryBroadcastReceiversAsUser(v2, 0, v6);
	int v8 = v7.size();
	return phiInstruction;
}
-----
depth : 2
public boolean updateAccountVisibilityLocked(Account p1, String p2, int p3, AccountManagerService$UserAccounts p4){
	long v1 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
	StrictMode$ThreadPolicy v2 = StrictMode.allowThreadDiskWrites();
	boolean v3 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v1, p2, p3);
	StrictMode.setThreadPolicy(v2);
	return 0;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public void sendAccountsChangedBroadcast(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""the accounts changed, sending broadcast of "");
	String v3 = this.ACCOUNTS_CHANGED_INTENT.getAction();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Log.i(""AccountManagerService"", v5);
	UserHandle v6 = new UserHandle(p1);
	this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v6);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","0","conditional branch(eq, to iindex=-1) 6,7,
8 = new <Application,Ljava/lang/StringBuilder>@9,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getPreviousName: "");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("", caller's uid "");
	int v6 = Binder.getCallingUid();
	StringBuilder v7 = v1.append(v6);
	StringBuilder v8 = v1.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v1.append(v9);
	String v11 = v1.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v16 = p0.getUserAccounts(v14);
	String v17 = p0.readPreviousNameInternal(v16, p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v17;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","1","conditional branch(eq, to iindex=-1) 6,7,
8 = new <Application,Ljava/lang/StringBuilder>@9,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String; > 15,3 @24 exception:16,
18 = new <Application,Ljava/util/concurrent/atomic/AtomicReference>@28,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @33 exception:20,
monitorexit 6,
monitorexit 5,
return 17,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getPreviousName: "");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("", caller's uid "");
	int v6 = Binder.getCallingUid();
	StringBuilder v7 = v1.append(v6);
	StringBuilder v8 = v1.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v1.append(v9);
	String v11 = v1.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v16 = p0.getUserAccounts(v14);
	String v17 = p0.readPreviousNameInternal(v16, p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v17;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p2);
	AtomicReference v3 = new AtomicReference(v3);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v6 = v5.put(p2, v3);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","1","conditional branch(eq, to iindex=-1) 6,7,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String; > 15,3 @24 exception:16,
18 = new <Application,Ljava/util/concurrent/atomic/AtomicReference>@28,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @33 exception:20,
monitorexit 6,
monitorexit 5,
return 17,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	String v6 = p0.readPreviousNameInternal(v5, p1);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return v6;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p2);
	AtomicReference v3 = new AtomicReference(v3);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v6 = v5.put(p2, v3);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 6,7,
8 = new <Application,Ljava/lang/StringBuilder>@9,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String; > 15,3 @24 exception:16,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@98 ,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 22,
18 = new <Application,Ljava/util/concurrent/atomic/AtomicReference>@28,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @33 exception:20,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
monitorexit 6,
monitorexit 5,
return 17,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getPreviousName: "");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("", caller's uid "");
	int v6 = Binder.getCallingUid();
	StringBuilder v7 = v1.append(v6);
	StringBuilder v8 = v1.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v1.append(v9);
	String v11 = v1.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v16 = p0.getUserAccounts(v14);
	String v17 = p0.readPreviousNameInternal(v16, p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v17;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p2);
	AtomicReference v3 = new AtomicReference(v3);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v6 = v5.put(p2, v3);
	return v3;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
depth : 2
public String findDeAccountPreviousName(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	String v4 = v2.getString(0);
	v2.close();
	return v4;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 6,7,
8 = new <Application,Ljava/lang/StringBuilder>@9,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String; > 15,3 @24 exception:16,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@98 ,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 12,
18 = new <Application,Ljava/util/concurrent/atomic/AtomicReference>@28,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @33 exception:20,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
monitorexit 6,
monitorexit 5,
return 17,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""getPreviousName: "");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append("", caller's uid "");
	int v6 = Binder.getCallingUid();
	StringBuilder v7 = v1.append(v6);
	StringBuilder v8 = v1.append("", pid "");
	int v9 = Binder.getCallingPid();
	StringBuilder v10 = v1.append(v9);
	String v11 = v1.toString();
	int v12 = Log.v(""AccountManagerService"", v11);
	Object v13 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v14 = UserHandle.getCallingUserId();
	long v15 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v16 = p0.getUserAccounts(v14);
	String v17 = p0.readPreviousNameInternal(v16, p1);
	IAccountManager$Stub.restoreCallingIdentity(v15);
	return v17;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p2);
	AtomicReference v3 = new AtomicReference(v3);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v6 = v5.put(p2, v3);
	return v3;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
depth : 2
public String findDeAccountPreviousName(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	v2.close();
	return 0;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;","2","conditional branch(eq, to iindex=-1) 6,7,
44 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,40 @66 exception:43,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
46 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, readPreviousNameInternal(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Landroid/accounts/Account;)Ljava/lang/String; > 1,44,2 @70 exception:45,
conditional branch(ne, to iindex=-1) 3,4,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 2,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 2,
monitorenter 6,
8 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @10 exception:7,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
11 = checkcast <Application,Ljava/util/concurrent/atomic/AtomicReference>10 <Application,Ljava/util/concurrent/atomic/AtomicReference>,
conditional branch(ne, to iindex=-1) 11,4,
15 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findDeAccountPreviousName(Landroid/accounts/Account;)Ljava/lang/String; > 15,3 @24 exception:16,
3 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
7 = new <Application,[Ljava/lang/String>@98 ,
10 = new <Application,[Ljava/lang/String>@149 ,
11 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 2,
arraystore 10[12] = 11,
13 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
arraystore 10[8] = 13,
conditional branch(eq, to iindex=-1) 19,12,
return 22,
18 = new <Application,Ljava/util/concurrent/atomic/AtomicReference>@28,
21 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetpreviousNameCache(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/HashMap; > 2 @33 exception:20,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, previousNameCache, <Application,Ljava/util/HashMap> > 1,
return 2,
monitorexit 6,
monitorexit 5,
return 17,
return 46,","depth : 0
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	Object v2 = Objects.requireNonNull(p1, ""account cannot be null"");
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	String v6 = p0.readPreviousNameInternal(v5, p1);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return v6;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public String readPreviousNameInternal(AccountManagerService$UserAccounts p1, Account p2){
	HashMap v1 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v2 = v1.get(p2);
	String v3 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p2);
	AtomicReference v3 = new AtomicReference(v3);
	HashMap v5 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(p1);
	Object v6 = v5.put(p2, v3);
	return v3;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
depth : 2
public String findDeAccountPreviousName(Account p1){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabase();
	String v1 = new String(1);
	String v1 = new String(2);
	Cursor v2 = v1.query(""accounts"", v1, ""name=? AND type=?"", v1, 0, 0, 0);
	boolean v3 = v2.moveToNext();
	String v4 = v2.getString(0);
	v2.close();
	return v4;
}
-----
depth : 2
public HashMap -$$Nest$fgetpreviousNameCache(AccountManagerService$UserAccounts p1){
	return this.previousNameCache;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("", response "");
	StringBuilder v6 = v1.append(p1);
	StringBuilder v7 = v1.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v1.append(v8);
	StringBuilder v10 = v1.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v1.append(v11);
	String v13 = v1.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	boolean v15 = TextUtils.isEmpty(p3);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
	AccountManagerService$15 v18 = new AccountManagerService$15(p0,v18,p1,Account.type,0,0,Account.name,0,p2,p3);
	v18.bind();
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("", response "");
	StringBuilder v6 = v1.append(p1);
	StringBuilder v7 = v1.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v1.append(v8);
	StringBuilder v10 = v1.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v1.append(v11);
	String v13 = v1.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	boolean v15 = TextUtils.isEmpty(p3);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
	AccountManagerService$15 v18 = new AccountManagerService$15(p0,v18,p1,Account.type,0,0,Account.name,0,p2,p3);
	v18.bind();
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = TextUtils.isEmpty(p3);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	AccountManagerService$15 v5 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3);
	v5.bind();
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("", response "");
	StringBuilder v6 = v1.append(p1);
	StringBuilder v7 = v1.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v1.append(v8);
	StringBuilder v10 = v1.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v1.append(v11);
	String v13 = v1.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	boolean v15 = TextUtils.isEmpty(p3);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
	AccountManagerService$15 v18 = new AccountManagerService$15(p0,v18,p1,Account.type,0,0,Account.name,0,p2,p3);
	v18.bind();
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 8,9,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = TextUtils.isEmpty(p3);
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	AccountManagerService$15 v5 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3);
	v5.bind();
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@13,
conditional branch(eq, to iindex=-1) 2,9,
conditional branch(eq, to iindex=-1) 3,9,
50 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 4 @69 exception:49,
conditional branch(ne, to iindex=-1) 50,9,
59 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,55 @84 exception:58,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
60 = new <Application,Lcom/android/server/accounts/AccountManagerService$15>@88,
61 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
62 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 60 @108 exception:64,
conditional branch(eq, to iindex=-1) 5,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""isCredentialsUpdateSuggested: "");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append("", response "");
	StringBuilder v6 = v1.append(p1);
	StringBuilder v7 = v1.append("", caller's uid "");
	int v8 = Binder.getCallingUid();
	StringBuilder v9 = v1.append(v8);
	StringBuilder v10 = v1.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v1.append(v11);
	String v13 = v1.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	boolean v15 = TextUtils.isEmpty(p3);
	int v16 = UserHandle.getCallingUserId();
	long v17 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
	AccountManagerService$15 v18 = new AccountManagerService$15(p0,v18,p1,Account.type,0,0,Account.name,0,p2,p3);
	v18.bind();
	IAccountManager$Stub.restoreCallingIdentity(v17);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""bind attempt failed for "");
	String v5 = p0.toDebugString();
	StringBuilder v6 = v2.append(v5);
	String v7 = v2.toString();
	int v8 = Log.d(""AccountManagerService"", v7);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@25,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
monitorexit 65,
monitorexit 51,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""invalidateAuthToken: accountType "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v1);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v19 = p0.invalidateAuthTokenLocked(v17, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v22 = v19.iterator();
	boolean v23 = v22.hasNext();
	TokenCache v24 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v17);
	v24.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@25,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
conditional branch(eq, to iindex=-1) 11,12,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
return,
monitorexit 65,
monitorexit 51,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""invalidateAuthToken: accountType "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v1);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v19 = p0.invalidateAuthTokenLocked(v17, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v22 = v19.iterator();
	boolean v23 = v22.hasNext();
	TokenCache v24 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v17);
	v24.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 1
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 1
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 1
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 15,16,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
conditional branch(eq, to iindex=-1) 11,12,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, setTransactionSuccessful()V > 4 @6 exception:5,
return,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, endTransaction()V > 4 @6 exception:5,
return,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountTokenCaches, <Application,Lcom/android/server/accounts/TokenCache> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
return,
monitorexit 65,
monitorexit 51,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	int v5 = UserHandle.getCallingUserId();
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v5);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v9 = p0.invalidateAuthTokenLocked(v7, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v12 = v9.iterator();
	boolean v13 = v12.hasNext();
	TokenCache v14 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v7);
	v14.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 1
public void setTransactionSuccessful(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.setTransactionSuccessful();
	return;
}
-----
depth : 1
public void endTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.endTransaction();
	return;
}
-----
depth : 1
public TokenCache -$$Nest$fgetaccountTokenCaches(AccountManagerService$UserAccounts p1){
	return this.accountTokenCaches;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@25,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 3,
arraystore 8[10] = 2,
return 13,
conditional branch(eq, to iindex=-1) 11,12,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, mTokenEvictors, <Application,Ljava/util/HashMap> > 1,
5 = new <Application,Landroid/util/Pair>@2,
9 = checkcast <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>8 <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>,
conditional branch(eq, to iindex=-1) 9,10,
return,
return,
monitorexit 65,
monitorexit 51,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""invalidateAuthToken: accountType "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v1);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v19 = p0.invalidateAuthTokenLocked(v17, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v22 = v19.iterator();
	boolean v23 = v22.hasNext();
	TokenCache v24 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v17);
	v24.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 2
public Cursor findAuthtokenForAllAccounts(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	Cursor v2 = v1.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v1);
	return v2;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
depth : 2
public void evict(String p1, String p2){
	Pair v0 = new Pair(p1,p2);
	Object v2 = this.mTokenEvictors.get(v0);
	v2.evict();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@25,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 3,
arraystore 8[10] = 2,
return 13,
conditional branch(eq, to iindex=-1) 11,12,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, mTokenEvictors, <Application,Ljava/util/HashMap> > 1,
5 = new <Application,Landroid/util/Pair>@2,
9 = checkcast <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>8 <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>,
conditional branch(eq, to iindex=-1) 9,10,
return,
return,
monitorexit 65,
monitorexit 51,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(""invalidateAuthToken: accountType "");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append("", caller's uid "");
	StringBuilder v9 = v4.append(v1);
	StringBuilder v10 = v4.append("", pid "");
	int v11 = Binder.getCallingPid();
	StringBuilder v12 = v4.append(v11);
	String v13 = v4.toString();
	int v14 = Log.v(""AccountManagerService"", v13);
	int v15 = UserHandle.getCallingUserId();
	long v16 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v19 = p0.invalidateAuthTokenLocked(v17, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v22 = v19.iterator();
	boolean v23 = v22.hasNext();
	TokenCache v24 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v17);
	v24.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v16);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 2
public Cursor findAuthtokenForAllAccounts(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	Cursor v2 = v1.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v1);
	return v2;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
depth : 2
public void evict(String p1, String p2){
	Pair v0 = new Pair(p1,p2);
	Object v2 = this.mTokenEvictors.get(v0);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 15,16,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,46 @73 exception:49,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
51 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, dbLock, <Application,Ljava/lang/Object> > 50,
monitorenter 51,
52 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, beginTransaction()V > 52 @82 exception:53,
2 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
4 = invokevirtual < Application, Landroid/database/sqlite/SQLiteOpenHelper, getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; > 2 @2 exception:3,
invokevirtual < Application, Landroid/database/sqlite/SQLiteDatabase, beginTransaction()V > 4 @6 exception:5,
return,
55 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, invalidateAuthTokenLocked(Lcom/android/server/accounts/AccountManagerService$UserAccounts;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; > 1,50,2,3 @85 exception:54,
5 = new <Application,Ljava/util/ArrayList>@0,
7 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 2,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, findAuthtokenForAllAccounts(Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; > 7,3,4 @7 exception:8,
4 = getfield < Application, Lcom/android/server/accounts/AccountsDb, mDeDatabase, <Application,Lcom/android/server/accounts/AccountsDb$DeDatabaseHelper> > 1,
8 = new <Application,[Ljava/lang/String>@77 ,
arraystore 8[9] = 3,
arraystore 8[10] = 2,
return 13,
conditional branch(eq, to iindex=-1) 11,12,
return 5,
56 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, setTransactionSuccessful()V > 56 @91 exception:57,
63 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, accountsDb, <Application,Lcom/android/server/accounts/AccountsDb> > 50,
invokevirtual < Application, Lcom/android/server/accounts/AccountsDb, endTransaction()V > 63 @96 exception:64,
65 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 50,
monitorenter 65,
conditional branch(eq, to iindex=-1) 69,16,
81 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetaccountTokenCaches(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Lcom/android/server/accounts/TokenCache; > 50 @131 exception:80,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache, remove(Ljava/lang/String;Ljava/lang/String;)V > 81,2,3 @135 exception:82,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache, mCachedTokens, <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache> > 1,
invokevirtual < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, evict(Ljava/lang/String;Ljava/lang/String;)V > 4,2,3 @2 exception:5,
4 = getfield < Application, Lcom/android/server/accounts/TokenCache$TokenLruCache, mTokenEvictors, <Application,Ljava/util/HashMap> > 1,
5 = new <Application,Landroid/util/Pair>@2,
9 = checkcast <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>8 <Application,Lcom/android/server/accounts/TokenCache$TokenLruCache$Evictor>,
conditional branch(eq, to iindex=-1) 9,10,
return,
return,
monitorexit 65,
monitorexit 51,
return,","depth : 0
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, ""accountType cannot be null"");
	Object v3 = Objects.requireNonNull(p2, ""authToken cannot be null"");
	boolean v4 = Log.isLoggable(""AccountManagerService"", 2);
	int v5 = UserHandle.getCallingUserId();
	long v6 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v5);
	AccountManagerService$UserAccounts.accountsDb.beginTransaction();
	List v9 = p0.invalidateAuthTokenLocked(v7, p1, p2);
	AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
	AccountManagerService$UserAccounts.accountsDb.endTransaction();
	Iterator v12 = v9.iterator();
	boolean v13 = v12.hasNext();
	TokenCache v14 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v7);
	v14.remove(p1, p2);
	IAccountManager$Stub.restoreCallingIdentity(v6);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void beginTransaction(){
	SQLiteDatabase v1 = this.mDeDatabase.getWritableDatabase();
	v1.beginTransaction();
	return;
}
-----
depth : 1
public List invalidateAuthTokenLocked(AccountManagerService$UserAccounts p1, String p2, String p3){
	ArrayList v0 = new ArrayList();
	Cursor v2 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p2, p3);
	boolean v3 = v2.moveToNext();
	v2.close();
	return v0;
}
-----
depth : 2
public Cursor findAuthtokenForAllAccounts(String p1, String p2){
	SQLiteDatabase v1 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
	String v1 = new String(2);
	Cursor v2 = v1.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v1);
	return v2;
}
-----
depth : 1
public void remove(String p1, String p2){
	this.mCachedTokens.evict(p1, p2);
	return;
}
-----
depth : 2
public void evict(String p1, String p2){
	Pair v0 = new Pair(p1,p2);
	Object v2 = this.mTokenEvictors.get(v0);
	v2.evict();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","0","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","1","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","1","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","2","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","2","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V","2","conditional branch(eq, to iindex=-1) 15,16,
17 = new <Application,Ljava/lang/StringBuilder>@27,
goto (from iindex= 37 to iindex = 3),
54 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,11,6 @88 exception:53,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 54,16,
conditional branch(eq, to iindex=-1) 2,16,
conditional branch(eq, to iindex=-1) 3,16,
76 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,6 @102 exception:75,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
77 = new <Application,Lcom/android/server/accounts/AccountManagerService$12>@106,
78 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
79 = getfield < Application, Landroid/accounts/Account, name, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 77 @134 exception:81,
conditional branch(eq, to iindex=-1) 5,6,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""confirmCredentials: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", expectActivityLaunch "");
	StringBuilder v10 = v3.append(p4);
	StringBuilder v11 = v3.append("", caller's uid "");
	StringBuilder v12 = v3.append(v2);
	StringBuilder v13 = v3.append("", pid "");
	int v14 = Binder.getCallingPid();
	StringBuilder v15 = v3.append(v14);
	String v16 = v3.toString();
	int v17 = Log.v(""AccountManagerService"", v16);
	boolean v18 = p0.isCrossUser(v2, p5);
	long v19 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v20 = p0.getUserAccounts(p5);
	AccountManagerService$12 v20 = new AccountManagerService$12(p0,v20,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
	v20.bind();
	IAccountManager$Stub.restoreCallingIdentity(v19);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	boolean v2 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""bind attempt failed for "");
	String v5 = p0.toDebugString();
	StringBuilder v6 = v2.append(v5);
	String v7 = v2.toString();
	int v8 = Log.d(""AccountManagerService"", v7);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","0","conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
conditional branch(eq, to iindex=-1) 3,17,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
conditional branch(ne, to iindex=-1) 87,17,
92 = invokestatic < Application, Lcom/android/server/accounts/CryptoHelper, getInstance()Lcom/android/server/accounts/CryptoHelper; > @151 exception:91,
94 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, decryptBundle(Landroid/os/Bundle;)Landroid/os/Bundle; > 92,3 @155 exception:93,
98 = getCaughtException ,
conditional branch(eq, to iindex=-1) 101,17,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,90,7 @274 exception:108,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	int v25 = Binder.getCallingPid();
	CryptoHelper v26 = CryptoHelper.getInstance();
	Bundle v27 = v26.decryptBundle(p2);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 3);
	int v29 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p0.sendErrorResponse(p1, 8, ""failed to decrypt session bundle"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","1","conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
conditional branch(eq, to iindex=-1) 3,17,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 87,17,
92 = invokestatic < Application, Lcom/android/server/accounts/CryptoHelper, getInstance()Lcom/android/server/accounts/CryptoHelper; > @151 exception:91,
1 = load_metadata: <Application,Lcom/android/server/accounts/CryptoHelper>, <Primordial,Ljava/lang/Class>,
monitorenter 1,
2 = getstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> >,
conditional branch(ne, to iindex=-1) 2,3,
4 = new <Application,Lcom/android/server/accounts/CryptoHelper>@7,
putstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> > = 4,
7 = getstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> >,
monitorexit 1,
return 7,
94 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, decryptBundle(Landroid/os/Bundle;)Landroid/os/Bundle; > 92,3 @155 exception:93,
16 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, verifyMac([B[B[B)Z > 1,11,8,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
18 = new <Application,Ljavax/crypto/spec/IvParameterSpec>@39,
24 = getfield < Application, Lcom/android/server/accounts/CryptoHelper, mEncryptionKey, <Application,Ljavax/crypto/SecretKey> > 1,
29 = invokestatic < Application, Landroid/os/Parcel, obtain()Landroid/os/Parcel; > @60 exception:28,
30 = arraylength 27,
invokevirtual < Application, Landroid/os/Parcel, unmarshall([BII)V > 29,27,17,30 @66 exception:31,
invokevirtual < Application, Landroid/os/Parcel, setDataPosition(I)V > 29,17 @69 exception:32,
33 = new <Application,Landroid/os/Bundle>@72,
invokevirtual < Application, Landroid/os/Parcel, recycle()V > 29 @80 exception:36,
return 33,
98 = getCaughtException ,
conditional branch(eq, to iindex=-1) 101,17,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,90,7 @274 exception:108,
6 = getCaughtException ,
conditional branch(eq, to iindex=-1) 10,11,
return,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	int v25 = Binder.getCallingPid();
	CryptoHelper v26 = CryptoHelper.getInstance();
	Bundle v27 = v26.decryptBundle(p2);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 3);
	int v29 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p0.sendErrorResponse(p1, 8, ""failed to decrypt session bundle"");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public CryptoHelper getInstance(){
	CryptoHelper v0 = new CryptoHelper();
	this.sInstance = v0;
	return this.sInstance;
}
-----
depth : 1
public Bundle decryptBundle(Bundle p1){
	Object v1 = Objects.requireNonNull(p1, ""Cannot decrypt null bundle."");
	byte[] v2 = p1.getByteArray(""iv"");
	byte[] v3 = p1.getByteArray(""cipher"");
	byte[] v4 = p1.getByteArray(""mac"");
	boolean v5 = p0.verifyMac(v3, v2, v4);
	IvParameterSpec v5 = new IvParameterSpec(v2);
	Cipher v7 = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
	v7.init(2, this.mEncryptionKey, v5);
	byte[] v9 = v7.doFinal(v3);
	Parcel v10 = Parcel.obtain();
	v10.unmarshall(v9, 0, v9.length);
	v10.setDataPosition(0);
	Bundle v12 = new Bundle();
	v12.readFromParcel(v10);
	v10.recycle();
	return v12;
}
-----
depth : 1
public void sendErrorResponse(IAccountManagerResponse p1, int p2, String p3){
	p1.onError(p2, p3);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	int v3 = Log.v(""AccountManagerService"", ""failure while notifying response"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","1","conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
conditional branch(eq, to iindex=-1) 3,17,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 87,17,
92 = invokestatic < Application, Lcom/android/server/accounts/CryptoHelper, getInstance()Lcom/android/server/accounts/CryptoHelper; > @151 exception:91,
1 = load_metadata: <Application,Lcom/android/server/accounts/CryptoHelper>, <Primordial,Ljava/lang/Class>,
monitorenter 1,
2 = getstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> >,
conditional branch(ne, to iindex=-1) 2,3,
4 = new <Application,Lcom/android/server/accounts/CryptoHelper>@7,
putstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> > = 4,
7 = getstatic < Application, Lcom/android/server/accounts/CryptoHelper, sInstance, <Application,Lcom/android/server/accounts/CryptoHelper> >,
monitorexit 1,
return 7,
94 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, decryptBundle(Landroid/os/Bundle;)Landroid/os/Bundle; > 92,3 @155 exception:93,
16 = invokevirtual < Application, Lcom/android/server/accounts/CryptoHelper, verifyMac([B[B[B)Z > 1,11,8,14 @24 exception:15,
conditional branch(ne, to iindex=-1) 16,17,
18 = new <Application,Ljavax/crypto/spec/IvParameterSpec>@39,
24 = getfield < Application, Lcom/android/server/accounts/CryptoHelper, mEncryptionKey, <Application,Ljavax/crypto/SecretKey> > 1,
29 = invokestatic < Application, Landroid/os/Parcel, obtain()Landroid/os/Parcel; > @60 exception:28,
30 = arraylength 27,
invokevirtual < Application, Landroid/os/Parcel, unmarshall([BII)V > 29,27,17,30 @66 exception:31,
invokevirtual < Application, Landroid/os/Parcel, setDataPosition(I)V > 29,17 @69 exception:32,
33 = new <Application,Landroid/os/Bundle>@72,
invokevirtual < Application, Landroid/os/Parcel, recycle()V > 29 @80 exception:36,
return 33,
98 = getCaughtException ,
conditional branch(eq, to iindex=-1) 101,17,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,90,7 @274 exception:108,
6 = getCaughtException ,
conditional branch(eq, to iindex=-1) 10,11,
return,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	int v25 = Binder.getCallingPid();
	CryptoHelper v26 = CryptoHelper.getInstance();
	Bundle v27 = v26.decryptBundle(p2);
	boolean v28 = Log.isLoggable(""AccountManagerService"", 3);
	int v29 = Log.v(""AccountManagerService"", ""Failed to decrypt session bundle!"", caughtException);
	p0.sendErrorResponse(p1, 8, ""failed to decrypt session bundle"");
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public CryptoHelper getInstance(){
	CryptoHelper v0 = new CryptoHelper();
	this.sInstance = v0;
	return this.sInstance;
}
-----
depth : 1
public Bundle decryptBundle(Bundle p1){
	Object v1 = Objects.requireNonNull(p1, ""Cannot decrypt null bundle."");
	byte[] v2 = p1.getByteArray(""iv"");
	byte[] v3 = p1.getByteArray(""cipher"");
	byte[] v4 = p1.getByteArray(""mac"");
	boolean v5 = p0.verifyMac(v3, v2, v4);
	IvParameterSpec v5 = new IvParameterSpec(v2);
	Cipher v7 = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
	v7.init(2, this.mEncryptionKey, v5);
	byte[] v9 = v7.doFinal(v3);
	Parcel v10 = Parcel.obtain();
	v10.unmarshall(v9, 0, v9.length);
	v10.setDataPosition(0);
	Bundle v12 = new Bundle();
	v12.readFromParcel(v10);
	v10.recycle();
	return v12;
}
-----
depth : 1
public void sendErrorResponse(IAccountManagerResponse p1, int p2, String p3){
	p1.onError(p2, p3);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","2","conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
conditional branch(eq, to iindex=-1) 3,17,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 87,17,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,153,154 @138 exception:155,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,153,6 @141 exception:156,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	p0.sendErrorResponse(p1, 100, ""User is not allowed to add an account!"");
	p0.showCantAddAccount(100, p5);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","2","conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
conditional branch(eq, to iindex=-1) 3,17,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 87,17,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,153,154 @138 exception:155,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,153,6 @141 exception:156,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	p0.sendErrorResponse(p1, 100, ""User is not allowed to add an account!"");
	p0.showCantAddAccount(100, p5);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V","2","conditional branch(eq, to iindex=-1) 16,17,
18 = new <Application,Ljava/lang/StringBuilder>@29,
goto (from iindex= 43 to iindex = 3),
conditional branch(eq, to iindex=-1) 2,17,
goto (from iindex= 48 to iindex = 2),
61 = phi  8,17,
conditional branch(eq, to iindex=-1) 3,17,
conditional branch(eq, to iindex=-1) 65,17,
73 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,12,6 @122 exception:72,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 73,17,
87 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,6,12 @128 exception:86,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 87,17,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, sendErrorResponse(Landroid/accounts/IAccountManagerResponse;ILjava/lang/String;)V > 1,2,153,154 @138 exception:155,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,153,6 @141 exception:156,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""finishSession: response "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append("", expectActivityLaunch "");
	StringBuilder v8 = v3.append(p3);
	StringBuilder v9 = v3.append("", caller's uid "");
	StringBuilder v10 = v3.append(v2);
	StringBuilder v11 = v3.append("", caller's user id "");
	int v12 = UserHandle.getCallingUserId();
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	StringBuilder v17 = v3.append("", for user id "");
	StringBuilder v18 = v3.append(p5);
	String v19 = v3.toString();
	int v20 = Log.v(""AccountManagerService"", v19);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	int v22 = p2.size();
	boolean v23 = p0.isCrossUser(v2, p5);
	boolean v24 = p0.canUserModifyAccounts(p5, v2);
	p0.sendErrorResponse(p1, 100, ""User is not allowed to add an account!"");
	p0.showCantAddAccount(100, p5);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","0","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
conditional branch(ne, to iindex=-1) 97,18,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,99,8 @163 exception:102,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","1","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,99,8 @163 exception:102,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","1","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,99,8 @163 exception:102,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","2","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,99,8 @163 exception:102,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","2","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 11 to iindex = 2),
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,99,8 @163 exception:102,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V","2","conditional branch(eq, to iindex=-1) 17,18,
19 = new <Application,Ljava/lang/StringBuilder>@17,
conditional branch(eq, to iindex=-1) 2,18,
goto (from iindex= 47 to iindex = 2),
74 = phi  9,18,
conditional branch(eq, to iindex=-1) 3,18,
goto (from iindex= 53 to iindex = 2),
77 = phi  9,18,
81 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isCrossUser(II)Z > 1,13,8 @127 exception:80,
conditional branch(eq, to iindex=-1) 10,11,
18 = phi  17,11,
return 18,
conditional branch(ne, to iindex=-1) 81,18,
95 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,8,13 @133 exception:94,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 95,18,
97 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,8,3,13 @150 exception:96,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 97,18,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,99,8 @163 exception:102,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""addAccount: accountType "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", authTokenType "");
	StringBuilder v10 = v3.append(p3);
	StringBuilder v11 = v3.append("", requiredFeatures "");
	String v12 = Arrays.toString(p4);
	StringBuilder v13 = v3.append(v12);
	StringBuilder v14 = v3.append("", expectActivityLaunch "");
	StringBuilder v15 = v3.append(p5);
	StringBuilder v16 = v3.append("", caller's uid "");
	int v17 = Binder.getCallingUid();
	StringBuilder v18 = v3.append(v17);
	StringBuilder v19 = v3.append("", pid "");
	int v20 = Binder.getCallingPid();
	StringBuilder v21 = v3.append(v20);
	StringBuilder v22 = v3.append("", for user id "");
	StringBuilder v23 = v3.append(p7);
	String v24 = v3.toString();
	int v25 = Log.v(""AccountManagerService"", v24);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	boolean v28 = p0.isCrossUser(v2, p7);
	boolean v29 = p0.canUserModifyAccounts(p7, v2);
	boolean v30 = p0.canUserModifyAccountsForType(p7, p2, v2);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, p7);
	return;
}
-----
depth : 1
public boolean isCrossUser(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","0","14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
conditional branch(eq, to iindex=-1) 40,18,
conditional branch(eq, to iindex=-1) 43,18,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,37 @100 exception:49,
conditional branch(eq, to iindex=-1) 50,18,
return 50,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = android:accounts:key_legacy_visible.equals(p2);
	boolean v10 = android:accounts:key_legacy_not_visible.equals(p2);
	int v11 = p0.getAccountVisibilityFromCache(p1, p2, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v11;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","1","14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
return 23,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 40,18,
conditional branch(eq, to iindex=-1) 43,18,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,37 @100 exception:49,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,4 @3 exception:6,
10 = checkcast <Application,Ljava/lang/Integer>9 <Application,Ljava/lang/Integer>,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 10 to iindex = 2),
14 = phi  13,11,
monitorexit 5,
return 14,
conditional branch(eq, to iindex=-1) 50,18,
return 50,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = android:accounts:key_legacy_visible.equals(p2);
	boolean v10 = android:accounts:key_legacy_not_visible.equals(p2);
	int v11 = p0.getAccountVisibilityFromCache(p1, p2, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v11;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public int getAccountVisibilityFromCache(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = p0.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v2 = v1.get(p2);
	int v3 = v2.intValue();
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","1","14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 7,9,
21 = arraylength 7,
44 = phi  43,9,
conditional branch(ge, to iindex=-1) 44,21,
22 = arrayload 7[44],
24 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mPackageManager, <Application,Landroid/content/pm/PackageManager> > 1,
conditional branch(eq, to iindex=-1) 26,9,
27 = getfield < Application, Landroid/content/pm/PackageInfo, applicationInfo, <Application,Landroid/content/pm/ApplicationInfo> > 26,
28 = getfield < Application, Landroid/content/pm/ApplicationInfo, flags, <Primordial,I> > 27,
29 = binaryop(and) 28 , 23,
conditional branch(eq, to iindex=-1) 29,9,
return 23,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
conditional branch(eq, to iindex=-1) 40,18,
conditional branch(eq, to iindex=-1) 43,18,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,37 @100 exception:49,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,4 @3 exception:6,
10 = checkcast <Application,Ljava/lang/Integer>9 <Application,Ljava/lang/Integer>,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 10 to iindex = 2),
14 = phi  13,11,
monitorexit 5,
return 14,
conditional branch(eq, to iindex=-1) 50,18,
return 51,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = android:accounts:key_legacy_visible.equals(p2);
	boolean v10 = android:accounts:key_legacy_not_visible.equals(p2);
	int v11 = p0.getAccountVisibilityFromCache(p1, p2, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return 4;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public boolean isSystemUid(int p1){
	long v1 = Binder.clearCallingIdentity();
	String v2 = this.mPackageManager.getPackagesForUid(p1);
	PackageInfo v3 = this.mPackageManager.getPackageInfo(v2[phiInstruction], 0);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public int getAccountVisibilityFromCache(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = p0.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v2 = v1.get(p2);
	int v3 = v2.intValue();
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","2","14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
conditional branch(eq, to iindex=-1) 40,18,
conditional branch(eq, to iindex=-1) 43,18,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,37 @115 exception:44,
conditional branch(eq, to iindex=-1) 40,42,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @39 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPackageSignature(Ljava/lang/String;II)I > 1,43,14,45 @43 exception:46,
conditional branch(ne, to iindex=-1) 2,5,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
16 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>18 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 23,5,
26 = checkcast <Application,Landroid/content/pm/RegisteredServicesCache$ServiceInfo>25 <Application,Landroid/content/pm/RegisteredServicesCache$ServiceInfo>,
27 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, type, <Application,Ljava/lang/Object> > 26,
28 = checkcast <Application,Landroid/accounts/AuthenticatorDescription>27 <Application,Landroid/accounts/AuthenticatorDescription>,
29 = getfield < Application, Landroid/accounts/AuthenticatorDescription, type, <Application,Ljava/lang/String> > 28,
conditional branch(eq, to iindex=-1) 31,5,
36 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, uid, <Primordial,I> > 26,
conditional branch(ne, to iindex=-1) 36,3,
conditional branch(eq, to iindex=-1) 39,5,
return 40,
conditional branch(ne, to iindex=-1) 47,48,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,4 @55 exception:49,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
10 = checkcast <Application,Ljava/lang/Integer>9 <Application,Ljava/lang/Integer>,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 10 to iindex = 2),
14 = phi  13,11,
monitorexit 5,
return 14,
conditional branch(eq, to iindex=-1) 50,42,
return 103,
return 47,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = android:accounts:key_legacy_visible.equals(p2);
	boolean v10 = android:accounts:key_legacy_not_visible.equals(p2);
	Integer v11 = p0.resolveAccountVisibility(p1, p2, v8);
	int v12 = v11.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v12;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	int v7 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	int v8 = p0.checkPackageSignature(Account.type, v4, v7);
	int v9 = p0.getAccountVisibilityFromCache(p1, p2, p3);
	Integer v10 = Integer.valueOf(v9);
	return v10;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public int checkPackageSignature(String p1, int p2, int p3){
	long v1 = Binder.clearCallingIdentity();
	Collection v2 = this.mAuthenticatorCache.getAllServices(p3);
	Binder.restoreCallingIdentity(v1);
	Object v4 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v5 = v2.iterator();
	boolean v6 = v5.hasNext();
	Object v7 = v5.next();
	boolean v8 = p1.equals(AuthenticatorDescription.type);
	boolean v9 = v4.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, p2, 16);
	return 1;
}
-----
depth : 2
public int getAccountVisibilityFromCache(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = p0.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v2 = v1.get(p2);
	int v3 = v2.intValue();
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","2","14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
conditional branch(eq, to iindex=-1) 40,18,
conditional branch(eq, to iindex=-1) 43,18,
45 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, resolveAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/lang/Integer; > 1,2,3,37 @115 exception:44,
conditional branch(eq, to iindex=-1) 40,42,
43 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
45 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetuserId(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 4 @39 exception:44,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, userId, <Primordial,I> > 1,
return 2,
47 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkPackageSignature(Ljava/lang/String;II)I > 1,43,14,45 @43 exception:46,
conditional branch(ne, to iindex=-1) 2,5,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mAuthenticatorCache, <Application,Lcom/android/server/accounts/IAccountAuthenticatorCache> > 1,
16 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>, <Primordial,Ljava/lang/Class>,
19 = checkcast <Application,Landroid/content/pm/PackageManagerInternal>18 <Application,Landroid/content/pm/PackageManagerInternal>,
conditional branch(eq, to iindex=-1) 23,5,
26 = checkcast <Application,Landroid/content/pm/RegisteredServicesCache$ServiceInfo>25 <Application,Landroid/content/pm/RegisteredServicesCache$ServiceInfo>,
27 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, type, <Application,Ljava/lang/Object> > 26,
28 = checkcast <Application,Landroid/accounts/AuthenticatorDescription>27 <Application,Landroid/accounts/AuthenticatorDescription>,
29 = getfield < Application, Landroid/accounts/AuthenticatorDescription, type, <Application,Ljava/lang/String> > 28,
conditional branch(eq, to iindex=-1) 31,5,
36 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, uid, <Primordial,I> > 26,
conditional branch(ne, to iindex=-1) 36,3,
return 41,
conditional branch(ne, to iindex=-1) 47,48,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,4 @55 exception:49,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
10 = checkcast <Application,Ljava/lang/Integer>9 <Application,Ljava/lang/Integer>,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 10 to iindex = 2),
14 = phi  13,11,
monitorexit 5,
return 14,
conditional branch(eq, to iindex=-1) 50,42,
return 103,
return 47,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = android:accounts:key_legacy_visible.equals(p2);
	boolean v10 = android:accounts:key_legacy_not_visible.equals(p2);
	Integer v11 = p0.resolveAccountVisibility(p1, p2, v8);
	int v12 = v11.intValue();
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v12;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public Integer resolveAccountVisibility(Account p1, String p2, AccountManagerService$UserAccounts p3){
	int v7 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p3);
	int v8 = p0.checkPackageSignature(Account.type, v4, v7);
	int v9 = p0.getAccountVisibilityFromCache(p1, p2, p3);
	Integer v10 = Integer.valueOf(v9);
	return v10;
}
-----
depth : 2
public int -$$Nest$fgetuserId(AccountManagerService$UserAccounts p1){
	return this.userId;
}
-----
depth : 2
public int checkPackageSignature(String p1, int p2, int p3){
	long v1 = Binder.clearCallingIdentity();
	Collection v2 = this.mAuthenticatorCache.getAllServices(p3);
	Binder.restoreCallingIdentity(v1);
	Object v4 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v5 = v2.iterator();
	boolean v6 = v5.hasNext();
	Object v7 = v5.next();
	boolean v8 = p1.equals(AuthenticatorDescription.type);
	return 2;
}
-----
depth : 2
public int getAccountVisibilityFromCache(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = p0.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v2 = v1.get(p2);
	int v3 = v2.intValue();
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I","2","14 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 2,
16 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountManagedByCaller(Ljava/lang/String;II)Z > 1,14,11,13 @21 exception:15,
conditional branch(ne, to iindex=-1) 2,5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesManagedByCaller(II)Ljava/util/List; > 1,3,4 @4 exception:6,
return 6,
return 9,
conditional branch(ne, to iindex=-1) 16,18,
20 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isSystemUid(I)Z > 1,11 @28 exception:19,
conditional branch(eq, to iindex=-1) 20,18,
goto (from iindex= 16 to iindex = 28),
37 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,13 @66 exception:36,
conditional branch(eq, to iindex=-1) 40,18,
conditional branch(eq, to iindex=-1) 43,18,
50 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountVisibilityFromCache(Landroid/accounts/Account;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)I > 1,2,3,37 @100 exception:49,
5 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, cacheLock, <Application,Ljava/lang/Object> > 4,
monitorenter 5,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getPackagesAndVisibilityForAccountLocked(Landroid/accounts/Account;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 1,2,4 @3 exception:6,
8 = checkcast <Application,Ljava/util/Map>7 <Application,Ljava/util/Map>,
conditional branch(ne, to iindex=-1) 8,9,
14 = new <Application,Ljava/util/HashMap>@19,
21 = phi  8,14,
return 21,
10 = checkcast <Application,Ljava/lang/Integer>9 <Application,Ljava/lang/Integer>,
conditional branch(eq, to iindex=-1) 10,11,
goto (from iindex= 10 to iindex = 2),
14 = phi  13,11,
monitorexit 5,
return 14,
conditional branch(eq, to iindex=-1) 50,18,
return 50,","depth : 0
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""account cannot be null"");
	Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null"");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	boolean v6 = p0.isSystemUid(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
	boolean v9 = android:accounts:key_legacy_visible.equals(p2);
	boolean v10 = android:accounts:key_legacy_not_visible.equals(p2);
	int v11 = p0.getAccountVisibilityFromCache(p1, p2, v8);
	IAccountManager$Stub.restoreCallingIdentity(v7);
	return v11;
}
-----
depth : 1
public boolean isAccountManagedByCaller(String p1, int p2, int p3){
	List v1 = p0.getTypesManagedByCaller(p2, p3);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 2
public List getTypesManagedByCaller(int p1, int p2){
	List v1 = p0.getTypesForCaller(p1, p2, 0);
	return v1;
}
-----
depth : 1
public int getAccountVisibilityFromCache(Account p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = p0.getPackagesAndVisibilityForAccountLocked(p1, p3);
	Object v2 = v1.get(p2);
	int v3 = v2.intValue();
	return phiInstruction;
}
-----
depth : 2
public Map getPackagesAndVisibilityForAccountLocked(Account p1, AccountManagerService$UserAccounts p2){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v2 = v1.get(p1);
	int v3 = Log.d(""AccountManagerService"", ""Visibility was not initialized"");
	HashMap v3 = new HashMap();
	Map v5 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p2);
	Object v6 = v5.put(p1, v3);
	AccountManager.invalidateLocalAccountsDataCaches();
	return phiInstruction;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;)V","0","13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
return,","depth : 0
public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.unregisterAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;)V","1","13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetmReceiversForType(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 4 @0 exception:5,
monitorenter 6,
conditional branch(ne, to iindex=-1) 2,7,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = phi  2,8,
12 = arraylength 10,
40 = phi  39,7,
conditional branch(ge, to iindex=-1) 40,12,
monitorexit 6,
return,
return,","depth : 0
public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.unregisterAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void unregisterAccountListener(String p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p3);
	String v1 = new String(1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;)V","2","13 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,9 @17 exception:12,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;Lcom/android/server/accounts/AccountManagerService$UserAccounts;)V > 1,2,3,13 @21 exception:14,
6 = invokestatic < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, -$$Nest$fgetmReceiversForType(Lcom/android/server/accounts/AccountManagerService$UserAccounts;)Ljava/util/Map; > 4 @0 exception:5,
2 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$UserAccounts, mReceiversForType, <Application,Ljava/util/Map> > 1,
return 2,
monitorenter 6,
conditional branch(ne, to iindex=-1) 2,7,
8 = new <Application,[Ljava/lang/String>@89 ,
10 = phi  2,8,
12 = arraylength 10,
40 = phi  39,7,
conditional branch(ge, to iindex=-1) 40,12,
monitorexit 6,
return,
return,","depth : 0
public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);
	p0.unregisterAccountListener(p1, p2, v5);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void unregisterAccountListener(String p1, String p2, AccountManagerService$UserAccounts p3){
	Map v1 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p3);
	String v1 = new String(1);
	return;
}
-----
depth : 2
public Map -$$Nest$fgetmReceiversForType(AccountManagerService$UserAccounts p1){
	return this.mReceiversForType;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;","0","conditional branch(eq, to iindex=-1) 9,10,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,10,28,2,3,4,29 @22 exception:30,
return 31,","depth : 0
public Account getAccountsForPackage(String p1, int p2, String p3){
	int v3 = UserHandle.getCallingUserId();
	Account v4 = p0.getAccountsAsUserForPackage(0, v3, p1, p2, p3, 1);
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;","1","conditional branch(eq, to iindex=-1) 9,10,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,10,28,2,3,4,29 @22 exception:30,
conditional branch(ne, to iindex=-1) 77,17,
conditional branch(eq, to iindex=-1) 2,17,
conditional branch(eq, to iindex=-1) 79,17,
goto (from iindex= 64 to iindex = 3),
86 = phi  4,4,6,
87 = phi  5,5,9,
91 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,87,3,86 @141 exception:90,
conditional branch(ne, to iindex=-1) 93,17,
conditional branch(eq, to iindex=-1) 2,17,
conditional branch(ne, to iindex=-1) 95,17,
goto (from iindex= 76 to iindex = 39),
126 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 126,
return 31,","depth : 0
public Account getAccountsForPackage(String p1, int p2, String p3){
	int v3 = UserHandle.getCallingUserId();
	Account v4 = p0.getAccountsAsUserForPackage(0, v3, p1, p2, p3, 1);
	return v4;
}
-----
depth : 1
public Account getAccountsAsUserForPackage(String p1, int p2, String p3, int p4, String p5, boolean p6){
	boolean v19 = v17.contains(p1);
	List v20 = p0.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v21 = v20.isEmpty();
	boolean v22 = v20.contains(p1);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;","2","conditional branch(eq, to iindex=-1) 9,10,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getAccountsAsUserForPackage(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Z)[Landroid/accounts/Account; > 1,10,28,2,3,4,29 @22 exception:30,
conditional branch(ne, to iindex=-1) 77,17,
conditional branch(eq, to iindex=-1) 2,17,
conditional branch(eq, to iindex=-1) 79,17,
goto (from iindex= 64 to iindex = 3),
86 = phi  4,4,6,
87 = phi  5,5,9,
91 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getTypesVisibleToCaller(IILjava/lang/String;)Ljava/util/List; > 1,87,3,86 @141 exception:90,
return 7,
conditional branch(ne, to iindex=-1) 93,17,
conditional branch(eq, to iindex=-1) 2,17,
conditional branch(ne, to iindex=-1) 95,17,
goto (from iindex= 76 to iindex = 39),
126 = getstatic < Application, Lcom/android/server/accounts/AccountManagerService, EMPTY_ACCOUNT_ARRAY, <Application,[Landroid/accounts/Account> >,
return 126,
return 31,","depth : 0
public Account getAccountsForPackage(String p1, int p2, String p3){
	int v3 = UserHandle.getCallingUserId();
	Account v4 = p0.getAccountsAsUserForPackage(0, v3, p1, p2, p3, 1);
	return v4;
}
-----
depth : 1
public Account getAccountsAsUserForPackage(String p1, int p2, String p3, int p4, String p5, boolean p6){
	boolean v19 = v17.contains(p1);
	List v20 = p0.getTypesVisibleToCaller(phiInstruction, p2, phiInstruction);
	boolean v21 = v20.isEmpty();
	boolean v22 = v20.contains(p1);
	return this.EMPTY_ACCOUNT_ARRAY;
}
-----
depth : 2
public List getTypesVisibleToCaller(int p1, int p2, String p3){
	List v1 = p0.getTypesForCaller(p1, p2, 1);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","0","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","1","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","1","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,120,75 @153 exception:123,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
conditional branch(ne, to iindex=-1) 2,9,
conditional branch(ne, to iindex=-1) 2,10,
goto (from iindex= 19 to iindex = 2),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	p1.onError(100, ""User is not allowed to add an account!"");
	p0.showCantAddAccount(100, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = v1.createShowAdminSupportIntent(p2, 0);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 6,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 1;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V","2","conditional branch(eq, to iindex=-1) 14,15,
16 = new <Application,Ljava/lang/StringBuilder>@21,
goto (from iindex= 45 to iindex = 5),
conditional branch(eq, to iindex=-1) 2,15,
goto (from iindex= 51 to iindex = 2),
66 = phi  8,15,
conditional branch(eq, to iindex=-1) 3,15,
goto (from iindex= 56 to iindex = 2),
69 = phi  8,15,
77 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccounts(II)Z > 1,75,73 @140 exception:76,
5 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,3 @0 exception:4,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
goto (from iindex= 12 to iindex = 2),
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 5,7,
9 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserManager()Landroid/os/UserManager; > 1 @8 exception:8,
10 = new <Application,Landroid/os/UserHandle>@12,
conditional branch(eq, to iindex=-1) 16,7,
return 7,
conditional branch(ne, to iindex=-1) 77,15,
79 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, canUserModifyAccountsForType(ILjava/lang/String;I)Z > 1,75,3,73 @157 exception:78,
6 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isProfileOwner(I)Z > 1,4 @0 exception:5,
3 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>5 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(eq, to iindex=-1) 6,7,
conditional branch(ne, to iindex=-1) 9,7,
conditional branch(eq, to iindex=-1) 11,7,
19 = phi  18,7,
return 19,
conditional branch(eq, to iindex=-1) 6,8,
9 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
13 = checkcast <Application,Landroid/app/admin/DevicePolicyManager>12 <Application,Landroid/app/admin/DevicePolicyManager>,
conditional branch(ne, to iindex=-1) 15,8,
16 = arraylength 15,
22 = phi  21,8,
conditional branch(ge, to iindex=-1) 22,16,
17 = arrayload 15[22],
conditional branch(eq, to iindex=-1) 19,8,
return 8,
conditional branch(ne, to iindex=-1) 79,15,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, showCantAddAccount(II)V > 1,116,75 @170 exception:119,
4 = load_metadata: <Application,Landroid/app/admin/DevicePolicyManagerInternal>, <Primordial,Ljava/lang/Class>,
6 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 4 @2 exception:5,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
7 = checkcast <Application,Landroid/app/admin/DevicePolicyManagerInternal>6 <Application,Landroid/app/admin/DevicePolicyManagerInternal>,
conditional branch(ne, to iindex=-1) 7,8,
17 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @10 exception:16,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
goto (from iindex= 7 to iindex = 24),
18 = phi  17,15,12,8,
conditional branch(ne, to iindex=-1) 18,8,
23 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getDefaultCantAddAccountIntent(I)Landroid/content/Intent; > 1,2 @40 exception:22,
3 = new <Application,Landroid/content/Intent>@0,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
5 = load_metadata: <Application,Landroid/accounts/CantAddAccountActivity>, <Primordial,Ljava/lang/Class>,
return 3,
24 = phi  18,23,
29 = getfield < Application, Lcom/android/server/accounts/AccountManagerService, mContext, <Application,Landroid/content/Context> > 1,
30 = new <Application,Landroid/os/UserHandle>@50,
return,
return,","depth : 0
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""startAddAccountSession: accountType "");
	StringBuilder v5 = v2.append(p2);
	StringBuilder v6 = v2.append("", response "");
	StringBuilder v7 = v2.append(p1);
	StringBuilder v8 = v2.append("", authTokenType "");
	StringBuilder v9 = v2.append(p3);
	StringBuilder v10 = v2.append("", requiredFeatures "");
	String v11 = Arrays.toString(p4);
	StringBuilder v12 = v2.append(v11);
	StringBuilder v13 = v2.append("", expectActivityLaunch "");
	StringBuilder v14 = v2.append(p5);
	StringBuilder v15 = v2.append("", caller's uid "");
	int v16 = Binder.getCallingUid();
	StringBuilder v17 = v2.append(v16);
	StringBuilder v18 = v2.append("", pid "");
	int v19 = Binder.getCallingPid();
	StringBuilder v20 = v2.append(v19);
	String v21 = v2.toString();
	int v22 = Log.v(""AccountManagerService"", v21);
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""accountType cannot be null"");
	int v25 = Binder.getCallingUid();
	int v26 = UserHandle.getUserId(v25);
	boolean v27 = p0.canUserModifyAccounts(v26, v25);
	boolean v28 = p0.canUserModifyAccountsForType(v26, p2, v25);
	p1.onError(101, ""User cannot modify accounts of this type (policy)."");
	p0.showCantAddAccount(101, v26);
	return;
}
-----
depth : 1
public boolean canUserModifyAccounts(int p1, int p2){
	boolean v1 = p0.isProfileOwner(p2);
	UserManager v2 = p0.getUserManager();
	UserHandle v2 = new UserHandle(p1);
	Bundle v4 = v2.getUserRestrictions(v2);
	boolean v5 = v4.getBoolean(""no_modify_accounts"");
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean canUserModifyAccountsForType(int p1, String p2, int p3){
	boolean v1 = p0.isProfileOwner(p3);
	Object v2 = this.mContext.getSystemService(""device_policy"");
	String v3 = v2.getAccountTypesWithManagementDisabledAsUser(p1);
	boolean v4 = [resolveCodeAbst] + 17 = arrayload 15[22].equals(p2);
	return 0;
}
-----
depth : 2
public boolean isProfileOwner(int p1){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	boolean v2 = v1.isActiveProfileOwner(p1);
	boolean v3 = v1.isActiveDeviceOwner(p1);
	return phiInstruction;
}
-----
depth : 1
public void showCantAddAccount(int p1, int p2){
	Object v1 = LocalServices.getService(DevicePolicyManagerInterna.class);
	Intent v2 = p0.getDefaultCantAddAccountIntent(p1);
	Intent v3 = p0.getDefaultCantAddAccountIntent(p1);
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	UserHandle v4 = new UserHandle(p2);
	this.mContext.startActivityAsUser(phiInstruction, v4);
	IAccountManager$Stub.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
depth : 2
public Intent getDefaultCantAddAccountIntent(int p1){
	Intent v0 = new Intent(this.mContext,CantAddAccountActivit.class);
	Intent v2 = v0.putExtra(""android.accounts.extra.ERROR_CODE"", p1);
	Intent v3 = v0.addFlags(268435456);
	return v0;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","0","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
conditional branch(eq, to iindex=-1) 4,14,
goto (from iindex= 48 to iindex = 2),
60 = phi  53,14,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
conditional branch(eq, to iindex=-1) 4,14,
goto (from iindex= 48 to iindex = 2),
60 = phi  53,14,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
return,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","1","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
conditional branch(eq, to iindex=-1) 4,14,
60 = phi  53,14,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(eq, to iindex=-1) 7,8,
return,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
4 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccountsNotChecked(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,2 @0 exception:3,
return 4,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
return,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 1
public AccountManagerService$UserAccounts getUserAccounts(int p1){
	AccountManagerService$UserAccounts v1 = p0.getUserAccountsNotChecked(p1);
	return v1;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
conditional branch(eq, to iindex=-1) 4,14,
goto (from iindex= 48 to iindex = 2),
60 = phi  53,14,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(ne, to iindex=-1) 2,6,
return 10,
conditional branch(eq, to iindex=-1) 7,8,
return,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 2
public boolean isAccountVisibleToCaller(String p1, int p2, int p3, String p4){
	List v1 = p0.getTypesVisibleToCaller(p2, p3, p4);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
conditional branch(eq, to iindex=-1) 2,14,
goto (from iindex= 43 to iindex = 2),
57 = phi  53,14,
conditional branch(eq, to iindex=-1) 4,14,
60 = phi  53,14,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(ne, to iindex=-1) 2,6,
return 10,
conditional branch(eq, to iindex=-1) 7,8,
return,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 2
public boolean isAccountVisibleToCaller(String p1, int p2, int p3, String p4){
	List v1 = p0.getTypesVisibleToCaller(p2, p3, p4);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/accounts/AccountManagerService","hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V","2","conditional branch(eq, to iindex=-1) 13,14,
15 = new <Application,Ljava/lang/StringBuilder>@18,
conditional branch(eq, to iindex=-1) 3,14,
goto (from iindex= 37 to iindex = 2),
54 = phi  53,14,
conditional branch(eq, to iindex=-1) 2,14,
57 = phi  53,14,
conditional branch(eq, to iindex=-1) 4,14,
goto (from iindex= 48 to iindex = 2),
60 = phi  53,14,
65 = getfield < Application, Landroid/accounts/Account, type, <Application,Ljava/lang/String> > 3,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, checkReadAccountsPermitted(ILjava/lang/String;ILjava/lang/String;)V > 1,7,65,64,5 @116 exception:66,
7 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, isAccountVisibleToCaller(Ljava/lang/String;IILjava/lang/String;)Z > 1,3,2,4,5 @0 exception:6,
conditional branch(ne, to iindex=-1) 2,6,
return 10,
conditional branch(eq, to iindex=-1) 7,8,
return,
70 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService, getUserAccounts(I)Lcom/android/server/accounts/AccountManagerService$UserAccounts; > 1,64 @123 exception:69,
71 = new <Application,Lcom/android/server/accounts/AccountManagerService$TestFeaturesSession>@127,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bind()V > 71 @137 exception:73,
conditional branch(eq, to iindex=-1) 5,6,
7 = new <Application,Ljava/lang/StringBuilder>@9,
12 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
22 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccountType, <Application,Ljava/lang/String> > 1,
24 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, bindToAuthenticator(Ljava/lang/String;)Z > 1,22 @33 exception:23,
3 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
8 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 12,13,
16 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, this$0, <Application,Lcom/android/server/accounts/AccountManagerService> > 1,
17 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mAccounts, <Application,Lcom/android/server/accounts/AccountManagerService$UserAccounts> > 1,
conditional branch(ne, to iindex=-1) 21,13,
22 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentInfo, <Application,Landroid/content/pm/ComponentInfo> > 12,
23 = getfield < Application, Landroid/content/pm/ComponentInfo, directBootAware, <Primordial,Z> > 22,
conditional branch(ne, to iindex=-1) 23,13,
91 = new <Application,Ljava/lang/StringBuilder>@79,
96 = getfield < Application, Landroid/content/pm/RegisteredServicesCache$ServiceInfo, componentName, <Application,Landroid/content/ComponentName> > 12,
return 13,
conditional branch(ne, to iindex=-1) 24,6,
25 = new <Application,Ljava/lang/StringBuilder>@39,
31 = invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, toDebugString()Ljava/lang/String; > 1 @49 exception:30,
return 5,
invokevirtual < Application, Lcom/android/server/accounts/AccountManagerService$Session, onError(ILjava/lang/String;)V > 1,38,39 @66 exception:40,
4 = getfield < Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > 1,
6 = binaryop(add) 4 , 5,
putfield 1.< Application, Lcom/android/server/accounts/AccountManagerService$Session, mNumErrors, <Primordial,I> > = 6,
conditional branch(eq, to iindex=-1) 8,11,
conditional branch(eq, to iindex=-1) 18,11,
19 = new <Application,Ljava/lang/StringBuilder>@21,
41 = getCaughtException ,
conditional branch(eq, to iindex=-1) 43,11,
goto (from iindex= 32 to iindex = 12),
return,
return,
return,","depth : 0
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""hasFeatures: "");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", response "");
	StringBuilder v8 = v3.append(p1);
	StringBuilder v9 = v3.append("", features "");
	String v10 = Arrays.toString(p3);
	StringBuilder v11 = v3.append(v10);
	StringBuilder v12 = v3.append("", caller's uid "");
	StringBuilder v13 = v3.append(v1);
	StringBuilder v14 = v3.append("", pid "");
	int v15 = Binder.getCallingPid();
	StringBuilder v16 = v3.append(v15);
	String v17 = v3.toString();
	int v18 = Log.v(""AccountManagerService"", v17);
	Preconditions.checkArgument(phiInstruction, ""account cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""response cannot be null"");
	Preconditions.checkArgument(phiInstruction, ""features cannot be null"");
	int v22 = UserHandle.getCallingUserId();
	p0.checkReadAccountsPermitted(v1, Account.type, v22, p4);
	long v24 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v22);
	AccountManagerService$TestFeaturesSession v25 = new AccountManagerService$TestFeaturesSession(p0,v25,p1,p2,p3);
	v25.bind();
	IAccountManager$Stub.restoreCallingIdentity(v24);
	return;
}
-----
depth : 1
public void checkReadAccountsPermitted(int p1, String p2, int p3, String p4){
	boolean v1 = p0.isAccountVisibleToCaller(p2, p1, p3, p4);
	return;
}
-----
depth : 2
public boolean isAccountVisibleToCaller(String p1, int p2, int p3, String p4){
	List v1 = p0.getTypesVisibleToCaller(p2, p3, p4);
	boolean v2 = v1.contains(p1);
	return v2;
}
-----
depth : 1
public void bind(){
	boolean v1 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append(""initiating bind to authenticator type "");
	StringBuilder v4 = v1.append(this.mAccountType);
	String v5 = v1.toString();
	int v6 = Log.v(""AccountManagerService"", v5);
	boolean v7 = p0.bindToAuthenticator(this.mAccountType);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append(""bind attempt failed for "");
	String v10 = p0.toDebugString();
	StringBuilder v11 = v7.append(v10);
	String v12 = v7.toString();
	int v13 = Log.d(""AccountManagerService"", v12);
	p0.onError(1, ""bind failure"");
	return;
}
-----
depth : 2
public boolean bindToAuthenticator(String p1){
	IAccountAuthenticatorCache v1 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
	AuthenticatorDescription v2 = AuthenticatorDescription.newKey(p1);
	int v3 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	RegisteredServicesCache$ServiceInfo v4 = v1.getServiceInfo(v2, v3);
	int v5 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
	boolean v6 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Blocking binding to authenticator "");
	StringBuilder v9 = v6.append(RegisteredServicesCache$ServiceInfo.componentName);
	StringBuilder v10 = v6.append("" which isn't encryption aware"");
	String v11 = v6.toString();
	int v12 = Slog.w(""AccountManagerService"", v11);
	return 0;
}
-----
depth : 2
public String toDebugString(){
	long v1 = SystemClock.elapsedRealtime();
	String v2 = p0.toDebugString(v1);
	return v2;
}
-----
depth : 2
public void onError(int p1, String p2){
	this.mNumErrors = (this.mNumErrors + 1);
	IAccountManagerResponse v1 = p0.getResponseAndClose();
	boolean v2 = Log.isLoggable(""AccountManagerService"", 2);
	StringBuilder v2 = new StringBuilder();
	Class v4 = p0.getClass();
	String v5 = v4.getSimpleName();
	StringBuilder v6 = v2.append(v5);
	StringBuilder v7 = v2.append("" calling onError() on response "");
	StringBuilder v8 = v2.append(v1);
	String v9 = v2.toString();
	int v10 = Log.v(""AccountManagerService"", v9);
	v1.onError(p1, p2);
	boolean v12 = Log.isLoggable(""AccountManagerService"", 2);
	int v13 = Log.v(""AccountManagerService"", ""Session.onError: caught RemoteException while responding"", caughtException);
	return;
}
-----
","SYS_OR_SIG"

