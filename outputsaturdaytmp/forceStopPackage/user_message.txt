// Method: forceStopPackage
// Service: ActivityManagerService_3

public void forceStopPackage() {
    int var37 = Binder.getCallingPid();
    UserController var38 = this.mUserController;
    int var40 = Binder.getCallingUid();
    int var45 = var38.handleIncomingUser(var37,var40,param3,1,2,forceStopPackage,0);
    long var47 = Binder.clearCallingIdentity();
    IPackageManager var49 = AppGlobals.getPackageManager();
    ActivityManagerService.boostPriorityForLockedSection();
    UserController var53 = this.mUserController;
    [I var55 = var53.getUsers();
    59 = arraylength 56;
    60 = arrayload 56[130];
    PackageManagerInternal var62 = getPackageManagerInternalLocked();
    boolean var64 = var62.isPackageStateProtected(param2,var60);
    ActivityManagerService.resetPriorityAfterLockedSection();
    ThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.reset();
    ThreadLocal var2 = this.mThreadState;
    Object var4 = var2.get();
    ThreadPriorityBooster$PriorityState var5 = (ThreadPriorityBooster$PriorityState) var4;
    int var6 = var5.regionCounter;
    var8 = var6 add -1;
    var5.regionCounter = var8;
    int var9 = var5.regionCounter;
    int var11 = var5.prevPriority;
    int var13 = var5.tid;
    int var14 = var5.prevPriority;
    Process.setThreadPriority(var13,var14);
    var5.prevPriority = 2147483647;<PATH_SEP>int var37 = Binder.getCallingPid();
    UserController var38 = this.mUserController;
    int var40 = Binder.getCallingUid();
    int var45 = var38.handleIncomingUser(var37,var40,param3,1,2,forceStopPackage,0);
    long var47 = Binder.clearCallingIdentity();
    IPackageManager var49 = AppGlobals.getPackageManager();
    ActivityManagerService.boostPriorityForLockedSection();
    UserController var53 = this.mUserController;
    [I var55 = var53.getUsers();
    59 = arraylength 56;
    60 = arrayload 56[130];
    PackageManagerInternal var62 = getPackageManagerInternalLocked();
    boolean var64 = var62.isPackageStateProtected(param2,var60);
    int var67 = var49.getPackageUid(param2,268435456,var60);
    var49.setPackageStoppedState(param2,1,var60);
    UserController var97 = this.mUserController;
    forceStopPackageLocked(param2,var70,var119);
    int var6 = UserHandle.getAppId(param3);
    int var8 = UserHandle.getUserId(param3);
    boolean var12 = forceStopPackageLocked(param2,var6,0,0,1,0,0,var8,param4);
    IPackageManager var19 = AppGlobals.getPackageManager();
    int var22 = var19.getPackageUid(param2,268435456,0);
    int var28 = UserHandle.getAppId(var22);
    AppErrors var79 = this.mAppErrors;
    var79.resetProcessCrashTimeLocked(var80,var29,param9);
    ProcessList var86 = this.mProcessList;
    boolean var107 = var86.killPackageProcessesLocked(param2,var29,param9,-10000,param4,1,param6,param7,1,var105);
    ArrayList var12 = new ArrayList();
    ProcessList$MyProcessMap var14 = this.mProcessNames;
    ArrayMap var16 = var14.getMap();
    int var18 = var16.size();
    ProcessList$MyProcessMap var22 = this.mProcessNames;
    ArrayMap var24 = var22.getMap();
    Object var26 = var24.valueAt(var81);
    SparseArray var27 = (SparseArray) var26;
    int var29 = var27.size();
    Object var31 = var27.valueAt(var75);
    ProcessRecord var32 = (ProcessRecord) var31;
    boolean var34 = var32.isPersistent();
    boolean var35 = var32.removed;
    int var38 = var32.setAdj;
    int var39 = var32.userId;
    int var41 = var32.uid;
    int var43 = UserHandle.getAppId(var41);
    var32.removed = 1;
    boolean var68 = var12.add(var32);<PATH_SEP>int var37 = Binder.getCallingPid();
    UserController var38 = this.mUserController;
    int var40 = Binder.getCallingUid();
    int var45 = var38.handleIncomingUser(var37,var40,param3,1,2,forceStopPackage,0);
    long var47 = Binder.clearCallingIdentity();
    IPackageManager var49 = AppGlobals.getPackageManager();
    ActivityManagerService.boostPriorityForLockedSection();
    UserController var53 = this.mUserController;
    [I var55 = var53.getUsers();
    59 = arraylength 56;
    60 = arrayload 56[130];
    PackageManagerInternal var62 = getPackageManagerInternalLocked();
    boolean var64 = var62.isPackageStateProtected(param2,var60);
    int var67 = var49.getPackageUid(param2,268435456,var60);
    var49.setPackageStoppedState(param2,1,var60);
    UserController var97 = this.mUserController;
    forceStopPackageLocked(param2,var70,var119);
    int var6 = UserHandle.getAppId(param3);
    int var8 = UserHandle.getUserId(param3);
    boolean var12 = forceStopPackageLocked(param2,var6,0,0,1,0,0,var8,param4);
    IPackageManager var19 = AppGlobals.getPackageManager();
    int var22 = var19.getPackageUid(param2,268435456,0);
    int var28 = UserHandle.getAppId(var22);
    AppErrors var79 = this.mAppErrors;
    var79.resetProcessCrashTimeLocked(var80,var29,param9);
    ProcessList var86 = this.mProcessList;
    boolean var107 = var86.killPackageProcessesLocked(param2,var29,param9,-10000,param4,1,param6,param7,1,var105);
    ArrayList var12 = new ArrayList();
    ProcessList$MyProcessMap var14 = this.mProcessNames;
    ArrayMap var16 = var14.getMap();
    int var18 = var16.size();
    ProcessList$MyProcessMap var22 = this.mProcessNames;
    ArrayMap var24 = var22.getMap();
    Object var26 = var24.valueAt(var81);
    SparseArray var27 = (SparseArray) var26;
    int var29 = var27.size();
    Object var31 = var27.valueAt(var75);
    ProcessRecord var32 = (ProcessRecord) var31;
    boolean var34 = var32.isPersistent();
    boolean var35 = var32.removed;
    int var38 = var32.setAdj;
    int var39 = var32.userId;
    int var41 = var32.uid;
    int var43 = UserHandle.getAppId(var41);
    boolean var68 = var12.add(var32);<PATH_SEP>int var37 = Binder.getCallingPid();
    UserController var38 = this.mUserController;
    int var40 = Binder.getCallingUid();
    int var45 = var38.handleIncomingUser(var37,var40,param3,1,2,forceStopPackage,0);
    long var47 = Binder.clearCallingIdentity();
    IPackageManager var49 = AppGlobals.getPackageManager();
    ActivityManagerService.boostPriorityForLockedSection();
    UserController var53 = this.mUserController;
    [I var55 = var53.getUsers();
    59 = arraylength 56;
    60 = arrayload 56[130];
    PackageManagerInternal var62 = getPackageManagerInternalLocked();
    boolean var64 = var62.isPackageStateProtected(param2,var60);
    int var67 = var49.getPackageUid(param2,268435456,var60);
    var49.setPackageStoppedState(param2,1,var60);
    UserController var97 = this.mUserController;
    forceStopPackageLocked(param2,var70,var119);
    int var6 = UserHandle.getAppId(param3);
    int var8 = UserHandle.getUserId(param3);
    boolean var12 = forceStopPackageLocked(param2,var6,0,0,1,0,0,var8,param4);
    IPackageManager var19 = AppGlobals.getPackageManager();
    int var22 = var19.getPackageUid(param2,268435456,0);
    int var28 = UserHandle.getAppId(var22);
    AppErrors var79 = this.mAppErrors;
    var79.resetProcessCrashTimeLocked(var80,var29,param9);
    ProcessList var86 = this.mProcessList;
    boolean var107 = var86.killPackageProcessesLocked(param2,var29,param9,-10000,param4,1,param6,param7,1,var105);
    ArrayList var12 = new ArrayList();
    ProcessList$MyProcessMap var14 = this.mProcessNames;
    ArrayMap var16 = var14.getMap();
    int var18 = var16.size();
    ProcessList$MyProcessMap var22 = this.mProcessNames;
    ArrayMap var24 = var22.getMap();
    Object var26 = var24.valueAt(var81);
    SparseArray var27 = (SparseArray) var26;
    int var29 = var27.size();
    Object var31 = var27.valueAt(var75);
    ProcessRecord var32 = (ProcessRecord) var31;
    boolean var34 = var32.isPersistent();
    boolean var35 = var32.removed;
    int var38 = var32.setAdj;
    ArraySet var44 = var32.pkgDeps;
    ArraySet var45 = var32.pkgDeps;
    boolean var47 = var45.contains(param2);
    int var54 = var32.uid;
    int var56 = UserHandle.getAppId(var54);
    ProcessRecord$PackageList var61 = var32.pkgList;
    boolean var63 = var61.containsKey(param2);
    boolean var68 = var12.add(var32);
}